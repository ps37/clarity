{
  "pipes": [],
  "interfaces": [
    {
      "name": "AlertInfoObject",
      "id": "interface-AlertInfoObject-c579436f4aa49ceab21dc6fd334444ce",
      "file": "src/clr-angular/emphasis/alert/utils/alert-info-object.ts",
      "type": "interface",
      "sourceCode": "export interface AlertInfoObject {\n  shape: string;\n  cssClass: string;\n  title: string;\n}\n",
      "properties": [
        {
          "name": "cssClass",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "shape",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "title",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ClrDatagridComparatorInterface",
      "id": "interface-ClrDatagridComparatorInterface-b5219c304050bcc3b9f939fb55c9606c",
      "file": "src/clr-angular/data/datagrid/interfaces/comparator.interface.ts",
      "type": "interface",
      "sourceCode": "export interface ClrDatagridComparatorInterface<T> {\n  compare(a: T, b: T): number;\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 152,
      "methods": [
        {
          "name": "compare",
          "args": [
            {
              "name": "a",
              "type": "T"
            },
            {
              "name": "b",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 7,
          "jsdoctags": [
            {
              "name": "a",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "b",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ClrDatagridFilterInterface",
      "id": "interface-ClrDatagridFilterInterface-0fcecba93dcec98c39aa3af97cbd277c",
      "file": "src/clr-angular/data/datagrid/interfaces/filter.interface.ts",
      "type": "interface",
      "sourceCode":
        "import { Observable } from 'rxjs';\n\nexport interface ClrDatagridFilterInterface<T, S = any> {\n  isActive(): boolean;\n\n  accepts(item: T): boolean;\n\n  changes: Observable<any>;\n\n  readonly state?: S;\n\n  equals?(other: ClrDatagridFilterInterface<T, any>): boolean;\n}\n",
      "properties": [
        {
          "name": "changes",
          "type": "Observable<any>",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "state",
          "type": "S",
          "optional": true,
          "description": "",
          "line": 15,
          "modifierKind": [132]
        }
      ],
      "indexSignatures": [],
      "kind": 152,
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 11,
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "equals",
          "args": [
            {
              "name": "other",
              "type": "ClrDatagridFilterInterface<T | any>"
            }
          ],
          "optional": true,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 17,
          "jsdoctags": [
            {
              "name": "other",
              "type": "ClrDatagridFilterInterface<T | any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isActive",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 9
        }
      ]
    },
    {
      "name": "ClrDatagridNumericFilterInterface",
      "id": "interface-ClrDatagridNumericFilterInterface-507c666d27b47c206df533df75886ad8",
      "file": "src/clr-angular/data/datagrid/interfaces/numeric-filter.interface.ts",
      "type": "interface",
      "sourceCode":
        "export interface ClrDatagridNumericFilterInterface<T> {\n  accepts(item: T, low: number, high: number): boolean;\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 152,
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            },
            {
              "name": "low",
              "type": "number"
            },
            {
              "name": "high",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 7,
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "low",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "high",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ClrDatagridStateInterface",
      "id": "interface-ClrDatagridStateInterface-0f5f6007cb5e9e00693d835e66027874",
      "file": "src/clr-angular/data/datagrid/interfaces/state.interface.ts",
      "type": "interface",
      "sourceCode":
        "import { ClrDatagridComparatorInterface } from './comparator.interface';\n\nexport interface ClrDatagridStateInterface<T = any> {\n  page?: { from?: number; to?: number; size?: number; current?: number };\n  sort?: { by: string | ClrDatagridComparatorInterface<T>; reverse: boolean };\n  filters?: any[];\n}\n",
      "properties": [
        {
          "name": "filters",
          "type": "any[]",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "page",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "sort",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ClrDatagridStringFilterInterface",
      "id": "interface-ClrDatagridStringFilterInterface-8c2a13dcf2a91613900d2511ce1aa0e8",
      "file": "src/clr-angular/data/datagrid/interfaces/string-filter.interface.ts",
      "type": "interface",
      "sourceCode":
        "export interface ClrDatagridStringFilterInterface<T> {\n  accepts(item: T, search: string): boolean;\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 152,
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            },
            {
              "name": "search",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 7,
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "search",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ClrDayOfWeek",
      "id": "interface-ClrDayOfWeek-5c2e326f082893454542049ed8d8c8ab",
      "file": "src/clr-angular/forms/datepicker/interfaces/day-of-week.interface.ts",
      "type": "interface",
      "sourceCode": "export interface ClrDayOfWeek {\n  readonly day: string;\n  readonly narrow: string;\n}\n",
      "properties": [
        {
          "name": "day",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [132]
        },
        {
          "name": "narrow",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [132]
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ClrDropToleranceInterface",
      "id": "interface-ClrDropToleranceInterface-efae26a74fe71f12b77e5cda5226ded0",
      "file": "src/clr-angular/utils/drag-and-drop/interfaces/drop-tolerance.interface.ts",
      "type": "interface",
      "sourceCode":
        "export interface ClrDropToleranceInterface {\n  top?: number;\n  right?: number;\n  bottom?: number;\n  left?: number;\n}\n",
      "properties": [
        {
          "name": "bottom",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "left",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "right",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "top",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ClrPopoverContentOffset",
      "id": "interface-ClrPopoverContentOffset-376d060f02ff3618d606a3e464bc103f",
      "file": "src/clr-angular/utils/popover/interfaces/popover-content-offset.interface.ts",
      "type": "interface",
      "sourceCode": "export interface ClrPopoverContentOffset {\n  xOffset;\n  yOffset;\n}\n",
      "properties": [
        {
          "name": "xOffset",
          "type": "",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "yOffset",
          "type": "",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ClrPopoverPosition",
      "id": "interface-ClrPopoverPosition-122ed14bd8190946b527fd824249e8ad",
      "file": "src/clr-angular/utils/popover/interfaces/popover-position.interface.ts",
      "type": "interface",
      "sourceCode":
        "import { ClrAlignment } from '../enums/alignment.enum';\nimport { ClrSide } from '../enums/side.enum';\nimport { ClrAxis } from '../enums/axis.enum';\n\n/**\n * ClrPopoverPosition\n *\n * @description\n * A ClrPopover needs a way to describe the relationship between the anchor and the content (for when its\n * visible). The ClrPopoverPosition interface is that description.\n */\n\nexport interface ClrPopoverPosition {\n  axis: ClrAxis; // The axis on which content and anchor push against each other\n  side: ClrSide; // The side where content appears (top/bottom or left/right depending on the axis)\n  anchor: ClrAlignment; // The position that the content element should align to\n  content: ClrAlignment; // The position that the anchor element should align to\n}\n",
      "properties": [
        {
          "name": "anchor",
          "type": "ClrAlignment",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "axis",
          "type": "ClrAxis",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "content",
          "type": "ClrAlignment",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "side",
          "type": "ClrSide",
          "optional": false,
          "description": "",
          "line": 22
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>ClrPopoverPosition</p>\n",
      "methods": []
    },
    {
      "name": "ClrRecursiveForOfContext",
      "id": "interface-ClrRecursiveForOfContext-b795d7e0e01b982c61ed8a58012cd83a",
      "file": "src/clr-angular/data/tree-view/recursive-for-of.ts",
      "type": "interface",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Input, OnChanges, OnDestroy, TemplateRef } from '@angular/core';\nimport { TreeFeaturesService } from './tree-features.service';\nimport { RecursiveTreeNodeModel } from './models/recursive-tree-node.model';\nimport { TreeNodeModel } from './models/tree-node.model';\nimport { AsyncArray } from './models/async-array';\nimport { Subscription } from 'rxjs';\n\nexport interface ClrRecursiveForOfContext<T> {\n  $implicit: T;\n  clrModel: TreeNodeModel<T>;\n}\n\n@Directive({ selector: '[clrRecursiveFor][clrRecursiveForOf]' })\nexport class ClrRecursiveForOf<T> implements OnChanges, OnDestroy {\n  constructor(\n    private template: TemplateRef<ClrRecursiveForOfContext<T>>,\n    private featuresService: TreeFeaturesService<T>,\n    private cdr: ChangeDetectorRef\n  ) {}\n\n  // TODO: accept NgIterable<T>\n  @Input('clrRecursiveForOf') nodes: T | T[];\n\n  // TODO: accept NgIterable<T> return type\n  @Input('clrRecursiveForGetChildren') getChildren: (node: T) => AsyncArray<T>;\n\n  private childrenFetchSubscription: Subscription;\n\n  // I'm using OnChanges instead of OnInit to easily keep up to date with dynamic trees. Maybe optimizable later.\n  ngOnChanges() {\n    let wrapped: RecursiveTreeNodeModel<T>[];\n    if (Array.isArray(this.nodes)) {\n      wrapped = this.nodes.map(node => new RecursiveTreeNodeModel(node, null, this.getChildren, this.featuresService));\n    } else {\n      wrapped = [new RecursiveTreeNodeModel(this.nodes, null, this.getChildren, this.featuresService)];\n    }\n    if (!this.childrenFetchSubscription) {\n      this.childrenFetchSubscription = this.featuresService.childrenFetched.subscribe(() => {\n        this.cdr.detectChanges();\n      });\n    }\n\n    this.featuresService.recursion = {\n      template: this.template,\n      root: wrapped,\n    };\n  }\n\n  ngOnDestroy() {\n    if (this.childrenFetchSubscription) {\n      this.childrenFetchSubscription.unsubscribe();\n    }\n  }\n}\n",
      "properties": [
        {
          "name": "$implicit",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "clrModel",
          "type": "TreeNodeModel<T>",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ClrVisibilityCoords",
      "id": "interface-ClrVisibilityCoords-d1737389d204cbdbb604865836bcf088",
      "file": "src/clr-angular/utils/popover/interfaces/visibility-coords.interface.ts",
      "type": "interface",
      "sourceCode":
        "export interface ClrVisibilityCoords {\n  bottom: number;\n  left: number;\n  top: number;\n  right: number;\n}\n",
      "properties": [
        {
          "name": "bottom",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "left",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "right",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "top",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ColumnState",
      "id": "interface-ColumnState-19f50315d8b87f1e7bbf3ed617ffc062",
      "file": "src/clr-angular/data/datagrid/interfaces/column-state.interface.ts",
      "type": "interface",
      "sourceCode":
        "import { TemplateRef } from '@angular/core';\nimport { DatagridColumnChanges } from '../enums/column-changes.enum';\n\nexport interface ColumnState {\n  changes?: DatagridColumnChanges[]; // This is an array of change types to update\n  width?: number; // This is the width calculated for the column\n  strictWidth?: number; // This is the strict width if defined in styles/css\n  hideable?: boolean; // This tells whether column can be hidden or not\n  hidden?: boolean; // This is the state of column visibility\n  titleTemplateRef?: TemplateRef<any>; // This is the template of the column content that will be used in the column toggle.\n}\n\nexport interface ColumnStateDiff extends ColumnState {\n  changes: DatagridColumnChanges[];\n}\n",
      "properties": [
        {
          "name": "changes",
          "type": "DatagridColumnChanges[]",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "hidden",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 14
        },
        {
          "name": "hideable",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 13
        },
        {
          "name": "strictWidth",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "titleTemplateRef",
          "type": "TemplateRef<any>",
          "optional": true,
          "description": "",
          "line": 15
        },
        {
          "name": "width",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 11
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "ColumnStateDiff",
      "id": "interface-ColumnStateDiff-19f50315d8b87f1e7bbf3ed617ffc062",
      "file": "src/clr-angular/data/datagrid/interfaces/column-state.interface.ts",
      "type": "interface",
      "sourceCode":
        "import { TemplateRef } from '@angular/core';\nimport { DatagridColumnChanges } from '../enums/column-changes.enum';\n\nexport interface ColumnState {\n  changes?: DatagridColumnChanges[]; // This is an array of change types to update\n  width?: number; // This is the width calculated for the column\n  strictWidth?: number; // This is the strict width if defined in styles/css\n  hideable?: boolean; // This tells whether column can be hidden or not\n  hidden?: boolean; // This is the state of column visibility\n  titleTemplateRef?: TemplateRef<any>; // This is the template of the column content that will be used in the column toggle.\n}\n\nexport interface ColumnStateDiff extends ColumnState {\n  changes: DatagridColumnChanges[];\n}\n",
      "properties": [
        {
          "name": "changes",
          "type": "DatagridColumnChanges[]",
          "optional": false,
          "description": "",
          "line": 19
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": [],
      "extends": "ColumnState"
    },
    {
      "name": "DateRange",
      "id": "interface-DateRange-f996d8dafe106e9613b7d6fc5d22fd5d",
      "file": "src/clr-angular/forms/datepicker/interfaces/date-range.interface.ts",
      "type": "interface",
      "sourceCode":
        "import { DayModel } from '../model/day.model';\n\nexport interface DateRange {\n  minDate?: DayModel;\n  maxDate?: DayModel;\n}\n",
      "properties": [
        {
          "name": "maxDate",
          "type": "DayModel",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "minDate",
          "type": "DayModel",
          "optional": true,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "DragEventInterface",
      "id": "interface-DragEventInterface-c499e4aa8ec82f14107a9331f632efea",
      "file": "src/clr-angular/utils/drag-and-drop/interfaces/drag-event.interface.ts",
      "type": "interface",
      "sourceCode":
        "export enum DragEventType {\n  DRAG_START,\n  DRAG_MOVE,\n  DRAG_END,\n  DRAG_ENTER,\n  DRAG_LEAVE,\n  DROP,\n}\n\nexport interface DragPointPosition {\n  pageX: number;\n  pageY: number;\n  moveX: number;\n  moveY: number;\n}\n\nexport interface DragEventInterface<T> {\n  type: DragEventType;\n  group?: string | string[];\n  ghostElement?: any;\n  dragPosition: DragPointPosition;\n  dragDataTransfer?: T;\n  // For default ghosts, this dropPointPosition denotes the center point of the ghost element.\n  // This center point is used to determine whether the ghost is over droppable elements or not.\n  dropPointPosition?: { pageX: number; pageY: number };\n}\n",
      "properties": [
        {
          "name": "dragDataTransfer",
          "type": "T",
          "optional": true,
          "description": "",
          "line": 27
        },
        {
          "name": "dragPosition",
          "type": "DragPointPosition",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "dropPointPosition",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 30
        },
        {
          "name": "ghostElement",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 25
        },
        {
          "name": "group",
          "type": "string | string[]",
          "optional": true,
          "description": "",
          "line": 24
        },
        {
          "name": "type",
          "type": "DragEventType",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "DragPointPosition",
      "id": "interface-DragPointPosition-c499e4aa8ec82f14107a9331f632efea",
      "file": "src/clr-angular/utils/drag-and-drop/interfaces/drag-event.interface.ts",
      "type": "interface",
      "sourceCode":
        "export enum DragEventType {\n  DRAG_START,\n  DRAG_MOVE,\n  DRAG_END,\n  DRAG_ENTER,\n  DRAG_LEAVE,\n  DROP,\n}\n\nexport interface DragPointPosition {\n  pageX: number;\n  pageY: number;\n  moveX: number;\n  moveY: number;\n}\n\nexport interface DragEventInterface<T> {\n  type: DragEventType;\n  group?: string | string[];\n  ghostElement?: any;\n  dragPosition: DragPointPosition;\n  dragDataTransfer?: T;\n  // For default ghosts, this dropPointPosition denotes the center point of the ghost element.\n  // This center point is used to determine whether the ghost is over droppable elements or not.\n  dropPointPosition?: { pageX: number; pageY: number };\n}\n",
      "properties": [
        {
          "name": "moveX",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "moveY",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "pageX",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "pageY",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "DynamicWrapper",
      "id": "interface-DynamicWrapper-9325f4f25cec42cea50831a285fa7d6b",
      "file": "src/clr-angular/utils/host-wrapping/dynamic-wrapper.ts",
      "type": "interface",
      "sourceCode": "export interface DynamicWrapper {\n  _dynamic: boolean;\n}\n",
      "properties": [
        {
          "name": "_dynamic",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description":
        "<p>Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\nThis software is released under MIT license.\nThe full license information can be found in LICENSE in the root directory of this project.</p>\n",
      "methods": []
    },
    {
      "name": "FocusableItem",
      "id": "interface-FocusableItem-63ce8b62c0311836097336c21f5a8cea",
      "file": "src/clr-angular/utils/focus/key-focus/interfaces.ts",
      "type": "interface",
      "sourceCode":
        "export interface FocusableItem {\n  tabIndex: number;\n  focus: () => void;\n  nativeElement?: HTMLElement;\n}\n",
      "properties": [
        {
          "name": "focus",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "nativeElement",
          "type": "HTMLElement",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "tabIndex",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "FocusTrapConfig",
      "id": "interface-FocusTrapConfig-98a661d3af1b212b79e28762c7ad624c",
      "file": "src/clr-angular/utils/focus-trap/focus-trap.directive.ts",
      "type": "interface",
      "sourceCode":
        "import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\n\nimport { FocusTrapTracker } from './focus-trap-tracker.service';\n\ninterface FocusTrapConfig {\n  strict: boolean;\n}\n\n@Directive({ selector: '[clrFocusTrap]' })\nexport class FocusTrapDirective implements AfterViewInit, OnDestroy {\n  private previousActiveElement: any;\n  private previousTrappedActiveElement: any;\n  private localFocusEscaped = false;\n  private document: Document;\n  private parentElement: Element;\n\n  private topReboundEl: any;\n  private bottomReboundEl: any;\n\n  constructor(\n    private el: ElementRef,\n    private injector: Injector,\n    private focusTrapsTracker: FocusTrapTracker,\n    private renderer: Renderer2,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    this.document = this.injector.get(DOCUMENT);\n    this.focusTrapsTracker.current = this;\n\n    this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0');\n  }\n\n  private _config: FocusTrapConfig = {\n    strict: true,\n  };\n  @Input('clrFocusTrap')\n  set config(config: FocusTrapConfig) {\n    this._config = Object.assign(this._config, config);\n  }\n\n  @HostListener('document:focusin', ['$event'])\n  onFocusIn(event: any) {\n    if (this.focusTrapsTracker.current !== this || !isPlatformBrowser(this.platformId) || this.localFocusEscaped) {\n      return;\n    }\n    const nativeElement: HTMLElement = this.el.nativeElement;\n    if (this._config.strict && event.target && !nativeElement.contains(event.target)) {\n      // When the focus trap is global, always steal focus back if it goes outside\n      nativeElement.focus();\n    } else if (event.target === this.bottomReboundEl && nativeElement.contains(this.previousTrappedActiveElement)) {\n      // When the focus trap is local, if the user navigates via keyboard to the end element from within the trap, move to top\n      nativeElement.focus();\n    } else if (event.target === this.topReboundEl) {\n      // When the focus trap is local, if the user navigates via keyboard back to start element from within the trap, move to bottom\n      // @TODO implement an acceptable solution to SHIFT+TAB navigation\n    } else if (event.target !== nativeElement && !nativeElement.contains(event.target)) {\n      // If a user has escaped the trap using the mouse\n      // relax, don't do it, when you want to go to it, living those dreams, scheme those schemes, hit me with those laser beams\n      this.localFocusEscaped = true;\n    }\n    // Track the last focused item, so we can check\n    this.previousTrappedActiveElement = event.target;\n  }\n\n  private createFocusableOffScreenEl(): any {\n    // Not using Renderer2's createElement method because that leads to DOM leakage.\n    // https://github.com/angular/angular/issues/26954\n    const offScreenSpan = this.document.createElement('span');\n    this.renderer.setAttribute(offScreenSpan, 'tabindex', '0');\n    this.renderer.addClass(offScreenSpan, 'offscreen-focus-rebounder');\n\n    return offScreenSpan;\n  }\n\n  private addReboundEls() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.topReboundEl = this.createFocusableOffScreenEl();\n      this.bottomReboundEl = this.createFocusableOffScreenEl();\n      const hostElement = this.el.nativeElement;\n      // Add reboundBeforeTrapEl right outside of host element\n      this.renderer.insertBefore(hostElement.parentElement, this.topReboundEl, hostElement);\n      // Add reboundAfterTrapEl right after host element\n      if (hostElement.nextSibling) {\n        this.renderer.insertBefore(hostElement.parentNode, this.bottomReboundEl, hostElement.nextSibling);\n      } else {\n        this.renderer.appendChild(hostElement.parentNode, this.bottomReboundEl);\n      }\n    }\n  }\n\n  private removeReboundEls() {\n    if (isPlatformBrowser(this.platformId) && this.topReboundEl && this.bottomReboundEl) {\n      this.parentElement.removeChild(this.topReboundEl);\n      this.parentElement.removeChild(this.bottomReboundEl);\n      // These are here to to make sure that\n      // we completely delete all traces of the removed DOM objects.\n      delete this.topReboundEl;\n      delete this.bottomReboundEl;\n    }\n  }\n\n  public setPreviousFocus(): void {\n    if (this.previousActiveElement && this.previousActiveElement.focus) {\n      this.previousActiveElement.focus();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.previousActiveElement = <HTMLElement>this.document.activeElement;\n      this.parentElement = this.el.nativeElement.parentElement;\n    }\n\n    this.addReboundEls();\n  }\n\n  ngOnDestroy() {\n    this.removeReboundEls();\n    this.setPreviousFocus();\n    this.focusTrapsTracker.activatePreviousTrapper();\n  }\n}\n",
      "properties": [
        {
          "name": "strict",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 23
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "NonNgIterable",
      "id": "interface-NonNgIterable-5189b929580c8bb8d77fdab566f4b397",
      "file": "src/clr-angular/utils/virtual-scroll/non-ng-iterable.ts",
      "type": "interface",
      "sourceCode":
        "export interface NonNgIterable<T> {\n  get(index?: number): T;\n}\n\nexport function isNonNgIterable<T>(o: any): o is NonNgIterable<T> {\n  return 'get' in o;\n}\n",
      "properties": [],
      "indexSignatures": [],
      "kind": 152,
      "description":
        "<p>This is ridiculous, we need a specific &quot;non-iterable&quot; iterable because otherwise,\nAngular iterates over it in dev mode. Prod mode is fine, but dev mode iterating means it hangs\nthe app on infinite generators.</p>\n",
      "methods": [
        {
          "name": "get",
          "args": [
            {
              "name": "index",
              "type": "number",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": [],
          "line": 13,
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "PopoverOptions",
      "id": "interface-PopoverOptions-c9187bf9fa0810b9f9eac5c0175d5918",
      "file": "src/clr-angular/popover/common/popover-options.interface.ts",
      "type": "interface",
      "sourceCode":
        "export interface PopoverOptions {\n  offsetX?: number;\n  offsetY?: number;\n  useAnchorParent?: boolean;\n  allowMultipleOpen?: boolean;\n  ignoreGlobalESCListener?: boolean;\n}\n",
      "properties": [
        {
          "name": "allowMultipleOpen",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "ignoreGlobalESCListener",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "offsetX",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 8
        },
        {
          "name": "offsetY",
          "type": "number",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "useAnchorParent",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "Position",
      "id": "interface-Position-92128ed6ebfdb2e937d24e515428eb25",
      "file": "src/clr-angular/popover/signpost/signpost-positions.ts",
      "type": "interface",
      "sourceCode":
        "import { Point } from '../common/popover';\n\nexport interface Position {\n  anchorPoint: Point;\n  popoverPoint: Point;\n  offsetY: number;\n  offsetX: number;\n}\n\nexport const SIGNPOST_POSITIONS: { [input: string]: Position } = {\n  'top-left': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_RIGHT, offsetY: -10, offsetX: 0 },\n  'top-middle': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_CENTER, offsetY: -10, offsetX: 0 },\n  'top-right': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_LEFT, offsetY: -10, offsetX: 0 },\n  'right-top': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_BOTTOM, offsetY: 2, offsetX: 14 },\n  'right-middle': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n  'right-bottom': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_TOP, offsetY: -1, offsetX: 14 },\n  'bottom-right': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_LEFT, offsetY: 9, offsetX: -1 },\n  'bottom-middle': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_CENTER, offsetY: 9, offsetX: 12 },\n  'bottom-left': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_RIGHT, offsetY: 9, offsetX: 0 },\n  'left-bottom': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_TOP, offsetY: 0, offsetX: -14 },\n  'left-middle': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_CENTER, offsetY: 4, offsetX: -14 },\n  'left-top': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_BOTTOM, offsetY: 0, offsetX: -14 },\n  default: { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n};\n",
      "properties": [
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "offsetX",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "offsetY",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "AbstractPopover",
      "id": "injectable-AbstractPopover-774c2cd09529bbb87a4f3d3fab5f2833",
      "file": "src/clr-angular/popover/common/abstract-popover.ts",
      "properties": [
        {
          "name": "anchorElem",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [113]
        },
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [113]
        },
        {
          "name": "closeOnOutsideClick",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [114]
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [112]
        },
        {
          "name": "documentESCListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [112]
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [113]
        },
        {
          "name": "hostClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [112]
        },
        {
          "name": "ignore",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112]
        },
        {
          "name": "ignoredElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [113]
        },
        {
          "name": "ignoredElementClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [112]
        },
        {
          "name": "popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112]
        },
        {
          "name": "popoverOptions",
          "defaultValue": "{}",
          "type": "PopoverOptions",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [113]
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [113]
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [113]
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112]
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [113]
        },
        {
          "name": "updateAnchor",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "anchor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [113]
        },
        {
          "name": "attachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112]
        },
        {
          "name": "attachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112]
        },
        {
          "name": "detachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "modifierKind": [112]
        },
        {
          "name": "detachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "modifierKind": [113]
        }
      ],
      "description": "",
      "sourceCode":
        "import {\n  AfterViewChecked,\n  ElementRef,\n  HostBinding,\n  Injectable,\n  Injector,\n  OnDestroy,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\n\nimport { Point, Popover } from './popover';\nimport { PopoverOptions } from './popover-options.interface';\n\n// Literally any annotation would work here, but writing our own @HoneyBadger annotation feels overkill.\n@Injectable()\nexport abstract class AbstractPopover implements AfterViewChecked, OnDestroy {\n  constructor(injector: Injector, @SkipSelf() protected parentHost: ElementRef) {\n    this.el = injector.get(ElementRef);\n    this.toggleService = injector.get(ClrPopoverToggleService);\n    this.renderer = injector.get(Renderer2);\n    // Default anchor is the parent host\n    this.anchorElem = parentHost.nativeElement;\n\n    this.popoverInstance = new Popover(this.el.nativeElement);\n    this.subscription = this.toggleService.openChange.subscribe(change => {\n      if (change) {\n        this.anchor();\n        this.attachESCListener();\n      } else {\n        this.release();\n        this.detachESCListener();\n      }\n    });\n    if (this.toggleService.open) {\n      this.anchor();\n      this.attachESCListener();\n    }\n  }\n\n  protected el: ElementRef;\n  protected toggleService: ClrPopoverToggleService;\n  protected renderer: Renderer2;\n\n  private popoverInstance: Popover;\n  private subscription: Subscription;\n\n  private updateAnchor = false;\n\n  protected anchorElem: any;\n  protected anchorPoint: Point;\n  protected popoverPoint: Point;\n  protected popoverOptions: PopoverOptions = {};\n\n  protected ignoredElement: any;\n\n  protected anchor() {\n    this.updateAnchor = true;\n    // Ugh\n    this.ignore = this.toggleService.originalEvent;\n  }\n\n  protected release() {\n    this.detachOutsideClickListener();\n    this.popoverInstance.release();\n  }\n\n  ngAfterViewChecked() {\n    if (this.updateAnchor) {\n      this.updateAnchor = false;\n      this.popoverInstance\n        .anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)\n        .subscribe(() => {\n          // if a scroll event is detected, close the popover\n          this.toggleService.open = false;\n        });\n      this.attachOutsideClickListener();\n    }\n  }\n\n  ngOnDestroy() {\n    this.release();\n    this.detachESCListener();\n    this.subscription.unsubscribe();\n  }\n\n  /*\n     * Fallback to hide when *clrIfOpen is not being used\n     */\n\n  @HostBinding('class.is-off-screen')\n  get isOffScreen() {\n    return this.toggleService.open ? false : true;\n  }\n\n  /*\n     * Until https://github.com/angular/angular/issues/8785 is supported, we don't have any way to instantiate\n     * a separate directive on the host. So let's do dirty but performant for now.\n     */\n  public closeOnOutsideClick = false;\n  private hostClickListener: () => void;\n  private documentClickListener: () => void;\n  private documentESCListener: () => void;\n  private ignoredElementClickListener: () => void;\n  private ignore: any;\n\n  private attachESCListener(): void {\n    if (!this.popoverOptions.ignoreGlobalESCListener) {\n      this.documentESCListener = this.renderer.listen('document', 'keydown', event => {\n        if (event && event.key) {\n          if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggleService.open = false;\n          }\n        }\n      });\n    }\n  }\n\n  private detachESCListener(): void {\n    if (this.documentESCListener) {\n      this.documentESCListener();\n      delete this.documentESCListener;\n    }\n  }\n\n  private attachOutsideClickListener() {\n    if (this.closeOnOutsideClick) {\n      this.hostClickListener = this.renderer.listen(this.el.nativeElement, 'click', event => (this.ignore = event));\n      if (this.ignoredElement) {\n        this.ignoredElementClickListener = this.renderer.listen(\n          this.ignoredElement,\n          'click',\n          event => (this.ignore = event)\n        );\n      }\n      this.documentClickListener = this.renderer.listen('document', 'click', event => {\n        if (event === this.ignore) {\n          delete this.ignore;\n        } else {\n          this.toggleService.open = false;\n        }\n      });\n    }\n  }\n\n  private detachOutsideClickListener() {\n    if (this.closeOnOutsideClick) {\n      if (this.hostClickListener) {\n        this.hostClickListener();\n        delete this.hostClickListener;\n      }\n      if (this.ignoredElementClickListener) {\n        this.ignoredElementClickListener();\n        delete this.ignoredElementClickListener;\n      }\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        delete this.documentClickListener;\n      }\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "parentHost",
            "type": "ElementRef"
          }
        ],
        "line": 25,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentHost",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AccordionService",
      "id": "injectable-AccordionService-23f0d56a82f40ddf054d4c8f8d233aa8",
      "file": "src/clr-angular/accordion/providers/accordion.service.ts",
      "properties": [
        {
          "name": "_panelsChanges",
          "defaultValue": "new BehaviorSubject<AccordionPanelModel[]>(this.accordion.panels)",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [113, 132]
        },
        {
          "name": "accordion",
          "defaultValue": "new AccordionModel()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [113]
        }
      ],
      "methods": [
        {
          "name": "addPanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "disablePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "disabled",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emitUpdatedPanels",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "modifierKind": [113]
        },
        {
          "name": "getPanelChanges",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "Observable<AccordionPanelModel>",
          "typeParameters": [],
          "line": 19,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setStrategy",
          "args": [
            {
              "name": "strategy",
              "type": "AccordionStrategy"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "jsdoctags": [
            {
              "name": "strategy",
              "type": "AccordionStrategy",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "togglePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updatePanelOrder",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { AccordionModel, AccordionPanelModel } from '../models/accordion.model';\nimport { AccordionStrategy } from '../enums/accordion-strategy.enum';\n\n@Injectable()\nexport class AccordionService {\n  protected accordion = new AccordionModel();\n  protected readonly _panelsChanges = new BehaviorSubject<AccordionPanelModel[]>(this.accordion.panels);\n\n  getPanelChanges(panelId: string): Observable<AccordionPanelModel> {\n    return this._panelsChanges.pipe(map(panels => panels.find(s => s.id === panelId)));\n  }\n\n  setStrategy(strategy: AccordionStrategy) {\n    this.accordion.setStrategy(strategy);\n  }\n\n  addPanel(panelId: string, open = false) {\n    this.accordion.addPanel(panelId, open);\n    this.emitUpdatedPanels();\n  }\n\n  togglePanel(panelId: string, open?: boolean) {\n    this.accordion.togglePanel(panelId, open);\n    this.emitUpdatedPanels();\n  }\n\n  disablePanel(panelId: string, disabled?: boolean) {\n    this.accordion.disablePanel(panelId, disabled);\n    this.emitUpdatedPanels();\n  }\n\n  updatePanelOrder(ids: string[]) {\n    this.accordion.updatePanelOrder(ids);\n    this.emitUpdatedPanels();\n  }\n\n  protected emitUpdatedPanels() {\n    this._panelsChanges.next(this.accordion.panels);\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "AlertIconAndTypesService",
      "id": "injectable-AlertIconAndTypesService-ddca0c9bbc490650f3ae1a01764dd371",
      "file": "src/clr-angular/emphasis/alert/providers/icon-and-types.service.ts",
      "properties": [
        {
          "name": "_alertIconShape",
          "defaultValue": "''",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [112]
        },
        {
          "name": "_alertType",
          "defaultValue": "'info'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        },
        {
          "name": "defaultIconShape",
          "defaultValue": "'info-circle'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "iconInfoFromType",
          "args": [
            {
              "name": "type",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "AlertInfoObject",
          "typeParameters": [],
          "line": 48,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "type",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\nimport { AlertInfoObject } from '../utils/alert-info-object';\nimport { ALERT_TYPES } from '../utils/alert-types';\nimport { ClrCommonStringsService } from '../../../utils/i18n/common-strings.service';\n\n@Injectable()\nexport class AlertIconAndTypesService {\n  constructor(private commonStrings: ClrCommonStringsService) {}\n\n  private defaultIconShape = 'info-circle';\n  private _alertIconShape = '';\n  private _alertType = 'info';\n\n  get alertType(): string {\n    return this._alertType;\n  }\n  set alertType(val: string) {\n    if (ALERT_TYPES.indexOf(val) > -1) {\n      this._alertType = val;\n    }\n  }\n\n  get alertIconShape(): string {\n    if ('' === this._alertIconShape) {\n      return this.iconInfoFromType(this._alertType).shape;\n    }\n    return this._alertIconShape;\n  }\n  set alertIconShape(val: string) {\n    if (!val) {\n      this._alertIconShape = '';\n    } else if (val !== this._alertIconShape) {\n      this._alertIconShape = val;\n    }\n  }\n\n  get alertIconTitle(): string {\n    return this.iconInfoFromType(this._alertType).title;\n  }\n\n  public iconInfoFromType(type: string): AlertInfoObject {\n    const returnObj = { shape: '', cssClass: '', title: '' };\n\n    switch (type) {\n      case 'warning':\n        returnObj.shape = 'exclamation-triangle';\n        returnObj.cssClass = 'alert-warning';\n        returnObj.title = this.commonStrings.keys.warning;\n        break;\n      case 'danger':\n        returnObj.shape = 'exclamation-circle';\n        returnObj.cssClass = 'alert-danger';\n        returnObj.title = this.commonStrings.keys.danger;\n        break;\n      case 'success':\n        returnObj.shape = 'check-circle';\n        returnObj.cssClass = 'alert-success';\n        returnObj.title = this.commonStrings.keys.success;\n        break;\n      default:\n        returnObj.shape = this.defaultIconShape;\n        returnObj.cssClass = 'alert-info';\n        returnObj.title = this.commonStrings.keys.info;\n        break;\n    }\n\n    return returnObj;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "alertType": {
          "name": "alertType",
          "setSignature": {
            "name": "alertType",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "val",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alertType",
            "type": "string",
            "returnType": "string",
            "line": 21
          }
        },
        "alertIconShape": {
          "name": "alertIconShape",
          "setSignature": {
            "name": "alertIconShape",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "val",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alertIconShape",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "alertIconTitle": {
          "name": "alertIconTitle",
          "getSignature": {
            "name": "alertIconTitle",
            "type": "string",
            "returnType": "string",
            "line": 44
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "AriaLiveService",
      "id": "injectable-AriaLiveService-5ef34e2ce51e009e2a6c9a1d8f2695f9",
      "file": "src/clr-angular/utils/a11y/aria-live.service.ts",
      "properties": [
        {
          "name": "_id",
          "defaultValue": "`clr-aria-live-element-${uniqueIdFactory()}`",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 65,
          "modifierKind": [112]
        },
        {
          "name": "ariaLiveElement",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112]
        },
        {
          "name": "document",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112]
        },
        {
          "name": "previousTimeout",
          "type": "ReturnType<>",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "announce",
          "args": [
            {
              "name": "message",
              "type": "string | HTMLElement"
            },
            {
              "name": "politeness",
              "type": "AriaLivePoliteness",
              "defaultValue": "AriaLivePoliteness.polite"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "description":
            "<p>Append text content inside the AriaLive Container. This method will check if the\nDOM Element is existing if not it will create one for us and the will apply the text.</p>\n<p>```typescript</p>\n<ul>\n<li>this.ariaLiveService.announce(this.el.nativeElement);</li>\n<li>// or</li>\n<li>this.ariaLiveService.announce(&#39;Message to announce to SR&#39;);</li>\n<li>```</li>\n</ul>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2754,
                "end": 2761,
                "flags": 0,
                "escapedText": "message"
              },
              "type": "string | HTMLElement",
              "tagName": {
                "pos": 2748,
                "end": 2753,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>This could be simple string or HTMLElement</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2819,
                "end": 2829,
                "flags": 0,
                "escapedText": "politeness"
              },
              "type": "AriaLivePoliteness",
              "defaultValue": "AriaLivePoliteness.polite",
              "tagName": {
                "pos": 2813,
                "end": 2818,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>&#39;polite&#39;, &#39;assertive&#39; or &#39;off&#39;</li>\n</ul>\n"
            }
          ]
        },
        {
          "name": "createContainer",
          "args": [],
          "optional": false,
          "returnType": "HTMLElement",
          "typeParameters": [],
          "line": 152,
          "description":
            "<p>Create AriaLive DOM element as a last child of the document.\nAfter the element is created, we gonna apply Clarity class to hide it from\nthe screen and set the <code>aria-live</code> politness.</p>\n<p><code>clr-sr-only</code> is the CSS class that is used to hide the element from the screen.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 5147,
                "end": 5153,
                "flags": 0,
                "escapedText": "return"
              },
              "comment": "<p>AriaLive container as HTMLElement</p>\n"
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "description":
            "<p>onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive\ncontainer from the document.</p>\n",
          "modifierKind": [114]
        }
      ],
      "description":
        "<p>This service handle <code>aria-live</code> accessibility attribute. The issue is that you need\nto have the DOM Element with attribute <code>aria-live</code> before you could insert content\nand SR (Screen Reader) pick the change and announce it.</p>\n",
      "sourceCode":
        "import { PLATFORM_ID } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, NgZone, OnDestroy } from '@angular/core';\nimport { uniqueIdFactory } from '../id-generator/id-generator.service';\n\nexport enum AriaLivePoliteness {\n  off = 'off',\n  polite = 'polite',\n  assertive = 'assertive',\n}\n\n/**\n * Time in milliseconds before inserting the content into the container\n */\nexport const ARIA_LIVE_TICK: number = 100;\n\n/**\n * This service handle `aria-live` accessibility attribute. The issue is that you need\n * to have the DOM Element with attribute `aria-live` before you could insert content\n * and SR (Screen Reader) pick the change and announce it.\n *\n * @remark\n * This is a private service, nothing here is part of Clarity's public API. It could change at any point in time.\n *\n * ```typescript\n * import { AriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';\n *\n * @Component({\n * selector: 'clr-demo-component',\n * providers: [AriaLiveService],\n * template: `\n *   <ng-content></ng-content>\n * `,\n * })\n * export class DemoComponent {\n *  constructor(ariaLiveService: AriaLiveService) {}\n *\n *  public actionThatWillTriggerChange() {\n *    this.ariaLiveService.announce('message that I want to announce to SR');\n *  }\n * }\n * ```\n *\n */\n@Injectable()\nexport class AriaLiveService implements OnDestroy {\n  private ariaLiveElement: HTMLElement;\n  private document: Document;\n  private previousTimeout: ReturnType<typeof setTimeout>;\n\n  constructor(\n    private ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    this.document = _document;\n  }\n\n  private _id: string = `clr-aria-live-element-${uniqueIdFactory()}`;\n  /**\n   * get access to the internal HTML `id` that gonna be used for the AriaLive container.\n   * @return ID of the DOM Element as string.\n   */\n  public get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Append text content inside the AriaLive Container. This method will check if the\n   * DOM Element is existing if not it will create one for us and the will apply the text.\n   *\n   * ```typescript\n   * this.ariaLiveService.announce(this.el.nativeElement);\n   * // or\n   * this.ariaLiveService.announce('Message to announce to SR');\n   * ```\n   *\n   * @remark\n   * When second argument is `AriaLivePoliteness.off` we won't create aria container or update it.\n   * The reason for that is that we don't want to do additional work if the SR will ignore it.\n   *\n   * @param message - This could be simple string or HTMLElement\n   * @param politeness - 'polite', 'assertive' or 'off'\n   */\n  public announce(message: string | HTMLElement, politeness: AriaLivePoliteness = AriaLivePoliteness.polite): void {\n    if (politeness === AriaLivePoliteness.off) {\n      return;\n    }\n\n    if (!this.ariaLiveElement && isPlatformBrowser(this.platformId)) {\n      this.ariaLiveElement = this.createContainer();\n    }\n\n    message = typeof message !== 'string' && isPlatformBrowser(this.platformId) ? message.textContent : message;\n\n    // when there is no message do NOTHING!\n    if (!message) {\n      return;\n    }\n\n    this.ariaLiveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    this.ngZone.runOutsideAngular(() => {\n      // This clearTimeout will stop all older messages from announcing\n      // in the case where the messages are comming too fast we gonna try to append only\n      // the last one. That's what the SR will try to do anyway.\n      clearTimeout(this.previousTimeout);\n      this.previousTimeout = setTimeout(() => {\n        this.ariaLiveElement.textContent = <string>message;\n      }, ARIA_LIVE_TICK);\n    });\n  }\n\n  /**\n   * onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive\n   * container from the document.\n   */\n  public ngOnDestroy() {\n    clearTimeout(this.previousTimeout);\n\n    if (isPlatformBrowser(this.platformId) && this.ariaLiveElement) {\n      this.document.body.removeChild(this.ariaLiveElement);\n      this.ariaLiveElement = null;\n    }\n  }\n\n  /**\n   * Create AriaLive DOM element as a last child of the document.\n   * After the element is created, we gonna apply Clarity class to hide it from\n   * the screen and set the `aria-live` politness.\n   *\n   * `clr-sr-only` is the CSS class that is used to hide the element from the screen.\n   *\n   * @remark\n   * Calling this method multiple times will create multiple DOM Elements, that\n   * won't be tracked and will be GC after the service is destroyed.\n   *\n   * @return AriaLive container as HTMLElement\n   *\n   */\n  private createContainer(): HTMLElement {\n    const ariaLiveElement = this.document.createElement('div');\n\n    ariaLiveElement.setAttribute('id', this.id);\n    // Use clarity screen reader class to hide the dom element\n    // and fix the scrollbar shake\n    ariaLiveElement.classList.add('clr-sr-only');\n\n    ariaLiveElement.setAttribute('aria-atomic', 'true');\n    ariaLiveElement.setAttribute('aria-live', AriaLivePoliteness.polite);\n\n    this.document.body.appendChild(ariaLiveElement);\n\n    return ariaLiveElement;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ngZone",
            "type": "NgZone"
          },
          {
            "name": "_document",
            "type": "any"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 55,
        "jsdoctags": [
          {
            "name": "ngZone",
            "type": "NgZone",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_document",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "jsdoctags": [
        {
          "pos": 929,
          "end": 938,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 929,
            "end": 930,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 930,
            "end": 936,
            "flags": 0,
            "escapedText": "remark"
          },
          "comment":
            "This is a private service, nothing here is part of Clarity's public API. It could change at any point in time.\n\n```typescript\n * import { AriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';\n *\n * @Component({\n * selector: 'clr-demo-component',\n * providers: [AriaLiveService],\n * template: `\n<ng-content></ng-content>\n`,\n * })\n * export class DemoComponent {\n *  constructor(ariaLiveService: AriaLiveService) {}\n *\n *  public actionThatWillTriggerChange() {\n *    this.ariaLiveService.announce('message that I want to announce to SR');\n *  }\n * }\n * ```"
        }
      ],
      "accessors": {
        "id": {
          "name": "id",
          "getSignature": {
            "name": "id",
            "type": "string",
            "returnType": "string",
            "line": 70,
            "description":
              "<p>get access to the internal HTML <code>id</code> that gonna be used for the AriaLive container.</p>\n",
            "jsdoctags": [
              {
                "pos": 2073,
                "end": 2081,
                "flags": 0,
                "kind": 293,
                "atToken": {
                  "pos": 2073,
                  "end": 2074,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 2074,
                  "end": 2080,
                  "flags": 0,
                  "escapedText": "return"
                },
                "comment": "<p>ID of the DOM Element as string.</p>\n"
              }
            ]
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "AriaService",
      "id": "injectable-AriaService-38d2a19415d70afaa694abbe19acced5",
      "file": "src/clr-angular/layout/tabs/providers/aria.service.ts",
      "properties": [
        {
          "name": "ariaControls",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        },
        {
          "name": "ariaLabelledBy",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\n// TODO: if we find more components that could use this, consider moving this to utils\n@Injectable()\nexport class AriaService {\n  public ariaLabelledBy: string;\n  public ariaControls: string;\n}\n",
      "type": "injectable"
    },
    {
      "name": "BasicFocusableItem",
      "id": "injectable-BasicFocusableItem-4e6342a2c6ef326a6cbe204861dd2bc4",
      "file": "src/clr-angular/utils/focus/focusable-item/basic-focusable-item.service.ts",
      "properties": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "activate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39
        },
        {
          "name": "blur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32
        },
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26
        }
      ],
      "description": "",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport { ElementRef, Inject, Injectable, PLATFORM_ID, Renderer2 } from '@angular/core';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../id-generator/id-generator.service';\nimport { FocusableItem } from './focusable-item';\n\n@Injectable()\nexport class BasicFocusableItem implements FocusableItem {\n  constructor(\n    @Inject(UNIQUE_ID) public id: string,\n    private el: ElementRef<HTMLElement>,\n    private renderer: Renderer2,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    renderer.setAttribute(el.nativeElement, 'id', id);\n    renderer.setAttribute(el.nativeElement, 'tabindex', '-1');\n  }\n\n  disabled = false;\n\n  focus() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0');\n      this.el.nativeElement.focus();\n    }\n  }\n  blur() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');\n      this.el.nativeElement.blur();\n    }\n  }\n\n  activate() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.el.nativeElement.click();\n    }\n  }\n}\n\nexport const BASIC_FOCUSABLE_ITEM_PROVIDER = [\n  UNIQUE_ID_PROVIDER,\n  {\n    provide: FocusableItem,\n    useClass: BasicFocusableItem,\n  },\n];\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "id",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ButtonHubService",
      "id": "injectable-ButtonHubService-ef785238e90f849ce8bd4aea8b2f90ba",
      "file": "src/clr-angular/wizard/providers/button-hub.service.ts",
      "properties": [
        {
          "name": "_cancelBtnClicked",
          "defaultValue": "new Subject<any>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [112]
        },
        {
          "name": "_customBtnClicked",
          "defaultValue": "new Subject<any>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [112]
        },
        {
          "name": "_dangerBtnClicked",
          "defaultValue": "new Subject<any>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [112]
        },
        {
          "name": "_finishBtnClicked",
          "defaultValue": "new Subject<any>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [112]
        },
        {
          "name": "_nextBtnClicked",
          "defaultValue": "new Subject<any>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        },
        {
          "name": "_previousBtnClicked",
          "defaultValue": "new Subject<any>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        },
        {
          "name": "buttonsReady",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "buttonClicked",
          "args": [
            {
              "name": "buttonType",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "buttonType",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class ButtonHubService {\n  public buttonsReady: boolean = false;\n\n  private _previousBtnClicked = new Subject<any>();\n  public get previousBtnClicked(): Observable<any> {\n    return this._previousBtnClicked.asObservable();\n  }\n\n  private _nextBtnClicked = new Subject<any>();\n  public get nextBtnClicked(): Observable<any> {\n    return this._nextBtnClicked.asObservable();\n  }\n\n  private _dangerBtnClicked = new Subject<any>();\n  public get dangerBtnClicked(): Observable<any> {\n    return this._dangerBtnClicked.asObservable();\n  }\n\n  private _cancelBtnClicked = new Subject<any>();\n  public get cancelBtnClicked(): Observable<any> {\n    return this._cancelBtnClicked.asObservable();\n  }\n\n  private _finishBtnClicked = new Subject<any>();\n  public get finishBtnClicked(): Observable<any> {\n    return this._finishBtnClicked.asObservable();\n  }\n\n  private _customBtnClicked = new Subject<any>();\n  public get customBtnClicked(): Observable<any> {\n    return this._customBtnClicked.asObservable();\n  }\n\n  public buttonClicked(buttonType: string): void {\n    if ('previous' === buttonType) {\n      this._previousBtnClicked.next();\n    } else if ('next' === buttonType) {\n      this._nextBtnClicked.next();\n    } else if ('finish' === buttonType) {\n      this._finishBtnClicked.next();\n    } else if ('danger' === buttonType) {\n      this._dangerBtnClicked.next();\n    } else if ('cancel' === buttonType) {\n      this._cancelBtnClicked.next();\n    } else {\n      this._customBtnClicked.next(buttonType);\n    }\n  }\n}\n",
      "accessors": {
        "previousBtnClicked": {
          "name": "previousBtnClicked",
          "getSignature": {
            "name": "previousBtnClicked",
            "type": "",
            "returnType": "Observable<any>",
            "line": 16
          }
        },
        "nextBtnClicked": {
          "name": "nextBtnClicked",
          "getSignature": {
            "name": "nextBtnClicked",
            "type": "",
            "returnType": "Observable<any>",
            "line": 21
          }
        },
        "dangerBtnClicked": {
          "name": "dangerBtnClicked",
          "getSignature": {
            "name": "dangerBtnClicked",
            "type": "",
            "returnType": "Observable<any>",
            "line": 26
          }
        },
        "cancelBtnClicked": {
          "name": "cancelBtnClicked",
          "getSignature": {
            "name": "cancelBtnClicked",
            "type": "",
            "returnType": "Observable<any>",
            "line": 31
          }
        },
        "finishBtnClicked": {
          "name": "finishBtnClicked",
          "getSignature": {
            "name": "finishBtnClicked",
            "type": "",
            "returnType": "Observable<any>",
            "line": 36
          }
        },
        "customBtnClicked": {
          "name": "customBtnClicked",
          "getSignature": {
            "name": "customBtnClicked",
            "type": "",
            "returnType": "Observable<any>",
            "line": 41
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ButtonInGroupService",
      "id": "injectable-ButtonInGroupService-eb6c92a5f48e8f1e16faf41e06266c1f",
      "file": "src/clr-angular/button/providers/button-in-group.service.ts",
      "properties": [
        {
          "name": "_changes",
          "defaultValue": "new Subject<ClrButton>()",
          "type": "Subject<ClrButton>",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "updateButtonGroup",
          "args": [
            {
              "name": "button",
              "type": "ClrButton"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "jsdoctags": [
            {
              "name": "button",
              "type": "ClrButton",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nimport { ClrButton } from '../button-group/button';\n\n@Injectable()\nexport class ButtonInGroupService {\n  private _changes: Subject<ClrButton> = new Subject<ClrButton>();\n\n  get changes(): Observable<ClrButton> {\n    return this._changes.asObservable();\n  }\n\n  updateButtonGroup(button: ClrButton): void {\n    this._changes.next(button);\n  }\n}\n",
      "accessors": {
        "changes": {
          "name": "changes",
          "getSignature": {
            "name": "changes",
            "type": "",
            "returnType": "Observable<ClrButton>",
            "line": 17
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ClrCommonStringsService",
      "id": "injectable-ClrCommonStringsService-91d7fca9f0a44c2893e4f77879f01962",
      "file": "src/clr-angular/utils/i18n/common-strings.service.ts",
      "properties": [],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { CommonStringsServiceInternal } from '@clr/core/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClrCommonStringsService extends CommonStringsServiceInternal {}\n",
      "extends": "CommonStringsServiceInternal",
      "type": "injectable"
    },
    {
      "name": "ClrPopoverEventsService",
      "id": "injectable-ClrPopoverEventsService-a72e53e843d75c5b10eebd34887c613c",
      "file": "src/clr-angular/utils/popover/providers/popover-events.service.ts",
      "properties": [
        {
          "name": "_anchorButtonRef",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 135,
          "modifierKind": [112]
        },
        {
          "name": "_closeButtonRef",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 143,
          "modifierKind": [112]
        },
        {
          "name": "_contentRef",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 159,
          "modifierKind": [112]
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        },
        {
          "name": "documentScroller",
          "type": "Observable<Event>",
          "optional": false,
          "description": "",
          "line": 167,
          "modifierKind": [112]
        },
        {
          "name": "escapeListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 120,
          "modifierKind": [112]
        },
        {
          "name": "ignoredEvent",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [114]
        },
        {
          "name": "outsideClickClose",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [114]
        },
        {
          "name": "scrollSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [112]
        },
        {
          "name": "scrollToClose",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "addClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "modifierKind": [114]
        },
        {
          "name": "addEscapeListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "modifierKind": [114]
        },
        {
          "name": "addScrollListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "modifierKind": [114]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 174
        },
        {
          "name": "removeAllEventListeners",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 169,
          "modifierKind": [112]
        },
        {
          "name": "removeClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 110,
          "modifierKind": [114]
        },
        {
          "name": "removeEscapeListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 128,
          "modifierKind": [114]
        },
        {
          "name": "removeScrollListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "modifierKind": [114]
        },
        {
          "name": "setAnchorFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 155,
          "modifierKind": [114]
        },
        {
          "name": "setCloseFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 151,
          "modifierKind": [114]
        },
        {
          "name": "testForSmartPopoverContentContainer",
          "args": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 73,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { ElementRef, Injectable, Renderer2, Inject, OnDestroy } from '@angular/core';\nimport { ClrPopoverToggleService } from './popover-toggle.service';\nimport { Observable, fromEvent, Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\n@Injectable()\nexport class ClrPopoverEventsService implements OnDestroy {\n  public outsideClickClose = true;\n  public scrollToClose = true;\n  private documentClickListener: () => void;\n  public ignoredEvent: any;\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private renderer: Renderer2,\n    private smartOpenService: ClrPopoverToggleService,\n    @Inject(DOCUMENT) private document: HTMLDocument\n  ) {\n    this.subscriptions.push(\n      smartOpenService.openChange.subscribe(open => {\n        if (open) {\n          this.addEscapeListener();\n          this.addClickListener();\n          this.addScrollListener();\n        } else {\n          this.removeAllEventListeners();\n        }\n      }),\n      smartOpenService.getEventChange().subscribe(event => {\n        // Remember the event that was used to open the content\n        this.ignoredEvent = event;\n      })\n    );\n  }\n\n  private scrollSubscription: Subscription;\n  public addScrollListener() {\n    if (this.scrollToClose) {\n      this.documentScroller = fromEvent(this.document, 'scroll', { capture: true });\n      this.scrollSubscription = this.documentScroller\n        .pipe(filter(this.testForSmartPopoverContentContainer))\n        .subscribe(() => {\n          this.smartOpenService.open = false;\n          this.setAnchorFocus();\n        });\n    } else {\n      // I think this is where dynamic re-positioning will be added\n      // Instead of testing like we do in the close pipe below\n      // we need to switch positioning to use an observable and then\n      // debounce the scroll events to recalculate content position in a performant way\n      // For now, ignore scrolling events.\n      return;\n    }\n  }\n\n  public removeScrollListener() {\n    if (this.documentScroller) {\n      this.scrollSubscription.unsubscribe();\n      delete this.documentScroller;\n    }\n  }\n\n  private testForSmartPopoverContentContainer(event: Event): boolean {\n    // Filter for the documentScroller observable event targets\n    let target: Element = <Element>event.target;\n\n    // Walk up the DOM tree until we get to the element that is a direct child of the body.\n    while (target.classList && target.parentElement.localName !== 'body') {\n      target = target.parentElement;\n    }\n\n    // Target is the child element of body where the scroll events originated.\n    // Return false and prevent the popover content container from closing for any scroll events inside a popover\n    // content container.\n    if (target.classList) {\n      // check scroll events to see if they are happening in popover content or elsewhere\n      return target.classList.contains('clr-popover-content') ? false : true;\n    } else {\n      // prevents it from closing right after first opening\n      return false;\n    }\n  }\n\n  public addClickListener() {\n    if (this.outsideClickClose) {\n      this.documentClickListener = this.renderer.listen(this.document, 'click', (event: MouseEvent) => {\n        if (event === this.ignoredEvent) {\n          // Here we ignore the opening click event (w/o this content opens and immediately closes.\n          delete this.ignoredEvent;\n        } else {\n          this.smartOpenService.open = false;\n          // Rather than a complex change to the focus trap I put focus on the element that was clicked\n          const clickedElement: HTMLElement = <HTMLElement>event.target;\n          clickedElement.focus();\n        }\n      });\n    }\n  }\n\n  public removeClickListener() {\n    if (this.outsideClickClose) {\n      delete this.ignoredEvent;\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        delete this.documentClickListener;\n      }\n    }\n  }\n\n  private escapeListener: () => void;\n  public addEscapeListener() {\n    this.escapeListener = this.renderer.listen(this.document, 'keydown.escape', event => {\n      this.smartOpenService.open = false;\n      this.setAnchorFocus();\n    });\n  }\n\n  public removeEscapeListener() {\n    if (this.escapeListener) {\n      this.escapeListener();\n      delete this.escapeListener;\n    }\n  }\n\n  private _anchorButtonRef: ElementRef;\n  public set anchorButtonRef(ref: ElementRef) {\n    this._anchorButtonRef = ref;\n  }\n  public get anchorButtonRef(): ElementRef {\n    return this._anchorButtonRef;\n  }\n\n  private _closeButtonRef: ElementRef;\n  public set closeButtonRef(ref: ElementRef) {\n    this._closeButtonRef = ref;\n  }\n  public get closeButtonRef(): ElementRef {\n    return this._closeButtonRef;\n  }\n\n  public setCloseFocus(): void {\n    this._closeButtonRef.nativeElement.focus();\n  }\n\n  public setAnchorFocus(): void {\n    this.anchorButtonRef.nativeElement.focus();\n  }\n\n  private _contentRef: ElementRef;\n  public set contentRef(host: ElementRef) {\n    this._contentRef = host;\n  }\n  public get contentRef(): ElementRef {\n    return this._contentRef;\n  }\n\n  private documentScroller: Observable<Event>;\n\n  private removeAllEventListeners() {\n    this.removeScrollListener();\n    this.removeClickListener();\n    this.removeEscapeListener();\n  }\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.removeAllEventListeners();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "document",
            "type": "HTMLDocument"
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "document",
            "type": "HTMLDocument",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "jsdoctags": [
        {
          "pos": 593,
          "end": 601,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 593,
            "end": 594,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 594,
            "end": 601,
            "flags": 0,
            "escapedText": "dynamic"
          }
        }
      ],
      "accessors": {
        "anchorButtonRef": {
          "name": "anchorButtonRef",
          "setSignature": {
            "name": "anchorButtonRef",
            "type": "void",
            "args": [
              {
                "name": "ref",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 136,
            "jsdoctags": [
              {
                "name": "ref",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "anchorButtonRef",
            "type": "",
            "returnType": "ElementRef",
            "line": 139
          }
        },
        "closeButtonRef": {
          "name": "closeButtonRef",
          "setSignature": {
            "name": "closeButtonRef",
            "type": "void",
            "args": [
              {
                "name": "ref",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 144,
            "jsdoctags": [
              {
                "name": "ref",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "closeButtonRef",
            "type": "",
            "returnType": "ElementRef",
            "line": 147
          }
        },
        "contentRef": {
          "name": "contentRef",
          "setSignature": {
            "name": "contentRef",
            "type": "void",
            "args": [
              {
                "name": "host",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 160,
            "jsdoctags": [
              {
                "name": "host",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "contentRef",
            "type": "",
            "returnType": "ElementRef",
            "line": 163
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ClrPopoverPositionService",
      "id": "injectable-ClrPopoverPositionService-c0c56dffb014fff664a3eb274c8b2c06",
      "file": "src/clr-angular/utils/popover/providers/popover-position.service.ts",
      "properties": [
        {
          "name": "_position",
          "type": "ClrPopoverPosition",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        },
        {
          "name": "_shouldRealign",
          "defaultValue": "new Subject()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [112]
        },
        {
          "name": "contentOffsets",
          "type": "ClrPopoverContentOffset",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        },
        {
          "name": "currentAnchorCoords",
          "type": "ClientRect",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        },
        {
          "name": "currentContentCoords",
          "type": "ClientRect",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [112]
        },
        {
          "name": "platformId",
          "type": "Object",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "PLATFORM_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "shouldRealign",
          "defaultValue": "this._shouldRealign.asObservable()",
          "type": "Observable<void>",
          "optional": false,
          "description": "",
          "line": 26
        }
      ],
      "methods": [
        {
          "name": "alignContent",
          "args": [
            {
              "name": "content",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "ClrPopoverContentOffset",
          "typeParameters": [],
          "line": 41,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "content",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleHorizontalAxisOneViolation",
          "args": [
            {
              "name": "errorSum",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 188,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "errorSum",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleHorizontalAxisTwoViolations",
          "args": [
            {
              "name": "errorSum",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 216,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "errorSum",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleVerticalAxisOneViolation",
          "args": [
            {
              "name": "errorSum",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "errorSum",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "handleVerticalAxisTwoViolations",
          "args": [
            {
              "name": "errorSum",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 133,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "errorSum",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "realign",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28
        }
      ],
      "description": "",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport { Injectable, PLATFORM_ID, Inject } from '@angular/core';\n\nimport { ClrPopoverEventsService } from './popover-events.service';\nimport { ClrPopoverPosition } from '../interfaces/popover-position.interface';\nimport { ClrPopoverContentOffset } from '../interfaces/popover-content-offset.interface';\nimport { ClrViewportViolation } from '../enums/viewport-violation.enum';\nimport { align, flipSidesAndNudgeContent, flipSides, nudgeContent, testVisibility } from '../position-operators';\nimport { ClrAxis } from '../enums/axis.enum';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable()\nexport class ClrPopoverPositionService {\n  private currentAnchorCoords: ClientRect;\n  private currentContentCoords: ClientRect;\n  private contentOffsets: ClrPopoverContentOffset;\n  private _position: ClrPopoverPosition;\n\n  private _shouldRealign: Subject<void> = new Subject();\n  shouldRealign: Observable<void> = this._shouldRealign.asObservable();\n\n  realign() {\n    this._shouldRealign.next();\n  }\n\n  set position(position: ClrPopoverPosition) {\n    this._position = position;\n  }\n  get position(): ClrPopoverPosition {\n    return this._position;\n  }\n\n  constructor(private eventService: ClrPopoverEventsService, @Inject(PLATFORM_ID) public platformId: Object) {}\n\n  public alignContent(content: HTMLElement): ClrPopoverContentOffset {\n    if (!isPlatformBrowser(this.platformId)) {\n      // Only position when in a browser.\n      // Default to the browser origin and prevent getBoundingClientRect from running.\n      return {\n        xOffset: 0,\n        yOffset: 0,\n      };\n    }\n\n    this.currentAnchorCoords = this.eventService.anchorButtonRef.nativeElement.getBoundingClientRect();\n    this.currentContentCoords = content.getBoundingClientRect();\n    this.contentOffsets = align(this.position, this.currentAnchorCoords, this.currentContentCoords);\n\n    const visibilityViolations: ClrViewportViolation[] = testVisibility(this.contentOffsets, this.currentContentCoords);\n    /**\n     * Calculate the sum of viewport errors. This calculation is used below with the provided Axis in the given\n     * ClrPopoverPosition. Its worth putting the ClrViewportViolation enum values here:\n     *\n     *   BOTTOM = 0,\n     *   LEFT = 1,\n     *   RIGHT = 2,\n     *   TOP = 3,\n     *\n     *   So, this.visibilityViolations.length tells us how many sides of the viewport that the popover content was\n     *   clipped on. We can only help when the content has an issue on one or two sides.\n     *   errorSum is calculated to determine _how_ to change the position. Looking at both the axis and the number\n     *   of violations I can use the errorSum to determine how to transform the position (on the fly) and adjust\n     *   where it can be improved.\n     *\n     *   Note, more than 3 viewport violations and there isn't anything we can do to help. Also when there are two\n     *   violations, we can't help if the violations are TOP+BOTTOM || LEFT+RIGHT => There is no transformation we\n     *   can make to the postion that will help.\n     *\n     *   Some examples:\n     *   There is only one error and Primary axis is VERTICAL\n     *   - this.handleVerticalAxisOneViolation has a switch that will use the error sum to apply the correct\n     *   transform to the postion based on the reduction of visibilityViolations.\n     *\n     *   There are two errors and Primary axis is HORIZONTAL\n     *   - handleHorizontalAxisTwoViolations has a switch that uses the error sum to apply both transforms needed to\n     *   improve the content position based on the reduction of visibilityViolations.\n     */\n\n    const errorSum = visibilityViolations.reduce((count, current) => {\n      return count + current;\n    }, 0);\n\n    if (visibilityViolations.length === 1 && this.position.axis === ClrAxis.VERTICAL) {\n      // When primary axis is VERTICAL and there is one viewport violation\n      this.handleVerticalAxisOneViolation(errorSum);\n    } else if (visibilityViolations.length === 1 && this.position.axis === ClrAxis.HORIZONTAL) {\n      // When primary axis is HORIZONTAL and there is one viewport violation\n      this.handleHorizontalAxisOneViolation(errorSum);\n    } else if (visibilityViolations.length === 2 && this.position.axis === ClrAxis.VERTICAL) {\n      // When primary axis is VERTICAL and there are two viewport violations\n      this.handleVerticalAxisTwoViolations(errorSum);\n    } else if (visibilityViolations.length === 2 && this.position.axis === ClrAxis.HORIZONTAL) {\n      // When primary axis is HORIZONTAL and there are two viewport violations\n      this.handleHorizontalAxisTwoViolations(errorSum);\n    }\n    return this.contentOffsets;\n  }\n\n  private handleVerticalAxisOneViolation(errorSum: number): void {\n    switch (errorSum) {\n      case 0:\n      case 3: {\n        // BOTTOM(0) or TOP(3) are primary violations and we can just flip sides\n        this.contentOffsets = align(flipSides(this.position), this.currentAnchorCoords, this.currentContentCoords);\n        break;\n      }\n      case 1: {\n        // LEFT(1) is secondary and needs to nudge content right\n        this.contentOffsets = align(nudgeContent(this.position), this.currentAnchorCoords, this.currentContentCoords);\n        break;\n      }\n      case 2: {\n        // RIGHT(2) is secondary and  needs to nudge content left\n        this.contentOffsets = align(\n          nudgeContent(this.position, true),\n          this.currentAnchorCoords,\n          this.currentContentCoords\n        );\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  private handleVerticalAxisTwoViolations(errorSum: number): void {\n    switch (errorSum) {\n      // We know there are two violations. We can use the errorSum to determine which combination of sides were\n      // violated and handle appropriately.\n      case 5: {\n        // TOP(3)+RIGHT(2) is case 5. We need to flip sides and nudge the content to the left\n        const flipAndNudgeLeft = flipSidesAndNudgeContent(flipSides, nudgeContent, true);\n        this.contentOffsets = align(\n          flipAndNudgeLeft(this.position),\n          this.currentAnchorCoords,\n          this.currentContentCoords\n        );\n        break;\n      }\n      case 4: {\n        //TOP(3)+LEFT(1) is case 4, we need to flip sides and nudge content to the right\n        const flipAndNudgeRight = flipSidesAndNudgeContent(flipSides, nudgeContent, false);\n        this.contentOffsets = align(\n          flipAndNudgeRight(this.position),\n          this.currentAnchorCoords,\n          this.currentContentCoords\n        );\n        break;\n      }\n      case 3: {\n        // TOP(3)+BOTTOM(0) || left(1)+RIGHT(2) is case 3. There is nothing we can do position wise to improve the\n        // placement for this content.\n        break;\n      }\n      case 2: {\n        // BOTTOM(0)+RIGHT(2) is case 2. We need to flip sides and nudge the content to the left\n        const flipAndNudgeLeft = flipSidesAndNudgeContent(flipSides, nudgeContent, true);\n        this.contentOffsets = align(\n          flipAndNudgeLeft(this.position),\n          this.currentAnchorCoords,\n          this.currentContentCoords\n        );\n        break;\n      }\n      case 1: {\n        // BOTTOM(0)+LEFT(1) is case 1. We need to flip sides and nudge to the right\n        const flipAndNudgeRight = flipSidesAndNudgeContent(flipSides, nudgeContent, false);\n        this.contentOffsets = align(\n          flipAndNudgeRight(this.position),\n          this.currentAnchorCoords,\n          this.currentContentCoords\n        );\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  private handleHorizontalAxisOneViolation(errorSum: number): void {\n    switch (errorSum) {\n      case 1:\n      case 2: {\n        // LEFT(1) and RIGHT(2) are primary violations so we can flip sides\n        this.contentOffsets = align(flipSides(this.position), this.currentAnchorCoords, this.currentContentCoords);\n        break;\n      }\n      case 0: {\n        // BOTTOM(0) is a secondary violation and we need to nudge content up\n        this.contentOffsets = align(\n          nudgeContent(this.position, true),\n          this.currentAnchorCoords,\n          this.currentContentCoords\n        );\n        break;\n      }\n      case 3: {\n        // TOP(3) is a secondary violation and we need to nudge content down\n        this.contentOffsets = align(nudgeContent(this.position), this.currentAnchorCoords, this.currentContentCoords);\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n\n  private handleHorizontalAxisTwoViolations(errorSum: number): void {\n    switch (errorSum) {\n      case 5:\n      case 4: {\n        // TOP(3)+LEFT(1) is case 4.\n        // TOP(3)+RIGHT(2) is case 5.\n        // In both of these cases we need to flip sides and nudge content down\n        const flipAndNudgeDown = flipSidesAndNudgeContent(flipSides, nudgeContent, false);\n        this.contentOffsets = align(\n          flipAndNudgeDown(this.position),\n          this.currentAnchorCoords,\n          this.currentContentCoords\n        );\n        break;\n      }\n      case 3: {\n        // TOP(3)+BOTTOM(0) || left(1)+RIGHT(2) is case 3. There is nothing we can do position wise to improve the\n        // placement for this content.\n        break;\n      }\n      case 2:\n      case 1: {\n        // BOTTOM(0)+RIGHT(2) is case 2.\n        // BOTTOM(0)+LEFT(1) is case 1.\n        // In both cases we  need to flip sides and nudge content up\n        const flipAndNudgeUp = flipSidesAndNudgeContent(flipSides, nudgeContent, true);\n        this.contentOffsets = align(flipAndNudgeUp(this.position), this.currentAnchorCoords, this.currentContentCoords);\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "eventService",
            "type": "ClrPopoverEventsService"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "eventService",
            "type": "ClrPopoverEventsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "position": {
          "name": "position",
          "setSignature": {
            "name": "position",
            "type": "void",
            "args": [
              {
                "name": "position",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "position",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "position",
            "type": "",
            "returnType": "ClrPopoverPosition",
            "line": 35
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ClrPopoverToggleService",
      "id": "injectable-ClrPopoverToggleService-3f6eb73cf8b53f28b1b365867dd78453",
      "file": "src/clr-angular/utils/popover/providers/popover-toggle.service.ts",
      "properties": [
        {
          "name": "_open",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>Popovers might need to ignore click events on an element\n(eg: popover opens on focus on an input field. Clicks should be ignored in this case)</p>\n",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "_openChange",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "_openEvent",
          "type": "Event",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [112]
        },
        {
          "name": "_openEventChange",
          "defaultValue": "new Subject<Event>()",
          "type": "Subject<Event>",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "getEventChange",
          "args": [],
          "optional": false,
          "returnType": "Observable<Event>",
          "typeParameters": [],
          "line": 34,
          "modifierKind": [114]
        },
        {
          "name": "toggleWithEvent",
          "args": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "description":
            "<p>Sometimes, we need to remember the event that triggered the toggling to avoid loops.\nThis is for instance the case of components that open on a click, but close on a click outside.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable()\nexport class ClrPopoverToggleService {\n  /**\n   *  Popovers might need to ignore click events on an element\n   *  (eg: popover opens on focus on an input field. Clicks should be ignored in this case)\n   */\n  private _open: boolean = false;\n  private _openChange: Subject<boolean> = new Subject<boolean>();\n  private _openEvent: Event;\n  private _openEventChange: Subject<Event> = new Subject<Event>();\n\n  public get openChange(): Observable<boolean> {\n    return this._openChange.asObservable();\n  }\n\n  public set openEvent(event: Event) {\n    this._openEvent = event;\n    this._openEventChange.next(event);\n  }\n\n  public get openEvent(): Event {\n    return this._openEvent;\n  }\n\n  public getEventChange(): Observable<Event> {\n    return this._openEventChange.asObservable();\n  }\n\n  public set open(value: boolean) {\n    value = !!value;\n    if (this._open !== value) {\n      this._open = value;\n      this._openChange.next(value);\n    }\n  }\n\n  public get open(): boolean {\n    return this._open;\n  }\n\n  get originalEvent(): Event {\n    return this._openEvent;\n  }\n\n  /**\n   * Sometimes, we need to remember the event that triggered the toggling to avoid loops.\n   * This is for instance the case of components that open on a click, but close on a click outside.\n   */\n  public toggleWithEvent(event: any) {\n    this.openEvent = event;\n    this.open = !this.open;\n  }\n}\n",
      "accessors": {
        "openChange": {
          "name": "openChange",
          "getSignature": {
            "name": "openChange",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 21
          }
        },
        "openEvent": {
          "name": "openEvent",
          "setSignature": {
            "name": "openEvent",
            "type": "void",
            "args": [
              {
                "name": "event",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "event",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "openEvent",
            "type": "",
            "returnType": "Event",
            "line": 30
          }
        },
        "open": {
          "name": "open",
          "setSignature": {
            "name": "open",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "open",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "originalEvent": {
          "name": "originalEvent",
          "getSignature": {
            "name": "originalEvent",
            "type": "",
            "returnType": "Event",
            "line": 50
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ColumnResizerService",
      "id": "injectable-ColumnResizerService-017c0eba2b4dd2430d4dc1e7f2d119fc",
      "file": "src/clr-angular/data/datagrid/providers/column-resizer.service.ts",
      "properties": [
        {
          "name": "_resizedBy",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        },
        {
          "name": "isWithinMaxResizeRange",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [114]
        },
        {
          "name": "widthBeforeResize",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "calculateResize",
          "args": [
            {
              "name": "event",
              "type": "ClrDragEvent<any>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "event",
              "type": "ClrDragEvent<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "endResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "modifierKind": [114]
        },
        {
          "name": "startResize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { ElementRef, Injectable } from '@angular/core';\n\nimport { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';\nimport { ClrDragEvent } from '../../../utils/drag-and-drop/drag-event';\nimport { DatagridRenderOrganizer } from '../render/render-organizer';\n\nconst MIN_COLUMN_WIDTH = 96;\n\n// This service allows DatagridHeaderRenderer and ClrDatagridColumnSeparator\n// to share column resize data with each other.\n\n@Injectable()\nexport class ColumnResizerService {\n  constructor(private el: ElementRef, private domAdapter: DomAdapter, private organizer: DatagridRenderOrganizer) {}\n\n  private widthBeforeResize: number;\n\n  private _resizedBy: number = 0;\n\n  public get resizedBy() {\n    return this._resizedBy;\n  }\n\n  // is it within the maximum resize range to the left\n  public isWithinMaxResizeRange: boolean;\n\n  public get minColumnWidth() {\n    return this.domAdapter.minWidth(this.el.nativeElement) || MIN_COLUMN_WIDTH;\n  }\n\n  public get maxResizeRange() {\n    return this.widthBeforeResize - this.minColumnWidth;\n  }\n\n  public startResize(): void {\n    this._resizedBy = 0;\n    this.isWithinMaxResizeRange = true;\n    this.widthBeforeResize = this.domAdapter.clientRect(this.el.nativeElement).width;\n  }\n\n  public endResize(): void {\n    this.organizer.resize();\n  }\n\n  public get widthAfterResize(): number {\n    return this.widthBeforeResize + this._resizedBy;\n  }\n\n  public calculateResize(event: ClrDragEvent<any>): void {\n    const moveX = event.dragPosition.moveX;\n    // returns the resize amount within the allowed range\n    if (moveX < -this.maxResizeRange) {\n      this._resizedBy = -this.maxResizeRange;\n      this.isWithinMaxResizeRange = false;\n    } else {\n      this._resizedBy = moveX;\n      this.isWithinMaxResizeRange = true;\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          },
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer"
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "resizedBy": {
          "name": "resizedBy",
          "getSignature": {
            "name": "resizedBy",
            "type": "",
            "returnType": "",
            "line": 25
          }
        },
        "minColumnWidth": {
          "name": "minColumnWidth",
          "getSignature": {
            "name": "minColumnWidth",
            "type": "",
            "returnType": "",
            "line": 32
          }
        },
        "maxResizeRange": {
          "name": "maxResizeRange",
          "getSignature": {
            "name": "maxResizeRange",
            "type": "",
            "returnType": "",
            "line": 36
          }
        },
        "widthAfterResize": {
          "name": "widthAfterResize",
          "getSignature": {
            "name": "widthAfterResize",
            "type": "number",
            "returnType": "number",
            "line": 50
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ColumnsService",
      "id": "injectable-ColumnsService-a473e7b551f77ec658f484b035a67d1e",
      "file": "src/clr-angular/data/datagrid/providers/columns.service.ts",
      "properties": [
        {
          "name": "_cache",
          "defaultValue": "[]",
          "type": "ColumnState[]",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "columns",
          "defaultValue": "[]",
          "type": "BehaviorSubject<ColumnState>[]",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [
        {
          "name": "cache",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16
        },
        {
          "name": "emitStateChange",
          "args": [
            {
              "name": "column",
              "type": "BehaviorSubject<ColumnState>"
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "jsdoctags": [
            {
              "name": "column",
              "type": "BehaviorSubject<ColumnState>",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emitStateChangeAt",
          "args": [
            {
              "name": "columnIndex",
              "type": "number"
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "jsdoctags": [
            {
              "name": "columnIndex",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "hasCache",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 24
        },
        {
          "name": "resetToLastCache",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ColumnStateDiff, ColumnState } from '../interfaces/column-state.interface';\nimport { ALL_COLUMN_CHANGES } from '../enums/column-changes.enum';\n\n@Injectable()\nexport class ColumnsService {\n  columns: BehaviorSubject<ColumnState>[] = [];\n  private _cache: ColumnState[] = [];\n\n  cache() {\n    this._cache = this.columns.map(subject => {\n      const value = { ...subject.value };\n      delete value.changes;\n      return value;\n    });\n  }\n\n  hasCache() {\n    return !!this._cache.length;\n  }\n\n  resetToLastCache() {\n    this._cache.forEach((state, index) => {\n      // Just emit the exact value from the cache\n      this.columns[index].next({ ...state, changes: ALL_COLUMN_CHANGES });\n    });\n    this._cache = [];\n  }\n\n  get columnStates(): ColumnState[] {\n    return this.columns.map(column => column.value);\n  }\n\n  get hasHideableColumns(): boolean {\n    return this.columnStates.filter(state => state.hideable).length > 0;\n  }\n\n  // Helper method to emit a change to a column only when there is an actual diff to process for that column\n  emitStateChangeAt(columnIndex: number, diff: ColumnStateDiff) {\n    if (!this.columns[columnIndex]) {\n      return;\n    }\n    this.emitStateChange(this.columns[columnIndex], diff);\n  }\n\n  emitStateChange(column: BehaviorSubject<ColumnState>, diff: ColumnStateDiff) {\n    column.next({ ...column.value, ...diff });\n  }\n}\n",
      "accessors": {
        "columnStates": {
          "name": "columnStates",
          "getSignature": {
            "name": "columnStates",
            "type": "[]",
            "returnType": "ColumnState[]",
            "line": 36
          }
        },
        "hasHideableColumns": {
          "name": "hasHideableColumns",
          "getSignature": {
            "name": "hasHideableColumns",
            "type": "boolean",
            "returnType": "boolean",
            "line": 40
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ComboboxDomAdapter",
      "id": "injectable-ComboboxDomAdapter-db284515f14012b285f3528976209718",
      "file": "src/clr-angular/forms/combobox/utils/combobox-dom-adapter.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearChildren",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 10,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "cloneNode",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 16,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focus",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ComboboxDomAdapter {\n  clearChildren(element: any): void {\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n  }\n\n  cloneNode(element: any): any {\n    return element.cloneNode(true);\n  }\n\n  focus(element: any): void {\n    element.focus();\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "ComboboxNoopDomAdapter",
      "id": "injectable-ComboboxNoopDomAdapter-3b21a6b0158cbeb4f9b3bbec21545e22",
      "file": "src/clr-angular/forms/combobox/utils/combobox-noop-dom-adapter.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearChildren",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "cloneNode",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 21,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focus",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { ComboboxDomAdapter } from './combobox-dom-adapter.service';\n\n@Injectable()\nexport class ComboboxNoopDomAdapter implements ComboboxDomAdapter {\n  focus(element: any): void {}\n\n  clearChildren(element: any): void {}\n\n  cloneNode(element: any): any {\n    return null;\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "ControlClassService",
      "id": "injectable-ControlClassService-9ed1d4d3b6543d7486e52b2017ba17d9",
      "file": "src/clr-angular/forms/common/providers/control-class.service.ts",
      "properties": [
        {
          "name": "className",
          "defaultValue": "''",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "methods": [
        {
          "name": "controlClass",
          "args": [
            {
              "name": "invalid",
              "type": "",
              "defaultValue": "false"
            },
            {
              "name": "grid",
              "type": "",
              "defaultValue": "false"
            },
            {
              "name": "additional",
              "type": "string",
              "defaultValue": "''"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 16,
          "jsdoctags": [
            {
              "name": "invalid",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "grid",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "additional",
              "type": "string",
              "defaultValue": "''",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initControlClass",
          "args": [
            {
              "name": "renderer",
              "type": ""
            },
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "jsdoctags": [
            {
              "name": "renderer",
              "type": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "element",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, Optional } from '@angular/core';\nimport { LayoutService } from './layout.service';\n\n@Injectable()\nexport class ControlClassService {\n  className = '';\n\n  constructor(@Optional() private layoutService: LayoutService) {}\n\n  controlClass(invalid = false, grid = false, additional = '') {\n    const controlClasses = [this.className, additional];\n    if (invalid) {\n      controlClasses.push('clr-error');\n    }\n    if (grid && this.layoutService && this.className.indexOf('clr-col') === -1) {\n      controlClasses.push(`clr-col-md-${this.layoutService.maxLabelSize - this.layoutService.labelSize} clr-col-12`);\n    }\n    return controlClasses.join(' ').trim();\n  }\n\n  // We want to remove the column classes from the input up to the container\n  initControlClass(renderer, element: HTMLElement) {\n    if (element && element.className) {\n      this.className = element.className;\n      const klasses = element.className.split(' ');\n      klasses.forEach(klass => {\n        if (klass.startsWith('clr-col')) {\n          renderer.removeClass(element, klass);\n        }\n      });\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "layoutService",
            "type": "LayoutService"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ControlIdService",
      "id": "injectable-ControlIdService-58d26621d0aa0cafef76e835bba3d039",
      "file": "src/clr-angular/forms/common/providers/control-id.service.ts",
      "properties": [
        {
          "name": "_id",
          "defaultValue": "'clr-form-control-' + ++counter",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "_idChange",
          "defaultValue": "new BehaviorSubject(this._id)",
          "type": "BehaviorSubject<string>",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\nlet counter = 0;\n\n@Injectable()\nexport class ControlIdService {\n  private _id = 'clr-form-control-' + ++counter;\n  get id(): string {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value;\n    this._idChange.next(value);\n  }\n\n  private _idChange: BehaviorSubject<string> = new BehaviorSubject(this._id);\n  public get idChange(): Observable<string> {\n    return this._idChange.asObservable();\n  }\n}\n",
      "accessors": {
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "id",
            "type": "string",
            "returnType": "string",
            "line": 15
          }
        },
        "idChange": {
          "name": "idChange",
          "getSignature": {
            "name": "idChange",
            "type": "",
            "returnType": "Observable<string>",
            "line": 24
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DatagridIfExpandService",
      "id": "injectable-DatagridIfExpandService-10311822e6d8145e3e8f02006ff1a583",
      "file": "src/clr-angular/data/datagrid/datagrid-if-expanded.service.ts",
      "properties": [
        {
          "name": "_animate",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [112]
        },
        {
          "name": "_replace",
          "defaultValue": "new BehaviorSubject(false)",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [112]
        },
        {
          "name": "_expandChange",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [113],
          "inheritance": {
            "file": "IfExpandService"
          }
        },
        {
          "name": "_expanded",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [113],
          "inheritance": {
            "file": "IfExpandService"
          }
        },
        {
          "name": "_loading",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [113],
          "inheritance": {
            "file": "IfExpandService"
          }
        },
        {
          "name": "expandable",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114],
          "inheritance": {
            "file": "IfExpandService"
          }
        }
      ],
      "methods": [
        {
          "name": "loadingStateChange",
          "args": [
            {
              "name": "state",
              "type": "ClrLoadingState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrLoadingState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setReplace",
          "args": [
            {
              "name": "replaceValue",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "jsdoctags": [
            {
              "name": "replaceValue",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "loadingStateChange",
          "args": [
            {
              "name": "state",
              "type": "ClrLoadingState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrLoadingState",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "IfExpandService"
          }
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "modifierKind": [114],
          "inheritance": {
            "file": "IfExpandService"
          }
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\nimport { IfExpandService } from '../../utils/conditional/if-expanded.service';\nimport { ClrLoadingState } from '../../utils/loading/loading';\n\n@Injectable()\nexport class DatagridIfExpandService extends IfExpandService {\n  // due to the es5 spec if the set is overridden on base class the getter must also be overridden\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  set expanded(value: boolean) {\n    value = !!value;\n    if (value !== this._expanded) {\n      this._expanded = value;\n      this._animate.next();\n      this._expandChange.next(value);\n    }\n  }\n\n  loadingStateChange(state: ClrLoadingState) {\n    super.loadingStateChange(state);\n    if (state !== ClrLoadingState.LOADING) {\n      this._animate.next();\n    }\n  }\n\n  private _replace: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  get replace(): Observable<boolean> {\n    return this._replace.asObservable();\n  }\n\n  setReplace(replaceValue: boolean) {\n    this._replace.next(replaceValue);\n  }\n\n  private _animate: Subject<boolean> = new Subject<boolean>();\n  get animate(): Observable<boolean> {\n    return this._animate.asObservable();\n  }\n}\n",
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 16
          }
        },
        "replace": {
          "name": "replace",
          "getSignature": {
            "name": "replace",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 37
          }
        },
        "animate": {
          "name": "animate",
          "getSignature": {
            "name": "animate",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 46
          }
        }
      },
      "extends": "IfExpandService",
      "type": "injectable"
    },
    {
      "name": "DatagridRenderOrganizer",
      "id": "injectable-DatagridRenderOrganizer-d1c2afc8e6727e821c84d75545beb3ca",
      "file": "src/clr-angular/data/datagrid/render/render-organizer.ts",
      "properties": [
        {
          "name": "_renderStep",
          "defaultValue": "new Subject<DatagridRenderStep>()",
          "type": "Subject<DatagridRenderStep>",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [113]
        },
        {
          "name": "alreadySized",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "filterRenderSteps",
          "args": [
            {
              "name": "step",
              "type": "DatagridRenderStep"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 20,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "step",
              "type": "DatagridRenderStep",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { DatagridRenderStep } from '../enums/render-step.enum';\n\n@Injectable()\nexport class DatagridRenderOrganizer {\n  protected _renderStep: Subject<DatagridRenderStep> = new Subject<DatagridRenderStep>();\n  public get renderStep(): Observable<DatagridRenderStep> {\n    return this._renderStep.asObservable();\n  }\n\n  public filterRenderSteps(step: DatagridRenderStep) {\n    return this.renderStep.pipe(filter(testStep => step === testStep));\n  }\n\n  private alreadySized = false;\n\n  public resize() {\n    this._renderStep.next(DatagridRenderStep.CALCULATE_MODE_ON);\n    if (this.alreadySized) {\n      this._renderStep.next(DatagridRenderStep.CLEAR_WIDTHS);\n    }\n    this._renderStep.next(DatagridRenderStep.COMPUTE_COLUMN_WIDTHS);\n    this._renderStep.next(DatagridRenderStep.ALIGN_COLUMNS);\n    this.alreadySized = true;\n    this._renderStep.next(DatagridRenderStep.CALCULATE_MODE_OFF);\n  }\n}\n",
      "accessors": {
        "renderStep": {
          "name": "renderStep",
          "getSignature": {
            "name": "renderStep",
            "type": "",
            "returnType": "Observable<DatagridRenderStep>",
            "line": 16
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DatalistIdService",
      "id": "injectable-DatalistIdService-378238a6190933ab01c61cbc26292af3",
      "file": "src/clr-angular/forms/datalist/providers/datalist-id.service.ts",
      "properties": [
        {
          "name": "_id",
          "defaultValue": "'clr-datalist-' + ++counter",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        },
        {
          "name": "_idChange",
          "defaultValue": "new BehaviorSubject(this._id)",
          "type": "BehaviorSubject<string>",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [112]
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nlet counter = 0;\n\n@Injectable()\nexport class DatalistIdService {\n  private _id = 'clr-datalist-' + ++counter;\n\n  get id(): string {\n    return this._id;\n  }\n\n  set id(value: string) {\n    this._id = value;\n    this._idChange.next(value);\n  }\n\n  private _idChange: BehaviorSubject<string> = new BehaviorSubject(this._id);\n  public get idChange(): Observable<string> {\n    return this._idChange.asObservable();\n  }\n}\n",
      "accessors": {
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "id",
            "type": "string",
            "returnType": "string",
            "line": 15
          }
        },
        "idChange": {
          "name": "idChange",
          "getSignature": {
            "name": "idChange",
            "type": "",
            "returnType": "Observable<string>",
            "line": 25
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DateFormControlService",
      "id": "injectable-DateFormControlService-bf88762c33eb91d9c14f7c6d3996daf5",
      "file": "src/clr-angular/forms/datepicker/providers/date-form-control.service.ts",
      "properties": [
        {
          "name": "_dirtyChange",
          "defaultValue": "new Subject<void>()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        },
        {
          "name": "_touchedChange",
          "defaultValue": "new Subject<void>()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        },
        {
          "name": "disabled",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "markAsDirty",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29
        },
        {
          "name": "markAsTouched",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25
        },
        {
          "name": "setDisabled",
          "args": [
            {
              "name": "state",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "jsdoctags": [
            {
              "name": "state",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable()\nexport class DateFormControlService {\n  private _touchedChange: Subject<void> = new Subject<void>();\n  public disabled;\n\n  get touchedChange(): Observable<void> {\n    return this._touchedChange.asObservable();\n  }\n\n  private _dirtyChange: Subject<void> = new Subject<void>();\n\n  get dirtyChange(): Observable<void> {\n    return this._dirtyChange.asObservable();\n  }\n\n  markAsTouched(): void {\n    this._touchedChange.next();\n  }\n\n  markAsDirty(): void {\n    this._dirtyChange.next();\n  }\n\n  // friendly wrapper\n  setDisabled(state: boolean) {\n    this.disabled = state;\n  }\n}\n",
      "accessors": {
        "touchedChange": {
          "name": "touchedChange",
          "getSignature": {
            "name": "touchedChange",
            "type": "",
            "returnType": "Observable<void>",
            "line": 15
          }
        },
        "dirtyChange": {
          "name": "dirtyChange",
          "getSignature": {
            "name": "dirtyChange",
            "type": "",
            "returnType": "Observable<void>",
            "line": 21
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DateIOService",
      "id": "injectable-DateIOService-0e8c6458a9a2758561d8bda2f9538af0",
      "file": "src/clr-angular/forms/datepicker/providers/date-io.service.ts",
      "properties": [
        {
          "name": "cldrLocaleDateFormat",
          "defaultValue": "DEFAULT_LOCALE_FORMAT",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [114]
        },
        {
          "name": "delimiters",
          "defaultValue": "['/', '/']",
          "type": "[string, string]",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        },
        {
          "name": "disabledDates",
          "defaultValue":
            "{\n    // This is the default range. It approximates the beginning of time to the end of time.\n    // Unless a minDate or maxDate is set with the native HTML5 api the range is all dates\n    // TODO: turn this into an Array of min/max ranges that allow configuration of multiple ranges.\n    minDate: new DayModel(0, 0, 1),\n    maxDate: new DayModel(9999, 11, 31),\n  }",
          "type": "DateRange",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [114]
        },
        {
          "name": "localeDisplayFormat",
          "defaultValue": "LITTLE_ENDIAN",
          "type": "InputDateDisplayFormat",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "extractDelimiters",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "modifierKind": [112]
        },
        {
          "name": "getDateValueFromDateString",
          "args": [
            {
              "name": "date",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "Date",
          "typeParameters": [],
          "line": 169,
          "jsdoctags": [
            {
              "name": "date",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeLocaleDisplayFormat",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "modifierKind": [112]
        },
        {
          "name": "isValidDate",
          "args": [
            {
              "name": "year",
              "type": "number"
            },
            {
              "name": "month",
              "type": "number"
            },
            {
              "name": "date",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 137,
          "description": "<p>Checks if the date is valid depending on the year and month provided.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "year",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "month",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "date",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isValidMonth",
          "args": [
            {
              "name": "month",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 130,
          "description": "<p>Checks if the month entered by the user is valid or not.\nNote: Month is 0 based.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "month",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setMaxDate",
          "args": [
            {
              "name": "date",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "date",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setMinDate",
          "args": [
            {
              "name": "date",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "date",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toLocaleDisplayFormatString",
          "args": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 101,
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "validateAndGetDate",
          "args": [
            {
              "name": "year",
              "type": "string"
            },
            {
              "name": "month",
              "type": "string"
            },
            {
              "name": "date",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "Date",
          "typeParameters": [],
          "line": 147,
          "description":
            "<p>Validates the parameters provided and returns the date.\nIf the parameters are not\nvalid then return null.\nNOTE: (Month here is 1 based since the user has provided that as an input)</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "year",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "month",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "date",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\nimport {\n  BIG_ENDIAN,\n  DEFAULT_LOCALE_FORMAT,\n  DELIMITER_REGEX,\n  InputDateDisplayFormat,\n  LITTLE_ENDIAN,\n  LITTLE_ENDIAN_REGEX,\n  MIDDLE_ENDIAN,\n  MIDDLE_ENDIAN_REGEX,\n  RTL_REGEX,\n  USER_INPUT_REGEX,\n} from '../utils/constants';\nimport { getNumberOfDaysInTheMonth, parseToFourDigitYear } from '../utils/date-utils';\n\nimport { LocaleHelperService } from './locale-helper.service';\nimport { DateRange } from '../interfaces/date-range.interface';\nimport { DayModel } from '../model/day.model';\n\n@Injectable()\nexport class DateIOService {\n  public disabledDates: DateRange = {\n    // This is the default range. It approximates the beginning of time to the end of time.\n    // Unless a minDate or maxDate is set with the native HTML5 api the range is all dates\n    // TODO: turn this into an Array of min/max ranges that allow configuration of multiple ranges.\n    minDate: new DayModel(0, 0, 1),\n    maxDate: new DayModel(9999, 11, 31),\n  };\n  public cldrLocaleDateFormat: string = DEFAULT_LOCALE_FORMAT;\n  private localeDisplayFormat: InputDateDisplayFormat = LITTLE_ENDIAN;\n  private delimiters: [string, string] = ['/', '/'];\n\n  constructor(private _localeHelperService: LocaleHelperService) {\n    this.cldrLocaleDateFormat = this._localeHelperService.localeDateFormat;\n    this.initializeLocaleDisplayFormat();\n  }\n\n  public setMinDate(date: string): void {\n    // NOTE: I'm expecting consumers to pass one of four things here:\n    //       A proper date string(2019-11-11), null, undefined or empty string ('')\n    if (!date) {\n      // attribute binding was removed, reset back to the beginning of time\n      this.disabledDates.minDate = new DayModel(0, 0, 1);\n    } else {\n      const [year, month, day] = date.split('-').map(n => parseInt(n, 10));\n      this.disabledDates.minDate = new DayModel(year, month - 1, day);\n    }\n  }\n\n  public setMaxDate(date: string): void {\n    // NOTE: I'm expecting consumers to pass one of four things here:\n    //       A proper date string(2019-11-11), null, undefined or empty string ('')\n    if (!date) {\n      // attribute binding was removed, reset forward to the end of time\n      this.disabledDates.maxDate = new DayModel(9999, 11, 31);\n    } else {\n      const [year, month, day] = date.split('-').map(n => parseInt(n, 10));\n      this.disabledDates.maxDate = new DayModel(year, month - 1, day);\n    }\n  }\n\n  private initializeLocaleDisplayFormat(): void {\n    const format: string = this.cldrLocaleDateFormat.toLocaleLowerCase();\n    if (LITTLE_ENDIAN_REGEX.test(format)) {\n      this.localeDisplayFormat = LITTLE_ENDIAN;\n    } else if (MIDDLE_ENDIAN_REGEX.test(format)) {\n      this.localeDisplayFormat = MIDDLE_ENDIAN;\n    } else {\n      // everything else is set to BIG-ENDIAN FORMAT\n      this.localeDisplayFormat = BIG_ENDIAN;\n    }\n    this.extractDelimiters();\n  }\n\n  private extractDelimiters(): void {\n    if (this.cldrLocaleDateFormat) {\n      // Sanitize Date Format. Remove RTL characters.\n      // FIXME: When we support RTL, remove this and handle it correctly.\n      const localeFormat: string = this.cldrLocaleDateFormat.replace(RTL_REGEX, '');\n      const delimiters: string[] = localeFormat.split(DELIMITER_REGEX);\n\n      // NOTE: The split from the CLDR date format should always result\n      // in an arary with 4 elements. The 1st and the 2nd values are the delimiters\n      // we will use in order.\n      // Eg: \"dd/MM/y\".split(/d+|m+|y+/i) results in [\"\", \"/\", \"/\", \"\"]\n      if (delimiters && delimiters.length === 4) {\n        this.delimiters = [delimiters[1], delimiters[2]];\n      } else {\n        console.error('Unexpected date format received. Delimiters extracted: ', delimiters);\n      }\n    }\n  }\n\n  toLocaleDisplayFormatString(date: Date): string {\n    if (date) {\n      if (isNaN(date.getTime())) {\n        return '';\n      }\n      const dateNo: number = date.getDate();\n      const monthNo: number = date.getMonth() + 1;\n      const dateStr: string = dateNo > 9 ? dateNo.toString() : '0' + dateNo;\n      const monthStr: string = monthNo > 9 ? monthNo.toString() : '0' + monthNo;\n      if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n        return dateStr + this.delimiters[0] + monthStr + this.delimiters[1] + date.getFullYear();\n      } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n        return monthStr + this.delimiters[0] + dateStr + this.delimiters[1] + date.getFullYear();\n      } else {\n        return date.getFullYear() + this.delimiters[0] + monthStr + this.delimiters[1] + dateStr;\n      }\n    }\n    return '';\n  }\n\n  get placeholderText(): string {\n    const format: [string, string, string] = this.localeDisplayFormat.format;\n    return format[0] + this.delimiters[0] + format[1] + this.delimiters[1] + format[2];\n  }\n\n  /**\n   * Checks if the month entered by the user is valid or not.\n   * Note: Month is 0 based.\n   */\n  private isValidMonth(month: number): boolean {\n    return month > -1 && month < 12;\n  }\n\n  /**\n   * Checks if the date is valid depending on the year and month provided.\n   */\n  private isValidDate(year: number, month: number, date: number): boolean {\n    return date > 0 && date <= getNumberOfDaysInTheMonth(year, month);\n  }\n\n  /**\n   * Validates the parameters provided and returns the date.\n   * If the parameters are not\n   * valid then return null.\n   * NOTE: (Month here is 1 based since the user has provided that as an input)\n   */\n  private validateAndGetDate(year: string, month: string, date: string): Date {\n    // I don't know whats wrong with the TS compiler. It throws an error if I write\n    // the below if statement. The error is:\n    // Operator '!==' cannot be applied to types '2' and '4'\n    // More info here: https://github.com/Microsoft/TypeScript/issues/12794#issuecomment-270342936\n    /*\n        if (year.length !== 2 || year.length !== 4) {\n            return null;\n        }\n        */\n\n    // Instead I have to write the logic like this x-(\n    const y: number = +year;\n    const m: number = +month - 1; // month is 0 based\n    const d: number = +date;\n    if (!this.isValidMonth(m) || !this.isValidDate(y, m, d)) {\n      return null;\n    }\n    const result: number = parseToFourDigitYear(y);\n    return result !== -1 ? new Date(result, m, d) : null;\n  }\n\n  getDateValueFromDateString(date: string): Date {\n    if (!date) {\n      return null;\n    }\n    const dateParts: string[] = date.match(USER_INPUT_REGEX);\n    if (!dateParts || dateParts.length !== 3) {\n      return null;\n    }\n    const [firstPart, secondPart, thirdPart] = dateParts;\n    if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n      // secondPart is month && firstPart is date\n      return this.validateAndGetDate(thirdPart, secondPart, firstPart);\n    } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n      // firstPart is month && secondPart is date\n      return this.validateAndGetDate(thirdPart, firstPart, secondPart);\n    } else {\n      // secondPart is month && thirdPart is date\n      return this.validateAndGetDate(firstPart, secondPart, thirdPart);\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService"
          }
        ],
        "line": 38,
        "jsdoctags": [
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "placeholderText": {
          "name": "placeholderText",
          "getSignature": {
            "name": "placeholderText",
            "type": "string",
            "returnType": "string",
            "line": 121
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DateNavigationService",
      "id": "injectable-DateNavigationService-c4719fb3f26da723644c489943ff6fdb",
      "file": "src/clr-angular/forms/datepicker/providers/date-navigation.service.ts",
      "properties": [
        {
          "name": "_displayedCalendar",
          "type": "CalendarModel",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [112]
        },
        {
          "name": "_displayedCalendarChange",
          "defaultValue": "new Subject<void>()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 128,
          "modifierKind": [112]
        },
        {
          "name": "_focusedDayChange",
          "defaultValue": "new Subject<DayModel>()",
          "type": "Subject<DayModel>",
          "optional": false,
          "description": "",
          "line": 146,
          "modifierKind": [112]
        },
        {
          "name": "_focusOnCalendarChange",
          "defaultValue": "new Subject<void>()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 137,
          "modifierKind": [112]
        },
        {
          "name": "_selectedDayChange",
          "defaultValue": "new Subject<DayModel>()",
          "type": "Subject<DayModel>",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112]
        },
        {
          "name": "_today",
          "type": "DayModel",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [112]
        },
        {
          "name": "_todaysFullDate",
          "defaultValue": "new Date()",
          "type": "Date",
          "optional": false,
          "description": "<p>Variable to store today&#39;s date.</p>\n",
          "line": 38,
          "modifierKind": [112]
        },
        {
          "name": "focusedDay",
          "type": "DayModel",
          "optional": false,
          "description": "",
          "line": 71,
          "modifierKind": [114]
        },
        {
          "name": "selectedDay",
          "type": "DayModel",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "changeMonth",
          "args": [
            {
              "name": "month",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "jsdoctags": [
            {
              "name": "month",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "changeYear",
          "args": [
            {
              "name": "year",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "jsdoctags": [
            {
              "name": "year",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "incrementFocusDay",
          "args": [
            {
              "name": "value",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118,
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeCalendar",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "description": "<p>Initializes the calendar based on the selected day.</p>\n"
        },
        {
          "name": "initializeTodaysDate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "modifierKind": [112]
        },
        {
          "name": "moveToCurrentMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111,
          "description": "<p>Moves the displayed calendar to the current month and year.</p>\n"
        },
        {
          "name": "moveToNextMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "description": "<p>Moves the displayed calendar to the next month.</p>\n"
        },
        {
          "name": "moveToPreviousMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "description": "<p>Moves the displayed calendar to the previous month.</p>\n"
        },
        {
          "name": "notifySelectedDayChanged",
          "args": [
            {
              "name": "dayModel",
              "type": "DayModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "description":
            "<p>Notifies that the selected day has changed so that the date can be emitted to the user.\nNote: Only to be called from day.ts</p>\n",
          "jsdoctags": [
            {
              "name": "dayModel",
              "type": "DayModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisplayedCalendar",
          "args": [
            {
              "name": "value",
              "type": "CalendarModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "value",
              "type": "CalendarModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description":
        "<p>This service is responsible for:</p>\n<ol>\n<li>Initializing the displayed calendar.</li>\n<li>Moving the calendar to the next, previous or current months</li>\n<li>Managing the focused and selected day models.</li>\n</ol>\n",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { CalendarModel } from '../model/calendar.model';\nimport { DayModel } from '../model/day.model';\n\n/**\n * This service is responsible for:\n * 1. Initializing the displayed calendar.\n * 2. Moving the calendar to the next, previous or current months\n * 3. Managing the focused and selected day models.\n */\n@Injectable()\nexport class DateNavigationService {\n  private _displayedCalendar: CalendarModel;\n\n  get displayedCalendar(): CalendarModel {\n    return this._displayedCalendar;\n  }\n\n  // not a setter because i want this to remain private\n  private setDisplayedCalendar(value: CalendarModel) {\n    if (!this._displayedCalendar.isEqual(value)) {\n      this._displayedCalendar = value;\n      this._displayedCalendarChange.next();\n    }\n  }\n\n  /**\n   * Variable to store today's date.\n   */\n  private _todaysFullDate: Date = new Date();\n  private _today: DayModel;\n\n  private initializeTodaysDate(): void {\n    this._todaysFullDate = new Date();\n    this._today = new DayModel(\n      this._todaysFullDate.getFullYear(),\n      this._todaysFullDate.getMonth(),\n      this._todaysFullDate.getDate()\n    );\n  }\n\n  get today(): DayModel {\n    return this._today;\n  }\n\n  public selectedDay: DayModel;\n\n  private _selectedDayChange: Subject<DayModel> = new Subject<DayModel>();\n\n  get selectedDayChange(): Observable<DayModel> {\n    return this._selectedDayChange.asObservable();\n  }\n\n  /**\n   * Notifies that the selected day has changed so that the date can be emitted to the user.\n   * Note: Only to be called from day.ts\n   */\n  notifySelectedDayChanged(dayModel: DayModel) {\n    this.selectedDay = dayModel;\n    this._selectedDayChange.next(dayModel);\n  }\n\n  public focusedDay: DayModel;\n\n  /**\n   * Initializes the calendar based on the selected day.\n   */\n  initializeCalendar(): void {\n    this.focusedDay = null; // Can be removed later on the store focus\n    this.initializeTodaysDate();\n    if (this.selectedDay) {\n      this._displayedCalendar = new CalendarModel(this.selectedDay.year, this.selectedDay.month);\n    } else {\n      this._displayedCalendar = new CalendarModel(this.today.year, this.today.month);\n    }\n  }\n\n  changeMonth(month: number): void {\n    this.setDisplayedCalendar(new CalendarModel(this._displayedCalendar.year, month));\n  }\n\n  changeYear(year: number): void {\n    this.setDisplayedCalendar(new CalendarModel(year, this._displayedCalendar.month));\n  }\n\n  /**\n   * Moves the displayed calendar to the next month.\n   */\n  moveToNextMonth(): void {\n    this.setDisplayedCalendar(this._displayedCalendar.nextMonth());\n  }\n\n  /**\n   * Moves the displayed calendar to the previous month.\n   */\n  moveToPreviousMonth(): void {\n    this.setDisplayedCalendar(this._displayedCalendar.previousMonth());\n  }\n\n  /**\n   * Moves the displayed calendar to the current month and year.\n   */\n  moveToCurrentMonth(): void {\n    if (!this.displayedCalendar.isDayInCalendar(this.today)) {\n      this.setDisplayedCalendar(new CalendarModel(this.today.year, this.today.month));\n    }\n    this._focusOnCalendarChange.next();\n  }\n\n  incrementFocusDay(value: number): void {\n    this.focusedDay = this.focusedDay.incrementBy(value);\n    if (this._displayedCalendar.isDayInCalendar(this.focusedDay)) {\n      this._focusedDayChange.next(this.focusedDay);\n    } else {\n      this.setDisplayedCalendar(new CalendarModel(this.focusedDay.year, this.focusedDay.month));\n    }\n    this._focusOnCalendarChange.next();\n  }\n\n  private _displayedCalendarChange: Subject<void> = new Subject<void>();\n\n  /**\n   * This observable lets the subscriber know that the displayed calendar has changed.\n   */\n  get displayedCalendarChange(): Observable<void> {\n    return this._displayedCalendarChange.asObservable();\n  }\n\n  private _focusOnCalendarChange: Subject<void> = new Subject<void>();\n\n  /**\n   * This observable lets the subscriber know that the focus should be applied on the calendar.\n   */\n  get focusOnCalendarChange(): Observable<void> {\n    return this._focusOnCalendarChange.asObservable();\n  }\n\n  private _focusedDayChange: Subject<DayModel> = new Subject<DayModel>();\n\n  /**\n   * This observable lets the subscriber know that the focused day in the displayed calendar has changed.\n   */\n  get focusedDayChange(): Observable<DayModel> {\n    return this._focusedDayChange.asObservable();\n  }\n}\n",
      "accessors": {
        "displayedCalendar": {
          "name": "displayedCalendar",
          "getSignature": {
            "name": "displayedCalendar",
            "type": "",
            "returnType": "CalendarModel",
            "line": 23
          }
        },
        "today": {
          "name": "today",
          "getSignature": {
            "name": "today",
            "type": "",
            "returnType": "DayModel",
            "line": 50
          }
        },
        "selectedDayChange": {
          "name": "selectedDayChange",
          "getSignature": {
            "name": "selectedDayChange",
            "type": "",
            "returnType": "Observable<DayModel>",
            "line": 58
          }
        },
        "displayedCalendarChange": {
          "name": "displayedCalendarChange",
          "getSignature": {
            "name": "displayedCalendarChange",
            "type": "",
            "returnType": "Observable<void>",
            "line": 133,
            "description": "<p>This observable lets the subscriber know that the displayed calendar has changed.</p>\n"
          }
        },
        "focusOnCalendarChange": {
          "name": "focusOnCalendarChange",
          "getSignature": {
            "name": "focusOnCalendarChange",
            "type": "",
            "returnType": "Observable<void>",
            "line": 142,
            "description":
              "<p>This observable lets the subscriber know that the focus should be applied on the calendar.</p>\n"
          }
        },
        "focusedDayChange": {
          "name": "focusedDayChange",
          "getSignature": {
            "name": "focusedDayChange",
            "type": "",
            "returnType": "Observable<DayModel>",
            "line": 151,
            "description":
              "<p>This observable lets the subscriber know that the focused day in the displayed calendar has changed.</p>\n"
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DatepickerEnabledService",
      "id": "injectable-DatepickerEnabledService-67da043ad56cf65a49ec91e798f0ad77",
      "file": "src/clr-angular/forms/datepicker/providers/datepicker-enabled.service.ts",
      "properties": [
        {
          "name": "_innerWidth",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        },
        {
          "name": "_isUserAgentMobile",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\nimport { DATEPICKER_ENABLE_BREAKPOINT } from '../../../utils/breakpoints/breakpoints';\nimport { MOBILE_USERAGENT_REGEX } from '../utils/constants';\n\n@Injectable()\nexport class DatepickerEnabledService {\n  constructor(@Inject(DOCUMENT) private _document: any) {\n    if (this._document) {\n      this._isUserAgentMobile = MOBILE_USERAGENT_REGEX.test(_document.defaultView.navigator.userAgent);\n      this._innerWidth = _document.defaultView.innerWidth;\n    }\n  }\n\n  private _isUserAgentMobile: boolean = false;\n  private _innerWidth: number;\n\n  /**\n   * Returns if the calendar should be active or not.\n   * If the user agent is mobile and the screen width is less than DATEPICKER_ACTIVE_BREAKPOINT\n   * then the calendar is inactive.\n   */\n  get isEnabled(): boolean {\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n    // What they recommend is:\n    //\"In summary, we recommend looking for the string 'Mobi'\n    // anywhere in the User Agent to detect a mobile device.\"\n    if (this._document) {\n      if (this._innerWidth < DATEPICKER_ENABLE_BREAKPOINT && this._isUserAgentMobile) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_document",
            "type": "any"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "_document",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "isEnabled": {
          "name": "isEnabled",
          "getSignature": {
            "name": "isEnabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30,
            "description":
              "<p>Returns if the calendar should be active or not.\nIf the user agent is mobile and the screen width is less than DATEPICKER_ACTIVE_BREAKPOINT\nthen the calendar is inactive.</p>\n"
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DatepickerFocusService",
      "id": "injectable-DatepickerFocusService-a5dce04244114717069492f6603cd198",
      "file": "src/clr-angular/forms/datepicker/providers/datepicker-focus.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "elementIsFocused",
          "args": [
            {
              "name": "element",
              "type": "HTMLInputElement"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 33,
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLInputElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focusCell",
          "args": [
            {
              "name": "elRef",
              "type": "ElementRef"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "jsdoctags": [
            {
              "name": "elRef",
              "type": "ElementRef",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focusInput",
          "args": [
            {
              "name": "element",
              "type": "HTMLInputElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLInputElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngZoneIsStableInBrowser",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 37,
          "modifierKind": [112]
        }
      ],
      "description": "<p>This service focuses the day that is focusable in the calendar.</p>\n",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport { ElementRef, Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\nimport { first, filter } from 'rxjs/operators';\n\n/**\n * This service focuses the day that is focusable in the calendar.\n */\n@Injectable()\nexport class DatepickerFocusService {\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private platformId: Object) {}\n\n  focusCell(elRef: ElementRef): void {\n    this._ngZone.runOutsideAngular(() => {\n      this.ngZoneIsStableInBrowser().subscribe(() => {\n        const focusEl = elRef.nativeElement.querySelector('[tabindex=\"0\"]');\n        if (focusEl) {\n          focusEl.focus();\n        }\n      });\n    });\n  }\n\n  focusInput(element: HTMLInputElement): void {\n    this._ngZone.runOutsideAngular(() => this.ngZoneIsStableInBrowser().subscribe(() => element.focus()));\n  }\n\n  elementIsFocused(element: HTMLInputElement) {\n    return isPlatformBrowser(this.platformId) && document.activeElement === element;\n  }\n\n  private ngZoneIsStableInBrowser() {\n    // Credit: Material: https://github.com/angular/material2/blob/master/src/lib/datepicker/calendar.ts\n    return this._ngZone.onStable.asObservable().pipe(first(), filter(() => isPlatformBrowser(this.platformId)));\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_ngZone",
            "type": "NgZone"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "_ngZone",
            "type": "NgZone",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "DetailService",
      "id": "injectable-DetailService-453d6b75ad169632da3e1b63616da72c",
      "file": "src/clr-angular/data/datagrid/providers/detail.service.ts",
      "properties": [
        {
          "name": "_enabled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        },
        {
          "name": "_state",
          "defaultValue": "new BehaviorSubject<boolean>(this.toggleState)",
          "type": "BehaviorSubject<boolean | null>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        },
        {
          "name": "button",
          "type": "HTMLButtonElement",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "cache",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [114]
        },
        {
          "name": "toggleState",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31
        },
        {
          "name": "isRowOpen",
          "args": [
            {
              "name": "item",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 59,
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [
            {
              "name": "item",
              "type": "any"
            },
            {
              "name": "button",
              "type": "HTMLButtonElement",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "button",
              "type": "HTMLButtonElement",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggle",
          "args": [
            {
              "name": "item",
              "type": "any"
            },
            {
              "name": "button",
              "type": "HTMLButtonElement",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "jsdoctags": [
            {
              "name": "item",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "button",
              "type": "HTMLButtonElement",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class DetailService {\n  private toggleState = false;\n  private _state: BehaviorSubject<boolean | null> = new BehaviorSubject<boolean>(this.toggleState);\n  private cache: any;\n  private _enabled = false;\n  private button: HTMLButtonElement;\n  public id: string;\n\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(state: boolean) {\n    this._enabled = state;\n  }\n\n  public get stateChange(): Observable<boolean | null> {\n    return this._state.asObservable();\n  }\n\n  close() {\n    this.toggleState = false;\n    this._state.next(this.toggleState);\n    if (this.button) {\n      this.button.focus();\n      this.button = null;\n    }\n  }\n\n  open(item: any, button?: HTMLButtonElement) {\n    this.cache = item;\n    this.button = button;\n    this.toggleState = true;\n    this._state.next(this.toggleState);\n  }\n\n  toggle(item: any, button?: HTMLButtonElement) {\n    if (this.isRowOpen(item) || !item) {\n      this.close();\n    } else {\n      this.open(item, button);\n    }\n  }\n\n  get state() {\n    return this.cache;\n  }\n\n  isRowOpen(item: any) {\n    return !!(this.toggleState && this.cache === item);\n  }\n\n  get isOpen() {\n    return this.toggleState === true;\n  }\n}\n",
      "accessors": {
        "enabled": {
          "name": "enabled",
          "setSignature": {
            "name": "enabled",
            "type": "void",
            "args": [
              {
                "name": "state",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "state",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "enabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "stateChange": {
          "name": "stateChange",
          "getSignature": {
            "name": "stateChange",
            "type": "",
            "returnType": "Observable<boolean | null>",
            "line": 27
          }
        },
        "state": {
          "name": "state",
          "getSignature": {
            "name": "state",
            "type": "",
            "returnType": "",
            "line": 55
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "",
            "returnType": "",
            "line": 63
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DisplayModeService",
      "id": "injectable-DisplayModeService-49954315d7e34f9c6ce7c96a71c81157",
      "file": "src/clr-angular/data/datagrid/providers/display-mode.service.ts",
      "properties": [
        {
          "name": "_view",
          "defaultValue": "new BehaviorSubject<DatagridDisplayMode>(\n    DatagridDisplayMode.DISPLAY\n  )",
          "type": "BehaviorSubject<DatagridDisplayMode>",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [113]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, BehaviorSubject, Subscription } from 'rxjs';\n\nimport { DatagridDisplayMode } from '../enums/display-mode.enum';\nimport { DatagridRenderStep } from '../enums/render-step.enum';\nimport { DatagridRenderOrganizer } from '../render/render-organizer';\n\n@Injectable()\nexport class DisplayModeService implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n  protected _view: BehaviorSubject<DatagridDisplayMode> = new BehaviorSubject<DatagridDisplayMode>(\n    DatagridDisplayMode.DISPLAY\n  );\n\n  constructor(renderOrganizer: DatagridRenderOrganizer) {\n    this.subscriptions.push(\n      renderOrganizer\n        .filterRenderSteps(DatagridRenderStep.CALCULATE_MODE_ON)\n        .subscribe(() => this._view.next(DatagridDisplayMode.CALCULATE))\n    );\n\n    this.subscriptions.push(\n      renderOrganizer\n        .filterRenderSteps(DatagridRenderStep.CALCULATE_MODE_OFF)\n        .subscribe(() => this._view.next(DatagridDisplayMode.DISPLAY))\n    );\n  }\n\n  public get view(): Observable<DatagridDisplayMode> {\n    return this._view.asObservable();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "renderOrganizer",
            "type": "DatagridRenderOrganizer"
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "renderOrganizer",
            "type": "DatagridRenderOrganizer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "view": {
          "name": "view",
          "getSignature": {
            "name": "view",
            "type": "",
            "returnType": "Observable<DatagridDisplayMode>",
            "line": 35
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DomAdapter",
      "id": "injectable-DomAdapter-1321bac9aee92ce1de8016ad33627e8d",
      "file": "src/clr-angular/utils/dom-adapter/dom-adapter.ts",
      "properties": [],
      "methods": [
        {
          "name": "clientRect",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "ClientRect",
          "typeParameters": [],
          "line": 36,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "computedHeight",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 32,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focus",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "minWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 48,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollBarWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 24,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 28,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "userDefinedWidth",
          "args": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 17,
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DomAdapter {\n  userDefinedWidth(element: HTMLElement): number {\n    element.classList.add('datagrid-cell-width-zero');\n    const userDefinedWidth = this.clientRect(element).width;\n    element.classList.remove('datagrid-cell-width-zero');\n    return userDefinedWidth;\n  }\n\n  scrollBarWidth(element: any) {\n    return element.offsetWidth - element.clientWidth;\n  }\n\n  scrollWidth(element: any) {\n    return element.scrollWidth || 0;\n  }\n\n  computedHeight(element: any): number {\n    return parseInt(getComputedStyle(element).getPropertyValue('height'), 10);\n  }\n\n  clientRect(element: any): ClientRect {\n    const elementClientRect = element.getBoundingClientRect();\n    return {\n      top: parseInt(elementClientRect.top, 10),\n      bottom: parseInt(elementClientRect.bottom, 10),\n      left: parseInt(elementClientRect.left, 10),\n      right: parseInt(elementClientRect.right, 10),\n      width: parseInt(elementClientRect.width, 10),\n      height: parseInt(elementClientRect.height, 10),\n    };\n  }\n\n  minWidth(element: any): number {\n    return parseInt(getComputedStyle(element).getPropertyValue('min-width'), 10);\n  }\n\n  focus(element: any): void {\n    element.focus();\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "DragAndDropEventBusService",
      "id": "injectable-DragAndDropEventBusService-677cce253829c43e4916cb886b431284",
      "file": "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.ts",
      "properties": [
        {
          "name": "dragEnd",
          "defaultValue": "new Subject<DragEventInterface<T>>()",
          "type": "Subject<DragEventInterface<T>>",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        },
        {
          "name": "dragMove",
          "defaultValue": "new Subject<DragEventInterface<T>>()",
          "type": "Subject<DragEventInterface<T>>",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "dragStart",
          "defaultValue": "new Subject<DragEventInterface<T>>()",
          "type": "Subject<DragEventInterface<T>>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        },
        {
          "name": "drop",
          "defaultValue": "new Subject<DragEventInterface<T>>()",
          "type": "Subject<DragEventInterface<T>>",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "broadcast",
          "args": [
            {
              "name": "event",
              "type": "DragEventInterface<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "jsdoctags": [
            {
              "name": "event",
              "type": "DragEventInterface<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { DragEventInterface, DragEventType } from '../interfaces/drag-event.interface';\n\n@Injectable({ providedIn: 'root' })\nexport class DragAndDropEventBusService<T> {\n  private dragStart: Subject<DragEventInterface<T>> = new Subject<DragEventInterface<T>>();\n  private dragMove: Subject<DragEventInterface<T>> = new Subject<DragEventInterface<T>>();\n  private dragEnd: Subject<DragEventInterface<T>> = new Subject<DragEventInterface<T>>();\n  private drop: Subject<DragEventInterface<T>> = new Subject<DragEventInterface<T>>();\n\n  get dragStarted(): Observable<DragEventInterface<T>> {\n    return this.dragStart.asObservable();\n  }\n\n  get dragMoved(): Observable<DragEventInterface<T>> {\n    return this.dragMove.asObservable();\n  }\n\n  get dragEnded(): Observable<DragEventInterface<T>> {\n    return this.dragEnd.asObservable();\n  }\n\n  get dropped(): Observable<DragEventInterface<T>> {\n    return this.drop.asObservable();\n  }\n\n  broadcast(event: DragEventInterface<T>): void {\n    switch (event.type) {\n      case DragEventType.DRAG_START:\n        this.dragStart.next(event);\n        break;\n      case DragEventType.DRAG_MOVE:\n        this.dragMove.next(event);\n        break;\n      case DragEventType.DRAG_END:\n        this.dragEnd.next(event);\n        break;\n      case DragEventType.DROP:\n        this.drop.next(event);\n        break;\n      default:\n        break;\n    }\n  }\n}\n",
      "accessors": {
        "dragStarted": {
          "name": "dragStarted",
          "getSignature": {
            "name": "dragStarted",
            "type": "",
            "returnType": "Observable<DragEventInterface<T>>",
            "line": 18
          }
        },
        "dragMoved": {
          "name": "dragMoved",
          "getSignature": {
            "name": "dragMoved",
            "type": "",
            "returnType": "Observable<DragEventInterface<T>>",
            "line": 22
          }
        },
        "dragEnded": {
          "name": "dragEnded",
          "getSignature": {
            "name": "dragEnded",
            "type": "",
            "returnType": "Observable<DragEventInterface<T>>",
            "line": 26
          }
        },
        "dropped": {
          "name": "dropped",
          "getSignature": {
            "name": "dropped",
            "type": "",
            "returnType": "Observable<DragEventInterface<T>>",
            "line": 30
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DragEventListenerService",
      "id": "injectable-DragEventListenerService-d80bf4a48f727369e90a00e7447f163f",
      "file": "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.ts",
      "properties": [
        {
          "name": "dragDataTransfer",
          "type": "T",
          "optional": true,
          "description": "",
          "line": 45,
          "modifierKind": [114]
        },
        {
          "name": "dragEnd",
          "defaultValue": "new Subject<DragEventInterface<T>>()",
          "type": "Subject<DragEventInterface<T>>",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [112]
        },
        {
          "name": "draggableEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "dragMove",
          "defaultValue": "new Subject<DragEventInterface<T>>()",
          "type": "Subject<DragEventInterface<T>>",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        },
        {
          "name": "dragStart",
          "defaultValue": "new Subject<DragEventInterface<T>>()",
          "type": "Subject<DragEventInterface<T>>",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        },
        {
          "name": "dropPointPosition",
          "type": "literal type",
          "optional": true,
          "description": "",
          "line": 50,
          "modifierKind": [114]
        },
        {
          "name": "ghostElement",
          "type": "any",
          "optional": true,
          "description": "",
          "line": 49,
          "modifierKind": [114]
        },
        {
          "name": "group",
          "type": "string | string[]",
          "optional": true,
          "description": "",
          "line": 46,
          "modifierKind": [114]
        },
        {
          "name": "hasDragStarted",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [112]
        },
        {
          "name": "initialPosition",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [112]
        },
        {
          "name": "listeners",
          "type": "(function)[]",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "nestedListeners",
          "type": "(function)[]",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "attachDragListeners",
          "args": [
            {
              "name": "draggableEl",
              "type": "Node"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "draggableEl",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "broadcast",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent | TouchEvent"
            },
            {
              "name": "eventType",
              "type": "DragEventType"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 148,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent | TouchEvent",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "eventType",
              "type": "DragEventType",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "customDragEvent",
          "args": [
            {
              "name": "element",
              "type": "Node"
            },
            {
              "name": "startOnEvent",
              "type": "string"
            },
            {
              "name": "moveOnEvent",
              "type": "string"
            },
            {
              "name": "endOnEvent",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "element",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "startOnEvent",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "moveOnEvent",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "endOnEvent",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "detachDragListeners",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "modifierKind": [114]
        },
        {
          "name": "generateDragEvent",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent | TouchEvent"
            },
            {
              "name": "eventType",
              "type": "DragEventType"
            }
          ],
          "optional": false,
          "returnType": "DragEventInterface<T>",
          "typeParameters": [],
          "line": 172,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent | TouchEvent",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "eventType",
              "type": "DragEventType",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getNativeEventObject",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent | TouchEvent"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 75,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent | TouchEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, NgZone, Renderer2 } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { DragEventInterface, DragEventType } from '../interfaces/drag-event.interface';\nimport { DragAndDropEventBusService } from './drag-and-drop-event-bus.service';\n\n@Injectable()\nexport class DragEventListenerService<T> {\n  private draggableEl: any;\n\n  // contains the starting events such as mousedown and touchstart\n  private listeners: (() => void)[];\n  // contains the nested events that happens after/inside the starting events\n  // such as selectstart, mousemove/touchmove, mouseup/touchend\n  private nestedListeners: (() => void)[];\n\n  private dragStart: Subject<DragEventInterface<T>> = new Subject<DragEventInterface<T>>();\n  private dragMove: Subject<DragEventInterface<T>> = new Subject<DragEventInterface<T>>();\n  private dragEnd: Subject<DragEventInterface<T>> = new Subject<DragEventInterface<T>>();\n\n  private hasDragStarted: boolean = false;\n\n  get dragStarted(): Observable<DragEventInterface<T>> {\n    return this.dragStart.asObservable();\n  }\n\n  get dragMoved(): Observable<DragEventInterface<T>> {\n    return this.dragMove.asObservable();\n  }\n\n  get dragEnded(): Observable<DragEventInterface<T>> {\n    return this.dragEnd.asObservable();\n  }\n\n  constructor(private ngZone: NgZone, private renderer: Renderer2, private eventBus: DragAndDropEventBusService<T>) {}\n\n  private initialPosition: { pageX: number; pageY: number };\n\n  // Draggable component sets these properties:\n  public dragDataTransfer?: T;\n  public group?: string | string[];\n\n  // DraggableGhost component sets these properties:\n  public ghostElement?: any;\n  public dropPointPosition?: { pageX: number; pageY: number };\n\n  public attachDragListeners(draggableEl: Node) {\n    this.draggableEl = draggableEl;\n    this.listeners = [\n      this.customDragEvent(this.draggableEl, 'mousedown', 'mousemove', 'mouseup'),\n      this.customDragEvent(this.draggableEl, 'touchstart', 'touchmove', 'touchend'),\n    ];\n  }\n\n  public detachDragListeners() {\n    if (this.listeners) {\n      this.listeners.map(event => event());\n    }\n\n    // In most cases, once users start dragging with mousedown/touchstart events,\n    // they will end dragging at one point with mouseup/touchend.\n    // However, there might be a few cases where mousedown/touchstart events get registered,\n    // but the draggable element gets removed before user ends dragging.\n    // In that case, we need to remove the attached listeners that happened during the mousedown/touchstart events.\n    if (this.nestedListeners) {\n      this.nestedListeners.map(event => event());\n    }\n  }\n\n  private getNativeEventObject(event: MouseEvent | TouchEvent): any {\n    if ((<TouchEvent>event).hasOwnProperty('changedTouches')) {\n      return (<TouchEvent>event).changedTouches[0];\n    } else {\n      return event;\n    }\n  }\n\n  private customDragEvent(element: Node, startOnEvent: string, moveOnEvent: string, endOnEvent: string): () => void {\n    return this.renderer.listen(element, startOnEvent, (startEvent: MouseEvent | TouchEvent) => {\n      // save the initial point to initialPosition\n      // this will be used to calculate how far the draggable has been dragged from its initial position\n      this.initialPosition = {\n        pageX: this.getNativeEventObject(startEvent).pageX,\n        pageY: this.getNativeEventObject(startEvent).pageY,\n      };\n\n      // Initialize nested listeners' property with a new empty array;\n      this.nestedListeners = [];\n\n      // This is needed to disable selection during dragging (especially in EDGE/IE11).\n      this.nestedListeners.push(\n        this.renderer.listen('document', 'selectstart', (selectEvent: Event) => {\n          selectEvent.preventDefault();\n          selectEvent.stopImmediatePropagation();\n        })\n      );\n\n      // Listen to mousemove/touchmove events outside of angular zone.\n      this.nestedListeners.push(\n        this.ngZone.runOutsideAngular(() => {\n          return this.renderer.listen('document', moveOnEvent, (moveEvent: MouseEvent | TouchEvent) => {\n            // Event.stopImmediatePropagation() is needed here to prevent nested draggables from getting dragged\n            // altogether. We shouldn't use Event.stopPropagation() here as we are listening to the events\n            // on the global element level.\n\n            // With Event.stopImmediatePropagation(), it registers the events sent from the inner most draggable\n            // first. Then immediately after that, it stops listening to the same type of events on the same\n            // element. So this will help us to not register the same events that would come from the parent\n            // level draggables eventually.\n\n            moveEvent.stopImmediatePropagation();\n\n            if (!this.hasDragStarted) {\n              this.hasDragStarted = true;\n              // Fire \"dragstart\"\n              this.broadcast(moveEvent, DragEventType.DRAG_START);\n            } else {\n              // Fire \"dragmove\"\n              this.broadcast(moveEvent, DragEventType.DRAG_MOVE);\n            }\n          });\n        })\n      );\n\n      // Listen to mouseup/touchend events.\n      this.nestedListeners.push(\n        this.renderer.listen('document', endOnEvent, (endEvent: MouseEvent | TouchEvent) => {\n          if (this.hasDragStarted) {\n            // Fire \"dragend\" only if dragstart is registered\n            this.hasDragStarted = false;\n            this.broadcast(endEvent, DragEventType.DRAG_END);\n          }\n\n          // We must remove the the nested listeners every time drag completes.\n          if (this.nestedListeners) {\n            this.nestedListeners.map(event => event());\n          }\n        })\n      );\n    });\n  }\n\n  private broadcast(event: MouseEvent | TouchEvent, eventType: DragEventType): void {\n    const dragEvent: DragEventInterface<T> = this.generateDragEvent(event, eventType);\n\n    switch (dragEvent.type) {\n      case DragEventType.DRAG_START:\n        this.dragStart.next(dragEvent);\n        break;\n      case DragEventType.DRAG_MOVE:\n        this.dragMove.next(dragEvent);\n        break;\n      case DragEventType.DRAG_END:\n        this.dragEnd.next(dragEvent);\n        break;\n      default:\n        break;\n    }\n\n    // The following properties are set after they are broadcasted to the DraggableGhost component.\n    dragEvent.ghostElement = this.ghostElement;\n    dragEvent.dropPointPosition = this.dropPointPosition;\n\n    this.eventBus.broadcast(dragEvent);\n  }\n\n  private generateDragEvent(event: MouseEvent | TouchEvent, eventType: DragEventType): DragEventInterface<T> {\n    const nativeEvent: any = this.getNativeEventObject(event);\n\n    return {\n      type: eventType,\n      dragPosition: {\n        pageX: nativeEvent.pageX,\n        pageY: nativeEvent.pageY,\n        moveX: nativeEvent.pageX - this.initialPosition.pageX,\n        moveY: nativeEvent.pageY - this.initialPosition.pageY,\n      },\n      group: this.group,\n      dragDataTransfer: this.dragDataTransfer,\n      ghostElement: this.ghostElement,\n    };\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ngZone",
            "type": "NgZone"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "eventBus",
            "type": "DragAndDropEventBusService<T>"
          }
        ],
        "line": 38,
        "jsdoctags": [
          {
            "name": "ngZone",
            "type": "NgZone",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "eventBus",
            "type": "DragAndDropEventBusService<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "dragStarted": {
          "name": "dragStarted",
          "getSignature": {
            "name": "dragStarted",
            "type": "",
            "returnType": "Observable<DragEventInterface<T>>",
            "line": 28
          }
        },
        "dragMoved": {
          "name": "dragMoved",
          "getSignature": {
            "name": "dragMoved",
            "type": "",
            "returnType": "Observable<DragEventInterface<T>>",
            "line": 32
          }
        },
        "dragEnded": {
          "name": "dragEnded",
          "getSignature": {
            "name": "dragEnded",
            "type": "",
            "returnType": "Observable<DragEventInterface<T>>",
            "line": 36
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DraggableSnapshotService",
      "id": "injectable-DraggableSnapshotService-9c3f5354bb4725f8c38241fefba3fe2b",
      "file": "src/clr-angular/utils/drag-and-drop/providers/draggable-snapshot.service.ts",
      "properties": [
        {
          "name": "draggableElClientRect",
          "type": "ClientRect",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "snapshotDragEvent",
          "type": "DragEventInterface<T>",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "capture",
          "args": [
            {
              "name": "el",
              "type": "Node"
            },
            {
              "name": "event",
              "type": "DragEventInterface<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "el",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "event",
              "type": "DragEventInterface<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "discard",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { DomAdapter } from '../../dom-adapter/dom-adapter';\nimport { DragEventInterface } from '../interfaces/drag-event.interface';\n\n// This service is used to capture the state of clrDraggable element\n// at a certain event and passes it to clrDraggableGhost component.\n@Injectable()\nexport class DraggableSnapshotService<T> {\n  constructor(private domAdapter: DomAdapter) {}\n\n  private draggableElClientRect: ClientRect;\n  private snapshotDragEvent: DragEventInterface<T>;\n\n  public capture(el: Node, event: DragEventInterface<T>): void {\n    this.draggableElClientRect = this.domAdapter.clientRect(el);\n    this.snapshotDragEvent = event;\n  }\n  public discard(): void {\n    delete this.draggableElClientRect;\n    delete this.snapshotDragEvent;\n  }\n  get hasDraggableState(): boolean {\n    return !!this.snapshotDragEvent && !!this.draggableElClientRect;\n  }\n  get clientRect(): ClientRect {\n    return this.draggableElClientRect;\n  }\n  get dragEvent(): DragEventInterface<T> {\n    return this.snapshotDragEvent;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "hasDraggableState": {
          "name": "hasDraggableState",
          "getSignature": {
            "name": "hasDraggableState",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "clientRect": {
          "name": "clientRect",
          "getSignature": {
            "name": "clientRect",
            "type": "",
            "returnType": "ClientRect",
            "line": 30
          }
        },
        "dragEvent": {
          "name": "dragEvent",
          "getSignature": {
            "name": "dragEvent",
            "type": "",
            "returnType": "DragEventInterface<T>",
            "line": 33
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DragHandleRegistrarService",
      "id": "injectable-DragHandleRegistrarService-2fb97ff2adf5ef92367aeae517eea91f",
      "file": "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.ts",
      "properties": [
        {
          "name": "_customHandleEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        },
        {
          "name": "_defaultHandleEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "makeElementHandle",
          "args": [
            {
              "name": "el",
              "type": "Node"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "el",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerCustomHandle",
          "args": [
            {
              "name": "el",
              "type": "Node"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "el",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "unregisterCustomHandle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, Renderer2 } from '@angular/core';\n\nimport { DragEventListenerService } from './drag-event-listener.service';\n\n// This provider registers the drag handle element.\n// When it registers a element as a drag handle, it attaches that element to the listeners from ClrDragEventListener.\n// Also, it adds the \"drag-handle\" css class to the registered element through Renderer.\n@Injectable()\nexport class DragHandleRegistrarService<T> {\n  private _customHandleEl: any;\n  private _defaultHandleEl: any;\n\n  get defaultHandleEl() {\n    return this._defaultHandleEl;\n  }\n\n  set defaultHandleEl(el: Node) {\n    this._defaultHandleEl = el; // defaultHandleEl will be usually the clrDraggable element.\n\n    // If the customHandleEl has been registered,\n    // don't make the defaultHandleEl the drag handle yet until the customHandleEl is unregistered.\n    if (!this._customHandleEl) {\n      this.makeElementHandle(this._defaultHandleEl);\n    }\n  }\n\n  constructor(private dragEventListener: DragEventListenerService<T>, private renderer: Renderer2) {}\n\n  private makeElementHandle(el: Node) {\n    if (this._defaultHandleEl && this._defaultHandleEl !== el) {\n      // Before making an element the custom handle element,\n      // we should remove the existing drag-handle class from the draggable element.\n      this.renderer.removeClass(this._defaultHandleEl, 'drag-handle');\n    }\n    this.dragEventListener.attachDragListeners(el);\n    this.renderer.addClass(el, 'drag-handle');\n  }\n\n  get customHandleEl() {\n    return this._customHandleEl;\n  }\n\n  public registerCustomHandle(el: Node) {\n    this.dragEventListener.detachDragListeners(); // removes the existing listeners\n    this._customHandleEl = el;\n    this.makeElementHandle(this._customHandleEl);\n  }\n\n  public unregisterCustomHandle() {\n    this.dragEventListener.detachDragListeners(); // removes the existing listeners\n    this.renderer.removeClass(this._customHandleEl, 'drag-handle');\n    delete this._customHandleEl;\n    // if default handle is set, make that handle\n    if (this._defaultHandleEl) {\n      this.makeElementHandle(this._defaultHandleEl);\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          }
        ],
        "line": 30,
        "jsdoctags": [
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "defaultHandleEl": {
          "name": "defaultHandleEl",
          "setSignature": {
            "name": "defaultHandleEl",
            "type": "void",
            "args": [
              {
                "name": "el",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "el",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "defaultHandleEl",
            "type": "",
            "returnType": "",
            "line": 18
          }
        },
        "customHandleEl": {
          "name": "customHandleEl",
          "getSignature": {
            "name": "customHandleEl",
            "type": "",
            "returnType": "",
            "line": 44
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DropdownFocusHandler",
      "id": "injectable-DropdownFocusHandler-db0cbb99da15c1f625de2ad67ad225da",
      "file": "src/clr-angular/popover/dropdown/providers/dropdown-focus-handler.service.ts",
      "properties": [
        {
          "name": "_container",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [112]
        },
        {
          "name": "_trigger",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [112]
        },
        {
          "name": "_unlistenFuncs",
          "defaultValue": "[]",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [112]
        },
        {
          "name": "children",
          "type": "ReplaySubject<FocusableItem[]>",
          "optional": false,
          "description": "",
          "line": 178,
          "modifierKind": [112]
        },
        {
          "name": "down",
          "type": "Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 180
        },
        {
          "name": "focusBackOnTrigger",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [112]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "right",
          "type": "Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 179
        },
        {
          "name": "up",
          "type": "Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 181
        }
      ],
      "methods": [
        {
          "name": "activate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172
        },
        {
          "name": "addChildren",
          "args": [
            {
              "name": "children",
              "type": "FocusableItem[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 200,
          "jsdoctags": [
            {
              "name": "children",
              "type": "FocusableItem[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "blur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 166
        },
        {
          "name": "closeAndGetThis",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 186,
          "modifierKind": [112]
        },
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 161
        },
        {
          "name": "handleRootFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "description":
            "<p>Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed</p>\n"
        },
        {
          "name": "moveToFirstItemWhenOpen",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "description":
            "<p>If the dropdown was opened by clicking on the trigger, we automatically move to the first item</p>\n"
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 208
        },
        {
          "name": "openAndGetChildren",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 183,
          "modifierKind": [112]
        },
        {
          "name": "resetChildren",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 190
        }
      ],
      "description": "",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, Optional, PLATFORM_ID, Renderer2, SkipSelf } from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { ClrPopoverToggleService } from '../../../utils/popover/providers/popover-toggle.service';\nimport { customFocusableItemProvider } from '../../../utils/focus/focusable-item/custom-focusable-item-provider';\nimport { UNIQUE_ID } from '../../../utils/id-generator/id-generator.service';\nimport { ArrowKeyDirection } from '../../../utils/focus/arrow-key-direction.enum';\nimport { FocusService } from '../../../utils/focus/focus.service';\nimport { FocusableItem } from '../../../utils/focus/focusable-item/focusable-item';\nimport { linkParent, linkVertical } from '../../../utils/focus/focusable-item/linkers';\nimport { wrapObservable } from '../../../utils/focus/wrap-observable';\n\n@Injectable()\nexport class DropdownFocusHandler implements FocusableItem {\n  constructor(\n    @Inject(UNIQUE_ID) public id: string,\n    private renderer: Renderer2,\n    @SkipSelf()\n    @Optional()\n    private parent: DropdownFocusHandler,\n    private toggleService: ClrPopoverToggleService,\n    private focusService: FocusService,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    this.resetChildren();\n    this.moveToFirstItemWhenOpen();\n    if (!this.parent) {\n      this.handleRootFocus();\n    }\n  }\n\n  private _unlistenFuncs = [];\n\n  /**\n   * If the dropdown was opened by clicking on the trigger, we automatically move to the first item\n   */\n  moveToFirstItemWhenOpen() {\n    this.toggleService.openChange.subscribe(open => {\n      if (open && this.toggleService.originalEvent) {\n        // Even if we properly waited for ngAfterViewInit, the container still wouldn't be attached to the DOM.\n        // So setTimeout is the only way to wait for the container to be ready to move focus to first item.\n        setTimeout(() => {\n          this.focusService.moveTo(this);\n          if (this.parent) {\n            this.focusService.move(ArrowKeyDirection.RIGHT);\n          } else {\n            this.focusService.move(ArrowKeyDirection.DOWN);\n          }\n        });\n      }\n    });\n  }\n\n  private focusBackOnTrigger = false;\n\n  /**\n   * Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed\n   */\n  handleRootFocus() {\n    this.toggleService.openChange.subscribe(open => {\n      if (!open) {\n        // We reset the state of the focus service both on initialization and when closing.\n        this.focusService.reset(this);\n        // But we only actively focus the trigger when closing, not on initialization.\n        if (this.focusBackOnTrigger) {\n          this.focus();\n        }\n      }\n      this.focusBackOnTrigger = open;\n    });\n  }\n\n  private _trigger: HTMLElement;\n  get trigger() {\n    return this._trigger;\n  }\n  set trigger(el: HTMLElement) {\n    this._trigger = el;\n    this.renderer.setAttribute(el, 'id', this.id);\n\n    if (this.parent) {\n      this._unlistenFuncs.push(\n        this.renderer.listen(el, 'keydown.arrowright', event => this.toggleService.toggleWithEvent(event))\n      );\n    } else {\n      this._unlistenFuncs.push(\n        this.renderer.listen(el, 'keydown.arrowup', event => this.toggleService.toggleWithEvent(event))\n      );\n      this._unlistenFuncs.push(\n        this.renderer.listen(el, 'keydown.arrowdown', event => this.toggleService.toggleWithEvent(event))\n      );\n      this.focusService.listenToArrowKeys(el);\n    }\n  }\n\n  private _container: HTMLElement;\n  get container() {\n    return this._container;\n  }\n  set container(el: HTMLElement) {\n    this._container = el;\n\n    // whether root container or not, tab key should always toggle (i.e. close) the container\n    this._unlistenFuncs.push(\n      this.renderer.listen(el, 'keydown.tab', event => this.toggleService.toggleWithEvent(event))\n    );\n\n    if (this.parent) {\n      // if it's a nested container, pressing esc has the same effect as pressing left key, which closes the current\n      // popup and moves up to its parent. Here, we stop propagation so that the parent container\n      // doesn't receive the esc keydown\n      this._unlistenFuncs.push(\n        this.renderer.listen(el, 'keydown.esc', event => {\n          this.focusService.move(ArrowKeyDirection.LEFT);\n          event.stopPropagation();\n        })\n      );\n    } else {\n      // The root container is the only one we register to the focus service, others do not need focus\n      this.focusService.registerContainer(el);\n\n      // The root container will simply close the container when esc key is pressed\n      this._unlistenFuncs.push(\n        this.renderer.listen(el, 'keydown.esc', event => this.toggleService.toggleWithEvent(event))\n      );\n\n      // When the user moves focus outside of the menu, we close the dropdown\n      this._unlistenFuncs.push(\n        this.renderer.listen(el, 'blur', event => {\n          // we clear out any existing focus on the items\n          this.children.pipe(take(1)).subscribe(items => items.forEach(item => item.blur()));\n\n          // event.relatedTarget is null in IE11. In that case we use document.activeElement which correctly points\n          // to the element we want to check. Note that other browsers might point document.activeElement to the\n          // wrong element. This is ok, because all the other browsers we support relies on event.relatedTarget.\n          const target = event.relatedTarget || document.activeElement;\n\n          // If the user clicks on an item which triggers the blur, we don't want to close it since it may open a submenu.\n          // In the case of needing to close it (i.e. user selected an item and the dropdown menu is set to close on\n          // selection), dropdown-item.ts handles it.\n          if (target && isPlatformBrowser(this.platformId)) {\n            if (el.contains(target) || target === this.trigger) {\n              return;\n            }\n          }\n          // We let the user move focus to where the want, we don't force the focus back on the trigger\n          this.focusBackOnTrigger = false;\n          this.toggleService.open = false;\n        })\n      );\n    }\n  }\n\n  focus() {\n    if (this.trigger && isPlatformBrowser(this.platformId)) {\n      this.trigger.focus();\n    }\n  }\n  blur() {\n    if (this.trigger && isPlatformBrowser(this.platformId)) {\n      this.trigger.blur();\n    }\n  }\n\n  activate() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.trigger.click();\n    }\n  }\n\n  private children: ReplaySubject<FocusableItem[]>;\n  right?: Observable<FocusableItem>;\n  down?: Observable<FocusableItem>;\n  up?: Observable<FocusableItem>;\n\n  private openAndGetChildren() {\n    return wrapObservable(this.children, () => (this.toggleService.open = true));\n  }\n  private closeAndGetThis() {\n    return wrapObservable(of(this), () => (this.toggleService.open = false));\n  }\n\n  resetChildren() {\n    this.children = new ReplaySubject<FocusableItem[]>(1);\n    if (this.parent) {\n      this.right = this.openAndGetChildren().pipe(map(all => all[0]));\n    } else {\n      this.down = this.openAndGetChildren().pipe(map(all => all[0]));\n      this.up = this.openAndGetChildren().pipe(map(all => all[all.length - 1]));\n    }\n  }\n\n  addChildren(children: FocusableItem[]) {\n    linkVertical(children);\n    if (this.parent) {\n      linkParent(children, this.closeAndGetThis(), ArrowKeyDirection.LEFT);\n    }\n    this.children.next(children);\n  }\n\n  ngOnDestroy() {\n    this._unlistenFuncs.forEach((unlisten: () => void) => unlisten());\n    this.focusService.detachListeners();\n  }\n}\n\nexport const DROPDOWN_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(DropdownFocusHandler);\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "parent",
            "type": "DropdownFocusHandler"
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "focusService",
            "type": "FocusService"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "id",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parent",
            "type": "DropdownFocusHandler",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusService",
            "type": "FocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "args": [
              {
                "name": "el",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "el",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "",
            "line": 81
          }
        },
        "container": {
          "name": "container",
          "setSignature": {
            "name": "container",
            "type": "void",
            "args": [
              {
                "name": "el",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 107,
            "jsdoctags": [
              {
                "name": "el",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "container",
            "type": "",
            "returnType": "",
            "line": 104
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ExpandableRowsCount",
      "id": "injectable-ExpandableRowsCount-ff3cc28cd9b7ceffc82a2bbb10e71aa3",
      "file": "src/clr-angular/data/datagrid/providers/global-expandable-rows.ts",
      "properties": [
        {
          "name": "expandableCount",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "register",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "modifierKind": [114]
        },
        {
          "name": "unregister",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { DetailService } from './detail.service';\n\n@Injectable()\nexport class ExpandableRowsCount {\n  constructor(private detailService: DetailService) {}\n\n  private expandableCount = 0;\n\n  public register() {\n    this.expandableCount++;\n  }\n\n  public unregister() {\n    this.expandableCount--;\n  }\n\n  /**\n   * false means no rows with action\n   * check if details are on, and disable rows entirely\n   */\n  public get hasExpandableRow(): boolean {\n    return !this.detailService.enabled && this.expandableCount > 0;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "detailService",
            "type": "DetailService"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "hasExpandableRow": {
          "name": "hasExpandableRow",
          "getSignature": {
            "name": "hasExpandableRow",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27,
            "description":
              "<p>false means no rows with action\ncheck if details are on, and disable rows entirely</p>\n"
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "FiltersProvider",
      "id": "injectable-FiltersProvider-6a35fa82478eccf8f9ccd0bdf593fa40",
      "file": "src/clr-angular/data/datagrid/providers/filters.ts",
      "properties": [
        {
          "name": "_all",
          "defaultValue": "[]",
          "type": "RegisteredFilter<T, ClrDatagridFilterInterface<T>>[]",
          "optional": false,
          "description": "<p>List of all filters, whether they&#39;re active or not</p>\n",
          "line": 30,
          "modifierKind": [112]
        },
        {
          "name": "_change",
          "defaultValue": "new Subject<ClrDatagridFilterInterface<T>[]>()",
          "type": "",
          "optional": false,
          "description":
            "<p>This subject is the list of filters that changed last, not the whole list.\nWe emit a list rather than just one filter to allow batch changes to several at once.</p>\n",
          "line": 21,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 89,
          "description": "<p>Accepts an item if it is accepted by all currently active filters</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "add",
          "args": [
            {
              "name": "filter",
              "type": "F"
            }
          ],
          "optional": false,
          "returnType": "RegisteredFilter<T, F>",
          "typeParameters": ["F"],
          "line": 62,
          "description": "<p>Registers a filter, and returns a deregistration function</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "filter",
              "type": "F",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getActiveFilters",
          "args": [],
          "optional": false,
          "returnType": "ClrDatagridFilterInterface[]",
          "typeParameters": [],
          "line": 49,
          "description": "<p>Returns a list of all currently active filters</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "hasActiveFilters",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 35,
          "description": "<p>Tests if at least one filter is currently active</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "resetPageAndEmitFilterChange",
          "args": [
            {
              "name": "filters",
              "type": "ClrDatagridFilterInterface<T>[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "filters",
              "type": "ClrDatagridFilterInterface<T>[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nimport { ClrDatagridFilterInterface } from '../interfaces/filter.interface';\nimport { Page } from './page';\nimport { StateDebouncer } from './state-debouncer.provider';\n\n@Injectable()\nexport class FiltersProvider<T = any> {\n  constructor(private _page: Page, private stateDebouncer: StateDebouncer) {}\n  /**\n   * This subject is the list of filters that changed last, not the whole list.\n   * We emit a list rather than just one filter to allow batch changes to several at once.\n   */\n  private _change = new Subject<ClrDatagridFilterInterface<T>[]>();\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get change(): Observable<ClrDatagridFilterInterface<T>[]> {\n    return this._change.asObservable();\n  }\n\n  /**\n   * List of all filters, whether they're active or not\n   */\n  private _all: RegisteredFilter<T, ClrDatagridFilterInterface<T>>[] = [];\n\n  /**\n   * Tests if at least one filter is currently active\n   */\n  public hasActiveFilters(): boolean {\n    // We do not use getActiveFilters() because this function will be called much more often\n    // and stopping the loop early might be relevant.\n    for (const { filter } of this._all) {\n      if (filter && filter.isActive()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns a list of all currently active filters\n   */\n  public getActiveFilters(): ClrDatagridFilterInterface<T>[] {\n    const ret: ClrDatagridFilterInterface<T>[] = [];\n    for (const { filter } of this._all) {\n      if (filter && filter.isActive()) {\n        ret.push(filter);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Registers a filter, and returns a deregistration function\n   */\n  public add<F extends ClrDatagridFilterInterface<T>>(filter: F): RegisteredFilter<T, F> {\n    const subscription = filter.changes.subscribe(() => this.resetPageAndEmitFilterChange([filter]));\n    let hasUnregistered = false;\n    const registered = new RegisteredFilter(filter, () => {\n      if (hasUnregistered) {\n        return;\n      }\n      subscription.unsubscribe();\n      const matchIndex = this._all.findIndex(item => item.filter === filter);\n      if (matchIndex >= 0) {\n        this._all.splice(matchIndex, 1);\n      }\n      if (filter.isActive()) {\n        this.resetPageAndEmitFilterChange([]);\n      }\n      hasUnregistered = true;\n    });\n    this._all.push(registered);\n    if (filter.isActive()) {\n      this.resetPageAndEmitFilterChange([filter]);\n    }\n    return registered;\n  }\n\n  /**\n   * Accepts an item if it is accepted by all currently active filters\n   */\n  public accepts(item: T): boolean {\n    for (const { filter } of this._all) {\n      if (filter && filter.isActive() && !filter.accepts(item)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private resetPageAndEmitFilterChange(filters: ClrDatagridFilterInterface<T>[]) {\n    this.stateDebouncer.changeStart();\n    // filtering may change the page number such that current page number doesn't exist in the filtered dataset.\n    // So here we always set the current page to 1 so that it'll fetch first page's data with the given filter.\n    this._page.current = 1;\n    this._change.next(filters);\n    this.stateDebouncer.changeDone();\n  }\n}\n\nexport class RegisteredFilter<T, F extends ClrDatagridFilterInterface<T>> {\n  constructor(public filter: F, public unregister: () => void) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_page",
            "type": "Page"
          },
          {
            "name": "stateDebouncer",
            "type": "StateDebouncer"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "_page",
            "type": "Page",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stateDebouncer",
            "type": "StateDebouncer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "change": {
          "name": "change",
          "getSignature": {
            "name": "change",
            "type": "",
            "returnType": "Observable<ClrDatagridFilterInterface[]>",
            "line": 23
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "FocusService",
      "id": "injectable-FocusService-14d5c81b4a62d44d7898490dc4a880bd",
      "file": "src/clr-angular/utils/focus/focus.service.ts",
      "properties": [
        {
          "name": "_current",
          "type": "FocusableItem",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [112]
        },
        {
          "name": "_unlistenFuncs",
          "defaultValue": "[]",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "activateCurrent",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 87
        },
        {
          "name": "detachListeners",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "modifierKind": [114]
        },
        {
          "name": "listenToArrowKeys",
          "args": [
            {
              "name": "el",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "jsdoctags": [
            {
              "name": "el",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "move",
          "args": [
            {
              "name": "direction",
              "type": "ArrowKeyDirection"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 68,
          "jsdoctags": [
            {
              "name": "direction",
              "type": "ArrowKeyDirection",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "moveTo",
          "args": [
            {
              "name": "item",
              "type": "FocusableItem"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "jsdoctags": [
            {
              "name": "item",
              "type": "FocusableItem",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerContainer",
          "args": [
            {
              "name": "el",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "jsdoctags": [
            {
              "name": "el",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "reset",
          "args": [
            {
              "name": "first",
              "type": "FocusableItem"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "jsdoctags": [
            {
              "name": "first",
              "type": "FocusableItem",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, Optional, Renderer2, SkipSelf } from '@angular/core';\nimport { isObservable, of } from 'rxjs';\n\nimport { ArrowKeyDirection } from './arrow-key-direction.enum';\nimport { FocusableItem } from './focusable-item/focusable-item';\n\n@Injectable()\nexport class FocusService {\n  constructor(private renderer: Renderer2) {}\n\n  private _unlistenFuncs = [];\n  private _current: FocusableItem;\n  public get current() {\n    return this._current;\n  }\n\n  reset(first: FocusableItem) {\n    this._current = first;\n  }\n\n  listenToArrowKeys(el: HTMLElement) {\n    // The following listeners return false when there was an action to take for the key pressed,\n    // in order to prevent the default behavior of that key.\n    this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowup', event => !this.move(ArrowKeyDirection.UP)));\n    this._unlistenFuncs.push(\n      this.renderer.listen(el, 'keydown.arrowdown', event => !this.move(ArrowKeyDirection.DOWN))\n    );\n    this._unlistenFuncs.push(\n      this.renderer.listen(el, 'keydown.arrowleft', event => !this.move(ArrowKeyDirection.LEFT))\n    );\n    this._unlistenFuncs.push(\n      this.renderer.listen(el, 'keydown.arrowright', event => !this.move(ArrowKeyDirection.RIGHT))\n    );\n  }\n\n  registerContainer(el: HTMLElement) {\n    this.renderer.setAttribute(el, 'tabindex', '0');\n    this.listenToArrowKeys(el);\n    // The following listeners return false when there was an action to take for the key pressed,\n    // in order to prevent the default behavior of that key.\n    this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.space', () => !this.activateCurrent()));\n    this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.enter', () => !this.activateCurrent()));\n  }\n\n  moveTo(item: FocusableItem) {\n    /**\n     * Make sure that item is not undefined,\n     * This is safety net in the case that someone sometime decide to\n     * call this method without having FocusableItem.\n     */\n    if (item === undefined) {\n      return;\n    }\n\n    if (this.current) {\n      this.current.blur();\n    }\n    item.focus();\n    this._current = item;\n  }\n\n  move(direction: ArrowKeyDirection): boolean {\n    let moved = false;\n    if (this.current) {\n      const next = this.current[direction];\n      if (next) {\n        // Turning the value into an Observable isn't great, but it's the fastest way to avoid code duplication.\n        // If performance ever matters for this, we can refactor using additional private methods.\n        const nextObs = isObservable(next) ? next : of(next);\n        nextObs.subscribe(item => {\n          if (item) {\n            this.moveTo(item);\n            moved = true;\n          }\n        });\n      }\n    }\n    return moved;\n  }\n\n  activateCurrent() {\n    if (this.current && this.current.activate) {\n      this.current.activate();\n      return true;\n    }\n    return false;\n  }\n\n  public detachListeners() {\n    this._unlistenFuncs.forEach((unlisten: () => void) => unlisten());\n  }\n}\n\nexport function clrFocusServiceFactory(existing: FocusService, renderer: Renderer2) {\n  return existing || new FocusService(renderer);\n}\n\nexport const FOCUS_SERVICE_PROVIDER = {\n  provide: FocusService,\n  useFactory: clrFocusServiceFactory,\n  deps: [[new Optional(), new SkipSelf(), FocusService], Renderer2],\n};\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "current": {
          "name": "current",
          "getSignature": {
            "name": "current",
            "type": "",
            "returnType": "",
            "line": 19
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "FocusService",
      "id": "injectable-FocusService-aa2c32a21ea8e8330a9844bd0532b62b-1",
      "file": "src/clr-angular/forms/common/providers/focus.service.ts",
      "properties": [
        {
          "name": "_focused",
          "defaultValue": "new BehaviorSubject(false)",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class FocusService {\n  private _focused: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  get focusChange(): Observable<boolean> {\n    return this._focused.asObservable();\n  }\n  set focused(state: boolean) {\n    this._focused.next(state);\n  }\n}\n",
      "accessors": {
        "focusChange": {
          "name": "focusChange",
          "getSignature": {
            "name": "focusChange",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 13
          }
        },
        "focused": {
          "name": "focused",
          "setSignature": {
            "name": "focused",
            "type": "void",
            "args": [
              {
                "name": "state",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "state",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "type": "injectable",
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "FocusService-1"
    },
    {
      "name": "FocusTrapTracker",
      "id": "injectable-FocusTrapTracker-a5513c4a9c9c0e6ad31d507c2421495d",
      "file": "src/clr-angular/utils/focus-trap/focus-trap-tracker.service.ts",
      "properties": [
        {
          "name": "_current",
          "type": "FocusTrapDirective",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        },
        {
          "name": "_previousFocusTraps",
          "defaultValue": "[]",
          "type": "FocusTrapDirective[]",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "activatePreviousTrapper",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { FocusTrapDirective } from './focus-trap.directive';\n\n@Injectable({ providedIn: 'root' })\nexport class FocusTrapTracker {\n  private _previousFocusTraps: FocusTrapDirective[] = [];\n  private _current: FocusTrapDirective;\n\n  get current(): FocusTrapDirective {\n    return this._current;\n  }\n\n  set current(value: FocusTrapDirective) {\n    this._previousFocusTraps.push(this._current);\n    this._current = value;\n  }\n\n  get nbFocusTrappers(): number {\n    return this._previousFocusTraps.length;\n  }\n\n  activatePreviousTrapper() {\n    this._current = this._previousFocusTraps.pop();\n  }\n}\n",
      "accessors": {
        "current": {
          "name": "current",
          "setSignature": {
            "name": "current",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "current",
            "type": "",
            "returnType": "FocusTrapDirective",
            "line": 14
          }
        },
        "nbFocusTrappers": {
          "name": "nbFocusTrappers",
          "getSignature": {
            "name": "nbFocusTrappers",
            "type": "number",
            "returnType": "number",
            "line": 23
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "GlobalDragModeService",
      "id": "injectable-GlobalDragModeService-7c447fc057619464545eb84567328ab8",
      "file": "src/clr-angular/utils/drag-and-drop/providers/global-drag-mode.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "enter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14
        },
        {
          "name": "exit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, Renderer2 } from '@angular/core';\n\n// This service class adds and removes the \"in-drag\" class to the document body element\n// through its public enter() and exit() methods.\n@Injectable()\nexport class GlobalDragModeService {\n  constructor(private renderer: Renderer2) {}\n\n  enter(): void {\n    this.renderer.addClass(document.body, 'in-drag');\n  }\n\n  exit(): void {\n    this.renderer.removeClass(document.body, 'in-drag');\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "renderer",
            "type": "Renderer2"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "HeaderActionService",
      "id": "injectable-HeaderActionService-d6af38c98ffcb83b73ea46caa4836340",
      "file": "src/clr-angular/wizard/providers/header-actions.service.ts",
      "properties": [
        {
          "name": "navService",
          "type": "WizardNavigationService",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [114]
        },
        {
          "name": "wizardHeaderActions",
          "type": "QueryList<ClrWizardHeaderAction>",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [114]
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable, QueryList } from '@angular/core';\nimport { ClrWizardHeaderAction } from '../wizard-header-action';\nimport { WizardNavigationService } from './wizard-navigation.service';\n\n@Injectable()\nexport class HeaderActionService {\n  // this service communicates information about the presence/display of header actions\n  // across the wizard\n\n  constructor(public navService: WizardNavigationService) {}\n\n  public wizardHeaderActions: QueryList<ClrWizardHeaderAction>;\n\n  public get wizardHasHeaderActions(): boolean {\n    const wizardHdrActions = this.wizardHeaderActions;\n    if (!wizardHdrActions) {\n      return false;\n    }\n    return wizardHdrActions.toArray().length > 0;\n  }\n\n  public get currentPageHasHeaderActions(): boolean {\n    return this.navService.currentPage ? this.navService.currentPage.hasHeaderActions : false;\n  }\n\n  public get showWizardHeaderActions(): boolean {\n    return !this.currentPageHasHeaderActions && this.wizardHasHeaderActions;\n  }\n\n  public get displayHeaderActionsWrapper(): boolean {\n    return this.currentPageHasHeaderActions || this.wizardHasHeaderActions;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "navService",
            "type": "WizardNavigationService"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "navService",
            "type": "WizardNavigationService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "wizardHasHeaderActions": {
          "name": "wizardHasHeaderActions",
          "getSignature": {
            "name": "wizardHasHeaderActions",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "currentPageHasHeaderActions": {
          "name": "currentPageHasHeaderActions",
          "getSignature": {
            "name": "currentPageHasHeaderActions",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "showWizardHeaderActions": {
          "name": "showWizardHeaderActions",
          "getSignature": {
            "name": "showWizardHeaderActions",
            "type": "boolean",
            "returnType": "boolean",
            "line": 32
          }
        },
        "displayHeaderActionsWrapper": {
          "name": "displayHeaderActionsWrapper",
          "getSignature": {
            "name": "displayHeaderActionsWrapper",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "IfActiveService",
      "id": "injectable-IfActiveService-a33fc74a9455c43e5bad15eefc5157c3",
      "file": "src/clr-angular/utils/conditional/if-active.service.ts",
      "properties": [
        {
          "name": "_current",
          "type": "number",
          "optional": false,
          "description": "<hr>\n",
          "line": 51,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 1355,
              "end": 1365,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1355,
                "end": 1356,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1356,
                "end": 1364,
                "flags": 0,
                "escapedText": "property"
              },
              "comment": "<p>_current</p>\n"
            },
            {
              "pos": 1384,
              "end": 1400,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1384,
                "end": 1385,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1385,
                "end": 1396,
                "flags": 0,
                "escapedText": "description"
              },
              "comment":
                "<p>A property holding the current value for current/closed state of an IfActive structural directive.</p>\n"
            }
          ]
        },
        {
          "name": "_currentChange",
          "defaultValue": "new Subject<number>()",
          "type": "Subject<number>",
          "optional": false,
          "description": "<hr>\n",
          "line": 43,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 1042,
              "end": 1052,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1042,
                "end": 1043,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1043,
                "end": 1051,
                "flags": 0,
                "escapedText": "property"
              },
              "comment": "<p>_currentChange</p>\n"
            },
            {
              "pos": 1077,
              "end": 1093,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1077,
                "end": 1078,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1078,
                "end": 1089,
                "flags": 0,
                "escapedText": "description"
              },
              "comment":
                "<p>A RXJS Subject that updates and provides subscriptions to for the current current state of a component template\nimplemting the IfActive structural directive.</p>\n"
            }
          ]
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable, InjectionToken } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nlet activeCounter = 0;\n\nexport const IF_ACTIVE_ID = new InjectionToken<number>('IF_ACTIVE_ID');\n\nexport function tokenFactory() {\n  return ++activeCounter;\n}\n\nexport const IF_ACTIVE_ID_PROVIDER = {\n  provide: IF_ACTIVE_ID,\n  useFactory: tokenFactory,\n};\n\n@Injectable()\n\n/*********\n * @class IfActiveService\n *\n * @description\n * An injectable service used by IfActive structural directives and the components that implement IfActive in their\n * templates. It holds the value of the current state and provides an Observable that both the directive and the\n * implementing component can subscribe to in order to take action on current value changes.\n *\n */\nexport class IfActiveService {\n  /********\n   * @property _currentChange\n   *\n   * @description\n   * A RXJS Subject that updates and provides subscriptions to for the current current state of a component template\n   * implemting the IfActive structural directive.\n   *\n   */\n  private _currentChange: Subject<number> = new Subject<number>();\n\n  /*********\n   * @property _current\n   *\n   * @description\n   * A property holding the current value for current/closed state of an IfActive structural directive.\n   */\n  private _current: number;\n\n  /*********\n   *\n   * @description\n   * A getter function that provides an observable for the _current Subject.\n   *\n   */\n  public get currentChange(): Observable<number> {\n    return this._currentChange.asObservable();\n  }\n\n  /*********\n   *\n   * @description\n   * A setter function that updates the current state of _current for this instance of IfActive structural directive.\n   * And, broadcasts the new value to all subscribers.\n   *\n   * @param value\n   */\n  public set current(value: number) {\n    if (this._current !== value) {\n      this._current = value;\n      this._currentChange.next(value);\n    }\n  }\n\n  /*********\n   *\n   * @description\n   * A getter that returns the current value of this IfActive instance.\n   * @returns\n   */\n  public get current(): number {\n    return this._current;\n  }\n}\n",
      "accessors": {
        "currentChange": {
          "name": "currentChange",
          "getSignature": {
            "name": "currentChange",
            "type": "",
            "returnType": "Observable<number>",
            "line": 59,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "pos": 1559,
                "end": 1575,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 1559,
                  "end": 1560,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 1560,
                  "end": 1571,
                  "flags": 0,
                  "escapedText": "description"
                },
                "comment": "<p>A getter function that provides an observable for the _current Subject.</p>\n"
              }
            ]
          }
        },
        "current": {
          "name": "current",
          "setSignature": {
            "name": "current",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 71,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "name": {
                  "pos": 1989,
                  "end": 1994,
                  "flags": 0,
                  "escapedText": "value"
                },
                "type": "number",
                "tagName": {
                  "pos": 1983,
                  "end": 1988,
                  "flags": 0,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          "getSignature": {
            "name": "current",
            "type": "number",
            "returnType": "number",
            "line": 84,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "pos": 2176,
                "end": 2192,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 2176,
                  "end": 2177,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 2177,
                  "end": 2188,
                  "flags": 0,
                  "escapedText": "description"
                },
                "comment": "<p>A getter that returns the current value of this IfActive instance.</p>\n"
              },
              {
                "pos": 2266,
                "end": 2274,
                "flags": 0,
                "kind": 293,
                "atToken": {
                  "pos": 2266,
                  "end": 2267,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 2267,
                  "end": 2274,
                  "flags": 0,
                  "escapedText": "returns"
                },
                "comment": ""
              }
            ]
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "IfErrorService",
      "id": "injectable-IfErrorService-140ccdaa762113c3c0172cdfe6edebda",
      "file": "src/clr-angular/forms/common/if-error/if-error.service.ts",
      "properties": [
        {
          "name": "_statusChanges",
          "defaultValue": "new Subject()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "listenForChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62
        },
        {
          "name": "sendValidity",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "modifierKind": [112]
        },
        {
          "name": "triggerStatusChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, OnDestroy } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable, Subject, Subscription } from 'rxjs';\n\nimport { NgControlService } from '../providers/ng-control.service';\n\n@Injectable()\nexport class IfErrorService implements OnDestroy {\n  // Implement our own status changes observable, since Angular controls don't\n  // fire on events like blur, and we want to return the boolean state instead of a string\n  private _statusChanges: Subject<boolean> = new Subject();\n  get statusChanges(): Observable<boolean> {\n    return this._statusChanges.asObservable();\n  }\n\n  private subscriptions: Subscription[] = [];\n  private control: NgControl;\n\n  constructor(private ngControlService: NgControlService) {\n    // Wait for the control to be available\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        if (control) {\n          this.control = control;\n          this.listenForChanges();\n        }\n      })\n    );\n  }\n\n  // Subscribe to the status change events, only after touched and emit the control\n  private listenForChanges() {\n    this.subscriptions.push(\n      this.control.statusChanges.subscribe(() => {\n        this.sendValidity();\n      })\n    );\n  }\n\n  private sendValidity() {\n    if (this.control.touched && this.control.invalid) {\n      this._statusChanges.next(true);\n    } else {\n      this._statusChanges.next(false);\n    }\n  }\n\n  // Allows a control to push a status check upstream, such as on blur\n  triggerStatusChange() {\n    if (this.control) {\n      this.sendValidity();\n    }\n  }\n\n  // Clean up subscriptions\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "statusChanges": {
          "name": "statusChanges",
          "getSignature": {
            "name": "statusChanges",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 18
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "IfExpandService",
      "id": "injectable-IfExpandService-5f793184778f61095488751096f28bf4",
      "file": "src/clr-angular/utils/conditional/if-expanded.service.ts",
      "properties": [
        {
          "name": "_expandChange",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [113]
        },
        {
          "name": "_expanded",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [113]
        },
        {
          "name": "_loading",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [113]
        },
        {
          "name": "expandable",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "loadingStateChange",
          "args": [
            {
              "name": "state",
              "type": "ClrLoadingState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrLoadingState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { LoadingListener } from '../loading/loading-listener';\nimport { ClrLoadingState } from '../loading/loading';\n\n@Injectable()\nexport class IfExpandService implements LoadingListener {\n  public expandable: number = 0;\n\n  protected _loading: boolean = false;\n  get loading(): boolean {\n    return this._loading;\n  }\n\n  set loading(value: boolean) {\n    value = !!value;\n    if (value !== this._loading) {\n      this._loading = value;\n    }\n  }\n\n  protected _expanded: boolean = false;\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  set expanded(value: boolean) {\n    value = !!value;\n    if (value !== this._expanded) {\n      this._expanded = value;\n      this._expandChange.next(value);\n    }\n  }\n\n  public toggle() {\n    this.expanded = !this._expanded;\n  }\n\n  protected _expandChange: Subject<boolean> = new Subject<boolean>();\n  public get expandChange(): Observable<boolean> {\n    return this._expandChange.asObservable();\n  }\n\n  loadingStateChange(state: ClrLoadingState): void {\n    switch (state) {\n      case ClrLoadingState.LOADING:\n        this.loading = true;\n        break;\n      default:\n        this.loading = false;\n        break;\n    }\n  }\n}\n",
      "accessors": {
        "loading": {
          "name": "loading",
          "setSignature": {
            "name": "loading",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "loading",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        },
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "expandChange": {
          "name": "expandChange",
          "getSignature": {
            "name": "expandChange",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 46
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "Items",
      "id": "injectable-Items-f2df1066f98c03413998f988d946cd49",
      "file": "src/clr-angular/data/datagrid/providers/items.ts",
      "properties": [
        {
          "name": "_all",
          "type": "T[]",
          "optional": false,
          "description": "<p>List of all items in the datagrid</p>\n",
          "line": 81,
          "modifierKind": [112]
        },
        {
          "name": "_allChanges",
          "defaultValue": "new Subject<T[]>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 131,
          "modifierKind": [112]
        },
        {
          "name": "_change",
          "defaultValue": "new Subject<T[]>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable that lets other classes subscribe to items changes</p>\n",
          "line": 122,
          "modifierKind": [112]
        },
        {
          "name": "_displayed",
          "defaultValue": "[]",
          "type": "T[]",
          "optional": false,
          "description": "<p>List of items currently displayed</p>\n",
          "line": 113,
          "modifierKind": [112]
        },
        {
          "name": "_filtered",
          "type": "T[]",
          "optional": false,
          "description":
            "<p>Internal temporary step, which we preserve to avoid re-filtering or re-sorting if not necessary</p>\n",
          "line": 108,
          "modifierKind": [112]
        },
        {
          "name": "_filtersSub",
          "type": "Subscription",
          "optional": false,
          "description": "<p>Subscriptions to the other providers changes.</p>\n",
          "line": 33,
          "modifierKind": [112]
        },
        {
          "name": "_pageSub",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [112]
        },
        {
          "name": "_smart",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description":
            "<p>Whether we should use smart items for this datagrid or let the user handle\neverything.</p>\n",
          "line": 55,
          "modifierKind": [112]
        },
        {
          "name": "_sortSub",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [112]
        },
        {
          "name": "loading",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "<p>Indicates if the data is currently loading</p>\n",
          "line": 22,
          "modifierKind": [114]
        },
        {
          "name": "trackBy",
          "defaultValue": "() => {...}",
          "type": "TrackByFunction<T>",
          "optional": false,
          "description": "<p>Tracking function to identify objects. Default is reference equality.</p>\n",
          "line": 28,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "_changePage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 180,
          "description": "<p>Extracts the current page from the sorted list</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "_filterItems",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150,
          "description": "<p>FiltersProvider items from the raw list</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "_sortItems",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 167,
          "description": "<p>Sorts items in the filtered list</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "description": "<p>Cleans up our subscriptions to other providers</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "emitAllChanges",
          "args": [
            {
              "name": "items",
              "type": "T[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "items",
              "type": "T[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emitChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 123,
          "modifierKind": [112]
        },
        {
          "name": "refresh",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "description": "<p>Manually recompute the list of displayed items</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "smartenUp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, TrackByFunction } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\n\nimport { FiltersProvider } from './filters';\nimport { Page } from './page';\nimport { Sort } from './sort';\n\n@Injectable()\nexport class Items<T = any> {\n  constructor(private _filters: FiltersProvider<T>, private _sort: Sort<T>, private _page: Page) {}\n\n  /**\n   * Indicates if the data is currently loading\n   */\n  public loading = false;\n\n  // TODO: Verify that trackBy is registered for the *ngFor case too\n  /**\n   * Tracking function to identify objects. Default is reference equality.\n   */\n  public trackBy: TrackByFunction<T> = (index: number, item: T) => item;\n\n  /**\n   * Subscriptions to the other providers changes.\n   */\n  private _filtersSub: Subscription;\n  private _sortSub: Subscription;\n  private _pageSub: Subscription;\n  /**\n   * Cleans up our subscriptions to other providers\n   */\n  public destroy() {\n    if (this._filtersSub) {\n      this._filtersSub.unsubscribe();\n    }\n    if (this._sortSub) {\n      this._sortSub.unsubscribe();\n    }\n    if (this._pageSub) {\n      this._pageSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Whether we should use smart items for this datagrid or let the user handle\n   * everything.\n   */\n  private _smart = false;\n  public get smart(): boolean {\n    return this._smart;\n  }\n  public smartenUp() {\n    this._smart = true;\n    /*\n         * These observers trigger a chain of function: filter -> sort -> paginate\n         * An observer up the chain re-triggers all the operations that follow it.\n         */\n    this._filtersSub = this._filters.change.subscribe(() => this._filterItems());\n    this._sortSub = this._sort.change.subscribe(() => {\n      // Special case, if the datagrid went from sorted to unsorted, we have to re-filter\n      // to get the original order back\n      if (!this._sort.comparator) {\n        this._filterItems();\n      } else {\n        this._sortItems();\n      }\n    });\n    this._pageSub = this._page.change.subscribe(() => this._changePage());\n  }\n\n  /**\n   * List of all items in the datagrid\n   */\n  private _all: T[];\n  public get all() {\n    return this._all;\n  }\n  public set all(items: T[]) {\n    this._all = items;\n    this.emitAllChanges(items);\n    if (this.smart) {\n      this._filterItems();\n    } else {\n      this._displayed = items;\n      this.emitChange();\n    }\n  }\n\n  /**\n   * Manually recompute the list of displayed items\n   */\n  public refresh() {\n    if (this.smart) {\n      this._filterItems();\n    }\n  }\n\n  /**\n   * Internal temporary step, which we preserve to avoid re-filtering or re-sorting if not necessary\n   */\n  private _filtered: T[];\n\n  /**\n   * List of items currently displayed\n   */\n  private _displayed: T[] = [];\n  public get displayed(): T[] {\n    // Ideally we could return an immutable array, but we don't have it in Clarity yet.\n    return this._displayed;\n  }\n\n  /**\n   * The Observable that lets other classes subscribe to items changes\n   */\n  private _change = new Subject<T[]>();\n  private emitChange() {\n    this._change.next(this.displayed);\n  }\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get change(): Observable<T[]> {\n    return this._change.asObservable();\n  }\n\n  private _allChanges = new Subject<T[]>();\n  private emitAllChanges(items: T[]): void {\n    this._allChanges.next(items);\n  }\n\n  public get allChanges(): Observable<T[]> {\n    return this._allChanges.asObservable();\n  }\n\n  /**\n   * Checks if we don't have data to process yet, to abort early operations\n   */\n  private get uninitialized() {\n    return !this._all;\n  }\n\n  /**\n   * FiltersProvider items from the raw list\n   */\n  private _filterItems() {\n    if (this.uninitialized) {\n      return;\n    }\n    if (this._filters.hasActiveFilters()) {\n      this._filtered = this._all.filter(item => this._filters.accepts(item));\n    } else {\n      // Work on a shallow copy of the array, to not modify the user's model\n      this._filtered = this._all.slice();\n    }\n    this._page.totalItems = this._filtered.length;\n    this._sortItems();\n  }\n\n  /**\n   * Sorts items in the filtered list\n   */\n  private _sortItems() {\n    if (this.uninitialized) {\n      return;\n    }\n    if (this._sort.comparator) {\n      this._filtered.sort((a, b) => this._sort.compare(a, b));\n    }\n    this._changePage();\n  }\n\n  /**\n   * Extracts the current page from the sorted list\n   */\n  private _changePage() {\n    // If we know we have pagination but the page size hasn't been set yet, we wait for it.\n    if (this.uninitialized || (this._page.activated && this._page.size === 0)) {\n      return;\n    }\n    if (this._page.size > 0) {\n      this._displayed = this._filtered.slice(this._page.firstItem, this._page.lastItem + 1);\n    } else {\n      this._displayed = this._filtered;\n    }\n    this.emitChange();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_filters",
            "type": "FiltersProvider<T>"
          },
          {
            "name": "_sort",
            "type": "Sort<T>"
          },
          {
            "name": "_page",
            "type": "Page"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "_filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_sort",
            "type": "Sort<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_page",
            "type": "Page",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "smart": {
          "name": "smart",
          "getSignature": {
            "name": "smart",
            "type": "boolean",
            "returnType": "boolean",
            "line": 56
          }
        },
        "all": {
          "name": "all",
          "setSignature": {
            "name": "all",
            "type": "void",
            "args": [
              {
                "name": "items",
                "type": "[]"
              }
            ],
            "returnType": "void",
            "line": 85,
            "jsdoctags": [
              {
                "name": "items",
                "type": "[]",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "all",
            "type": "",
            "returnType": "",
            "line": 82
          }
        },
        "displayed": {
          "name": "displayed",
          "getSignature": {
            "name": "displayed",
            "type": "[]",
            "returnType": "T[]",
            "line": 114
          }
        },
        "change": {
          "name": "change",
          "getSignature": {
            "name": "change",
            "type": "",
            "returnType": "Observable<T[]>",
            "line": 127
          }
        },
        "allChanges": {
          "name": "allChanges",
          "getSignature": {
            "name": "allChanges",
            "type": "",
            "returnType": "Observable<T[]>",
            "line": 136
          }
        },
        "uninitialized": {
          "name": "uninitialized",
          "getSignature": {
            "name": "uninitialized",
            "type": "",
            "returnType": "",
            "line": 143,
            "description": "<p>Checks if we don&#39;t have data to process yet, to abort early operations</p>\n"
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "LayoutService",
      "id": "injectable-LayoutService-89f2ac55123a8075a0754ff332e97c98",
      "file": "src/clr-angular/forms/common/providers/layout.service.ts",
      "properties": [
        {
          "name": "_labelSize",
          "defaultValue": "2",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [112]
        },
        {
          "name": "layout",
          "defaultValue": "Layouts.HORIZONTAL",
          "type": "Layouts",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "layoutValues",
          "defaultValue": "Object.keys(Layouts).map(key => Layouts[key])",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [112]
        },
        {
          "name": "maxLabelSize",
          "defaultValue": "12",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [132]
        },
        {
          "name": "minLabelSize",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [132]
        }
      ],
      "methods": [
        {
          "name": "isCompact",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 45
        },
        {
          "name": "isHorizontal",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 41
        },
        {
          "name": "isValid",
          "args": [
            {
              "name": "layout",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 53,
          "jsdoctags": [
            {
              "name": "layout",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isVertical",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 37
        },
        {
          "name": "labelSizeIsValid",
          "args": [
            {
              "name": "labelSize",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 57,
          "jsdoctags": [
            {
              "name": "labelSize",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\nexport enum Layouts {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal',\n  COMPACT = 'compact',\n}\n\n@Injectable()\nexport class LayoutService {\n  readonly minLabelSize = 1;\n  readonly maxLabelSize = 12;\n  layout: Layouts = Layouts.HORIZONTAL;\n\n  // This is basically a replacement for Object.values(), which IE11 and Node <9 don't support :(\n  // String enums cannot be reverse-mapped, meaning Layouts['COMPACT'] does not return 'compact' so\n  // this exists to deal with this little caveat to get the list of the values as an array.\n  private layoutValues: string[] = Object.keys(Layouts).map(key => Layouts[key]);\n  private _labelSize: number = 2;\n\n  set labelSize(size: number) {\n    if (this.labelSizeIsValid(size)) {\n      this._labelSize = size;\n    }\n  }\n\n  get labelSize(): number {\n    return this._labelSize;\n  }\n\n  isVertical(): boolean {\n    return this.layout === Layouts.VERTICAL;\n  }\n\n  isHorizontal(): boolean {\n    return this.layout === Layouts.HORIZONTAL;\n  }\n\n  isCompact(): boolean {\n    return this.layout === Layouts.COMPACT;\n  }\n\n  get layoutClass(): string {\n    return `clr-form-${this.layout}`;\n  }\n\n  isValid(layout: string): boolean {\n    return this.layoutValues.indexOf(layout) > -1;\n  }\n\n  labelSizeIsValid(labelSize: number): boolean {\n    return Number.isInteger(labelSize) && labelSize >= this.minLabelSize && labelSize <= this.maxLabelSize;\n  }\n}\n",
      "accessors": {
        "labelSize": {
          "name": "labelSize",
          "setSignature": {
            "name": "labelSize",
            "type": "void",
            "args": [
              {
                "name": "size",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "size",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "labelSize",
            "type": "number",
            "returnType": "number",
            "line": 33
          }
        },
        "layoutClass": {
          "name": "layoutClass",
          "getSignature": {
            "name": "layoutClass",
            "type": "string",
            "returnType": "string",
            "line": 49
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "LocaleHelperService",
      "id": "injectable-LocaleHelperService-42a09a5335069c14e4a370cb07c40220",
      "file": "src/clr-angular/forms/datepicker/providers/locale-helper.service.ts",
      "properties": [
        {
          "name": "_firstDayOfWeek",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [112]
        },
        {
          "name": "_localeDateFormat",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [112]
        },
        {
          "name": "_localeDays",
          "type": "ReadonlyArray<ClrDayOfWeek>",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [112]
        },
        {
          "name": "_localeMonthsAbbreviated",
          "type": "ReadonlyArray<string>",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [112]
        },
        {
          "name": "_localeMonthsWide",
          "type": "ReadonlyArray<string>",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [112]
        },
        {
          "name": "locale",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "LOCALE_ID"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "initializeFirstDayOfWeek",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 120,
          "description": "<p>Initializes the first day of the week based on the locale.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeLocaleData",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "description": "<p>Initializes the locale data.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeLocaleDateFormat",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124,
          "modifierKind": [112]
        },
        {
          "name": "initializeLocaleDays",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "description":
            "<p>Initialize day names based on the locale.\neg: [{day: Sunday, narrow: S}, {day: Monday, narrow: M}...] for en-US.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeLocaleMonthsAbbreviated",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "description":
            "<p>Initializes the array of month names in the TranslationWidth.Abbreviated format.\ne.g. <code>[Jan, Feb, ...]</code> for en-US</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeLocaleMonthsWide",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113,
          "description":
            "<p>Initializes the array of month names in the TranslationWidth.Wide format.\ne.g. <code>[January, February, ...]</code> for en-US</p>\n",
          "modifierKind": [112]
        }
      ],
      "description": "<p>This service extracts the Angular CLDR data needed by the datepicker.</p>\n",
      "sourceCode":
        "import {\n  FormatWidth,\n  FormStyle,\n  getLocaleDateFormat,\n  getLocaleDayNames,\n  getLocaleFirstDayOfWeek,\n  getLocaleMonthNames,\n  TranslationWidth,\n} from '@angular/common';\nimport { Inject, Injectable, LOCALE_ID } from '@angular/core';\nimport { ClrDayOfWeek } from '../interfaces/day-of-week.interface';\n\n/**\n * This service extracts the Angular CLDR data needed by the datepicker.\n */\n@Injectable()\nexport class LocaleHelperService {\n  constructor(@Inject(LOCALE_ID) public locale: string) {\n    this.initializeLocaleData();\n  }\n\n  private _firstDayOfWeek: number = 0;\n  private _localeDays: ReadonlyArray<ClrDayOfWeek>;\n  private _localeMonthsAbbreviated: ReadonlyArray<string>;\n  private _localeMonthsWide: ReadonlyArray<string>;\n  private _localeDateFormat: string;\n\n  get firstDayOfWeek(): number {\n    return this._firstDayOfWeek;\n  }\n\n  get localeDays(): ReadonlyArray<ClrDayOfWeek> {\n    return this._localeDays;\n  }\n\n  // leave for backward compatibility\n  get localeDaysNarrow(): ReadonlyArray<string> {\n    return this._localeDays.map(day => day.narrow);\n  }\n\n  get localeMonthsAbbreviated(): ReadonlyArray<string> {\n    return this._localeMonthsAbbreviated;\n  }\n\n  get localeMonthsWide(): ReadonlyArray<string> {\n    return this._localeMonthsWide;\n  }\n\n  get localeDateFormat(): string {\n    return this._localeDateFormat;\n  }\n\n  /**\n   * Initializes the locale data.\n   */\n  private initializeLocaleData(): void {\n    // Order in which these functions is called is very important.\n    this.initializeFirstDayOfWeek();\n    this.initializeLocaleDateFormat();\n    this.initializeLocaleMonthsAbbreviated();\n    this.initializeLocaleMonthsWide();\n    this.initializeLocaleDays();\n  }\n\n  /**\n   * Initialize day names based on the locale.\n   * eg: [{day: Sunday, narrow: S}, {day: Monday, narrow: M}...] for en-US.\n   */\n  private initializeLocaleDays(): void {\n    // Get locale day names starting with Sunday\n    const tempArr = [];\n    const tempWideArr: string[] = getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Wide).slice();\n    const tempNarrowArr: string[] = getLocaleDayNames(\n      this.locale,\n      FormStyle.Standalone,\n      TranslationWidth.Narrow\n    ).slice();\n    // Get first day of the week based on the locale\n    const firstDayOfWeek: number = this.firstDayOfWeek;\n    for (let i = 0; i < 7; i++) {\n      tempArr.push({ day: tempWideArr[i], narrow: tempNarrowArr[i] });\n    }\n    // Rearrange the tempArr to start with the first day of the week based on the locale.\n    if (firstDayOfWeek > 0) {\n      const prevDays: string[] = tempArr.splice(0, firstDayOfWeek);\n      tempArr.push(...prevDays);\n    }\n    this._localeDays = tempArr;\n  }\n\n  /**\n   * Initializes the array of month names in the TranslationWidth.Abbreviated format.\n   * e.g. `[Jan, Feb, ...]` for en-US\n   */\n  private initializeLocaleMonthsAbbreviated(): void {\n    this._localeMonthsAbbreviated = getLocaleMonthNames(\n      this.locale,\n      FormStyle.Standalone,\n      TranslationWidth.Abbreviated\n    ).slice();\n  }\n\n  /**\n   * Initializes the array of month names in the TranslationWidth.Wide format.\n   * e.g. `[January, February, ...]` for en-US\n   */\n  private initializeLocaleMonthsWide(): void {\n    this._localeMonthsWide = getLocaleMonthNames(this.locale, FormStyle.Standalone, TranslationWidth.Wide).slice();\n  }\n\n  /**\n   * Initializes the first day of the week based on the locale.\n   */\n  private initializeFirstDayOfWeek(): void {\n    this._firstDayOfWeek = getLocaleFirstDayOfWeek(this.locale);\n  }\n\n  private initializeLocaleDateFormat(): void {\n    this._localeDateFormat = getLocaleDateFormat(this.locale, FormatWidth.Short);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "locale",
            "type": "string"
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "locale",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "firstDayOfWeek": {
          "name": "firstDayOfWeek",
          "getSignature": {
            "name": "firstDayOfWeek",
            "type": "number",
            "returnType": "number",
            "line": 34
          }
        },
        "localeDays": {
          "name": "localeDays",
          "getSignature": {
            "name": "localeDays",
            "type": "",
            "returnType": "ReadonlyArray<ClrDayOfWeek>",
            "line": 38
          }
        },
        "localeDaysNarrow": {
          "name": "localeDaysNarrow",
          "getSignature": {
            "name": "localeDaysNarrow",
            "type": "",
            "returnType": "ReadonlyArray<string>",
            "line": 43
          }
        },
        "localeMonthsAbbreviated": {
          "name": "localeMonthsAbbreviated",
          "getSignature": {
            "name": "localeMonthsAbbreviated",
            "type": "",
            "returnType": "ReadonlyArray<string>",
            "line": 47
          }
        },
        "localeMonthsWide": {
          "name": "localeMonthsWide",
          "getSignature": {
            "name": "localeMonthsWide",
            "type": "",
            "returnType": "ReadonlyArray<string>",
            "line": 51
          }
        },
        "localeDateFormat": {
          "name": "localeDateFormat",
          "getSignature": {
            "name": "localeDateFormat",
            "type": "string",
            "returnType": "string",
            "line": 55
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "MarkControlService",
      "id": "injectable-MarkControlService-865f20129e40730ff5d287b24c1fb254",
      "file": "src/clr-angular/forms/common/providers/mark-control.service.ts",
      "properties": [
        {
          "name": "_touched",
          "defaultValue": "new Subject()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "markAsTouched",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable()\nexport class MarkControlService {\n  private _touched: Subject<void> = new Subject();\n\n  get touchedChange(): Observable<void> {\n    return this._touched.asObservable();\n  }\n\n  markAsTouched() {\n    this._touched.next();\n  }\n}\n",
      "accessors": {
        "touchedChange": {
          "name": "touchedChange",
          "getSignature": {
            "name": "touchedChange",
            "type": "",
            "returnType": "Observable<void>",
            "line": 14
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "MockAriaLiveService",
      "id": "injectable-MockAriaLiveService-5378d26088a13b8f0e21853073069eae",
      "file": "src/clr-angular/utils/a11y/aria-live.service.mock.ts",
      "properties": [
        {
          "name": "_id",
          "defaultValue": "`clr-aria-live-element-${uniqueIdFactory()}`",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 65,
          "modifierKind": [112],
          "inheritance": {
            "file": "AriaLiveService"
          }
        },
        {
          "name": "ariaLiveElement",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112],
          "inheritance": {
            "file": "AriaLiveService"
          }
        },
        {
          "name": "document",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112],
          "inheritance": {
            "file": "AriaLiveService"
          }
        },
        {
          "name": "previousTimeout",
          "type": "ReturnType<>",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [112],
          "inheritance": {
            "file": "AriaLiveService"
          }
        }
      ],
      "methods": [
        {
          "name": "announce",
          "args": [
            {
              "name": "message",
              "type": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 11,
          "jsdoctags": [
            {
              "name": "message",
              "type": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "announce",
          "args": [
            {
              "name": "message",
              "type": "string | HTMLElement"
            },
            {
              "name": "politeness",
              "type": "AriaLivePoliteness",
              "defaultValue": "AriaLivePoliteness.polite"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "description":
            "<p>Append text content inside the AriaLive Container. This method will check if the\nDOM Element is existing if not it will create one for us and the will apply the text.</p>\n<p>```typescript</p>\n<ul>\n<li>this.ariaLiveService.announce(this.el.nativeElement);</li>\n<li>// or</li>\n<li>this.ariaLiveService.announce(&#39;Message to announce to SR&#39;);</li>\n<li>```</li>\n</ul>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2754,
                "end": 2761,
                "flags": 0,
                "escapedText": "message"
              },
              "type": "string | HTMLElement",
              "tagName": {
                "pos": 2748,
                "end": 2753,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>This could be simple string or HTMLElement</li>\n</ul>\n"
            },
            {
              "name": {
                "pos": 2819,
                "end": 2829,
                "flags": 0,
                "escapedText": "politeness"
              },
              "type": "AriaLivePoliteness",
              "defaultValue": "AriaLivePoliteness.polite",
              "tagName": {
                "pos": 2813,
                "end": 2818,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<ul>\n<li>&#39;polite&#39;, &#39;assertive&#39; or &#39;off&#39;</li>\n</ul>\n"
            }
          ],
          "inheritance": {
            "file": "AriaLiveService"
          }
        },
        {
          "name": "createContainer",
          "args": [],
          "optional": false,
          "returnType": "HTMLElement",
          "typeParameters": [],
          "line": 152,
          "description":
            "<p>Create AriaLive DOM element as a last child of the document.\nAfter the element is created, we gonna apply Clarity class to hide it from\nthe screen and set the <code>aria-live</code> politness.</p>\n<p><code>clr-sr-only</code> is the CSS class that is used to hide the element from the screen.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 5147,
                "end": 5153,
                "flags": 0,
                "escapedText": "return"
              },
              "comment": "<p>AriaLive container as HTMLElement</p>\n"
            }
          ],
          "inheritance": {
            "file": "AriaLiveService"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 129,
          "description":
            "<p>onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive\ncontainer from the document.</p>\n",
          "modifierKind": [114],
          "inheritance": {
            "file": "AriaLiveService"
          }
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { AriaLiveService } from './aria-live.service';\n\n@Injectable()\nexport class MockAriaLiveService extends AriaLiveService {\n  announce(message) {\n    return message;\n  }\n}\n\nexport const MOCK_ARIA_LIVE_SERVICE_PROVIDER = {\n  provider: AriaLiveService,\n  useClass: MockAriaLiveService,\n};\n",
      "extends": "AriaLiveService",
      "type": "injectable"
    },
    {
      "name": "MockColumnsService",
      "id": "injectable-MockColumnsService-5db63852782d0b76047324d3db2336a8",
      "file": "src/clr-angular/data/datagrid/providers/columns.service.mock.ts",
      "properties": [
        {
          "name": "templateRef",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "_cache",
          "defaultValue": "[]",
          "type": "ColumnState[]",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112],
          "inheritance": {
            "file": "ColumnsService"
          }
        },
        {
          "name": "columns",
          "defaultValue": "[]",
          "type": "BehaviorSubject<ColumnState>[]",
          "optional": false,
          "description": "",
          "line": 13,
          "inheritance": {
            "file": "ColumnsService"
          }
        }
      ],
      "methods": [
        {
          "name": "mockAllHideable",
          "args": [
            {
              "name": "hidden",
              "type": "boolean",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "jsdoctags": [
            {
              "name": "hidden",
              "type": "boolean",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockColumns",
          "args": [
            {
              "name": "columnNumber",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "jsdoctags": [
            {
              "name": "columnNumber",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockHideableAt",
          "args": [
            {
              "name": "index",
              "type": "number"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "hidden",
              "type": "boolean",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mockPartialHideable",
          "args": [
            {
              "name": "from",
              "type": "number"
            },
            {
              "name": "to",
              "type": "number"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "jsdoctags": [
            {
              "name": "from",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "to",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "hidden",
              "type": "boolean",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "cache",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "inheritance": {
            "file": "ColumnsService"
          }
        },
        {
          "name": "emitStateChange",
          "args": [
            {
              "name": "column",
              "type": "BehaviorSubject<ColumnState>"
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "jsdoctags": [
            {
              "name": "column",
              "type": "BehaviorSubject<ColumnState>",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ColumnsService"
          }
        },
        {
          "name": "emitStateChangeAt",
          "args": [
            {
              "name": "columnIndex",
              "type": "number"
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "jsdoctags": [
            {
              "name": "columnIndex",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "diff",
              "type": "ColumnStateDiff",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ColumnsService"
          }
        },
        {
          "name": "hasCache",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 24,
          "inheritance": {
            "file": "ColumnsService"
          }
        },
        {
          "name": "resetToLastCache",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "inheritance": {
            "file": "ColumnsService"
          }
        }
      ],
      "description": "",
      "sourceCode":
        "import { ColumnsService } from './columns.service';\nimport { EmbeddedViewRef, Injectable, TemplateRef } from '@angular/core';\nimport { columnStateFactory } from './column-state.provider';\nimport { DatagridColumnChanges } from '../enums/column-changes.enum';\nimport { ClrDatagridHideableColumn } from '../datagrid-hideable-column';\n\nclass MockHideableColumnTemplateRef extends TemplateRef<ClrDatagridHideableColumn> {\n  elementRef = null;\n  createEmbeddedView(): EmbeddedViewRef<any> {\n    return null;\n  }\n}\n\n@Injectable()\nexport class MockColumnsService extends ColumnsService {\n  // Sometimes we have to use an actual template ref.\n  // In that case, this service should be injected into the test component,\n  // and we need to assign the template ref from there.\n  templateRef: TemplateRef<any>;\n\n  mockColumns(columnNumber: number) {\n    for (let i = 0; i < columnNumber; i++) {\n      this.columns.push(columnStateFactory());\n    }\n  }\n\n  mockHideableAt(index: number, hidden: boolean = false) {\n    this.emitStateChange(this.columns[index], {\n      hideable: true,\n      titleTemplateRef: this.templateRef || new MockHideableColumnTemplateRef(),\n      hidden: hidden,\n      changes: [DatagridColumnChanges.HIDDEN],\n    });\n  }\n\n  mockAllHideable(hidden: boolean = false) {\n    this.columns.forEach((column, index) => this.mockHideableAt(index, hidden));\n  }\n\n  mockPartialHideable(from: number, to: number, hidden: boolean = false) {\n    this.columns.forEach((column, index) => {\n      if (index >= from && index <= to) {\n        this.mockHideableAt(index, hidden);\n      }\n    });\n  }\n}\n\nexport const MOCK_COLUMN_SERVICE_PROVIDER = {\n  provide: ColumnsService,\n  useClass: MockColumnsService,\n};\n",
      "extends": "ColumnsService",
      "type": "injectable"
    },
    {
      "name": "MockDatagridRenderOrganizer",
      "id": "injectable-MockDatagridRenderOrganizer-fff340d34e88385dd17508572e2f5529",
      "file": "src/clr-angular/data/datagrid/render/render-organizer.mock.ts",
      "properties": [
        {
          "name": "_renderStep",
          "defaultValue": "new Subject<DatagridRenderStep>()",
          "type": "Subject<DatagridRenderStep>",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [113],
          "inheritance": {
            "file": "DatagridRenderOrganizer"
          }
        },
        {
          "name": "alreadySized",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [112],
          "inheritance": {
            "file": "DatagridRenderOrganizer"
          }
        }
      ],
      "methods": [
        {
          "name": "filterRenderSteps",
          "args": [
            {
              "name": "step",
              "type": "DatagridRenderStep"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 20,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "step",
              "type": "DatagridRenderStep",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DatagridRenderOrganizer"
          }
        },
        {
          "name": "resize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridRenderOrganizer"
          }
        }
      ],
      "description":
        "<p>Mock that gives direct access to the subjects, to trigger specific parts of the render cycle.</p>\n",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DatagridRenderStep } from '../enums/render-step.enum';\nimport { DatagridRenderOrganizer } from './render-organizer';\n\n/**\n * Mock that gives direct access to the subjects, to trigger specific parts of the render cycle.\n */\n@Injectable()\nexport class MockDatagridRenderOrganizer extends DatagridRenderOrganizer {\n  public get updateRenderStep(): Subject<DatagridRenderStep> {\n    return this._renderStep;\n  }\n}\n\nexport const MOCK_ORGANIZER_PROVIDER = {\n  provide: DatagridRenderOrganizer,\n  useClass: MockDatagridRenderOrganizer,\n};\n",
      "accessors": {
        "updateRenderStep": {
          "name": "updateRenderStep",
          "getSignature": {
            "name": "updateRenderStep",
            "type": "",
            "returnType": "Subject<DatagridRenderStep>",
            "line": 18
          }
        }
      },
      "extends": "DatagridRenderOrganizer",
      "type": "injectable"
    },
    {
      "name": "MockDatepickerEnabledService",
      "id": "injectable-MockDatepickerEnabledService-f1d8293f022d2c91a4d97bd5187b699c",
      "file": "src/clr-angular/forms/datepicker/providers/datepicker-enabled.service.mock.ts",
      "properties": [
        {
          "name": "fakeIsEnabled",
          "defaultValue": "true",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "_innerWidth",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112],
          "inheritance": {
            "file": "DatepickerEnabledService"
          }
        },
        {
          "name": "_isUserAgentMobile",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112],
          "inheritance": {
            "file": "DatepickerEnabledService"
          }
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { DatepickerEnabledService } from './datepicker-enabled.service';\n\n@Injectable()\nexport class MockDatepickerEnabledService extends DatepickerEnabledService {\n  fakeIsEnabled: boolean = true;\n\n  get isEnabled(): boolean {\n    return this.fakeIsEnabled;\n  }\n}\n",
      "accessors": {
        "isEnabled": {
          "name": "isEnabled",
          "getSignature": {
            "name": "isEnabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 14
          }
        }
      },
      "extends": "DatepickerEnabledService",
      "type": "injectable"
    },
    {
      "name": "MockDisplayModeService",
      "id": "injectable-MockDisplayModeService-8028345baa516e09f567d95dc6f6f078",
      "file": "src/clr-angular/data/datagrid/providers/display-mode.mock.ts",
      "properties": [
        {
          "name": "_view",
          "defaultValue": "new BehaviorSubject<DatagridDisplayMode>(\n    DatagridDisplayMode.DISPLAY\n  )",
          "type": "BehaviorSubject<DatagridDisplayMode>",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [113],
          "inheritance": {
            "file": "DisplayModeService"
          }
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112],
          "inheritance": {
            "file": "DisplayModeService"
          }
        }
      ],
      "methods": [
        {
          "name": "updateView",
          "args": [
            {
              "name": "mode",
              "type": "DatagridDisplayMode"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "mode",
              "type": "DatagridDisplayMode",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "inheritance": {
            "file": "DisplayModeService"
          }
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\nimport { DatagridDisplayMode } from './../enums/display-mode.enum';\nimport { DatagridRenderOrganizer } from './../render/render-organizer';\nimport { DisplayModeService } from './display-mode.service';\n\n@Injectable()\nexport class MockDisplayModeService extends DisplayModeService {\n  constructor(renderOrganizer: DatagridRenderOrganizer) {\n    super(renderOrganizer);\n  }\n\n  public updateView(mode: DatagridDisplayMode) {\n    this._view.next(mode);\n  }\n}\n\nexport const MOCK_DISPLAY_MODE_PROVIDER = {\n  provide: DisplayModeService,\n  useClass: MockDisplayModeService,\n};\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "renderOrganizer",
            "type": "DatagridRenderOrganizer"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "renderOrganizer",
            "type": "DatagridRenderOrganizer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "DisplayModeService",
      "type": "injectable"
    },
    {
      "name": "MultiAlertService",
      "id": "injectable-MultiAlertService-3bf19ffd7240d0cc32838f35fdc2f127",
      "file": "src/clr-angular/emphasis/alert/providers/multi-alert.service.ts",
      "properties": [
        {
          "name": "_change",
          "defaultValue": "new Subject<number>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable that lets other classes subscribe to changes</p>\n",
          "line": 21,
          "modifierKind": [112]
        },
        {
          "name": "_current",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "allAlerts",
          "defaultValue": "new QueryList<ClrAlert>()",
          "type": "QueryList<ClrAlert>",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79
        },
        {
          "name": "manage",
          "args": [
            {
              "name": "alerts",
              "type": "QueryList<ClrAlert>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "jsdoctags": [
            {
              "name": "alerts",
              "type": "QueryList<ClrAlert>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "next",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64
        },
        {
          "name": "previous",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, QueryList } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nimport { ClrAlert } from '../alert';\n\n@Injectable()\nexport class MultiAlertService {\n  private allAlerts: QueryList<ClrAlert> = new QueryList<ClrAlert>();\n  private subscription: Subscription;\n  private _current = 0;\n\n  /**\n   * The Observable that lets other classes subscribe to changes\n   */\n  private _change = new Subject<number>();\n  public get changes(): Observable<number> {\n    return this._change.asObservable();\n  }\n\n  get current() {\n    return this._current;\n  }\n  set current(index: number) {\n    if (index !== this._current) {\n      this._current = index;\n      this._change.next(index);\n    }\n  }\n\n  get activeAlerts() {\n    return this.allAlerts.filter(alert => !alert._closed);\n  }\n\n  get currentAlert() {\n    return this.activeAlerts[this.current];\n  }\n\n  set currentAlert(alert: ClrAlert) {\n    this.current = this.activeAlerts.indexOf(alert);\n  }\n\n  get count() {\n    return this.activeAlerts.length;\n  }\n\n  manage(alerts: QueryList<ClrAlert>) {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.allAlerts = alerts;\n    this.subscription = this.allAlerts.changes.subscribe(() => {\n      if (this.current >= this.allAlerts.length) {\n        this.current = Math.max(0, this.allAlerts.length - 1);\n      }\n    });\n  }\n\n  next() {\n    this.current = this.current === this.activeAlerts.length - 1 ? 0 : this.current + 1;\n  }\n\n  previous() {\n    if (this.activeAlerts.length === 0) {\n      return;\n    }\n    this.current = this.current === 0 ? this.activeAlerts.length - 1 : this.current - 1;\n  }\n\n  close() {\n    this.previous();\n  }\n\n  destroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n",
      "accessors": {
        "changes": {
          "name": "changes",
          "getSignature": {
            "name": "changes",
            "type": "",
            "returnType": "Observable<number>",
            "line": 22
          }
        },
        "current": {
          "name": "current",
          "setSignature": {
            "name": "current",
            "type": "void",
            "args": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "index",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "current",
            "type": "",
            "returnType": "",
            "line": 26
          }
        },
        "activeAlerts": {
          "name": "activeAlerts",
          "getSignature": {
            "name": "activeAlerts",
            "type": "",
            "returnType": "",
            "line": 36
          }
        },
        "currentAlert": {
          "name": "currentAlert",
          "setSignature": {
            "name": "currentAlert",
            "type": "void",
            "args": [
              {
                "name": "alert",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "alert",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentAlert",
            "type": "",
            "returnType": "",
            "line": 40
          }
        },
        "count": {
          "name": "count",
          "getSignature": {
            "name": "count",
            "type": "",
            "returnType": "",
            "line": 48
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "NgControlService",
      "id": "injectable-NgControlService-d4e3cc874e14ba32b7c2d1811731abdd",
      "file": "src/clr-angular/forms/common/providers/ng-control.service.ts",
      "properties": [
        {
          "name": "_controlChanges",
          "defaultValue": "new Subject<NgControl>()",
          "type": "Subject<NgControl>",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "setControl",
          "args": [
            {
              "name": "control",
              "type": "NgControl"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "jsdoctags": [
            {
              "name": "control",
              "type": "NgControl",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable()\nexport class NgControlService {\n  // Observable to subscribe to the control, since its not available immediately for projected content\n  private _controlChanges: Subject<NgControl> = new Subject<NgControl>();\n  get controlChanges(): Observable<NgControl> {\n    return this._controlChanges.asObservable();\n  }\n\n  setControl(control: NgControl) {\n    this._controlChanges.next(control);\n  }\n}\n",
      "accessors": {
        "controlChanges": {
          "name": "controlChanges",
          "getSignature": {
            "name": "controlChanges",
            "type": "",
            "returnType": "Observable<NgControl>",
            "line": 15
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "NoopDomAdapter",
      "id": "injectable-NoopDomAdapter-323c622e762e0621e1c0c262e9a4c221",
      "file": "src/clr-angular/data/datagrid/render/noop-dom-adapter.ts",
      "properties": [],
      "methods": [
        {
          "name": "clientRect",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "ClientRect",
          "typeParameters": [],
          "line": 33,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "computedHeight",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 29,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focus",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "minWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 44,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollBarWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 21,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 25,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "userDefinedWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 17,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';\n\n@Injectable()\nexport class NoopDomAdapter implements DomAdapter {\n  userDefinedWidth(element: any): number {\n    return 0;\n  }\n\n  scrollBarWidth(element: any) {\n    return 0;\n  }\n\n  scrollWidth(element: any) {\n    return 0;\n  }\n\n  computedHeight(element: any): number {\n    return 0;\n  }\n\n  clientRect(element: any): ClientRect {\n    return {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  minWidth(element: any): number {\n    return 0;\n  }\n\n  focus(element: any): void {}\n}\n",
      "type": "injectable"
    },
    {
      "name": "OptionSelectionService",
      "id": "injectable-OptionSelectionService-a5c40a636f6799ba4c13703c057cb4ab",
      "file": "src/clr-angular/forms/combobox/providers/option-selection.service.ts",
      "properties": [
        {
          "name": "_renderSelectionChanged",
          "defaultValue": "new Subject<ClrOption<T>>()",
          "type": "Subject<ClrOption<T>>",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        },
        {
          "name": "_valueChanged",
          "defaultValue": "new Subject<T>()",
          "type": "Subject<T>",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "currentOption",
          "type": "ClrOption<T>",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        },
        {
          "name": "currentValue",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "renderSelection",
          "args": [
            {
              "name": "option",
              "type": "ClrOption<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "jsdoctags": [
            {
              "name": "option",
              "type": "ClrOption<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateSelection",
          "args": [
            {
              "name": "value",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "jsdoctags": [
            {
              "name": "value",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { ClrOption } from '../option';\n\n@Injectable()\nexport class OptionSelectionService<T> {\n  private currentValue: T;\n  private currentOption: ClrOption<T>;\n\n  private _valueChanged: Subject<T> = new Subject<T>();\n\n  // This observable is for notifying the ClrOption to update its\n  // selection by comparing the value\n  get valueChanged(): Observable<T> {\n    return this._valueChanged.asObservable();\n  }\n\n  // NOTE: Currently only handles single selection\n  // TODO: Add suport for trackBy and compareFn\n  updateSelection(value: T): void {\n    // NOTE: Currently we assume that no 2 options will have the same value\n    // but Eudes and I discussed that this is a possibility but we will handle\n    // this later\n    if (this.currentValue && this.currentValue === value) {\n      return;\n    }\n    this.currentValue = value;\n    this._valueChanged.next(value);\n  }\n\n  private _renderSelectionChanged: Subject<ClrOption<T>> = new Subject<ClrOption<T>>();\n\n  // This observable is to notify the ClrCombobox component to render\n  // a new Option on the Input\n  get renderSelectionChanged(): Observable<ClrOption<T>> {\n    return this._renderSelectionChanged.asObservable();\n  }\n\n  renderSelection(option: ClrOption<T>) {\n    if (this.currentOption === option) {\n      return;\n    }\n    this.currentOption = option;\n    this._renderSelectionChanged.next(option);\n  }\n}\n",
      "accessors": {
        "valueChanged": {
          "name": "valueChanged",
          "getSignature": {
            "name": "valueChanged",
            "type": "",
            "returnType": "Observable<T>",
            "line": 21
          }
        },
        "renderSelectionChanged": {
          "name": "renderSelectionChanged",
          "getSignature": {
            "name": "renderSelectionChanged",
            "type": "",
            "returnType": "Observable<ClrOption<T>>",
            "line": 42
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "Page",
      "id": "injectable-Page-943bfee92a1c18b76c74a911fc7e655b",
      "file": "src/clr-angular/data/datagrid/providers/page.ts",
      "properties": [
        {
          "name": "_change",
          "defaultValue": "new Subject<number>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable that lets other classes subscribe to page changes</p>\n",
          "line": 86,
          "modifierKind": [112]
        },
        {
          "name": "_current",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "<p>Current page</p>\n",
          "line": 101,
          "modifierKind": [112]
        },
        {
          "name": "_last",
          "type": "number",
          "optional": false,
          "description": "<p>Last page</p>\n",
          "line": 68,
          "modifierKind": [112]
        },
        {
          "name": "_size",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "<p>Page size, a value of 0 means no pagination</p>\n",
          "line": 21,
          "modifierKind": [112]
        },
        {
          "name": "_sizeChange",
          "defaultValue": "new Subject<number>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 92,
          "modifierKind": [112]
        },
        {
          "name": "_totalItems",
          "type": "number",
          "optional": true,
          "description": "<p>Total items (needed to guess the last page)</p>\n",
          "line": 53,
          "modifierKind": [112]
        },
        {
          "name": "activated",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [114]
        },
        {
          "name": "preventEmit",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "next",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 126,
          "description": "<p>Moves to the next page if it exists</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "previous",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 117,
          "description": "<p>Moves to the previous page if it exists</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "resetPageSize",
          "args": [
            {
              "name": "preventEmit",
              "type": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 167,
          "description": "<p>Resets the page size to 0</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "preventEmit",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { StateDebouncer } from './state-debouncer.provider';\n\n@Injectable()\nexport class Page {\n  constructor(private stateDebouncer: StateDebouncer) {}\n\n  private preventEmit = false;\n  public activated = false;\n\n  /**\n   * Page size, a value of 0 means no pagination\n   */\n  private _size = 0;\n  public get size(): number {\n    return this._size;\n  }\n  public set size(size: number) {\n    const oldSize = this._size;\n    if (size !== oldSize) {\n      if (!this.preventEmit) {\n        this.stateDebouncer.changeStart();\n      }\n      this._size = size;\n      if (size === 0) {\n        this._current = 1;\n      } else {\n        // Yeap. That's the formula to keep the first item from the old page still\n        // displayed in the new one.\n        this._current = Math.floor(oldSize / size * (this._current - 1)) + 1;\n      }\n      // We always emit an event even if the current page index didn't change, because\n      // the size changing means the items inside the page are different\n      if (!this.preventEmit) {\n        this._change.next(this._current);\n        this._sizeChange.next(this._size);\n        this.stateDebouncer.changeDone();\n      }\n    }\n    this.preventEmit = false;\n  }\n\n  /**\n   * Total items (needed to guess the last page)\n   */\n  private _totalItems?: number;\n  public get totalItems(): number {\n    return this._totalItems || 0; // remains 0 if not set to avoid breaking change\n  }\n  public set totalItems(total: number) {\n    this._totalItems = total;\n    // If we have less items than before, we might need to change the current page\n    if (this.current > this.last) {\n      this.current = this.last;\n    }\n  }\n\n  /**\n   * Last page\n   */\n  private _last: number;\n  public get last(): number {\n    if (this._last) {\n      return this._last;\n    }\n    // If the last page isn't known, we compute it from the last item's index\n    if (this.size > 0 && this.totalItems) {\n      return Math.ceil(this.totalItems / this.size);\n    }\n    return 1;\n  }\n  public set last(page: number) {\n    this._last = page;\n  }\n\n  /**\n   * The Observable that lets other classes subscribe to page changes\n   */\n  private _change = new Subject<number>();\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get change(): Observable<number> {\n    return this._change.asObservable();\n  }\n\n  private _sizeChange = new Subject<number>();\n\n  public get sizeChange(): Observable<number> {\n    return this._sizeChange.asObservable();\n  }\n\n  /**\n   * Current page\n   */\n  private _current = 1;\n  public get current(): number {\n    return this._current;\n  }\n  public set current(page: number) {\n    if (page !== this._current) {\n      this.stateDebouncer.changeStart();\n      this._current = page;\n      this._change.next(page);\n      this.stateDebouncer.changeDone();\n    }\n  }\n\n  /**\n   * Moves to the previous page if it exists\n   */\n  public previous() {\n    if (this.current > 1) {\n      this.current--;\n    }\n  }\n\n  /**\n   * Moves to the next page if it exists\n   */\n  public next() {\n    if (this.current < this.last) {\n      this.current++;\n    }\n  }\n\n  /**\n   * Index of the first item displayed on the current page, starting at 0, -1 if none displayed\n   */\n  public get firstItem(): number {\n    if (this._totalItems === 0) {\n      return -1;\n    }\n\n    if (this.size === 0) {\n      return 0;\n    }\n    return (this.current - 1) * this.size;\n  }\n\n  /**\n   * Index of the last item displayed on the current page, starting at 0, -1 if none displayed\n   */\n  public get lastItem(): number {\n    if (this._totalItems === 0) {\n      return -1;\n    }\n\n    if (this.size === 0) {\n      return this.totalItems - 1;\n    }\n    let lastInPage = this.current * this.size - 1;\n    if (this.totalItems) {\n      lastInPage = Math.min(lastInPage, this.totalItems - 1);\n    }\n    return lastInPage;\n  }\n\n  /**\n   * Resets the page size to 0\n   */\n  public resetPageSize(preventEmit = false): void {\n    this.preventEmit = preventEmit;\n    this.size = 0;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "stateDebouncer",
            "type": "StateDebouncer"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "stateDebouncer",
            "type": "StateDebouncer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "args": [
              {
                "name": "size",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "size",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "number",
            "returnType": "number",
            "line": 22
          }
        },
        "totalItems": {
          "name": "totalItems",
          "setSignature": {
            "name": "totalItems",
            "type": "void",
            "args": [
              {
                "name": "total",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "total",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "totalItems",
            "type": "number",
            "returnType": "number",
            "line": 54
          }
        },
        "last": {
          "name": "last",
          "setSignature": {
            "name": "last",
            "type": "void",
            "args": [
              {
                "name": "page",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 79,
            "jsdoctags": [
              {
                "name": "page",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "last",
            "type": "number",
            "returnType": "number",
            "line": 69
          }
        },
        "change": {
          "name": "change",
          "getSignature": {
            "name": "change",
            "type": "",
            "returnType": "Observable<number>",
            "line": 88
          }
        },
        "sizeChange": {
          "name": "sizeChange",
          "getSignature": {
            "name": "sizeChange",
            "type": "",
            "returnType": "Observable<number>",
            "line": 94
          }
        },
        "current": {
          "name": "current",
          "setSignature": {
            "name": "current",
            "type": "void",
            "args": [
              {
                "name": "page",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 105,
            "jsdoctags": [
              {
                "name": "page",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "current",
            "type": "number",
            "returnType": "number",
            "line": 102
          }
        },
        "firstItem": {
          "name": "firstItem",
          "getSignature": {
            "name": "firstItem",
            "type": "number",
            "returnType": "number",
            "line": 135,
            "description":
              "<p>Index of the first item displayed on the current page, starting at 0, -1 if none displayed</p>\n"
          }
        },
        "lastItem": {
          "name": "lastItem",
          "getSignature": {
            "name": "lastItem",
            "type": "number",
            "returnType": "number",
            "line": 149,
            "description":
              "<p>Index of the last item displayed on the current page, starting at 0, -1 if none displayed</p>\n"
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "PageCollectionService",
      "id": "injectable-PageCollectionService-7634cebc222dbaab85803bfa5709d6ac",
      "file": "src/clr-angular/wizard/providers/page-collection.service.ts",
      "properties": [
        {
          "name": "_pagesReset",
          "defaultValue": "new Subject<boolean>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 343,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 10024,
              "end": 10034,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 10024,
                "end": 10025,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 10025,
                "end": 10033,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>PageCollectionService</p>\n"
            }
          ]
        },
        {
          "name": "pages",
          "type": "QueryList<ClrWizardPage>",
          "optional": false,
          "description":
            "<p>A reference to the Wizard.pages QueryList.</p>\n<p>Populated when the wizard is created.</p>\n",
          "line": 44,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 1375,
              "end": 1385,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1375,
                "end": 1376,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1376,
                "end": 1384,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>PageCollectionService</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "name": "checkResults",
          "args": [
            {
              "name": "results",
              "type": "ClrWizardPage[]"
            },
            {
              "name": "requestedPageId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 170,
          "description":
            "<p>Consolidates guard logic that prevents a couple of unfortunate edge cases with\nlook ups on the collection of pages.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "results",
              "type": "ClrWizardPage[]",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "requestedPageId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "commitPage",
          "args": [
            {
              "name": "page",
              "type": "ClrWizardPage"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 325,
          "description":
            "<p>Generally only used internally to mark that a specific page has been &quot;committed&quot;.\nThis involves marking the page complete and firing the ClrWizardPage.onCommit\n(clrWizardPageOnCommit) output. Takes the wizard page object that you intend to\nmark completed as a parameter.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findFirstIncompletePage",
          "args": [],
          "optional": false,
          "returnType": "ClrWizardPage",
          "typeParameters": [],
          "line": 414,
          "modifierKind": [114]
        },
        {
          "name": "findFirstIncompletePageIndex",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 398,
          "description": "<p>Retrieves the index of the first incomplete page in the page collection.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "getNextPage",
          "args": [
            {
              "name": "page",
              "type": "ClrWizardPage"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 293,
          "description":
            "<p>Takes a wizard page object as a parameter and returns the wizard page object of\nthe page immediately after it in the page collection. Returns null if there is\nno page after the page it is passed.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPageById",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "ClrWizardPage",
          "typeParameters": [],
          "line": 122,
          "description":
            "<p>Used mostly internally, but accepts a string ID and returns a ClrWizardPage\nobject that matches the ID passed. Note that IDs here should include the prefix\n&quot;clr-wizard-page-&quot;.</p>\n<p>Returns the next-to-last page in the query list of pages. Operates as a getter\nso that it isn&#39;t working with stale data.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPageByIndex",
          "args": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "ClrWizardPage",
          "typeParameters": [],
          "line": 133,
          "description":
            "<p>Accepts s number as a parameter and treats that number as the index of the page\nyou&#39;re looking for in the collection of pages. Returns a  wizard page object.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPageIndex",
          "args": [
            {
              "name": "page",
              "type": "ClrWizardPage"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 154,
          "description":
            "<p>Takes a wizard page object as a parameter and returns its index in the\ncollection of pages.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPageRangeFromPages",
          "args": [
            {
              "name": "page",
              "type": "ClrWizardPage"
            },
            {
              "name": "otherPage",
              "type": "ClrWizardPage"
            }
          ],
          "optional": false,
          "returnType": "ClrWizardPage[]",
          "typeParameters": [],
          "line": 231,
          "description":
            "<p>Accepts two wizard page objects and returns those page objects with all other page\nobjects between them in the page collection. It doesn&#39;t care which page is ahead of the\nother in the parameters. It will be smart enough to figure that out  on its own.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "otherPage",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPreviousPage",
          "args": [
            {
              "name": "page",
              "type": "ClrWizardPage"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 254,
          "description":
            "<p>Takes a wizard page object as a parameter and returns the wizard page object of\nthe page immediately before it in the page collection. Returns null if there is\nno page before the page it is passed.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getStepItemIdForPage",
          "args": [
            {
              "name": "page",
              "type": "ClrWizardPage"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 309,
          "description":
            "<p>Takes a wizard page object as a parameter and generates a step item id from the\npage ID. Returns the generated step item ID as a string.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pageRange",
          "args": [
            {
              "name": "start",
              "type": "number"
            },
            {
              "name": "end",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "ClrWizardPage[]",
          "typeParameters": [],
          "line": 188,
          "description":
            "<p>Accepts two numeric indexes and returns an array of wizard page objects that include\nall wizard pages in the page collection from the first index to the second.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "start",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "end",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "previousPageIsCompleted",
          "args": [
            {
              "name": "page",
              "type": "ClrWizardPage"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 269,
          "description":
            "<p>Accepts a wizard page object as a parameter and returns a Boolean that says if\nthe page you sent it is complete.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "ClrWizardPage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 363,
          "description":
            "<p>Sets all completed states of the pages in the page collection to false and\nnotifies the navigation service to likewise reset the navigation.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "updateCompletedStates",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 378,
          "description":
            "<p>Rolls through all the pages in the page collection to make sure there are no\nincomplete pages sandwiched between completed pages in the workflow. Identifies\nthe first incomplete page index and sets all pages behind it to a completed\nstate of false.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        }
      ],
      "description":
        "<p>PageCollectionService manages the collection of pages assigned to the wizard and offers\na number of functions useful across the wizards providers and subcomponents -- all related\nto essentially lookups on the collection of pages.</p>\n<p>The easiest way to access PageCollectionService is via the wizard. The\nfollowing example would allow you to access your instance of the wizard from your host\ncomponent and thereby access the page collection via YourHostComponent.wizard.pageCollection.</p>\n",
      "sourceCode":
        "import { Injectable, QueryList } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nimport { ClrWizardPage } from '../wizard-page';\n\n/**\n * PageCollectionService manages the collection of pages assigned to the wizard and offers\n * a number of functions useful across the wizards providers and subcomponents -- all related\n * to essentially lookups on the collection of pages.\n *\n * The easiest way to access PageCollectionService is via the wizard. The\n * following example would allow you to access your instance of the wizard from your host\n * component and thereby access the page collection via YourHostComponent.wizard.pageCollection.\n *\n * @example\n * <clr-wizard #wizard ...>\n *\n * @example\n * export class YourHostComponent {\n *   @ViewChild(\"wizard\") wizard: Wizard;\n *   ...\n * }\n *\n * The heart of the page collection is the query list of pages, which it is assigned as a\n * reference to the Wizard.pages QueryList when the wizard is created.\n *\n */\n@Injectable()\nexport class PageCollectionService {\n  /**\n   * A reference to the Wizard.pages QueryList.\n   *\n   * Populated when the wizard is created.\n   *\n   * @memberof PageCollectionService\n   */\n  public pages: QueryList<ClrWizardPage>;\n\n  /**\n   * Converts the PageCollectionService.pages QueryList to an array and returns it.\n   *\n   * Useful for many instances when you would prefer a QueryList to act like an array.\n   *\n   * @memberof PageCollectionService\n   */\n  public get pagesAsArray(): ClrWizardPage[] {\n    return this.pages ? this.pages.toArray() : [];\n  }\n\n  /**\n   * Returns the length of the pages query list.\n   *\n   * @memberof PageCollectionService\n   */\n  public get pagesCount(): number {\n    return this.pages ? this.pages.length : 0;\n  }\n\n  /**\n   * Returns the next-to-last page in the query list of pages. Operates as a getter\n   * so that it isn't working with stale data.\n   *\n   * @memberof PageCollectionService\n   */\n  public get penultimatePage(): ClrWizardPage {\n    const pageCount = this.pagesCount;\n\n    if (pageCount < 2) {\n      return;\n    }\n\n    return this.pagesAsArray[pageCount - 2];\n  }\n\n  /**\n   * Returns the last page in the query list of pages. Operates as a getter\n   * so that it isn't working with stale data.\n   *\n   * @memberof PageCollectionService\n   */\n  public get lastPage(): ClrWizardPage {\n    const pageCount = this.pagesCount;\n\n    if (pageCount < 1) {\n      return;\n    }\n\n    return this.pagesAsArray[pageCount - 1];\n  }\n\n  /**\n   * Returns the first page in the query list of pages. Operates as a getter\n   * so that it isn't working with stale data.\n   *\n   * @memberof PageCollectionService\n   */\n  public get firstPage(): ClrWizardPage {\n    if (!this.pagesCount) {\n      return;\n    }\n\n    return this.pagesAsArray[0];\n  }\n\n  /**\n   * Used mostly internally, but accepts a string ID and returns a ClrWizardPage\n   * object that matches the ID passed. Note that IDs here should include the prefix\n   * \"clr-wizard-page-\".\n   *\n   * Returns the next-to-last page in the query list of pages. Operates as a getter\n   * so that it isn't working with stale data.\n   *\n   * @memberof PageCollectionService\n   */\n  public getPageById(id: string): ClrWizardPage {\n    const foundPages: ClrWizardPage[] = this.pages.filter((page: ClrWizardPage) => id === page.id);\n    return this.checkResults(foundPages, id);\n  }\n\n  /**\n   * Accepts s number as a parameter and treats that number as the index of the page\n   * you're looking for in the collection of pages. Returns a  wizard page object.\n   *\n   * @memberof PageCollectionService\n   */\n  public getPageByIndex(index: number): ClrWizardPage {\n    const pageCount = this.pagesCount;\n    const pagesLastIndex: number = pageCount > 1 ? pageCount - 1 : 0;\n\n    if (index < 0) {\n      throw new Error('Cannot retrieve page with index of ' + index);\n    }\n\n    if (index > pagesLastIndex) {\n      throw new Error('Page index is greater than length of pages array.');\n    }\n\n    return this.pagesAsArray[index];\n  }\n\n  /**\n   * Takes a wizard page object as a parameter and returns its index in the\n   * collection of pages.\n   *\n   * @memberof PageCollectionService\n   */\n  public getPageIndex(page: ClrWizardPage): number {\n    const index = this.pagesAsArray.indexOf(page);\n\n    if (index < 0) {\n      throw new Error('Requested page cannot be found in collection of pages.');\n    }\n\n    return index;\n  }\n\n  /**\n   * Consolidates guard logic that prevents a couple of unfortunate edge cases with\n   * look ups on the collection of pages.\n   *\n   * @memberof PageCollectionService\n   */\n  private checkResults(results: ClrWizardPage[], requestedPageId: string) {\n    const foundPagesCount: number = results.length || 0;\n\n    if (foundPagesCount > 1) {\n      throw new Error('More than one page has the requested id ' + requestedPageId + '.');\n    } else if (foundPagesCount < 1) {\n      throw new Error('No page can be found with the id ' + requestedPageId + '.');\n    } else {\n      return results[0];\n    }\n  }\n\n  /**\n   * Accepts two numeric indexes and returns an array of wizard page objects that include\n   * all wizard pages in the page collection from the first index to the second.\n   *\n   * @memberof PageCollectionService\n   */\n  public pageRange(start: number, end: number): ClrWizardPage[] {\n    let pages: ClrWizardPage[] = [];\n\n    if (start < 0 || end < 0) {\n      return [];\n    }\n\n    if (start === null || typeof start === 'undefined' || isNaN(start)) {\n      return [];\n    }\n\n    if (end === null || typeof end === 'undefined' || isNaN(end)) {\n      return [];\n    }\n\n    if (end > this.pagesCount) {\n      end = this.pagesCount;\n    }\n\n    pages = this.pagesAsArray;\n\n    if (end - start === 0) {\n      // just return the one page they want\n      return [this.getPageByIndex(start)];\n    }\n\n    // slice end does not include item referenced by end index, which is weird for users\n    // incrementing end index here to correct that so users and other methods\n    // don't have to think about it\n    end = end + 1;\n\n    // slice does not return the last one in the range but it does include the first one\n    // does not modify original array\n    return pages.slice(start, end);\n  }\n\n  /**\n   * Accepts two wizard page objects and returns those page objects with all other page\n   * objects between them in the page collection. It doesn't care which page is ahead of the\n   * other in the parameters. It will be smart enough to figure that out  on its own.\n   *\n   * @memberof PageCollectionService\n   */\n  public getPageRangeFromPages(page: ClrWizardPage, otherPage: ClrWizardPage): ClrWizardPage[] {\n    const pageIndex = this.getPageIndex(page);\n    const otherPageIndex = this.getPageIndex(otherPage);\n    let startIndex: number;\n    let endIndex: number;\n\n    if (pageIndex <= otherPageIndex) {\n      startIndex = pageIndex;\n      endIndex = otherPageIndex;\n    } else {\n      startIndex = otherPageIndex;\n      endIndex = pageIndex;\n    }\n    return this.pageRange(startIndex, endIndex);\n  }\n\n  /**\n   * Takes a wizard page object as a parameter and returns the wizard page object of\n   * the page immediately before it in the page collection. Returns null if there is\n   * no page before the page it is passed.\n   *\n   * @memberof PageCollectionService\n   */\n  public getPreviousPage(page: ClrWizardPage) {\n    const myPageIndex = this.getPageIndex(page);\n    const previousPageIndex = myPageIndex - 1;\n    if (previousPageIndex < 0) {\n      return null;\n    }\n    return this.getPageByIndex(previousPageIndex);\n  }\n\n  /**\n   * Accepts a wizard page object as a parameter and returns a Boolean that says if\n   * the page you sent it is complete.\n   *\n   * @memberof PageCollectionService\n   */\n  public previousPageIsCompleted(page: ClrWizardPage) {\n    let previousPage: ClrWizardPage;\n\n    if (!page) {\n      return false;\n    }\n\n    previousPage = this.getPreviousPage(page);\n\n    if (null === previousPage) {\n      // page is the first page. no previous page.\n      return true;\n    }\n\n    return previousPage.completed;\n  }\n\n  /**\n   * Takes a wizard page object as a parameter and returns the wizard page object of\n   * the page immediately after it in the page collection. Returns null if there is\n   * no page after the page it is passed.\n   *\n   * @memberof PageCollectionService\n   */\n  public getNextPage(page: ClrWizardPage) {\n    const myPageIndex = this.getPageIndex(page);\n    const nextPageIndex = myPageIndex + 1;\n\n    if (nextPageIndex >= this.pagesAsArray.length) {\n      return null;\n    }\n    return this.getPageByIndex(nextPageIndex);\n  }\n\n  /**\n   * Takes a wizard page object as a parameter and generates a step item id from the\n   * page ID. Returns the generated step item ID as a string.\n   *\n   * @memberof PageCollectionService\n   */\n  public getStepItemIdForPage(page: ClrWizardPage) {\n    const pageId = page.id;\n    const pageIdParts = pageId.split('-').reverse();\n\n    pageIdParts[1] = 'step';\n    return pageIdParts.reverse().join('-');\n  }\n\n  /**\n   * Generally only used internally to mark that a specific page has been \"committed\".\n   * This involves marking the page complete and firing the ClrWizardPage.onCommit\n   * (clrWizardPageOnCommit) output. Takes the wizard page object that you intend to\n   * mark completed as a parameter.\n   *\n   * @memberof PageCollectionService\n   */\n  public commitPage(page: ClrWizardPage) {\n    const pageHasOverrides = page.stopNext || page.preventDefault;\n    page.completed = true;\n\n    if (!pageHasOverrides) {\n      // prevent loop of event emission; alternate flows work off\n      // of event emitters this is how they break that cycle.\n      page.onCommit.emit(page.id);\n    }\n  }\n\n  // used by the navService to navigate back to first possible step after\n  // pages are reset\n\n  /**\n   *\n   * @memberof PageCollectionService\n   */\n  private _pagesReset = new Subject<boolean>();\n\n  /**\n   * An observable that the navigation service listens to in order to know when\n   * the page collection completed states have been reset to false so that way it\n   * can also reset the navigation to make the first page in the page collection\n   * current/active.\n   *\n   * @memberof PageCollectionService\n   */\n  public get pagesReset(): Observable<boolean> {\n    return this._pagesReset.asObservable();\n  }\n\n  /**\n   * Sets all completed states of the pages in the page collection to false and\n   * notifies the navigation service to likewise reset the navigation.\n   *\n   * @memberof PageCollectionService\n   */\n  public reset() {\n    this.pagesAsArray.forEach((page: ClrWizardPage) => {\n      page.completed = false;\n    });\n    this._pagesReset.next(true);\n  }\n\n  /**\n   * Rolls through all the pages in the page collection to make sure there are no\n   * incomplete pages sandwiched between completed pages in the workflow. Identifies\n   * the first incomplete page index and sets all pages behind it to a completed\n   * state of false.\n   *\n   * @memberof PageCollectionService\n   */\n  public updateCompletedStates(): void {\n    const firstIncompleteIndex = this.findFirstIncompletePageIndex();\n\n    if (firstIncompleteIndex === this.pagesAsArray.length - 1) {\n      // all complete no need to do anything\n      return;\n    }\n\n    this.pagesAsArray.forEach((page: ClrWizardPage, index: number) => {\n      if (index > firstIncompleteIndex) {\n        page.completed = false;\n      }\n    });\n  }\n\n  /**\n   * Retrieves the index of the first incomplete page in the page collection.\n   *\n   * @memberof PageCollectionService\n   */\n  public findFirstIncompletePageIndex(): number {\n    let returnIndex: number = null;\n    this.pagesAsArray.forEach((page: ClrWizardPage, index: number) => {\n      if (null === returnIndex && false === page.completed) {\n        returnIndex = index;\n      }\n    });\n\n    // fallthrough, all completed, return last page\n    if (null === returnIndex) {\n      returnIndex = this.pagesCount - 1;\n    }\n\n    return returnIndex;\n  }\n\n  public findFirstIncompletePage(): ClrWizardPage {\n    const myIncompleteIndex = this.findFirstIncompletePageIndex();\n    return this.pagesAsArray[myIncompleteIndex];\n  }\n}\n",
      "jsdoctags": [
        {
          "pos": 897,
          "end": 907,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 897,
            "end": 898,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 898,
            "end": 905,
            "flags": 0,
            "escapedText": "example"
          },
          "comment": "<clr-wizard #wizard ...>"
        },
        {
          "pos": 940,
          "end": 950,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 940,
            "end": 941,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 941,
            "end": 948,
            "flags": 0,
            "escapedText": "example"
          },
          "comment": "export class YourHostComponent {"
        },
        {
          "pos": 990,
          "end": 1000,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 990,
            "end": 991,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 991,
            "end": 1000,
            "flags": 0,
            "escapedText": "ViewChild"
          },
          "comment":
            "(\"wizard\") wizard: Wizard;\n...\n}\n\nThe heart of the page collection is the query list of pages, which it is assigned as a\nreference to the Wizard.pages QueryList when the wizard is created."
        }
      ],
      "accessors": {
        "pagesAsArray": {
          "name": "pagesAsArray",
          "getSignature": {
            "name": "pagesAsArray",
            "type": "[]",
            "returnType": "ClrWizardPage[]",
            "line": 53,
            "description":
              "<p>Converts the PageCollectionService.pages QueryList to an array and returns it.</p>\n<p>Useful for many instances when you would prefer a QueryList to act like an array.</p>\n",
            "jsdoctags": [
              {
                "pos": 1648,
                "end": 1658,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 1648,
                  "end": 1649,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 1649,
                  "end": 1657,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>PageCollectionService</p>\n"
              }
            ]
          }
        },
        "pagesCount": {
          "name": "pagesCount",
          "getSignature": {
            "name": "pagesCount",
            "type": "number",
            "returnType": "number",
            "line": 62,
            "description": "<p>Returns the length of the pages query list.</p>\n",
            "jsdoctags": [
              {
                "pos": 1854,
                "end": 1864,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 1854,
                  "end": 1855,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 1855,
                  "end": 1863,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>PageCollectionService</p>\n"
              }
            ]
          }
        },
        "penultimatePage": {
          "name": "penultimatePage",
          "getSignature": {
            "name": "penultimatePage",
            "type": "",
            "returnType": "ClrWizardPage",
            "line": 72,
            "description":
              "<p>Returns the next-to-last page in the query list of pages. Operates as a getter\nso that it isn&#39;t working with stale data.</p>\n",
            "jsdoctags": [
              {
                "pos": 2127,
                "end": 2137,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 2127,
                  "end": 2128,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 2128,
                  "end": 2136,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>PageCollectionService</p>\n"
              }
            ]
          }
        },
        "lastPage": {
          "name": "lastPage",
          "getSignature": {
            "name": "lastPage",
            "type": "",
            "returnType": "ClrWizardPage",
            "line": 88,
            "description":
              "<p>Returns the last page in the query list of pages. Operates as a getter\nso that it isn&#39;t working with stale data.</p>\n",
            "jsdoctags": [
              {
                "pos": 2488,
                "end": 2498,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 2488,
                  "end": 2489,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 2489,
                  "end": 2497,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>PageCollectionService</p>\n"
              }
            ]
          }
        },
        "firstPage": {
          "name": "firstPage",
          "getSignature": {
            "name": "firstPage",
            "type": "",
            "returnType": "ClrWizardPage",
            "line": 104,
            "description":
              "<p>Returns the first page in the query list of pages. Operates as a getter\nso that it isn&#39;t working with stale data.</p>\n",
            "jsdoctags": [
              {
                "pos": 2843,
                "end": 2853,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 2843,
                  "end": 2844,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 2844,
                  "end": 2852,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>PageCollectionService</p>\n"
              }
            ]
          }
        },
        "pagesReset": {
          "name": "pagesReset",
          "getSignature": {
            "name": "pagesReset",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 353,
            "description":
              "<p>An observable that the navigation service listens to in order to know when\nthe page collection completed states have been reset to false so that way it\ncan also reset the navigation to make the first page in the page collection\ncurrent/active.</p>\n",
            "jsdoctags": [
              {
                "pos": 10391,
                "end": 10401,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 10391,
                  "end": 10392,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 10392,
                  "end": 10400,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>PageCollectionService</p>\n"
              }
            ]
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ResponsiveNavigationService",
      "id": "injectable-ResponsiveNavigationService-dc50da3dbd4fe422dffd93e3009b88e1",
      "file": "src/clr-angular/layout/nav/providers/responsive-navigation.service.ts",
      "properties": [
        {
          "name": "controlNavSubject",
          "defaultValue": "new Subject<ResponsiveNavControlMessage>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "registerNavSubject",
          "defaultValue": "new ReplaySubject<number[]>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "responsiveNavList",
          "defaultValue": "[]",
          "type": "number[]",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "closeAllNavs",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60
        },
        {
          "name": "isNavRegistered",
          "args": [
            {
              "name": "navLevel",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 39,
          "jsdoctags": [
            {
              "name": "navLevel",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerNav",
          "args": [
            {
              "name": "navLevel",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "jsdoctags": [
            {
              "name": "navLevel",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sendControlMessage",
          "args": [
            {
              "name": "controlCode",
              "type": "string"
            },
            {
              "name": "navLevel",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "jsdoctags": [
            {
              "name": "controlCode",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "navLevel",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "unregisterNav",
          "args": [
            {
              "name": "navLevel",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "jsdoctags": [
            {
              "name": "navLevel",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ReplaySubject, Subject } from 'rxjs';\n\nimport { ResponsiveNavCodes } from '../responsive-nav-codes';\nimport { ResponsiveNavControlMessage } from '../responsive-nav-control-message';\n\n@Injectable({ providedIn: 'root' })\nexport class ResponsiveNavigationService {\n  public responsiveNavList: number[] = [];\n  private registerNavSubject = new ReplaySubject<number[]>();\n  private controlNavSubject = new Subject<ResponsiveNavControlMessage>();\n\n  get registeredNavs(): Observable<number[]> {\n    return this.registerNavSubject.asObservable();\n  }\n\n  get navControl(): Observable<ResponsiveNavControlMessage> {\n    return this.controlNavSubject.asObservable();\n  }\n\n  constructor() {\n    this.closeAllNavs(); // We start with all navs closed\n  }\n\n  registerNav(navLevel: number): void {\n    if (!navLevel || this.isNavRegistered(navLevel)) {\n      return;\n    }\n    this.responsiveNavList.push(navLevel);\n    this.registerNavSubject.next(this.responsiveNavList);\n  }\n\n  isNavRegistered(navLevel: number): boolean {\n    if (this.responsiveNavList.indexOf(navLevel) > -1) {\n      console.error('Multiple clr-nav-level ' + navLevel + ' attributes found. Please make sure that only one exists');\n      return true;\n    }\n    return false;\n  }\n\n  unregisterNav(navLevel: number) {\n    const index = this.responsiveNavList.indexOf(navLevel);\n    if (index > -1) {\n      this.responsiveNavList.splice(index, 1);\n      this.registerNavSubject.next(this.responsiveNavList);\n    }\n  }\n\n  sendControlMessage(controlCode: string, navLevel: number) {\n    const message: ResponsiveNavControlMessage = new ResponsiveNavControlMessage(controlCode, navLevel);\n    this.controlNavSubject.next(message);\n  }\n\n  closeAllNavs() {\n    const message: ResponsiveNavControlMessage = new ResponsiveNavControlMessage(\n      ResponsiveNavCodes.NAV_CLOSE_ALL,\n      -999\n    );\n    this.controlNavSubject.next(message);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [],
        "line": 25
      },
      "accessors": {
        "registeredNavs": {
          "name": "registeredNavs",
          "getSignature": {
            "name": "registeredNavs",
            "type": "",
            "returnType": "Observable<number[]>",
            "line": 19
          }
        },
        "navControl": {
          "name": "navControl",
          "getSignature": {
            "name": "navControl",
            "type": "",
            "returnType": "Observable<ResponsiveNavControlMessage>",
            "line": 23
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "RootDropdownService",
      "id": "injectable-RootDropdownService-f6ff21895cb225296648ebcdd293c038",
      "file": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
      "properties": [
        {
          "name": "_changes",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "closeMenus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class RootDropdownService {\n  private _changes: Subject<boolean> = new Subject<boolean>();\n\n  get changes(): Observable<boolean> {\n    return this._changes.asObservable();\n  }\n\n  closeMenus(): void {\n    this._changes.next(false);\n  }\n}\n\nexport function clrRootDropdownFactory(existing: RootDropdownService) {\n  return existing || new RootDropdownService();\n}\n\nexport const ROOT_DROPDOWN_PROVIDER = {\n  provide: RootDropdownService,\n  useFactory: clrRootDropdownFactory,\n  deps: [[new Optional(), new SkipSelf(), RootDropdownService]],\n};\n",
      "accessors": {
        "changes": {
          "name": "changes",
          "getSignature": {
            "name": "changes",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 14
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "RowActionService",
      "id": "injectable-RowActionService-91ba197762636378acad7d18dcdf66bb",
      "file": "src/clr-angular/data/datagrid/providers/row-action-service.ts",
      "properties": [
        {
          "name": "actionableCount",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "register",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "modifierKind": [114]
        },
        {
          "name": "unregister",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RowActionService {\n  private actionableCount = 0;\n\n  public register() {\n    this.actionableCount++;\n  }\n\n  public unregister() {\n    this.actionableCount--;\n  }\n\n  /**\n   * false means no rows with action\n   */\n  public get hasActionableRow(): boolean {\n    return this.actionableCount > 0;\n  }\n}\n",
      "accessors": {
        "hasActionableRow": {
          "name": "hasActionableRow",
          "getSignature": {
            "name": "hasActionableRow",
            "type": "boolean",
            "returnType": "boolean",
            "line": 24,
            "description": "<p>false means no rows with action</p>\n"
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ScrollingService",
      "id": "injectable-ScrollingService-27d6fbfdf2f622d29c3122d0fb2df238",
      "file": "src/clr-angular/utils/scrolling/scrolling-service.ts",
      "properties": [],
      "methods": [
        {
          "name": "resumeScrolling",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        },
        {
          "name": "stopScrolling",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13
        }
      ],
      "description": "",
      "sourceCode":
        "import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollingService {\n  constructor(@Inject(DOCUMENT) private _document: any) {}\n\n  stopScrolling(): void {\n    this._document.body.classList.add('no-scrolling');\n  }\n\n  resumeScrolling(): void {\n    if (this._document.body.classList.contains('no-scrolling')) {\n      this._document.body.classList.remove('no-scrolling');\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_document",
            "type": "any"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "_document",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "Selection",
      "id": "injectable-Selection-871174f49d92b03bf7dfb9c3b1465fdd",
      "file": "src/clr-angular/data/datagrid/providers/selection.ts",
      "properties": [
        {
          "name": "_change",
          "defaultValue": "new Subject<T[] | T>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable that lets other classes subscribe to selection changes</p>\n",
          "line": 261,
          "modifierKind": [112]
        },
        {
          "name": "_current",
          "type": "T[]",
          "optional": false,
          "description": "<p>The current selection</p>\n",
          "line": 239,
          "modifierKind": [112]
        },
        {
          "name": "_currentSingle",
          "type": "T",
          "optional": false,
          "description": "<p>The current selection in single selection type</p>\n",
          "line": 215,
          "modifierKind": [112]
        },
        {
          "name": "_selectionType",
          "defaultValue": "SelectionType.None",
          "type": "SelectionType",
          "optional": false,
          "description": "",
          "line": 172,
          "modifierKind": [112]
        },
        {
          "name": "debounce",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "<p>Ignore items changes in the same change detection cycle.</p>\n",
          "line": 198,
          "modifierKind": [112]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [114]
        },
        {
          "name": "lockedRefs",
          "defaultValue": "[]",
          "type": "T[]",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [112]
        },
        {
          "name": "preserveSelection",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [114]
        },
        {
          "name": "prevSelectionRefs",
          "defaultValue": "[]",
          "type": "T[]",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        },
        {
          "name": "prevSingleSelectionRef",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        },
        {
          "name": "rowSelectionMode",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 189,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 7374,
              "end": 7386,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 7374,
                "end": 7375,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 7375,
                "end": 7385,
                "flags": 0,
                "escapedText": "deprecated"
              },
              "comment": "<p>since 2.0, remove in 3.0 </p>\n"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "<p>Subscriptions to the other providers changes.</p>\n",
          "line": 203,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "canItBeLocked",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 356,
          "modifierKind": [112]
        },
        {
          "name": "clearSelection",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 164,
          "modifierKind": [114]
        },
        {
          "name": "deselectItem",
          "args": [
            {
              "name": "indexOfItem",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 301,
          "description": "<p>Deselects an item</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "indexOfItem",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 208,
          "description": "<p>Cleans up our subscriptions to other providers</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "emitChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 262,
          "modifierKind": [112]
        },
        {
          "name": "isAllSelected",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 339,
          "description": "<p>Checks if all currently displayed items are selected</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "isLocked",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 380,
          "description": "<p>Check is item locked or not by searcing into lockedRefs for entry</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isSelected",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 277,
          "description": "<p>Checks if an item is currently selected</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "lockItem",
          "args": [
            {
              "name": "item",
              "type": "T"
            },
            {
              "name": "lock",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 364,
          "description": "<p>Lock and unlock item</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "lock",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "selectItem",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 289,
          "description": "<p>Selects an item</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setSelected",
          "args": [
            {
              "name": "item",
              "type": "T"
            },
            {
              "name": "selected",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 314,
          "description": "<p>Selects or deselects an item</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "selected",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleAll",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 396,
          "description": "<p>Selects or deselects all currently displayed items</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "updateCurrent",
          "args": [
            {
              "name": "value",
              "type": "T[]"
            },
            {
              "name": "emit",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 247,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "value",
              "type": "T[]",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "emit",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, TrackByFunction } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\n\nimport { FiltersProvider } from './filters';\nimport { Items } from './items';\nimport { SelectionType } from '../enums/selection-type';\n\nlet nbSelection: number = 0;\n\n@Injectable()\nexport class Selection<T = any> {\n  public id: string;\n  public preserveSelection: boolean = false;\n  private prevSelectionRefs: T[] = []; // Refs of selected items\n  private prevSingleSelectionRef: T; // Ref of single selected item\n  private lockedRefs: T[] = []; // Ref of locked items\n\n  constructor(private _items: Items<T>, private _filters: FiltersProvider<T>) {\n    this.id = 'clr-dg-selection' + nbSelection++;\n\n    this.subscriptions.push(\n      this._filters.change.subscribe(() => {\n        if (!this._selectable || this.preserveSelection) {\n          return;\n        }\n        this.clearSelection();\n      })\n    );\n\n    this.subscriptions.push(\n      this._items.allChanges.subscribe(updatedItems => {\n        // Reset the lockedRefs;\n        const updateLockedRef: T[] = [];\n\n        switch (this.selectionType) {\n          case SelectionType.None: {\n            break;\n          }\n\n          case SelectionType.Single: {\n            let newSingle: any;\n            const trackBy: TrackByFunction<T> = this._items.trackBy;\n            let selectionUpdated: boolean = false;\n\n            // if the currentSingle has been set before data was loaded, we look up and save the ref from current data set\n            if (this.currentSingle && !this.prevSingleSelectionRef) {\n              if (this._items.all && this._items.trackBy) {\n                const lookup = this._items.all.findIndex(maybe => maybe === this.currentSingle);\n                this.prevSingleSelectionRef = this._items.trackBy(lookup, this.currentSingle);\n              }\n            }\n\n            updatedItems.forEach((item, index) => {\n              const ref = trackBy(index, item);\n              // If one of the updated items is the previously selectedSingle, set it as the new one\n              if (this.prevSingleSelectionRef === ref) {\n                newSingle = item;\n                selectionUpdated = true;\n              }\n              if (this.lockedRefs.indexOf(ref) > -1) {\n                updateLockedRef.push(ref);\n              }\n            });\n\n            // If we're using smart datagrids, we expect all items to be present in the updatedItems array.\n            // Therefore, we should delete the currentSingle if it used to be defined but doesn't exist anymore.\n            // No explicit \"delete\" is required, since newSingle would be undefined at this point.\n            // Marking it as selectionUpdated here will set currentSingle to undefined below in the setTimeout.\n            if (this._items.smart && !newSingle) {\n              selectionUpdated = true;\n            }\n\n            // TODO: Discussed this with Eudes and this is fine for now.\n            // But we need to figure out a different pattern for the\n            // child triggering the parent change detection problem.\n            // Using setTimeout for now to fix this.\n            setTimeout(() => {\n              if (selectionUpdated) {\n                this.currentSingle = newSingle;\n              }\n            }, 0);\n            break;\n          }\n\n          case SelectionType.Multi: {\n            let leftOver: any[] = this.current.slice();\n            const trackBy: TrackByFunction<any> = this._items.trackBy;\n            let selectionUpdated: boolean = false;\n\n            // if the current has been set before data was loaded, we look up and save the ref from current data set\n            if (this.current.length > 0 && this.prevSelectionRefs.length !== this.current.length) {\n              if (this._items.all && this._items.trackBy) {\n                this.prevSelectionRefs = [];\n                this.current.forEach(item => {\n                  const lookup = this._items.all.findIndex(maybe => maybe === item);\n                  this.prevSelectionRefs.push(this._items.trackBy(lookup, item));\n                });\n              }\n            }\n\n            // Duplicate loop, when the issue is issue#2342 is revisited keep in mind that\n            // we need to go over every updated item and check to see if there are valid to be\n            // locked or not and update it. When only add items that are found in the lockedRefs back.\n            //\n            // The both loops below that goes over updatedItems could be combined into one.\n            updatedItems.forEach((item, index) => {\n              const ref = trackBy(index, item);\n              if (this.lockedRefs.indexOf(ref) > -1) {\n                updateLockedRef.push(ref);\n              }\n            });\n\n            // TODO: revisit this when we work on https://github.com/vmware/clarity/issues/2342\n            // currently, the selection is cleared when filter is applied, so the logic inside\n            // the if statement below results in broken behavior.\n            if (leftOver.length > 0) {\n              updatedItems.forEach((item, index) => {\n                const ref = trackBy(index, item);\n                // Look in current selected refs array if item is selected, and update actual value\n                const selectedIndex = this.prevSelectionRefs.indexOf(ref);\n                if (selectedIndex > -1) {\n                  leftOver[selectedIndex] = item;\n                  selectionUpdated = true;\n                }\n              });\n\n              // Filter out any unmatched items if we're using smart datagrids where we expect all items to be\n              // present\n              if (this._items.smart) {\n                leftOver = leftOver.filter(selected => updatedItems.indexOf(selected) > -1);\n                if (this.current.length !== leftOver.length) {\n                  selectionUpdated = true;\n                }\n              }\n\n              // TODO: Discussed this with Eudes and this is fine for now.\n              // But we need to figure out a different pattern for the\n              // child triggering the parent change detection problem.\n              // Using setTimeout for now to fix this.\n              setTimeout(() => {\n                if (selectionUpdated) {\n                  this.current = leftOver;\n                }\n              }, 0);\n            }\n            break;\n          }\n\n          default: {\n            break;\n          }\n        }\n        // Sync locked items\n        this.lockedRefs = updateLockedRef;\n      })\n    );\n  }\n\n  public clearSelection(): void {\n    this.current.length = 0;\n    this.prevSelectionRefs = [];\n    this._currentSingle = null;\n    this.prevSingleSelectionRef = null;\n    this.emitChange();\n  }\n\n  private _selectionType: SelectionType = SelectionType.None;\n  public get selectionType(): SelectionType {\n    return this._selectionType;\n  }\n  public set selectionType(value: SelectionType) {\n    if (value === this.selectionType) {\n      return;\n    }\n    this._selectionType = value;\n    if (value === SelectionType.None) {\n      delete this.current;\n    } else {\n      this.updateCurrent([], false);\n    }\n  }\n\n  /** @deprecated since 2.0, remove in 3.0 */\n  public rowSelectionMode: boolean = false;\n\n  private get _selectable(): boolean {\n    return this._selectionType === SelectionType.Multi || this._selectionType === SelectionType.Single;\n  }\n  /**\n   * Ignore items changes in the same change detection cycle.\n   */\n  // tslint:disable-next-line\n  private debounce: boolean = false;\n\n  /**\n   * Subscriptions to the other providers changes.\n   */\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Cleans up our subscriptions to other providers\n   */\n  public destroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * The current selection in single selection type\n   */\n  private _currentSingle: T;\n  public get currentSingle(): T {\n    return this._currentSingle;\n  }\n  public set currentSingle(value: T) {\n    if (value === this._currentSingle) {\n      return;\n    }\n\n    this._currentSingle = value;\n    if (this._items.all && this._items.trackBy && value) {\n      const lookup = this._items.all.findIndex(maybe => maybe === value);\n      this.prevSingleSelectionRef = this._items.trackBy(lookup, value);\n    }\n    this.emitChange();\n    // Ignore items changes in the same change detection cycle.\n    // @TODO This can likely be removed!\n    this.debounce = true;\n    setTimeout(() => (this.debounce = false));\n  }\n\n  /**\n   * The current selection\n   */\n  private _current: T[];\n  public get current(): T[] {\n    return this._current;\n  }\n  public set current(value: T[]) {\n    this.updateCurrent(value, true);\n  }\n\n  public updateCurrent(value: T[], emit: boolean) {\n    this._current = value;\n    if (emit) {\n      this.emitChange();\n      // Ignore items changes in the same change detection cycle.\n      // @TODO This can likely be removed!\n      this.debounce = true;\n      setTimeout(() => (this.debounce = false));\n    }\n  }\n\n  /**\n   * The Observable that lets other classes subscribe to selection changes\n   */\n  private _change = new Subject<T[] | T>();\n  private emitChange() {\n    if (this._selectionType === SelectionType.Single) {\n      this._change.next(this.currentSingle);\n    } else if (this._selectionType === SelectionType.Multi) {\n      this._change.next(this.current);\n    }\n  }\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get change(): Observable<T[] | T> {\n    return this._change.asObservable();\n  }\n\n  /**\n   * Checks if an item is currently selected\n   */\n  public isSelected(item: T): boolean {\n    if (this._selectionType === SelectionType.Single) {\n      return this.currentSingle === item;\n    } else if (this._selectionType === SelectionType.Multi) {\n      return this.current.indexOf(item) >= 0;\n    }\n    return false;\n  }\n\n  /**\n   * Selects an item\n   */\n  private selectItem(item: T): void {\n    this.current.push(item);\n    if (this._items.trackBy) {\n      // Push selected ref onto array\n      const lookup = this._items.all.findIndex(maybe => maybe === item);\n      this.prevSelectionRefs.push(this._items.trackBy(lookup, item));\n    }\n  }\n\n  /**\n   * Deselects an item\n   */\n  private deselectItem(indexOfItem: number): void {\n    this.current.splice(indexOfItem, 1);\n    if (this._items.trackBy && indexOfItem < this.prevSelectionRefs.length) {\n      // Keep selected refs array in sync\n      const removedItems = this.prevSelectionRefs.splice(indexOfItem, 1);\n      // locked reference is no longer needed (if any)\n      this.lockedRefs = this.lockedRefs.filter(locked => locked !== removedItems[0]);\n    }\n  }\n\n  /**\n   * Selects or deselects an item\n   */\n  public setSelected(item: T, selected: boolean) {\n    switch (this._selectionType) {\n      case SelectionType.None:\n        break;\n      case SelectionType.Single:\n        // in single selection, set currentSingle method should be used\n        break;\n      case SelectionType.Multi:\n        const index = this.current.indexOf(item);\n        if (index >= 0 && !selected) {\n          this.deselectItem(index);\n          this.emitChange();\n        } else if (index < 0 && selected) {\n          this.selectItem(item);\n          this.emitChange();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Checks if all currently displayed items are selected\n   */\n  public isAllSelected(): boolean {\n    if (this._selectionType !== SelectionType.Multi || !this._items.displayed) {\n      return false;\n    }\n    // make sure to exclude the locked items from the list when counting\n    const displayedItems: T[] = this._items.displayed.filter(item => {\n      return this.isLocked(item) === false;\n    });\n\n    const nbDisplayed = displayedItems.length;\n    if (nbDisplayed < 1) {\n      return false;\n    }\n    const temp: T[] = displayedItems.filter(item => this.current.indexOf(item) > -1);\n    return temp.length === displayedItems.length;\n  }\n\n  private canItBeLocked() {\n    // We depend on the trackBy and all so there are part of the requirment of is item could be locked\n    return this._selectionType !== SelectionType.None;\n  }\n\n  /**\n   * Lock and unlock item\n   */\n  public lockItem(item: T, lock: boolean) {\n    if (this.canItBeLocked()) {\n      const ref = this._items.trackBy(this._items.all.findIndex(maybe => maybe === item), item);\n      if (lock === true) {\n        // Add to lockedRef\n        this.lockedRefs.push(ref);\n      } else {\n        // Remove from lockedRef\n        this.lockedRefs = this.lockedRefs.filter(lockedItem => ref !== lockedItem);\n      }\n    }\n  }\n\n  /**\n   * Check is item locked or not by searcing into lockedRefs for entry\n   */\n  public isLocked(item: T): boolean {\n    /**\n     * The check for selectionType will boost the performence by NOT searching\n     * into the array when there is no need for that.\n     */\n    if (this.canItBeLocked()) {\n      const ref = this._items.trackBy(this._items.all.findIndex(maybe => maybe === item), item);\n      return this.lockedRefs.indexOf(ref) > -1;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects or deselects all currently displayed items\n   */\n  public toggleAll() {\n    if (this._selectionType === SelectionType.None || this._selectionType === SelectionType.Single) {\n      return;\n    }\n    /**\n     * If every currently displayed item is already selected, we clear them.\n     * If at least one item isn't selected, we select every currently displayed item.\n     */\n    if (this.isAllSelected()) {\n      this._items.displayed.forEach(item => {\n        const currentIndex = this.current.indexOf(item);\n        if (currentIndex > -1 && this.isLocked(item) === false) {\n          this.deselectItem(currentIndex);\n        }\n      });\n    } else {\n      this._items.displayed.forEach(item => {\n        if (this.current.indexOf(item) < 0 && this.isLocked(item) === false) {\n          this.selectItem(item);\n        }\n      });\n    }\n    this.emitChange();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_items",
            "type": "Items<T>"
          },
          {
            "name": "_filters",
            "type": "FiltersProvider<T>"
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "_items",
            "type": "Items<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "selectionType": {
          "name": "selectionType",
          "setSignature": {
            "name": "selectionType",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 176,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selectionType",
            "type": "",
            "returnType": "SelectionType",
            "line": 173
          }
        },
        "_selectable": {
          "name": "_selectable",
          "getSignature": {
            "name": "_selectable",
            "type": "boolean",
            "returnType": "boolean",
            "line": 191
          }
        },
        "currentSingle": {
          "name": "currentSingle",
          "setSignature": {
            "name": "currentSingle",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 219,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentSingle",
            "type": "",
            "returnType": "T",
            "line": 216
          }
        },
        "current": {
          "name": "current",
          "setSignature": {
            "name": "current",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "[]"
              }
            ],
            "returnType": "void",
            "line": 243,
            "jsdoctags": [
              {
                "name": "value",
                "type": "[]",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "current",
            "type": "[]",
            "returnType": "T[]",
            "line": 240
          }
        },
        "change": {
          "name": "change",
          "getSignature": {
            "name": "change",
            "type": "",
            "returnType": "Observable<[] | T>",
            "line": 270
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "SignpostFocusManager",
      "id": "injectable-SignpostFocusManager-d8f97b7137a638296dd51cef028dc34f",
      "file": "src/clr-angular/popover/signpost/providers/signpost-focus-manager.service.ts",
      "properties": [
        {
          "name": "_triggerEl",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "focusTrigger",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class SignpostFocusManager {\n  private _triggerEl: HTMLElement;\n\n  set triggerEl(value: HTMLElement) {\n    this._triggerEl = value;\n  }\n\n  focusTrigger() {\n    if (this._triggerEl) {\n      this._triggerEl.focus();\n    }\n  }\n}\n",
      "accessors": {
        "triggerEl": {
          "name": "triggerEl",
          "setSignature": {
            "name": "triggerEl",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 13,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "SignpostIdService",
      "id": "injectable-SignpostIdService-9f22520ef25538de27b92b1cb5beb17b",
      "file": "src/clr-angular/popover/signpost/providers/signpost-id.service.ts",
      "properties": [
        {
          "name": "_id",
          "defaultValue": "new Subject<string>()",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "setId",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class SignpostIdService {\n  private _id: Subject<string> = new Subject<string>();\n\n  setId(id: string) {\n    this._id.next(id);\n  }\n\n  get id(): Observable<string> {\n    return this._id.asObservable();\n  }\n}\n",
      "accessors": {
        "id": {
          "name": "id",
          "getSignature": {
            "name": "id",
            "type": "",
            "returnType": "Observable<string>",
            "line": 20
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "Sort",
      "id": "injectable-Sort-77da2269272acda6e6804ac8c4638aec",
      "file": "src/clr-angular/data/datagrid/providers/sort.ts",
      "properties": [
        {
          "name": "_change",
          "defaultValue": "new Subject<Sort<T>>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable that lets other classes subscribe to sort changes</p>\n",
          "line": 48,
          "modifierKind": [112]
        },
        {
          "name": "_comparator",
          "type": "ClrDatagridComparatorInterface<T>",
          "optional": false,
          "description": "<p>Currently active comparator</p>\n",
          "line": 20,
          "modifierKind": [112]
        },
        {
          "name": "_reverse",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "<p>Ascending order if false, descending if true</p>\n",
          "line": 34,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "clear",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "description": "<p>Clears the current sorting order</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "compare",
          "args": [
            {
              "name": "a",
              "type": "T"
            },
            {
              "name": "b",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 87,
          "description": "<p>Compares two objects according to the current comparator</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "a",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "b",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emitChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "modifierKind": [112]
        },
        {
          "name": "toggle",
          "args": [
            {
              "name": "sortBy",
              "type": "ClrDatagridComparatorInterface<T>"
            },
            {
              "name": "forceReverse",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "description":
            "<p>Sets a comparator as the current one, or toggles reverse if the comparator is already used. The\noptional forceReverse input parameter allows to override that toggling behavior by sorting in\nreverse order if <code>true</code>.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "sortBy",
              "type": "ClrDatagridComparatorInterface<T>",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "forceReverse",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nimport { ClrDatagridComparatorInterface } from '../interfaces/comparator.interface';\nimport { StateDebouncer } from './state-debouncer.provider';\n\n@Injectable()\nexport class Sort<T = any> {\n  constructor(private stateDebouncer: StateDebouncer) {}\n\n  /**\n   * Currently active comparator\n   */\n  private _comparator: ClrDatagridComparatorInterface<T>;\n  public get comparator(): ClrDatagridComparatorInterface<T> {\n    return this._comparator;\n  }\n  public set comparator(value: ClrDatagridComparatorInterface<T>) {\n    this.stateDebouncer.changeStart();\n    this._comparator = value;\n    this.emitChange();\n    this.stateDebouncer.changeDone();\n  }\n\n  /**\n   * Ascending order if false, descending if true\n   */\n  private _reverse: boolean = false;\n  public get reverse(): boolean {\n    return this._reverse;\n  }\n  public set reverse(value: boolean) {\n    this.stateDebouncer.changeStart();\n    this._reverse = value;\n    this.emitChange();\n    this.stateDebouncer.changeDone();\n  }\n\n  /**\n   * The Observable that lets other classes subscribe to sort changes\n   */\n  private _change = new Subject<Sort<T>>();\n  private emitChange() {\n    this._change.next(this);\n  }\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get change(): Observable<Sort<T>> {\n    return this._change.asObservable();\n  }\n\n  /**\n   * Sets a comparator as the current one, or toggles reverse if the comparator is already used. The\n   * optional forceReverse input parameter allows to override that toggling behavior by sorting in\n   * reverse order if `true`.\n   *\n   * @memberof Sort\n   */\n  public toggle(sortBy: ClrDatagridComparatorInterface<T>, forceReverse?: boolean) {\n    this.stateDebouncer.changeStart();\n    // We modify private properties directly, to batch the change event\n    if (this.comparator === sortBy) {\n      this._reverse = typeof forceReverse !== 'undefined' ? forceReverse || !this._reverse : !this._reverse;\n    } else {\n      this._comparator = sortBy;\n      this._reverse = typeof forceReverse !== 'undefined' ? forceReverse : false;\n    }\n    this.emitChange();\n    this.stateDebouncer.changeDone();\n  }\n\n  /**\n   * Clears the current sorting order\n   */\n  public clear() {\n    this.comparator = null;\n  }\n\n  /**\n   * Compares two objects according to the current comparator\n   */\n  public compare(a: T, b: T): number {\n    return (this.reverse ? -1 : 1) * this.comparator.compare(a, b);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "stateDebouncer",
            "type": "StateDebouncer"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "stateDebouncer",
            "type": "StateDebouncer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "comparator": {
          "name": "comparator",
          "setSignature": {
            "name": "comparator",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "comparator",
            "type": "",
            "returnType": "ClrDatagridComparatorInterface<T>",
            "line": 21
          }
        },
        "reverse": {
          "name": "reverse",
          "setSignature": {
            "name": "reverse",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "reverse",
            "type": "boolean",
            "returnType": "boolean",
            "line": 35
          }
        },
        "change": {
          "name": "change",
          "getSignature": {
            "name": "change",
            "type": "",
            "returnType": "Observable<Sort<T>>",
            "line": 53
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "StateDebouncer",
      "id": "injectable-StateDebouncer-3d108d6d093a52325b062c95843e041c",
      "file": "src/clr-angular/data/datagrid/providers/state-debouncer.provider.ts",
      "properties": [
        {
          "name": "_change",
          "defaultValue": "new Subject<void>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable that lets other classes subscribe to global state changes</p>\n",
          "line": 20,
          "modifierKind": [112]
        },
        {
          "name": "nbChanges",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "changeDone",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "modifierKind": [114]
        },
        {
          "name": "changeStart",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "modifierKind": [114]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n/*\n * This provider implements some form of synchronous debouncing through a lock pattern\n * to avoid emitting multiple state changes for a single user action.\n */\n@Injectable()\nexport class StateDebouncer {\n  /**\n   * The Observable that lets other classes subscribe to global state changes\n   */\n  private _change = new Subject<void>();\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get change(): Observable<void> {\n    return this._change.asObservable();\n  }\n\n  /*\n     * This is the lock, to only emit once all the changes have finished processing\n     */\n  private nbChanges = 0;\n\n  public changeStart() {\n    this.nbChanges++;\n  }\n\n  public changeDone() {\n    if (--this.nbChanges === 0) {\n      this._change.next();\n    }\n  }\n}\n",
      "accessors": {
        "change": {
          "name": "change",
          "getSignature": {
            "name": "change",
            "type": "",
            "returnType": "Observable<void>",
            "line": 22
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "StateProvider",
      "id": "injectable-StateProvider-5b7136ad11e2822d2fa6a41beda9e433",
      "file": "src/clr-angular/data/datagrid/providers/state.provider.ts",
      "properties": [
        {
          "name": "change",
          "defaultValue": "this.debouncer.change.pipe(map(() => this.state))",
          "type": "Observable<ClrDatagridStateInterface<T>>",
          "optional": false,
          "description": "<p>The Observable that lets other classes subscribe to global state changes</p>\n",
          "line": 33
        }
      ],
      "methods": [],
      "description": "<p>This provider aggregates state changes from the various providers of the Datagrid</p>\n",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DatagridPropertyComparator } from '../built-in/comparators/datagrid-property-comparator';\nimport { ClrDatagridStateInterface } from '../interfaces/state.interface';\n\nimport { FiltersProvider } from './filters';\nimport { Page } from './page';\nimport { Sort } from './sort';\nimport { StateDebouncer } from './state-debouncer.provider';\n\n/**\n * This provider aggregates state changes from the various providers of the Datagrid\n */\n@Injectable()\nexport class StateProvider<T> {\n  constructor(\n    private filters: FiltersProvider<T>,\n    private sort: Sort<T>,\n    private page: Page,\n    private debouncer: StateDebouncer\n  ) {}\n\n  /**\n   * The Observable that lets other classes subscribe to global state changes\n   */\n  change: Observable<ClrDatagridStateInterface<T>> = this.debouncer.change.pipe(map(() => this.state));\n\n  /*\n     * By making this a getter, we open the possibility for a setter in the future.\n     * It's been requested a couple times.\n     */\n  get state(): ClrDatagridStateInterface<T> {\n    const state: ClrDatagridStateInterface<T> = {};\n    if (this.page.size > 0) {\n      state.page = {\n        from: this.page.firstItem,\n        to: this.page.lastItem,\n        size: this.page.size,\n        current: this.page.current,\n      };\n    }\n    if (this.sort.comparator) {\n      if (this.sort.comparator instanceof DatagridPropertyComparator) {\n        /*\n                 * Special case for the default object property comparator,\n                 * we give the property name instead of the actual comparator.\n                 */\n        state.sort = { by: (<DatagridPropertyComparator<T>>this.sort.comparator).prop, reverse: this.sort.reverse };\n      } else {\n        state.sort = { by: this.sort.comparator, reverse: this.sort.reverse };\n      }\n    }\n\n    const activeFilters = this.filters.getActiveFilters();\n    if (activeFilters.length > 0) {\n      state.filters = [];\n      for (const filter of activeFilters) {\n        if (filter.state) {\n          state.filters.push(filter.state);\n        } else {\n          state.filters.push(filter);\n        }\n      }\n    }\n    return state;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>"
          },
          {
            "name": "sort",
            "type": "Sort<T>"
          },
          {
            "name": "page",
            "type": "Page"
          },
          {
            "name": "debouncer",
            "type": "StateDebouncer"
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "sort",
            "type": "Sort<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "page",
            "type": "Page",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "debouncer",
            "type": "StateDebouncer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "state": {
          "name": "state",
          "getSignature": {
            "name": "state",
            "type": "",
            "returnType": "ClrDatagridStateInterface<T>",
            "line": 39
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "StepperService",
      "id": "injectable-StepperService-e595328a9fc09bdb55c837a19a873261",
      "file": "src/clr-angular/accordion/stepper/providers/stepper.service.ts",
      "properties": [
        {
          "name": "_activeStepChanges",
          "defaultValue": "new Subject<string>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        },
        {
          "name": "accordion",
          "defaultValue": "new StepperModel()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [113]
        },
        {
          "name": "activeStep",
          "defaultValue": "this._activeStepChanges.asObservable()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [132]
        },
        {
          "name": "panelsCompleted",
          "defaultValue": "this.getAllCompletedPanelChanges()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [132]
        },
        {
          "name": "_panelsChanges",
          "defaultValue": "new BehaviorSubject<AccordionPanelModel[]>(this.accordion.panels)",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [113, 132],
          "inheritance": {
            "file": "AccordionService"
          }
        },
        {
          "name": "accordion",
          "defaultValue": "new AccordionModel()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [113],
          "inheritance": {
            "file": "AccordionService"
          }
        }
      ],
      "methods": [
        {
          "name": "getAllCompletedPanelChanges",
          "args": [],
          "optional": false,
          "returnType": "Observable<boolean>",
          "typeParameters": [],
          "line": 53,
          "modifierKind": [112]
        },
        {
          "name": "navigateToNextPanel",
          "args": [
            {
              "name": "currentPanelId",
              "type": "string"
            },
            {
              "name": "currentPanelValid",
              "type": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "jsdoctags": [
            {
              "name": "currentPanelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "currentPanelValid",
              "type": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "overrideInitialPanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetPanels",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22
        },
        {
          "name": "setPanelsWithErrors",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateNextStep",
          "args": [
            {
              "name": "currentPanelId",
              "type": "string"
            },
            {
              "name": "currentPanelValid",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "currentPanelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "currentPanelValid",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "addPanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionService"
          }
        },
        {
          "name": "disablePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "disabled",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "disabled",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionService"
          }
        },
        {
          "name": "emitUpdatedPanels",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "modifierKind": [113],
          "inheritance": {
            "file": "AccordionService"
          }
        },
        {
          "name": "getPanelChanges",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "Observable<AccordionPanelModel>",
          "typeParameters": [],
          "line": 19,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionService"
          }
        },
        {
          "name": "setStrategy",
          "args": [
            {
              "name": "strategy",
              "type": "AccordionStrategy"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "jsdoctags": [
            {
              "name": "strategy",
              "type": "AccordionStrategy",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionService"
          }
        },
        {
          "name": "togglePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionService"
          }
        },
        {
          "name": "updatePanelOrder",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionService"
          }
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { Observable, Subject } from 'rxjs';\n\nimport { AccordionService } from './../../providers/accordion.service';\nimport { StepperModel } from '../models/stepper.model';\n\n@Injectable()\nexport class StepperService extends AccordionService {\n  readonly panelsCompleted = this.getAllCompletedPanelChanges();\n  protected accordion = new StepperModel();\n\n  private _activeStepChanges = new Subject<string>();\n  readonly activeStep = this._activeStepChanges.asObservable();\n\n  resetPanels() {\n    this.accordion.resetPanels();\n    this.emitUpdatedPanels();\n  }\n\n  setPanelsWithErrors(ids: string[]) {\n    this.accordion.setPanelsWithErrors(ids);\n    this.emitUpdatedPanels();\n  }\n\n  navigateToNextPanel(currentPanelId: string, currentPanelValid = true) {\n    this.accordion.navigateToNextPanel(currentPanelId, currentPanelValid);\n    this.updateNextStep(currentPanelId, currentPanelValid);\n    this.emitUpdatedPanels();\n  }\n\n  overrideInitialPanel(panelId: string) {\n    this.accordion.overrideInitialPanel(panelId);\n    this.emitUpdatedPanels();\n  }\n\n  private updateNextStep(currentPanelId: string, currentPanelValid: boolean) {\n    const nextPanel = this.accordion.getNextPanel(currentPanelId);\n\n    if (currentPanelValid && nextPanel) {\n      this._activeStepChanges.next(nextPanel.id);\n    } else if (currentPanelValid) {\n      this._activeStepChanges.next(currentPanelId);\n    }\n  }\n\n  private getAllCompletedPanelChanges(): Observable<boolean> {\n    return this._panelsChanges.pipe(map(() => this.accordion.allPanelsCompleted), distinctUntilChanged());\n  }\n}\n",
      "extends": "AccordionService",
      "type": "injectable"
    },
    {
      "name": "TableSizeService",
      "id": "injectable-TableSizeService-f0e88bf8d3e6736f5a3e648489cf5ce2",
      "file": "src/clr-angular/data/datagrid/providers/table-size.service.ts",
      "properties": [
        {
          "name": "_tableRef",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "getColumnDragHeight",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 33
        }
      ],
      "description": "",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport { ElementRef, Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\n/**\n * @description\n * Internal datagrid service that holds a reference to the clr-dg-table element and exposes a method to get height.\n */\n@Injectable()\nexport class TableSizeService {\n  private _tableRef: HTMLElement;\n\n  public get tableRef(): HTMLElement {\n    return this._tableRef;\n  }\n\n  public set tableRef(element: HTMLElement) {\n    this._tableRef = element;\n  }\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {}\n  public set table(table: ElementRef) {\n    if (isPlatformBrowser(this.platformId) && table.nativeElement) {\n      this.tableRef = table.nativeElement.querySelector('.datagrid-table');\n    }\n  }\n\n  // Used when resizing columns to show the column border being dragged.\n  getColumnDragHeight(): string {\n    if (!this.tableRef) {\n      return;\n    }\n    return `${this.tableRef.clientHeight}px`;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "jsdoctags": [
        {
          "pos": 349,
          "end": 363,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 349,
            "end": 350,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 350,
            "end": 361,
            "flags": 0,
            "escapedText": "description"
          },
          "comment":
            "Internal datagrid service that holds a reference to the clr-dg-table element and exposes a method to get height."
        }
      ],
      "accessors": {
        "tableRef": {
          "name": "tableRef",
          "setSignature": {
            "name": "tableRef",
            "type": "void",
            "args": [
              {
                "name": "element",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "element",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "tableRef",
            "type": "",
            "returnType": "HTMLElement",
            "line": 17
          }
        },
        "table": {
          "name": "table",
          "setSignature": {
            "name": "table",
            "type": "void",
            "args": [
              {
                "name": "table",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "table",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "TabsService",
      "id": "injectable-TabsService-25b4ba32ca4a962676c6c32bd540930a",
      "file": "src/clr-angular/layout/tabs/providers/tabs.service.ts",
      "properties": [
        {
          "name": "_children",
          "defaultValue": "[]",
          "type": "ClrTab[]",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        },
        {
          "name": "layout",
          "defaultValue": "TabsLayout.HORIZONTAL",
          "type": "TabsLayout",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "tabContentViewContainer",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 45
        }
      ],
      "methods": [
        {
          "name": "register",
          "args": [
            {
              "name": "tab",
              "type": "ClrTab"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "jsdoctags": [
            {
              "name": "tab",
              "type": "ClrTab",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "unregister",
          "args": [
            {
              "name": "tab",
              "type": "ClrTab"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "jsdoctags": [
            {
              "name": "tab",
              "type": "ClrTab",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable, ViewContainerRef } from '@angular/core';\nimport { ClrTab } from '../tab';\nimport { TabsLayout } from '../enums/tabs-layout.enum';\n\n@Injectable()\nexport class TabsService {\n  private _children: ClrTab[] = [];\n\n  layout: TabsLayout = TabsLayout.HORIZONTAL;\n\n  register(tab: ClrTab) {\n    this._children.push(tab);\n  }\n\n  get children() {\n    return this._children;\n  }\n\n  get activeTab() {\n    return this.children.find((tab: ClrTab) => {\n      return tab.active;\n    });\n  }\n\n  get overflowTabs() {\n    if (this.layout === TabsLayout.VERTICAL) {\n      return [];\n    } else {\n      return this.children.filter((tab: ClrTab) => tab.tabLink.inOverflow === true);\n    }\n  }\n\n  unregister(tab: ClrTab) {\n    const index = this.children.indexOf(tab);\n    if (index > -1) {\n      this.children.splice(index, 1);\n    }\n  }\n\n  tabContentViewContainer: ViewContainerRef;\n}\n",
      "accessors": {
        "children": {
          "name": "children",
          "getSignature": {
            "name": "children",
            "type": "",
            "returnType": "",
            "line": 20
          }
        },
        "activeTab": {
          "name": "activeTab",
          "getSignature": {
            "name": "activeTab",
            "type": "",
            "returnType": "",
            "line": 24
          }
        },
        "overflowTabs": {
          "name": "overflowTabs",
          "getSignature": {
            "name": "overflowTabs",
            "type": "",
            "returnType": "",
            "line": 30
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "TooltipIdService",
      "id": "injectable-TooltipIdService-17d286323f83a59c49a7896a746d0895",
      "file": "src/clr-angular/popover/tooltip/providers/tooltip-id.service.ts",
      "properties": [
        {
          "name": "_id",
          "defaultValue": "new Subject<string>()",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "updateId",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable()\nexport class TooltipIdService {\n  private _id: Subject<string> = new Subject<string>();\n\n  updateId(id: string) {\n    this._id.next(id);\n  }\n\n  get id(): Observable<string> {\n    return this._id.asObservable();\n  }\n}\n",
      "accessors": {
        "id": {
          "name": "id",
          "getSignature": {
            "name": "id",
            "type": "",
            "returnType": "Observable<string>",
            "line": 18
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "TreeFeaturesService",
      "id": "injectable-TreeFeaturesService-9ef28054b27aca4138d820c185b16acd",
      "file": "src/clr-angular/data/tree-view/tree-features.service.ts",
      "properties": [
        {
          "name": "childrenFetched",
          "defaultValue": "new Subject()",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "eager",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "recursion",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "selectable",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [],
      "description": "",
      "sourceCode":
        "import { Injectable, Optional, SkipSelf, TemplateRef } from '@angular/core';\nimport { RecursiveTreeNodeModel } from './models/recursive-tree-node.model';\nimport { ClrRecursiveForOfContext } from './recursive-for-of';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TreeFeaturesService<T> {\n  selectable = false;\n  eager = true;\n  recursion: {\n    template: TemplateRef<ClrRecursiveForOfContext<T>>;\n    root: RecursiveTreeNodeModel<T>[];\n  };\n  childrenFetched: Subject<void> = new Subject();\n}\n\nexport function treeFeaturesFactory<T>(existing: TreeFeaturesService<T>) {\n  return existing || new TreeFeaturesService();\n}\n\nexport const TREE_FEATURES_PROVIDER = {\n  provide: TreeFeaturesService,\n  useFactory: treeFeaturesFactory,\n  /*\n   * The Optional + SkipSelf pattern ensures that in case of nested components, only the root one will\n   * instantiate a new service and all its children will reuse the root's instance.\n   * If there are several roots (in this case, several independent trees on a page), each root will instantiate\n   * its own service so they won't interfere with one another.\n   *\n   * TL;DR - Optional + SkipSelf = 1 instance of TreeFeaturesService per tree.\n   */\n  deps: [[new Optional(), new SkipSelf(), TreeFeaturesService]],\n};\n",
      "type": "injectable"
    },
    {
      "name": "TreeFocusManagerService",
      "id": "injectable-TreeFocusManagerService-48e52d319895fcf349b9c69376cf38ad",
      "file": "src/clr-angular/data/tree-view/tree-focus-manager.service.ts",
      "properties": [
        {
          "name": "_focusChange",
          "defaultValue": "new Subject()",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [112]
        },
        {
          "name": "_focusRequest",
          "defaultValue": "new Subject()",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "focusedNodeId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [112]
        },
        {
          "name": "rootNodeModels",
          "type": "TreeNodeModel<T>[]",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "broadcastFocusedNode",
          "args": [
            {
              "name": "nodeId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "jsdoctags": [
            {
              "name": "nodeId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findLastVisibleInNode",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "TreeNodeModel<T>",
          "typeParameters": [],
          "line": 37,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findLastVisibleInTree",
          "args": [],
          "optional": false,
          "returnType": "TreeNodeModel<T>",
          "typeParameters": [],
          "line": 66,
          "modifierKind": [112]
        },
        {
          "name": "findNextFocusable",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "TreeNodeModel<T>",
          "typeParameters": [],
          "line": 51,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findNodeAbove",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "TreeNodeModel<T>",
          "typeParameters": [],
          "line": 72,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findNodeBelow",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "TreeNodeModel<T>",
          "typeParameters": [],
          "line": 87,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findSiblings",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "TreeNodeModel[]",
          "typeParameters": [],
          "line": 28,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focusFirstVisibleNode",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118
        },
        {
          "name": "focusLastVisibleNode",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 123
        },
        {
          "name": "focusNode",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focusNodeAbove",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focusNodeBelow",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "focusParent",
          "args": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "jsdoctags": [
            {
              "name": "model",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { TreeNodeModel } from './models/tree-node.model';\n\n@Injectable()\nexport class TreeFocusManagerService<T> {\n  public rootNodeModels: TreeNodeModel<T>[];\n\n  private focusedNodeId: string;\n\n  private _focusRequest: Subject<string> = new Subject();\n\n  private _focusChange: Subject<string> = new Subject();\n\n  get focusRequest(): Observable<string> {\n    return this._focusRequest.asObservable();\n  }\n\n  get focusChange(): Observable<string> {\n    return this._focusChange.asObservable();\n  }\n\n  private findSiblings(model: TreeNodeModel<T>): TreeNodeModel<T>[] {\n    // the method will return not only sibling models but also itself among them\n    if (model.parent) {\n      return model.parent.children;\n    } else {\n      return this.rootNodeModels;\n    }\n  }\n\n  private findLastVisibleInNode(model: TreeNodeModel<T>): TreeNodeModel<T> {\n    // the method will traverse through until it finds the last visible node from the given node\n    if (!model) {\n      return;\n    }\n    if (model.expanded && model.children.length > 0) {\n      const children = model.children;\n      const lastChild = children[children.length - 1];\n      return this.findLastVisibleInNode(lastChild);\n    } else {\n      return model;\n    }\n  }\n\n  private findNextFocusable(model: TreeNodeModel<T>): TreeNodeModel<T> {\n    if (!model) {\n      return;\n    }\n\n    const siblings = this.findSiblings(model);\n    const selfIndex = siblings.indexOf(model);\n\n    if (selfIndex < siblings.length - 1) {\n      return siblings[selfIndex + 1];\n    } else if (selfIndex === siblings.length - 1) {\n      return this.findNextFocusable(model.parent);\n    }\n  }\n\n  private findLastVisibleInTree(): TreeNodeModel<T> {\n    const lastRootNode =\n      this.rootNodeModels && this.rootNodeModels.length && this.rootNodeModels[this.rootNodeModels.length - 1];\n    return this.findLastVisibleInNode(lastRootNode);\n  }\n\n  private findNodeAbove(model: TreeNodeModel<T>): TreeNodeModel<T> {\n    if (!model) {\n      return;\n    }\n\n    const siblings = this.findSiblings(model);\n    const selfIndex = siblings.indexOf(model);\n\n    if (selfIndex === 0) {\n      return model.parent;\n    } else if (selfIndex > 0) {\n      return this.findLastVisibleInNode(siblings[selfIndex - 1]);\n    }\n  }\n\n  private findNodeBelow(model: TreeNodeModel<T>): TreeNodeModel<T> {\n    if (!model) {\n      return;\n    }\n\n    if (model.expanded && model.children.length > 0) {\n      return model.children[0];\n    } else {\n      return this.findNextFocusable(model);\n    }\n  }\n\n  focusNode(model: TreeNodeModel<T>): void {\n    if (model) {\n      this._focusRequest.next(model.nodeId);\n    }\n  }\n\n  broadcastFocusedNode(nodeId: string): void {\n    if (this.focusedNodeId !== nodeId) {\n      this.focusedNodeId = nodeId;\n      this._focusChange.next(nodeId);\n    }\n  }\n\n  focusParent(model: TreeNodeModel<T>): void {\n    if (model) {\n      this.focusNode(model.parent);\n    }\n  }\n\n  focusFirstVisibleNode(): void {\n    const focusModel = this.rootNodeModels && this.rootNodeModels[0];\n    this.focusNode(focusModel);\n  }\n\n  focusLastVisibleNode(): void {\n    this.focusNode(this.findLastVisibleInTree());\n  }\n\n  focusNodeAbove(model: TreeNodeModel<T>): void {\n    this.focusNode(this.findNodeAbove(model));\n  }\n\n  focusNodeBelow(model: TreeNodeModel<T>): void {\n    this.focusNode(this.findNodeBelow(model));\n  }\n}\n",
      "accessors": {
        "focusRequest": {
          "name": "focusRequest",
          "getSignature": {
            "name": "focusRequest",
            "type": "",
            "returnType": "Observable<string>",
            "line": 20
          }
        },
        "focusChange": {
          "name": "focusChange",
          "getSignature": {
            "name": "focusChange",
            "type": "",
            "returnType": "Observable<string>",
            "line": 24
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "VerticalNavGroupRegistrationService",
      "id": "injectable-VerticalNavGroupRegistrationService-b3735a57f162be1bf590e17768791993",
      "file": "src/clr-angular/layout/vertical-nav/providers/vertical-nav-group-registration.service.ts",
      "properties": [
        {
          "name": "navGroupCount",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "registerNavGroup",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13
        },
        {
          "name": "unregisterNavGroup",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class VerticalNavGroupRegistrationService {\n  public navGroupCount: number = 0;\n\n  registerNavGroup() {\n    this.navGroupCount++;\n  }\n\n  unregisterNavGroup(): void {\n    this.navGroupCount--;\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "VerticalNavGroupService",
      "id": "injectable-VerticalNavGroupService-8b4d47f00d9a20488f53a2e727124214",
      "file": "src/clr-angular/layout/vertical-nav/providers/vertical-nav-group.service.ts",
      "properties": [
        {
          "name": "_expandChange",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "expand",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class VerticalNavGroupService {\n  private _expandChange: Subject<boolean> = new Subject<boolean>();\n\n  get expandChange(): Observable<boolean> {\n    return this._expandChange.asObservable();\n  }\n\n  expand(): void {\n    this._expandChange.next(true);\n  }\n}\n",
      "accessors": {
        "expandChange": {
          "name": "expandChange",
          "getSignature": {
            "name": "expandChange",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 15
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "VerticalNavIconService",
      "id": "injectable-VerticalNavIconService-ecdc96c3215c83f4724ab5c70605f064",
      "file": "src/clr-angular/layout/vertical-nav/providers/vertical-nav-icon.service.ts",
      "properties": [
        {
          "name": "_icons",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "registerIcon",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        },
        {
          "name": "unregisterIcon",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class VerticalNavIconService {\n  private _icons: number = 0;\n\n  get hasIcons(): boolean {\n    return this._icons > 0;\n  }\n\n  registerIcon(): void {\n    this._icons++;\n  }\n\n  unregisterIcon(): void {\n    this._icons--;\n  }\n}\n",
      "accessors": {
        "hasIcons": {
          "name": "hasIcons",
          "getSignature": {
            "name": "hasIcons",
            "type": "boolean",
            "returnType": "boolean",
            "line": 13
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "VerticalNavService",
      "id": "injectable-VerticalNavService-2ce52bd7c8a4b96557f1c8b5a51496bb",
      "file": "src/clr-angular/layout/vertical-nav/providers/vertical-nav.service.ts",
      "properties": [
        {
          "name": "_animateOnCollapsed",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        },
        {
          "name": "_collapsed",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [112]
        },
        {
          "name": "_collapsedChanged",
          "defaultValue": "new Subject<boolean>()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        },
        {
          "name": "_collapsible",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "updateCollapseBehavior",
          "args": [
            {
              "name": "value",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "description": "",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class VerticalNavService {\n  private _animateOnCollapsed: Subject<boolean> = new Subject<boolean>();\n\n  get animateOnCollapsed(): Observable<boolean> {\n    return this._animateOnCollapsed.asObservable();\n  }\n\n  private _collapsedChanged: Subject<boolean> = new Subject<boolean>();\n\n  get collapsedChanged(): Observable<boolean> {\n    return this._collapsedChanged.asObservable();\n  }\n\n  private _collapsed: boolean = false;\n\n  get collapsed(): boolean {\n    return this._collapsed;\n  }\n\n  set collapsed(value: boolean) {\n    value = !!value;\n    if (this.collapsible && this._collapsed !== value) {\n      this.updateCollapseBehavior(value);\n    }\n  }\n\n  private _collapsible: boolean = false;\n\n  get collapsible(): boolean {\n    return this._collapsible;\n  }\n\n  set collapsible(value: boolean) {\n    value = !!value;\n    if (this._collapsible !== value) {\n      if (!value && this.collapsed) {\n        this.updateCollapseBehavior(false);\n      }\n      this._collapsible = value;\n    }\n  }\n\n  private updateCollapseBehavior(value: boolean): void {\n    this._animateOnCollapsed.next(value);\n    this._collapsed = value;\n    this._collapsedChanged.next(value);\n  }\n}\n",
      "accessors": {
        "animateOnCollapsed": {
          "name": "animateOnCollapsed",
          "getSignature": {
            "name": "animateOnCollapsed",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 15
          }
        },
        "collapsedChanged": {
          "name": "collapsedChanged",
          "getSignature": {
            "name": "collapsedChanged",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 21
          }
        },
        "collapsed": {
          "name": "collapsed",
          "setSignature": {
            "name": "collapsed",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "collapsed",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "collapsible": {
          "name": "collapsible",
          "setSignature": {
            "name": "collapsible",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "collapsible",
            "type": "boolean",
            "returnType": "boolean",
            "line": 40
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "ViewManagerService",
      "id": "injectable-ViewManagerService-3aeaf2d74d1534d2fccaaf8fd1726d45",
      "file": "src/clr-angular/forms/datepicker/providers/view-manager.service.ts",
      "properties": [
        {
          "name": "_currentView",
          "defaultValue": "DatepickerViewEnum.DAYVIEW",
          "type": "DatepickerViewEnum",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "changeToDayView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42
        },
        {
          "name": "changeToMonthView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34
        },
        {
          "name": "changeToYearView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38
        }
      ],
      "description": "<p>This service manages which view is visible in the datepicker popover.</p>\n",
      "sourceCode":
        "import { Injectable } from '@angular/core';\n\nconst enum DatepickerViewEnum {\n  MONTHVIEW = 'MONTHVIEW',\n  YEARVIEW = 'YEARVIEW',\n  DAYVIEW = 'DAYVIEW',\n}\n\n/**\n * This service manages which view is visible in the datepicker popover.\n */\n@Injectable()\nexport class ViewManagerService {\n  private _currentView: DatepickerViewEnum = DatepickerViewEnum.DAYVIEW;\n\n  get isDayView(): boolean {\n    return this._currentView === DatepickerViewEnum.DAYVIEW;\n  }\n\n  get isYearView(): boolean {\n    return this._currentView === DatepickerViewEnum.YEARVIEW;\n  }\n\n  get isMonthView(): boolean {\n    return this._currentView === DatepickerViewEnum.MONTHVIEW;\n  }\n\n  changeToMonthView(): void {\n    this._currentView = DatepickerViewEnum.MONTHVIEW;\n  }\n\n  changeToYearView(): void {\n    this._currentView = DatepickerViewEnum.YEARVIEW;\n  }\n\n  changeToDayView(): void {\n    this._currentView = DatepickerViewEnum.DAYVIEW;\n  }\n}\n",
      "accessors": {
        "isDayView": {
          "name": "isDayView",
          "getSignature": {
            "name": "isDayView",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        },
        "isYearView": {
          "name": "isYearView",
          "getSignature": {
            "name": "isYearView",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "isMonthView": {
          "name": "isMonthView",
          "getSignature": {
            "name": "isMonthView",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "WizardNavigationService",
      "id": "injectable-WizardNavigationService-c5260a14d14d9884044f1e25823ac7f1",
      "file": "src/clr-angular/wizard/providers/wizard-navigation.service.ts",
      "properties": [
        {
          "name": "_cancelWizard",
          "defaultValue": "new Subject<any>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 494,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 14689,
              "end": 14699,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 14689,
                "end": 14690,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 14690,
                "end": 14698,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "_currentChanged",
          "defaultValue": "new Subject<ClrWizardPage>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 166,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 5317,
              "end": 5327,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 5317,
                "end": 5318,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 5318,
                "end": 5326,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "_currentPage",
          "type": "ClrWizardPage",
          "optional": false,
          "description": "",
          "line": 240,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 7657,
              "end": 7667,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 7657,
                "end": 7658,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 7658,
                "end": 7666,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "_movedToNextPage",
          "defaultValue": "new Subject<boolean>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 275,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 8577,
              "end": 8587,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 8577,
                "end": 8578,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 8578,
                "end": 8586,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "_movedToPreviousPage",
          "defaultValue": "new Subject<boolean>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 449,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 13630,
              "end": 13640,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 13630,
                "end": 13631,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 13631,
                "end": 13639,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "_wizardFinished",
          "defaultValue": "new Subject<boolean>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 291,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 9048,
              "end": 9058,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 9048,
                "end": 9049,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 9049,
                "end": 9057,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "buttonService",
          "type": "ButtonHubService",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [114]
        },
        {
          "name": "cancelButtonSubscription",
          "type": "Subscription",
          "optional": false,
          "description":
            "<p>Is notified when a Cancel button is clicked in the wizard. Notifies the wizard,\nwhich handles all cancel functionality, if cancel is not overridden at the page\nlevel.</p>\n",
          "line": 82,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 2530,
              "end": 2540,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 2530,
                "end": 2531,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 2531,
                "end": 2539,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "customButtonSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "<p>Is notified when a Custom button is clicked in the wizard.</p>\n",
          "line": 73,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 2242,
              "end": 2252,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 2242,
                "end": 2243,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 2243,
                "end": 2251,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "dangerButtonSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "<p>Is notified when a danger button is clicked in the wizard.</p>\n",
          "line": 59,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 1901,
              "end": 1911,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1901,
                "end": 1902,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1902,
                "end": 1910,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "finishButtonSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "<p>Is notified when a  finish button is clicked in the wizard.</p>\n",
          "line": 66,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 2072,
              "end": 2082,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 2072,
                "end": 2073,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 2073,
                "end": 2081,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "forceForwardNavigation",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description":
            "<p>A boolean flag shared across the Wizard subcomponents that follows the value\nof the Wizard.forceForward (clrWizardForceForwardNavigation) input. When true,\nnavigating backwards in the stepnav menu will reset any skipped pages&#39; completed\nstate to false.</p>\n<p>This is useful when a wizard executes validation on a page-by-page basis when\nthe next button is clicked.</p>\n",
          "line": 200,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 6577,
              "end": 6587,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 6577,
                "end": 6578,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 6578,
                "end": 6586,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "navServiceLoaded",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description":
            "<p>A Boolean flag used by the ClrWizardPage to avoid a race condition when pages are\nloading and there is no current page defined.</p>\n",
          "line": 187,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 6091,
              "end": 6101,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 6091,
                "end": 6092,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 6092,
                "end": 6100,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "nextButtonSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "<p>Is notified when a Next button is clicked in the wizard.</p>\n",
          "line": 52,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 1733,
              "end": 1743,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1733,
                "end": 1734,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1734,
                "end": 1742,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "pageCollection",
          "type": "PageCollectionService",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [114]
        },
        {
          "name": "pagesResetSubscription",
          "type": "Subscription",
          "optional": false,
          "description":
            "<p>Resets navigation to make the first page current when the page collection service\nemits an event notifying WizardNavigationService that it has reset all pages\nto their pristine, incomplete state.</p>\n",
          "line": 91,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 2847,
              "end": 2857,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 2847,
                "end": 2848,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 2848,
                "end": 2856,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "previousButtonSubscription",
          "type": "Subscription",
          "optional": false,
          "description":
            "<p>Is notified when a previous button is clicked in the wizard. Performs checks\nbefore alerting the current page of the button click. Enacts navigation to\nthe previous page if not overridden at the page level.</p>\n",
          "line": 45,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 1563,
              "end": 1573,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1563,
                "end": 1564,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1564,
                "end": 1572,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "wizardDisableStepnav",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>A boolean flag shared with the stepnav items that prevents user clicks on\nstepnav items from navigating the wizard.</p>\n",
          "line": 562,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 17205,
              "end": 17215,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 17205,
                "end": 17206,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 17206,
                "end": 17214,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "wizardHasAltCancel",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>A boolean flag shared across the Wizard subcomponents that follows the value\nof the Wizard.stopCancel (clrWizardPreventDefaultCancel) input. When true, the cancel\nroutine is subverted and must be reinstated in the host component calling Wizard.close()\nat some point.</p>\n",
          "line": 532,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 16049,
              "end": 16059,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 16049,
                "end": 16050,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 16050,
                "end": 16058,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "wizardHasAltNext",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>A boolean flag shared across the Wizard subcomponents that follows the value\nof the Wizard.stopNext (clrWizardPreventDefaultNext) input. When true, the next and finish\nroutines are subverted and must be reinstated in the host component calling Wizard.next(),\nWizard.forceNext(), Wizard.finish(), or Wizard.forceFinish().</p>\n",
          "line": 542,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 16493,
              "end": 16503,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 16493,
                "end": 16494,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 16494,
                "end": 16502,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        },
        {
          "name": "wizardStopNavigation",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>A boolean flag shared across the Wizard subcomponents that follows the value\nof the Wizard.stopNavigation (clrWizardPreventNavigation) input. When true, all\nnavigational elements in the wizard are disabled.</p>\n<p>This is intended to freeze the wizard in place. Events are not fired so this is\nnot a way to implement alternate functionality for navigation.</p>\n",
          "line": 554,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 16974,
              "end": 16984,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 16974,
                "end": 16975,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 16975,
                "end": 16983,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardNavigationService</p>\n"
            }
          ]
        }
      ],
      "methods": [
        {
          "name": "cancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 520,
          "description":
            "<p>Allows a hook into the cancel workflow of the wizard from the nav service. Note that\nthis route goes through all checks and event emissions as if a cancel button had\nbeen clicked.</p>\n<p>In most cases, users looking for a hook into the cancel routine are actually looking\nfor a way to close the wizard from their host component because they have prevented\nthe default cancel action.</p>\n<p>In this instance, it is recommended that you use Wizard.close() to avoid any event\nemission loop resulting from an event handler calling back into routine that will\nagain evoke the events it handles.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "canGoTo",
          "args": [
            {
              "name": "pagesToCheck",
              "type": "ClrWizardPage[]"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 633,
          "description":
            "<p>Accepts a range of ClrWizardPage objects as a parameter. Performs the work of checking\nthose objects to determine if navigation can be accomplished.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "pagesToCheck",
              "type": "ClrWizardPage[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "checkAndCommitCurrentPage",
          "args": [
            {
              "name": "buttonType",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 361,
          "description":
            "<p>Accepts a button/action type as a parameter. Encapsulates all logic for\nevent emissions, state of the current page, and wizard and page level overrides.</p>\n<p>Avoid calling this function directly unless you really know what you&#39;re doing.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "buttonType",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "finish",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 442,
          "description":
            "<p>This is a public function that can be used to programmatically conclude\nthe wizard.</p>\n<p>When invoked, this method will  initiate the work involved with finalizing\nand finishing the wizard workflow. Note that this method goes through all\nchecks and event emissions as if Wizard.finish(false) had been called.</p>\n<p>In most cases, it makes more sense to use Wizard.finish(false).</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "forceNext",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 333,
          "description":
            "<p>Bypasses checks and most event emissions to force a page to navigate forward.</p>\n<p>Comparable to calling Wizard.next() or Wizard.forceNext().</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "goTo",
          "args": [
            {
              "name": "pageToGoToOrId",
              "type": "any"
            },
            {
              "name": "lazyComplete",
              "type": "boolean",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 581,
          "description":
            "<p>Performs all required checks to determine if a user can navigate to a page. Checking at each\npoint if a page is navigable -- completed where the page immediately after the last completed\npage.</p>\n<p>Takes two parameters. The first one must be either the ClrWizardPage object or the ID of the\nClrWizardPage object that you want to make the current page.</p>\n<p>The second parameter is optional and is a Boolean flag for &quot;lazy completion&quot;. What this means\nis the Wizard will mark all pages between the current page and the page you want to navigate\nto as completed. This is useful for informational wizards that do not require user action,\nallowing an easy means for users to jump ahead.</p>\n<p>To avoid checks on navigation, use ClrWizardPage.makeCurrent() instead.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "pageToGoToOrId",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "lazyComplete",
              "type": "boolean",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "next",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 318,
          "description":
            "<p>This is a public function that can be used to programmatically advance\nthe user to the next page.</p>\n<p>When invoked, this method will move the wizard to the next page after\nsuccessful validation. Note that this method goes through all checks\nand event emissions as if Wizard.next(false) had been called.</p>\n<p>In most cases, it makes more sense to use Wizard.next(false).</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 152,
          "description": "",
          "jsdoctags": []
        },
        {
          "name": "previous",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 469,
          "description":
            "<p>Programmatically moves the wizard to the page before the current page.</p>\n<p>In most instances, it makes more sense to call Wizard.previous()\nwhich does the same thing.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "setFirstPageCurrent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 704,
          "description":
            "<p>Finds the first page in the collection of pages and makes that page the\ncurrent/active page.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "setLastEnabledPageCurrent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 678,
          "description":
            "<p>Looks through the collection of pages to find the first one that is incomplete\nand makes that page the current/active page.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "updateNavigation",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 714,
          "description":
            "<p>Updates the stepnav on the left side of the wizard when pages are dynamically\nadded or removed from the collection of pages.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        }
      ],
      "description":
        "<p>Performs navigation functions for a wizard and manages the current page. Presented as a\nseparate service to encapsulate the behavior of navigating and completing the wizard so\nthat it can be shared across the wizard and its sub-components.</p>\n<p>The easiest way to access the navigation service is there a reference on your wizard. The\nFollowing example would allow you to access your instance of the wizard from your host\ncomponent and thereby access the navigation service via YourHostComponent.wizard.navService.</p>\n",
      "sourceCode":
        "import { Injectable, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\n\nimport { ClrWizardPage } from '../wizard-page';\n\nimport { ButtonHubService } from './button-hub.service';\nimport { PageCollectionService } from './page-collection.service';\n\n/**\n * Performs navigation functions for a wizard and manages the current page. Presented as a\n * separate service to encapsulate the behavior of navigating and completing the wizard so\n * that it can be shared across the wizard and its sub-components.\n *\n * The easiest way to access the navigation service is there a reference on your wizard. The\n * Following example would allow you to access your instance of the wizard from your host\n * component and thereby access the navigation service via YourHostComponent.wizard.navService.\n *\n * @example\n * <clr-wizard #wizard ...>\n *\n * @example\n * export class YourHostComponent {\n *   @ViewChild(\"wizard\") wizard: Wizard;\n *   ...\n * }\n *\n */\n@Injectable()\nexport class WizardNavigationService implements OnDestroy {\n  /**\n   * Is notified when a previous button is clicked in the wizard. Performs checks\n   * before alerting the current page of the button click. Enacts navigation to\n   * the previous page if not overridden at the page level.\n   *\n   * @memberof WizardNavigationService\n   */\n  public previousButtonSubscription: Subscription;\n\n  /**\n   * Is notified when a Next button is clicked in the wizard.\n   *\n   * @memberof WizardNavigationService\n   */\n  public nextButtonSubscription: Subscription;\n\n  /**\n   * Is notified when a danger button is clicked in the wizard.\n   *\n   * @memberof WizardNavigationService\n   */\n  public dangerButtonSubscription: Subscription;\n\n  /**\n   * Is notified when a  finish button is clicked in the wizard.\n   *\n   * @memberof WizardNavigationService\n   */\n  public finishButtonSubscription: Subscription;\n\n  /**\n   * Is notified when a Custom button is clicked in the wizard.\n   *\n   * @memberof WizardNavigationService\n   */\n  public customButtonSubscription: Subscription;\n\n  /**\n   * Is notified when a Cancel button is clicked in the wizard. Notifies the wizard,\n   * which handles all cancel functionality, if cancel is not overridden at the page\n   * level.\n   *\n   * @memberof WizardNavigationService\n   */\n  public cancelButtonSubscription: Subscription;\n\n  /**\n   * Resets navigation to make the first page current when the page collection service\n   * emits an event notifying WizardNavigationService that it has reset all pages\n   * to their pristine, incomplete state.\n   *\n   * @memberof WizardNavigationService\n   */\n  public pagesResetSubscription: Subscription;\n\n  /**\n   * Creates an instance of WizardNavigationService. Also sets up subscriptions\n   * that listen to the button service to determine when a button has been clicked\n   * in the wizard. Is also responsible for taking action when the page collection\n   * requests that navigation be reset to its pristine state.\n   *\n   * @memberof WizardNavigationService\n   */\n  constructor(public pageCollection: PageCollectionService, public buttonService: ButtonHubService) {\n    this.previousButtonSubscription = this.buttonService.previousBtnClicked.subscribe(() => {\n      const currentPage = this.currentPage;\n      if (this.currentPageIsFirst || currentPage.previousStepDisabled) {\n        return;\n      }\n      currentPage.previousButtonClicked.emit(currentPage);\n      if (!currentPage.preventDefault) {\n        this.previous();\n      }\n    });\n\n    this.nextButtonSubscription = this.buttonService.nextBtnClicked.subscribe(() => {\n      this.checkAndCommitCurrentPage('next');\n    });\n\n    this.dangerButtonSubscription = this.buttonService.dangerBtnClicked.subscribe(() => {\n      this.checkAndCommitCurrentPage('danger');\n    });\n\n    this.finishButtonSubscription = this.buttonService.finishBtnClicked.subscribe(() => {\n      this.checkAndCommitCurrentPage('finish');\n    });\n\n    this.customButtonSubscription = this.buttonService.customBtnClicked.subscribe((type: string) => {\n      if (!this.wizardStopNavigation) {\n        this.currentPage.customButtonClicked.emit(type);\n      }\n    });\n\n    this.cancelButtonSubscription = this.buttonService.cancelBtnClicked.subscribe(() => {\n      if (this.wizardStopNavigation) {\n        return;\n      }\n\n      if (this.currentPage.preventDefault) {\n        this.currentPage.pageOnCancel.emit(this.currentPage);\n      } else {\n        this.cancel();\n      }\n    });\n\n    this.pagesResetSubscription = this.pageCollection.pagesReset.subscribe(() => {\n      this.setFirstPageCurrent();\n    });\n  }\n\n  /**\n   *\n   * @memberof WizardNavigationService\n   */\n  ngOnDestroy(): void {\n    this.previousButtonSubscription.unsubscribe();\n    this.nextButtonSubscription.unsubscribe();\n    this.dangerButtonSubscription.unsubscribe();\n    this.finishButtonSubscription.unsubscribe();\n    this.customButtonSubscription.unsubscribe();\n    this.cancelButtonSubscription.unsubscribe();\n    this.pagesResetSubscription.unsubscribe();\n  }\n\n  /**\n   *\n   * @memberof WizardNavigationService\n   */\n  private _currentChanged = new Subject<ClrWizardPage>();\n\n  /**\n   * An Observable that is predominantly used amongst the subcomponents and services\n   * of the wizard. It is recommended that users listen to the ClrWizardPage.onLoad\n   * (clrWizardPageOnLoad) output instead of this Observable.\n   *\n   * @memberof WizardNavigationService\n   */\n  public get currentPageChanged(): Observable<ClrWizardPage> {\n    // TODO: MAKE SURE EXTERNAL OUTPUTS SAY 'CHANGE' NOT 'CHANGED'\n    // A BREAKING CHANGE SO AWAITING MINOR RELEASE\n    return this._currentChanged.asObservable();\n  }\n\n  /**\n   * A Boolean flag used by the ClrWizardPage to avoid a race condition when pages are\n   * loading and there is no current page defined.\n   *\n   * @memberof WizardNavigationService\n   */\n  public navServiceLoaded = false;\n\n  /**\n   * A boolean flag shared across the Wizard subcomponents that follows the value\n   * of the Wizard.forceForward (clrWizardForceForwardNavigation) input. When true,\n   * navigating backwards in the stepnav menu will reset any skipped pages' completed\n   * state to false.\n   *\n   * This is useful when a wizard executes validation on a page-by-page basis when\n   * the next button is clicked.\n   *\n   * @memberof WizardNavigationService\n   */\n  public forceForwardNavigation = false;\n\n  /**\n   * @memberof WizardNavigationService\n   */\n  public get currentPageTitle(): TemplateRef<any> {\n    // when the querylist of pages is empty. this is the first place it fails...\n    if (!this.currentPage) {\n      return null;\n    }\n    return this.currentPage.title;\n  }\n\n  /**\n   * Returns a Boolean that tells you whether or not the current page is the first\n   * page in the Wizard.\n   *\n   * This is helpful for determining whether a page is navigable.\n   *\n   * @memberof WizardNavigationService\n   */\n  public get currentPageIsFirst(): boolean {\n    return this.pageCollection.firstPage === this.currentPage;\n  }\n\n  /**\n   * Returns a Boolean that tells you whether or not the current page is the\n   * last page in the Wizard.\n   *\n   * This is used to determine which buttons should display in the wizard footer.\n   *\n   * @memberof WizardNavigationService\n   */\n  public get currentPageIsLast(): boolean {\n    return this.pageCollection.lastPage === this.currentPage;\n  }\n\n  /**\n   * @memberof WizardNavigationService\n   */\n  private _currentPage: ClrWizardPage;\n\n  /**\n   * Returns the ClrWizardPage object of the current page or null.\n   *\n   * @memberof WizardNavigationService\n   */\n  get currentPage(): ClrWizardPage {\n    if (!this._currentPage) {\n      return null;\n    }\n    return this._currentPage;\n  }\n\n  /**\n   * Accepts a ClrWizardPage object, since that object to be the current/active\n   * page in the wizard, and emits the ClrWizardPage.onLoad (clrWizardPageOnLoad)\n   * event for that page.\n   *\n   * Note that all of this work is bypassed if the ClrWizardPage object is already\n   * the current page.\n   *\n   * @memberof WizardNavigationService\n   */\n  set currentPage(page: ClrWizardPage) {\n    if (this._currentPage !== page && !this.wizardStopNavigation) {\n      this._currentPage = page;\n      page.onLoad.emit(page.id);\n      this._currentChanged.next(page);\n    }\n  }\n\n  /**\n   * @memberof WizardNavigationService\n   */\n  private _movedToNextPage = new Subject<boolean>();\n\n  /**\n   * An observable used internally to alert the wizard that forward navigation\n   * has occurred. It is recommended that you use the Wizard.onMoveNext\n   * (clrWizardOnNext) output instead of this one.\n   *\n   * @memberof WizardNavigationService\n   */\n  public get movedToNextPage(): Observable<boolean> {\n    return this._movedToNextPage.asObservable();\n  }\n\n  /**\n   * @memberof WizardNavigationService\n   */\n  private _wizardFinished = new Subject<boolean>();\n\n  /**\n   * An observable used internally to alert the wizard that the nav service\n   * has approved completion of the wizard.\n   *\n   * It is recommended that you use the Wizard.wizardFinished (clrWizardOnFinish)\n   * output instead of this one.\n   *\n   * @memberof WizardNavigationService\n   */\n  public get wizardFinished(): Observable<boolean> {\n    return this._wizardFinished.asObservable();\n  }\n\n  /**\n   * This is a public function that can be used to programmatically advance\n   * the user to the next page.\n   *\n   * When invoked, this method will move the wizard to the next page after\n   * successful validation. Note that this method goes through all checks\n   * and event emissions as if Wizard.next(false) had been called.\n   *\n   * In most cases, it makes more sense to use Wizard.next(false).\n   *\n   * @memberof WizardNavigationService\n   */\n  public next(): void {\n    if (this.currentPageIsLast) {\n      this.checkAndCommitCurrentPage('finish');\n    } else {\n      this.checkAndCommitCurrentPage('next');\n    }\n  }\n\n  /**\n   * Bypasses checks and most event emissions to force a page to navigate forward.\n   *\n   * Comparable to calling Wizard.next() or Wizard.forceNext().\n   *\n   * @memberof WizardNavigationService\n   */\n  public forceNext(): void {\n    const currentPage: ClrWizardPage = this.currentPage;\n    const nextPage: ClrWizardPage = this.pageCollection.getNextPage(currentPage);\n\n    // catch errant null or undefineds that creep in\n    if (!nextPage) {\n      throw new Error('The wizard has no next page to go to.');\n    }\n\n    if (this.wizardStopNavigation) {\n      return;\n    }\n\n    if (!currentPage.completed) {\n      // this is a state that alt next flows can get themselves in...\n      this.pageCollection.commitPage(currentPage);\n    }\n    this.currentPage = nextPage;\n  }\n\n  /**\n   * Accepts a button/action type as a parameter. Encapsulates all logic for\n   * event emissions, state of the current page, and wizard and page level overrides.\n   *\n   * Avoid calling this function directly unless you really know what you're doing.\n   *\n   * @memberof WizardNavigationService\n   */\n  public checkAndCommitCurrentPage(buttonType: string): void {\n    const currentPage: ClrWizardPage = this.currentPage;\n    let iAmTheLastPage: boolean;\n\n    let isNext: boolean;\n    let isDanger: boolean;\n    let isDangerNext: boolean;\n    let isDangerFinish: boolean;\n    let isFinish: boolean;\n\n    if (!currentPage.readyToComplete || this.wizardStopNavigation) {\n      return;\n    }\n\n    iAmTheLastPage = this.currentPageIsLast;\n\n    isNext = buttonType === 'next';\n    isDanger = buttonType === 'danger';\n    isDangerNext = isDanger && !iAmTheLastPage;\n    isDangerFinish = isDanger && iAmTheLastPage;\n    isFinish = buttonType === 'finish' || isDangerFinish;\n\n    if (isFinish && !iAmTheLastPage) {\n      return;\n    }\n\n    currentPage.primaryButtonClicked.emit(buttonType);\n\n    if (isFinish) {\n      currentPage.finishButtonClicked.emit(currentPage);\n    } else if (isDanger) {\n      currentPage.dangerButtonClicked.emit();\n    } else if (isNext) {\n      currentPage.nextButtonClicked.emit();\n    }\n\n    if (currentPage.stopNext || currentPage.preventDefault) {\n      currentPage.onCommit.emit(currentPage.id);\n      return;\n    }\n\n    // order is very important with these emitters!\n    if (isFinish) {\n      // mark page as complete\n      if (!this.wizardHasAltNext) {\n        this.pageCollection.commitPage(currentPage);\n      }\n      this._wizardFinished.next();\n    }\n\n    if (this.wizardHasAltNext) {\n      this.pageCollection.commitPage(currentPage);\n\n      if (isNext || isDangerNext) {\n        this._movedToNextPage.next(true);\n      }\n      // jump out here, no matter what type we're looking at\n      return;\n    }\n\n    if (isNext || isDangerNext) {\n      this.forceNext();\n    }\n\n    if (!this.wizardHasAltNext && !this.wizardStopNavigation) {\n      this._movedToNextPage.next(true);\n    }\n  }\n\n  /**\n   * This is a public function that can be used to programmatically conclude\n   * the wizard.\n   *\n   * When invoked, this method will  initiate the work involved with finalizing\n   * and finishing the wizard workflow. Note that this method goes through all\n   * checks and event emissions as if Wizard.finish(false) had been called.\n   *\n   * In most cases, it makes more sense to use Wizard.finish(false).\n   *\n   * @memberof WizardNavigationService\n   */\n  public finish(): void {\n    this.checkAndCommitCurrentPage('finish');\n  }\n\n  /**\n   * @memberof WizardNavigationService\n   */\n  private _movedToPreviousPage = new Subject<boolean>();\n\n  /**\n   * Notifies the wizard when backwards navigation has occurred via the\n   * previous button.\n   *\n   * @memberof WizardNavigationService\n   */\n  public get movedToPreviousPage(): Observable<boolean> {\n    return this._movedToPreviousPage.asObservable();\n  }\n\n  /**\n   * Programmatically moves the wizard to the page before the current page.\n   *\n   * In most instances, it makes more sense to call Wizard.previous()\n   * which does the same thing.\n   *\n   * @memberof WizardNavigationService\n   */\n  public previous(): void {\n    let previousPage: ClrWizardPage;\n\n    if (this.currentPageIsFirst || this.wizardStopNavigation) {\n      return;\n    }\n\n    previousPage = this.pageCollection.getPreviousPage(this.currentPage);\n\n    if (!previousPage) {\n      return;\n    }\n\n    this._movedToPreviousPage.next(true);\n\n    if (this.forceForwardNavigation) {\n      this.currentPage.completed = false;\n    }\n\n    this.currentPage = previousPage;\n  }\n\n  /**\n   * @memberof WizardNavigationService\n   */\n  private _cancelWizard = new Subject<any>();\n\n  /**\n   * Notifies the wizard that a user is trying to cancel it.\n   *\n   * @memberof WizardNavigationService\n   */\n  public get notifyWizardCancel(): Observable<any> {\n    return this._cancelWizard.asObservable();\n  }\n\n  /**\n   * Allows a hook into the cancel workflow of the wizard from the nav service. Note that\n   * this route goes through all checks and event emissions as if a cancel button had\n   * been clicked.\n   *\n   * In most cases, users looking for a hook into the cancel routine are actually looking\n   * for a way to close the wizard from their host component because they have prevented\n   * the default cancel action.\n   *\n   * In this instance, it is recommended that you use Wizard.close() to avoid any event\n   * emission loop resulting from an event handler calling back into routine that will\n   * again evoke the events it handles.\n   *\n   * @memberof WizardNavigationService\n   */\n  public cancel(): void {\n    this._cancelWizard.next();\n  }\n\n  /**\n   * A boolean flag shared across the Wizard subcomponents that follows the value\n   * of the Wizard.stopCancel (clrWizardPreventDefaultCancel) input. When true, the cancel\n   * routine is subverted and must be reinstated in the host component calling Wizard.close()\n   * at some point.\n   *\n   * @memberof WizardNavigationService\n   */\n  public wizardHasAltCancel: boolean = false;\n\n  /**\n   * A boolean flag shared across the Wizard subcomponents that follows the value\n   * of the Wizard.stopNext (clrWizardPreventDefaultNext) input. When true, the next and finish\n   * routines are subverted and must be reinstated in the host component calling Wizard.next(),\n   * Wizard.forceNext(), Wizard.finish(), or Wizard.forceFinish().\n   *\n   * @memberof WizardNavigationService\n   */\n  public wizardHasAltNext: boolean = false;\n\n  /**\n   * A boolean flag shared across the Wizard subcomponents that follows the value\n   * of the Wizard.stopNavigation (clrWizardPreventNavigation) input. When true, all\n   * navigational elements in the wizard are disabled.\n   *\n   * This is intended to freeze the wizard in place. Events are not fired so this is\n   * not a way to implement alternate functionality for navigation.\n   *\n   * @memberof WizardNavigationService\n   */\n  public wizardStopNavigation: boolean = false;\n\n  /**\n   * A boolean flag shared with the stepnav items that prevents user clicks on\n   * stepnav items from navigating the wizard.\n   *\n   * @memberof WizardNavigationService\n   */\n  public wizardDisableStepnav: boolean = false;\n\n  /**\n   * Performs all required checks to determine if a user can navigate to a page. Checking at each\n   * point if a page is navigable -- completed where the page immediately after the last completed\n   * page.\n   *\n   * Takes two parameters. The first one must be either the ClrWizardPage object or the ID of the\n   * ClrWizardPage object that you want to make the current page.\n   *\n   * The second parameter is optional and is a Boolean flag for \"lazy completion\". What this means\n   * is the Wizard will mark all pages between the current page and the page you want to navigate\n   * to as completed. This is useful for informational wizards that do not require user action,\n   * allowing an easy means for users to jump ahead.\n   *\n   * To avoid checks on navigation, use ClrWizardPage.makeCurrent() instead.\n   *\n   * @memberof WizardNavigationService\n   */\n  public goTo(pageToGoToOrId: any, lazyComplete: boolean = false) {\n    let pageToGoTo: ClrWizardPage;\n    let currentPage: ClrWizardPage;\n    let myPages: PageCollectionService;\n    let pagesToCheck: ClrWizardPage[];\n    let okayToMove: boolean;\n    let goingForward: boolean;\n    let currentPageIndex: number;\n    let goToPageIndex: number;\n\n    myPages = this.pageCollection;\n    pageToGoTo = typeof pageToGoToOrId === 'string' ? myPages.getPageById(pageToGoToOrId) : pageToGoToOrId;\n    currentPage = this.currentPage;\n\n    // no point in going to the current page. you're there already!\n    // also hard block on any navigation when stopNavigation is true\n    if (pageToGoTo === currentPage || this.wizardStopNavigation) {\n      return;\n    }\n\n    currentPageIndex = myPages.getPageIndex(currentPage);\n    goToPageIndex = myPages.getPageIndex(pageToGoTo);\n    goingForward = goToPageIndex > currentPageIndex;\n    pagesToCheck = myPages.getPageRangeFromPages(this.currentPage, pageToGoTo);\n\n    okayToMove = lazyComplete || this.canGoTo(pagesToCheck);\n\n    if (!okayToMove) {\n      return;\n    }\n\n    if (goingForward && lazyComplete) {\n      pagesToCheck.forEach((page: ClrWizardPage) => {\n        if (page !== pageToGoTo) {\n          page.completed = true;\n        }\n      });\n    } else if (!goingForward && this.forceForwardNavigation) {\n      pagesToCheck.forEach((page: ClrWizardPage) => {\n        page.completed = false;\n      });\n    }\n\n    this.currentPage = pageToGoTo;\n  }\n\n  /**\n   * Accepts a range of ClrWizardPage objects as a parameter. Performs the work of checking\n   * those objects to determine if navigation can be accomplished.\n   *\n   * @memberof WizardNavigationService\n   */\n  public canGoTo(pagesToCheck: ClrWizardPage[]): boolean {\n    let okayToMove = true;\n    const myPages = this.pageCollection;\n\n    // previous page can be important when moving because if it's completed it\n    // allows us to move to the page even if it's incomplete...\n    let previousPagePasses: boolean;\n\n    if (!pagesToCheck || pagesToCheck.length < 1) {\n      return false;\n    }\n\n    pagesToCheck.forEach((page: ClrWizardPage) => {\n      let previousPage: ClrWizardPage;\n\n      if (!okayToMove) {\n        return;\n      }\n\n      if (page.completed) {\n        // default is true. just jump out instead of complicating it.\n        return;\n      }\n\n      // so we know our page is not completed...\n      previousPage = myPages.getPageIndex(page) > 0 ? myPages.getPreviousPage(page) : null;\n      previousPagePasses = previousPage === null || previousPage.completed === true;\n\n      // we are false if not the current page AND previous page is not completed\n      // (but must have a previous page)\n      if (!page.current && !previousPagePasses) {\n        okayToMove = false;\n      }\n      // falls through to true as default\n    });\n\n    return okayToMove;\n  }\n\n  /**\n   * Looks through the collection of pages to find the first one that is incomplete\n   * and makes that page the current/active page.\n   *\n   * @memberof WizardNavigationService\n   */\n  public setLastEnabledPageCurrent(): void {\n    const allPages: ClrWizardPage[] = this.pageCollection.pagesAsArray;\n    let lastCompletedPageIndex: number = null;\n\n    allPages.forEach((page: ClrWizardPage, index: number) => {\n      if (page.completed) {\n        lastCompletedPageIndex = index;\n      }\n    });\n\n    if (lastCompletedPageIndex === null) {\n      // always is at least the first item...\n      lastCompletedPageIndex = 0;\n    } else if (lastCompletedPageIndex + 1 < allPages.length) {\n      lastCompletedPageIndex = lastCompletedPageIndex + 1;\n    }\n\n    this.currentPage = allPages[lastCompletedPageIndex];\n  }\n\n  /**\n   * Finds the first page in the collection of pages and makes that page the\n   * current/active page.\n   *\n   * @memberof WizardNavigationService\n   */\n  public setFirstPageCurrent(): void {\n    this.currentPage = this.pageCollection.pagesAsArray[0];\n  }\n\n  /**\n   * Updates the stepnav on the left side of the wizard when pages are dynamically\n   * added or removed from the collection of pages.\n   *\n   * @memberof WizardNavigationService\n   */\n  public updateNavigation(): void {\n    let toSetCurrent: ClrWizardPage;\n    let currentPageRemoved: boolean;\n\n    this.pageCollection.updateCompletedStates();\n\n    currentPageRemoved = this.pageCollection.pagesAsArray.indexOf(this.currentPage) < 0;\n    if (currentPageRemoved) {\n      toSetCurrent = this.pageCollection.findFirstIncompletePage();\n      this.currentPage = toSetCurrent;\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description":
          "<p>Creates an instance of WizardNavigationService. Also sets up subscriptions\nthat listen to the button service to determine when a button has been clicked\nin the wizard. Is also responsible for taking action when the page collection\nrequests that navigation be reset to its pristine state.</p>\n",
        "args": [
          {
            "name": "pageCollection",
            "type": "PageCollectionService"
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService"
          }
        ],
        "line": 91,
        "jsdoctags": [
          {
            "name": "pageCollection",
            "type": "PageCollectionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "jsdoctags": [
        {
          "pos": 1100,
          "end": 1110,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 1100,
            "end": 1101,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 1101,
            "end": 1108,
            "flags": 0,
            "escapedText": "example"
          },
          "comment": "<clr-wizard #wizard ...>"
        },
        {
          "pos": 1143,
          "end": 1153,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 1143,
            "end": 1144,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 1144,
            "end": 1151,
            "flags": 0,
            "escapedText": "example"
          },
          "comment": "export class YourHostComponent {"
        },
        {
          "pos": 1193,
          "end": 1203,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 1193,
            "end": 1194,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 1194,
            "end": 1203,
            "flags": 0,
            "escapedText": "ViewChild"
          },
          "comment": "(\"wizard\") wizard: Wizard;\n...\n}"
        }
      ],
      "accessors": {
        "currentPageChanged": {
          "name": "currentPageChanged",
          "getSignature": {
            "name": "currentPageChanged",
            "type": "",
            "returnType": "Observable<ClrWizardPage>",
            "line": 175,
            "description":
              "<p>An Observable that is predominantly used amongst the subcomponents and services\nof the wizard. It is recommended that users listen to the ClrWizardPage.onLoad\n(clrWizardPageOnLoad) output instead of this Observable.</p>\n",
            "jsdoctags": [
              {
                "pos": 5663,
                "end": 5673,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 5663,
                  "end": 5664,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 5664,
                  "end": 5672,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "currentPageTitle": {
          "name": "currentPageTitle",
          "getSignature": {
            "name": "currentPageTitle",
            "type": "",
            "returnType": "TemplateRef<any>",
            "line": 205,
            "jsdoctags": [
              {
                "pos": 6670,
                "end": 6680,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 6670,
                  "end": 6671,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 6671,
                  "end": 6679,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "currentPageIsFirst": {
          "name": "currentPageIsFirst",
          "getSignature": {
            "name": "currentPageIsFirst",
            "type": "boolean",
            "returnType": "boolean",
            "line": 221,
            "description":
              "<p>Returns a Boolean that tells you whether or not the current page is the first\npage in the Wizard.</p>\n<p>This is helpful for determining whether a page is navigable.</p>\n",
            "jsdoctags": [
              {
                "pos": 7132,
                "end": 7142,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 7132,
                  "end": 7133,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 7133,
                  "end": 7141,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "currentPageIsLast": {
          "name": "currentPageIsLast",
          "getSignature": {
            "name": "currentPageIsLast",
            "type": "boolean",
            "returnType": "boolean",
            "line": 233,
            "description":
              "<p>Returns a Boolean that tells you whether or not the current page is the\nlast page in the Wizard.</p>\n<p>This is used to determine which buttons should display in the wizard footer.</p>\n",
            "jsdoctags": [
              {
                "pos": 7495,
                "end": 7505,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 7495,
                  "end": 7496,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 7496,
                  "end": 7504,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "currentPage": {
          "name": "currentPage",
          "setSignature": {
            "name": "currentPage",
            "type": "void",
            "args": [
              {
                "name": "page",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 264,
            "description":
              "<p>Accepts a ClrWizardPage object, since that object to be the current/active\npage in the wizard, and emits the ClrWizardPage.onLoad (clrWizardPageOnLoad)\nevent for that page.</p>\n<p>Note that all of this work is bypassed if the ClrWizardPage object is already\nthe current page.</p>\n",
            "jsdoctags": [
              {
                "name": "page",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentPage",
            "type": "",
            "returnType": "ClrWizardPage",
            "line": 247,
            "description": "<p>Returns the ClrWizardPage object of the current page or null.</p>\n",
            "jsdoctags": [
              {
                "pos": 7820,
                "end": 7830,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 7820,
                  "end": 7821,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 7821,
                  "end": 7829,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "movedToNextPage": {
          "name": "movedToNextPage",
          "getSignature": {
            "name": "movedToNextPage",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 284,
            "description":
              "<p>An observable used internally to alert the wizard that forward navigation\nhas occurred. It is recommended that you use the Wizard.onMoveNext\n(clrWizardOnNext) output instead of this one.</p>\n",
            "jsdoctags": [
              {
                "pos": 8889,
                "end": 8899,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 8889,
                  "end": 8890,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 8890,
                  "end": 8898,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "wizardFinished": {
          "name": "wizardFinished",
          "getSignature": {
            "name": "wizardFinished",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 302,
            "description":
              "<p>An observable used internally to alert the wizard that the nav service\nhas approved completion of the wizard.</p>\n<p>It is recommended that you use the Wizard.wizardFinished (clrWizardOnFinish)\noutput instead of this one.</p>\n",
            "jsdoctags": [
              {
                "pos": 9397,
                "end": 9407,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 9397,
                  "end": 9398,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 9398,
                  "end": 9406,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "movedToPreviousPage": {
          "name": "movedToPreviousPage",
          "getSignature": {
            "name": "movedToPreviousPage",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 457,
            "description":
              "<p>Notifies the wizard when backwards navigation has occurred via the\nprevious button.</p>\n",
            "jsdoctags": [
              {
                "pos": 13838,
                "end": 13848,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 13838,
                  "end": 13839,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 13839,
                  "end": 13847,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        },
        "notifyWizardCancel": {
          "name": "notifyWizardCancel",
          "getSignature": {
            "name": "notifyWizardCancel",
            "type": "",
            "returnType": "Observable<any>",
            "line": 501,
            "description": "<p>Notifies the wizard that a user is trying to cancel it.</p>\n",
            "jsdoctags": [
              {
                "pos": 14853,
                "end": 14863,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 14853,
                  "end": 14854,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 14854,
                  "end": 14862,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardNavigationService</p>\n"
              }
            ]
          }
        }
      },
      "type": "injectable"
    }
  ],
  "classes": [
    {
      "name": "AccordionModel",
      "id": "class-AccordionModel-c891e4be6edebb942b93a81fdbcf274b",
      "file": "src/clr-angular/accordion/models/accordion.model.ts",
      "type": "class",
      "sourceCode":
        "import { AccordionStrategy } from '../enums/accordion-strategy.enum';\nimport { AccordionStatus } from '../enums/accordion-status.enum';\n\nlet accordionCount = 0;\n\nexport class AccordionPanelModel {\n  status = AccordionStatus.Inactive;\n  index: number = null;\n  disabled = false;\n  open = false;\n  templateId = `${this.id}-${this.accordionId}`;\n  constructor(public id: string, public accordionId: number | string) {}\n}\n\nexport class AccordionModel {\n  protected strategy = AccordionStrategy.Default;\n  protected accordionCount = accordionCount++;\n  protected _panels: { [id: string]: AccordionPanelModel } = {};\n\n  get panels(): AccordionPanelModel[] {\n    return Object.keys(this._panels).map(id => this._panels[id]);\n  }\n\n  setStrategy(strategy: AccordionStrategy) {\n    this.strategy = strategy;\n  }\n\n  updatePanelOrder(ids: string[]) {\n    ids.forEach((id, index) => (this._panels[id].index = index));\n    this.removeOldPanels(ids);\n  }\n\n  addPanel(id: string, open = false) {\n    this._panels[id] = new AccordionPanelModel(id, this.accordionCount);\n    this._panels[id].open = open;\n  }\n\n  togglePanel(panelId: string, open?: boolean) {\n    const panelIsOpen = this._panels[panelId].open;\n    if (this.strategy === AccordionStrategy.Default) {\n      this.closeAllPanels();\n    }\n\n    this._panels[panelId].open = open !== undefined ? open : !panelIsOpen;\n  }\n\n  disablePanel(panelId: string, disabled: boolean) {\n    this._panels[panelId].disabled = disabled;\n  }\n\n  private closeAllPanels() {\n    this.panels.forEach(panel => (this._panels[panel.id].open = false));\n  }\n\n  private removeOldPanels(ids: string[]) {\n    this.panels\n      .filter(panel => ids.find(id => id === panel.id) === undefined)\n      .forEach(panel => delete this._panels[panel.id]);\n  }\n}\n",
      "properties": [
        {
          "name": "_panels",
          "defaultValue": "{}",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [113]
        },
        {
          "name": "accordionCount",
          "defaultValue": "accordionCount++",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [113]
        },
        {
          "name": "strategy",
          "defaultValue": "AccordionStrategy.Default",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [113]
        }
      ],
      "methods": [
        {
          "name": "addPanel",
          "args": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "closeAllPanels",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "modifierKind": [112]
        },
        {
          "name": "disablePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "disabled",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "disabled",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "removeOldPanels",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setStrategy",
          "args": [
            {
              "name": "strategy",
              "type": "AccordionStrategy"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "jsdoctags": [
            {
              "name": "strategy",
              "type": "AccordionStrategy",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "togglePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updatePanelOrder",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "panels": {
          "name": "panels",
          "getSignature": {
            "name": "panels",
            "type": "[]",
            "returnType": "AccordionPanelModel[]",
            "line": 26
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "AccordionPanelModel",
      "id": "class-AccordionPanelModel-c891e4be6edebb942b93a81fdbcf274b",
      "file": "src/clr-angular/accordion/models/accordion.model.ts",
      "type": "class",
      "sourceCode":
        "import { AccordionStrategy } from '../enums/accordion-strategy.enum';\nimport { AccordionStatus } from '../enums/accordion-status.enum';\n\nlet accordionCount = 0;\n\nexport class AccordionPanelModel {\n  status = AccordionStatus.Inactive;\n  index: number = null;\n  disabled = false;\n  open = false;\n  templateId = `${this.id}-${this.accordionId}`;\n  constructor(public id: string, public accordionId: number | string) {}\n}\n\nexport class AccordionModel {\n  protected strategy = AccordionStrategy.Default;\n  protected accordionCount = accordionCount++;\n  protected _panels: { [id: string]: AccordionPanelModel } = {};\n\n  get panels(): AccordionPanelModel[] {\n    return Object.keys(this._panels).map(id => this._panels[id]);\n  }\n\n  setStrategy(strategy: AccordionStrategy) {\n    this.strategy = strategy;\n  }\n\n  updatePanelOrder(ids: string[]) {\n    ids.forEach((id, index) => (this._panels[id].index = index));\n    this.removeOldPanels(ids);\n  }\n\n  addPanel(id: string, open = false) {\n    this._panels[id] = new AccordionPanelModel(id, this.accordionCount);\n    this._panels[id].open = open;\n  }\n\n  togglePanel(panelId: string, open?: boolean) {\n    const panelIsOpen = this._panels[panelId].open;\n    if (this.strategy === AccordionStrategy.Default) {\n      this.closeAllPanels();\n    }\n\n    this._panels[panelId].open = open !== undefined ? open : !panelIsOpen;\n  }\n\n  disablePanel(panelId: string, disabled: boolean) {\n    this._panels[panelId].disabled = disabled;\n  }\n\n  private closeAllPanels() {\n    this.panels.forEach(panel => (this._panels[panel.id].open = false));\n  }\n\n  private removeOldPanels(ids: string[]) {\n    this.panels\n      .filter(panel => ids.find(id => id === panel.id) === undefined)\n      .forEach(panel => delete this._panels[panel.id]);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "accordionId",
            "type": "number | string"
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "id",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "accordionId",
            "type": "number | string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "accordionId",
          "type": "number | string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [114]
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [114]
        },
        {
          "name": "index",
          "defaultValue": "null",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "open",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "status",
          "defaultValue": "AccordionStatus.Inactive",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "templateId",
          "defaultValue": "`${this.id}-${this.accordionId}`",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ButtonHubMock",
      "id": "class-ButtonHubMock-8f5e798d4505237bf07ebfb0aef27bf6",
      "file": "src/clr-angular/wizard/providers/button-hub.service.mock.ts",
      "type": "class",
      "sourceCode":
        "export class ButtonHubMock {\n  public buttonsReady: boolean = false;\n\n  public buttonClicked(type: string): string {\n    return type;\n  }\n}\n",
      "properties": [
        {
          "name": "buttonsReady",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "buttonClicked",
          "args": [
            {
              "name": "type",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 10,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "type",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CalendarModel",
      "id": "class-CalendarModel-9c7f17db06d5e8673fce5091bd2c05ca",
      "file": "src/clr-angular/forms/datepicker/model/calendar.model.ts",
      "type": "class",
      "sourceCode":
        "import { getNumberOfDaysInTheMonth } from '../utils/date-utils';\n\nimport { DayModel } from './day.model';\n\nexport class CalendarModel {\n  constructor(public readonly year: number, public readonly month: number) {\n    this.initializeDaysInCalendar();\n  }\n\n  days: DayModel[];\n\n  /**\n   * Populates the days array with the DayModels in the current Calendar.\n   */\n  private initializeDaysInCalendar(): void {\n    const noOfDaysInCalendar: number = getNumberOfDaysInTheMonth(this.year, this.month);\n    this.days = Array(noOfDaysInCalendar)\n      .fill(null)\n      .map((date, index) => {\n        return new DayModel(this.year, this.month, index + 1);\n      });\n  }\n\n  /**\n   * Checks if the calendar passed is equal to the current calendar.\n   */\n  isEqual(calendar: CalendarModel) {\n    if (calendar) {\n      return this.year === calendar.year && this.month === calendar.month;\n    }\n    return false;\n  }\n\n  /**\n   * Checks if a DayModel is in the Calendar\n   */\n  isDayInCalendar(day: DayModel): boolean {\n    if (day) {\n      return this.year === day.year && this.month === day.month;\n    }\n    return false;\n  }\n\n  /**\n   * Returns CalendarModel of the previous month.\n   */\n  previousMonth(): CalendarModel {\n    if (this.month === 0) {\n      return new CalendarModel(this.year - 1, 11);\n    } else {\n      return new CalendarModel(this.year, this.month - 1);\n    }\n  }\n\n  /**\n   * Returns CalendarModel of the next month.\n   */\n  nextMonth(): CalendarModel {\n    if (this.month === 11) {\n      return new CalendarModel(this.year + 1, 0);\n    } else {\n      return new CalendarModel(this.year, this.month + 1);\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "year",
            "type": "number"
          },
          {
            "name": "month",
            "type": "number"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "year",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "month",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "days",
          "type": "DayModel[]",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "month",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114, 132]
        },
        {
          "name": "year",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114, 132]
        }
      ],
      "methods": [
        {
          "name": "initializeDaysInCalendar",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "description": "<p>Populates the days array with the DayModels in the current Calendar.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "isDayInCalendar",
          "args": [
            {
              "name": "day",
              "type": "DayModel"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 43,
          "description": "<p>Checks if a DayModel is in the Calendar</p>\n",
          "jsdoctags": [
            {
              "name": "day",
              "type": "DayModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isEqual",
          "args": [
            {
              "name": "calendar",
              "type": "CalendarModel"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 33,
          "description": "<p>Checks if the calendar passed is equal to the current calendar.</p>\n",
          "jsdoctags": [
            {
              "name": "calendar",
              "type": "CalendarModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "nextMonth",
          "args": [],
          "optional": false,
          "returnType": "CalendarModel",
          "typeParameters": [],
          "line": 64,
          "description": "<p>Returns CalendarModel of the next month.</p>\n"
        },
        {
          "name": "previousMonth",
          "args": [],
          "optional": false,
          "returnType": "CalendarModel",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Returns CalendarModel of the previous month.</p>\n"
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CalendarViewModel",
      "id": "class-CalendarViewModel-ff06b9a91f140672fc7eddefa1247d9c",
      "file": "src/clr-angular/forms/datepicker/model/calendar-view.model.ts",
      "type": "class",
      "sourceCode":
        "import { NO_OF_DAYS_IN_A_WEEK, NO_OF_ROWS_IN_CALENDAR_VIEW, TOTAL_DAYS_IN_DAYS_VIEW } from '../utils/constants';\nimport { getDay } from '../utils/date-utils';\n\nimport { CalendarModel } from './calendar.model';\nimport { DayViewModel } from './day-view.model';\nimport { DayModel } from './day.model';\nimport { DateRange } from '../interfaces/date-range.interface';\n\nexport class CalendarViewModel {\n  constructor(\n    public calendar: CalendarModel,\n    private selectedDay: DayModel,\n    private focusableDay: DayModel,\n    private today: DayModel,\n    public firstDayOfWeek: number,\n    private excludedDates: DateRange\n  ) {\n    this.initializeCalendarView();\n  }\n\n  private currMonthDayViews: DayViewModel[] = [];\n\n  private _calendarView: DayViewModel[][];\n\n  /**\n   * DayViewModel matrix. Size 6x7\n   */\n  get calendarView(): DayViewModel[][] {\n    return this._calendarView;\n  }\n\n  /**\n   * Generates a 6x7 matrix of DayViewModel based on the Calendar.\n   * The 6x7 matrix is structured according to the first day of the week.\n   * 6 rows to accommodate months which might have dates spanning over 6 weeks.\n   * 7 columns because there are 7 days in a week :P :D\n   */\n  private initializeCalendarView(): void {\n    // Generate prev and next month calendar models.\n    const prevMonthCalendar: CalendarModel = this.calendar.previousMonth();\n    const nextMonthCalendar: CalendarModel = this.calendar.nextMonth();\n\n    // Get no of days from prev and next months.\n    const daysFromPrevMonthInCalView: number = this.numDaysFromPrevMonthInCalView(\n      this.calendar.year,\n      this.calendar.month\n    );\n    const daysFromNextMonthInCalView: number =\n      TOTAL_DAYS_IN_DAYS_VIEW - (this.calendar.days.length + daysFromPrevMonthInCalView);\n\n    // Generate prev, curr and next day view models\n    let prevMonthDayViews: DayViewModel[] = [];\n    let nextMonthDayViews: DayViewModel[] = [];\n\n    if (daysFromPrevMonthInCalView > 0) {\n      prevMonthDayViews = this.generateDayViewModels(\n        prevMonthCalendar.days.slice(-1 * daysFromPrevMonthInCalView),\n        true,\n        false\n      );\n    }\n\n    this.currMonthDayViews = this.generateDayViewModels(this.calendar.days, false, true);\n\n    if (daysFromNextMonthInCalView > 0) {\n      nextMonthDayViews = this.generateDayViewModels(\n        nextMonthCalendar.days.slice(0, daysFromNextMonthInCalView),\n        true,\n        false\n      );\n    }\n\n    // Generate calendar view and initialize flags\n    this._calendarView = this.generateCalendarView(prevMonthDayViews, this.currMonthDayViews, nextMonthDayViews);\n    this.initializeSelectedDay();\n    this.initializeFocusableDay();\n  }\n\n  private isDateExcluded(date: DayModel) {\n    const { minDate, maxDate }: DateRange = this.excludedDates;\n    const from = minDate.toComparisonString();\n    const to = maxDate.toComparisonString();\n    const today = date.toComparisonString();\n\n    return !(today >= from && today <= to);\n  }\n\n  /**\n   * Generates a DayViewModel array based on the DayModel passed\n   */\n  private generateDayViewModels(days: DayModel[], isExcluded: boolean, isCurrentCalendar: boolean): DayViewModel[] {\n    const dayViews: DayViewModel[] = days.map(day => {\n      return new DayViewModel(day, false, isExcluded, this.isDateExcluded(day), false, false);\n    });\n    if (isCurrentCalendar && this.calendar.isDayInCalendar(this.today)) {\n      dayViews[this.today.date - 1].isTodaysDate = true;\n    }\n    return dayViews;\n  }\n\n  /**\n   * Gets the first day of the current month to figure out how many dates of previous month\n   * are needed to complete the Calendar View based on the first day of the week.\n   * eg: Assuming locale en-US, the first day of the week is Sunday,\n   * if first day of the current month lands on Wednesday, then\n   * (this.getDay function would return 3 since\n   * first day of the week is 0), we need the 3 days from the previous month.\n   */\n  private numDaysFromPrevMonthInCalView(currentYear: number, currentMonth: number): number {\n    const firstDayOfCurrMonth: number = getDay(currentYear, currentMonth, 1);\n\n    if (firstDayOfCurrMonth >= this.firstDayOfWeek) {\n      return firstDayOfCurrMonth - this.firstDayOfWeek;\n    } else {\n      return NO_OF_DAYS_IN_A_WEEK + firstDayOfCurrMonth - this.firstDayOfWeek;\n    }\n  }\n\n  /**\n   * Checks if the Day passed is in the CalendarView.\n   */\n  private isDayInCalendarView(day: DayModel): boolean {\n    if (!this.calendar.isDayInCalendar(day)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Using the DayViewModels from the previous, current and next month, this function\n   * generates the CalendarView.\n   */\n  private generateCalendarView(prev: DayViewModel[], curr: DayViewModel[], next: DayViewModel[]): DayViewModel[][] {\n    const combinationArr: DayViewModel[] = [...prev, ...curr, ...next];\n\n    const calendarView: DayViewModel[][] = [];\n    for (let i = 0; i < NO_OF_ROWS_IN_CALENDAR_VIEW; i++) {\n      calendarView[i] = combinationArr.slice(i * NO_OF_DAYS_IN_A_WEEK, (i + 1) * NO_OF_DAYS_IN_A_WEEK);\n    }\n    return calendarView;\n  }\n\n  /**\n   * Initialize the selected day if the day is in the calendar.\n   */\n  private initializeSelectedDay(): void {\n    if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n      this.currMonthDayViews[this.selectedDay.date - 1].isSelected = true;\n    }\n  }\n\n  /**\n   * Initializes the focusable day if the day is in the calendar. If focusable day is not set, then\n   * we check for the selected day. If selected day is not set then check if today is in the current\n   * calendar. If not then just set the 15th of the current calendar month.\n   */\n  private initializeFocusableDay(): void {\n    if (this.focusableDay && this.isDayInCalendarView(this.focusableDay)) {\n      this.setFocusableFlag(this.focusableDay, true);\n    } else if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n      this.setFocusableFlag(this.selectedDay, true);\n      this.focusableDay = this.selectedDay.clone();\n    } else if (this.isDayInCalendarView(this.today)) {\n      this.setFocusableFlag(this.today, true);\n      this.focusableDay = this.today.clone();\n    } else {\n      this.focusableDay = new DayModel(this.calendar.year, this.calendar.month, 15);\n      this.setFocusableFlag(this.focusableDay, true);\n    }\n  }\n\n  private setFocusableFlag(day: DayModel, flag: boolean): void {\n    if (day) {\n      this.currMonthDayViews[day.date - 1].isFocusable = flag;\n    }\n  }\n\n  /**\n   * Updates the focusable day in the calendar.\n   */\n  updateFocusableDay(day: DayModel): void {\n    this.setFocusableFlag(this.focusableDay, false);\n    this.setFocusableFlag(day, true);\n    this.focusableDay = day;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "calendar",
            "type": "CalendarModel"
          },
          {
            "name": "selectedDay",
            "type": "DayModel"
          },
          {
            "name": "focusableDay",
            "type": "DayModel"
          },
          {
            "name": "today",
            "type": "DayModel"
          },
          {
            "name": "firstDayOfWeek",
            "type": "number"
          },
          {
            "name": "excludedDates",
            "type": "DateRange"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "calendar",
            "type": "CalendarModel",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "selectedDay",
            "type": "DayModel",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusableDay",
            "type": "DayModel",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "today",
            "type": "DayModel",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "firstDayOfWeek",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "excludedDates",
            "type": "DateRange",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_calendarView",
          "type": "DayViewModel[][]",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [112]
        },
        {
          "name": "calendar",
          "type": "CalendarModel",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [114]
        },
        {
          "name": "currMonthDayViews",
          "defaultValue": "[]",
          "type": "DayViewModel[]",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [112]
        },
        {
          "name": "firstDayOfWeek",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "generateCalendarView",
          "args": [
            {
              "name": "prev",
              "type": "DayViewModel[]"
            },
            {
              "name": "curr",
              "type": "DayViewModel[]"
            },
            {
              "name": "next",
              "type": "DayViewModel[]"
            }
          ],
          "optional": false,
          "returnType": "[][]",
          "typeParameters": [],
          "line": 139,
          "description":
            "<p>Using the DayViewModels from the previous, current and next month, this function\ngenerates the CalendarView.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "prev",
              "type": "DayViewModel[]",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "curr",
              "type": "DayViewModel[]",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "next",
              "type": "DayViewModel[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateDayViewModels",
          "args": [
            {
              "name": "days",
              "type": "DayModel[]"
            },
            {
              "name": "isExcluded",
              "type": "boolean"
            },
            {
              "name": "isCurrentCalendar",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "DayViewModel[]",
          "typeParameters": [],
          "line": 97,
          "description": "<p>Generates a DayViewModel array based on the DayModel passed</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "days",
              "type": "DayModel[]",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "isExcluded",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "isCurrentCalendar",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeCalendarView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "description":
            "<p>Generates a 6x7 matrix of DayViewModel based on the Calendar.\nThe 6x7 matrix is structured according to the first day of the week.\n6 rows to accommodate months which might have dates spanning over 6 weeks.\n7 columns because there are 7 days in a week :P :D</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeFocusableDay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 163,
          "description":
            "<p>Initializes the focusable day if the day is in the calendar. If focusable day is not set, then\nwe check for the selected day. If selected day is not set then check if today is in the current\ncalendar. If not then just set the 15th of the current calendar month.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeSelectedDay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 152,
          "description": "<p>Initialize the selected day if the day is in the calendar.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "isDateExcluded",
          "args": [
            {
              "name": "date",
              "type": "DayModel"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 85,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "date",
              "type": "DayModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isDayInCalendarView",
          "args": [
            {
              "name": "day",
              "type": "DayModel"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 128,
          "description": "<p>Checks if the Day passed is in the CalendarView.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "day",
              "type": "DayModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "numDaysFromPrevMonthInCalView",
          "args": [
            {
              "name": "currentYear",
              "type": "number"
            },
            {
              "name": "currentMonth",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 115,
          "description":
            "<p>Gets the first day of the current month to figure out how many dates of previous month\nare needed to complete the Calendar View based on the first day of the week.\neg: Assuming locale en-US, the first day of the week is Sunday,\nif first day of the current month lands on Wednesday, then\n(this.getDay function would return 3 since\nfirst day of the week is 0), we need the 3 days from the previous month.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "currentYear",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "currentMonth",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setFocusableFlag",
          "args": [
            {
              "name": "day",
              "type": "DayModel"
            },
            {
              "name": "flag",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 178,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "day",
              "type": "DayModel",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "flag",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateFocusableDay",
          "args": [
            {
              "name": "day",
              "type": "DayModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 187,
          "description": "<p>Updates the focusable day in the calendar.</p>\n",
          "jsdoctags": [
            {
              "name": "day",
              "type": "DayModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "calendarView": {
          "name": "calendarView",
          "getSignature": {
            "name": "calendarView",
            "type": "[]",
            "returnType": "[][]",
            "line": 34,
            "description": "<p>DayViewModel matrix. Size 6x7</p>\n"
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ClrDragEvent",
      "id": "class-ClrDragEvent-50274992291846f2cb446d99ebffb7df",
      "file": "src/clr-angular/utils/drag-and-drop/drag-event.ts",
      "type": "class",
      "sourceCode":
        "import { DragEventInterface, DragPointPosition } from './interfaces/drag-event.interface';\n\n// This class is used to convert an internal event\n// to an external event to be emitted.\nexport class ClrDragEvent<T> {\n  public dragPosition: DragPointPosition;\n  public group: string | string[];\n  public dragDataTransfer: T;\n  public dropPointPosition: { pageX: number; pageY: number };\n\n  constructor(dragEvent: DragEventInterface<T>) {\n    this.dragPosition = dragEvent.dragPosition;\n    this.group = dragEvent.group;\n    this.dragDataTransfer = dragEvent.dragDataTransfer;\n    this.dropPointPosition = dragEvent.dropPointPosition;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "dragEvent",
            "type": "DragEventInterface<T>"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "dragEvent",
            "type": "DragEventInterface<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "dragDataTransfer",
          "type": "T",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114]
        },
        {
          "name": "dragPosition",
          "type": "DragPointPosition",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        },
        {
          "name": "dropPointPosition",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114]
        },
        {
          "name": "group",
          "type": "string | string[]",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "CustomFilter",
      "id": "class-CustomFilter-42cf62a8641a26b488f30870cc181370",
      "file": "src/clr-angular/data/datagrid/providers/custom-filter.ts",
      "type": "class",
      "sourceCode": "export abstract class CustomFilter {}\n",
      "properties": [],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DatagridFilterRegistrar",
      "id": "class-DatagridFilterRegistrar-c1dbcf75e7949d92b092af4aeb009329",
      "file": "src/clr-angular/data/datagrid/utils/datagrid-filter-registrar.ts",
      "type": "class",
      "sourceCode":
        "import { OnDestroy } from '@angular/core';\nimport { ClrDatagridFilterInterface } from '../interfaces/filter.interface';\nimport { FiltersProvider, RegisteredFilter } from '../providers/filters';\n\nexport abstract class DatagridFilterRegistrar<T, F extends ClrDatagridFilterInterface<T>> implements OnDestroy {\n  constructor(private filters: FiltersProvider<T>) {}\n\n  public registered: RegisteredFilter<T, F>;\n\n  public get filter(): F {\n    return this.registered && this.registered.filter;\n  }\n\n  public setFilter(filter: F | RegisteredFilter<T, F>) {\n    // If we previously had another filter, we unregister it\n    this.deleteFilter();\n    if (filter instanceof RegisteredFilter) {\n      this.registered = filter;\n    } else if (filter) {\n      this.registered = this.filters.add(filter);\n    }\n  }\n\n  public deleteFilter() {\n    if (this.registered) {\n      this.registered.unregister();\n      delete this.registered;\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.deleteFilter();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "registered",
          "type": "RegisteredFilter<T | F>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "deleteFilter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "modifierKind": [114]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "modifierKind": [114]
        },
        {
          "name": "setFilter",
          "args": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "filter": {
          "name": "filter",
          "getSignature": {
            "name": "filter",
            "type": "",
            "returnType": "F",
            "line": 15
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["OnDestroy"]
    },
    {
      "name": "DatagridNumericFilterImpl",
      "id": "class-DatagridNumericFilterImpl-c6468db0ee535e92a0c50ec2bdf32b9c",
      "file": "src/clr-angular/data/datagrid/built-in/filters/datagrid-numeric-filter-impl.ts",
      "type": "class",
      "sourceCode":
        "import { Observable, Subject } from 'rxjs';\nimport { ClrDatagridFilterInterface } from '../../interfaces/filter.interface';\nimport { ClrDatagridNumericFilterInterface } from '../../interfaces/numeric-filter.interface';\nimport { DatagridPropertyNumericFilter } from './datagrid-property-numeric-filter';\n\nexport class DatagridNumericFilterImpl<T = any> implements ClrDatagridFilterInterface<T> {\n  constructor(public filterFn: ClrDatagridNumericFilterInterface<T>) {}\n\n  /**\n   * The Observable required as part of the Filter interface\n   */\n  private _changes = new Subject<[number, number]>();\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get changes(): Observable<[number, number]> {\n    return this._changes.asObservable();\n  }\n\n  /**\n   * Internal values and accessor\n   */\n  private _low: number = null;\n  private _high: number = null;\n\n  /**\n   * Common setters for the input values, including individual limits and\n   * both at the same time.  Value is singular to make the interface similar\n   * to the built-in string filter.\n   */\n\n  public get value(): [number, number] {\n    return [this._low, this._high];\n  }\n\n  public set value(vals: [number, number]) {\n    const low = vals[0];\n    const high = vals[1];\n    if (low !== this._low || high !== this._high) {\n      this._low = low;\n      this._high = high;\n      this._changes.next([this._low, this._high]);\n    }\n  }\n\n  public set low(low: number) {\n    if (low !== this._low) {\n      this._low = low;\n      this._changes.next([this._low, this._high]);\n    }\n  }\n\n  public set high(high: number) {\n    if (high !== this._high) {\n      this._high = high;\n      this._changes.next([this._low, this._high]);\n    }\n  }\n\n  public get low() {\n    return this._low;\n  }\n\n  public get high() {\n    return this._high;\n  }\n\n  /**\n   * Indicates if the filter is currently active, (at least one input is set)\n   */\n  public isActive(): boolean {\n    return this._low !== null || this.high !== null;\n  }\n\n  /**\n   * Tests if an item matches a search text\n   */\n  public accepts(item: T): boolean {\n    // We have a filter function in case someone wants to implement a numeric\n    // filter that always passes nulls or similar\n    return this.filterFn.accepts(item, this._low, this._high);\n  }\n\n  public get state() {\n    if (this.filterFn instanceof DatagridPropertyNumericFilter) {\n      return {\n        property: this.filterFn.prop,\n        low: this._low,\n        high: this._high,\n      };\n    }\n    return this;\n  }\n\n  public equals(other: ClrDatagridFilterInterface<T, any>): boolean {\n    if (other instanceof DatagridNumericFilterImpl) {\n      if (other.filterFn instanceof DatagridPropertyNumericFilter) {\n        return (\n          this.filterFn instanceof DatagridPropertyNumericFilter &&\n          other.filterFn.prop === this.filterFn.prop &&\n          other.low === this._low &&\n          other.high === this._high\n        );\n      }\n      return other === this;\n    }\n    return false;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "filterFn",
            "type": "ClrDatagridNumericFilterInterface<T>"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "filterFn",
            "type": "ClrDatagridNumericFilterInterface<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_changes",
          "defaultValue": "new Subject<[number, number]>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable required as part of the Filter interface</p>\n",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "_high",
          "defaultValue": "null",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [112]
        },
        {
          "name": "_low",
          "defaultValue": "null",
          "type": "number",
          "optional": false,
          "description": "<p>Internal values and accessor</p>\n",
          "line": 26,
          "modifierKind": [112]
        },
        {
          "name": "filterFn",
          "type": "ClrDatagridNumericFilterInterface<T>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 81,
          "description": "<p>Tests if an item matches a search text</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "equals",
          "args": [
            {
              "name": "other",
              "type": "ClrDatagridFilterInterface<T | any>"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 98,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "other",
              "type": "ClrDatagridFilterInterface<T | any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isActive",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 74,
          "description": "<p>Indicates if the filter is currently active, (at least one input is set)</p>\n",
          "modifierKind": [114]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "changes": {
          "name": "changes",
          "getSignature": {
            "name": "changes",
            "type": "",
            "returnType": "Observable<>",
            "line": 19
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "args": [
              {
                "name": "vals",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "vals",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "",
            "line": 35,
            "description":
              "<p>Common setters for the input values, including individual limits and\nboth at the same time.  Value is singular to make the interface similar\nto the built-in string filter.</p>\n"
          }
        },
        "low": {
          "name": "low",
          "setSignature": {
            "name": "low",
            "type": "void",
            "args": [
              {
                "name": "low",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "low",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "low",
            "type": "",
            "returnType": "",
            "line": 63
          }
        },
        "high": {
          "name": "high",
          "setSignature": {
            "name": "high",
            "type": "void",
            "args": [
              {
                "name": "high",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "high",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "high",
            "type": "",
            "returnType": "",
            "line": 67
          }
        },
        "state": {
          "name": "state",
          "getSignature": {
            "name": "state",
            "type": "",
            "returnType": "",
            "line": 87
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["ClrDatagridFilterInterface"]
    },
    {
      "name": "DatagridPropertyComparator",
      "id": "class-DatagridPropertyComparator-edfdd68fd1f6ee754a996cf732fa659a",
      "file": "src/clr-angular/data/datagrid/built-in/comparators/datagrid-property-comparator.ts",
      "type": "class",
      "sourceCode":
        "import { ClrDatagridComparatorInterface } from '../../interfaces/comparator.interface';\nimport { NestedProperty } from '../nested-property';\n\nexport class DatagridPropertyComparator<T = any> implements ClrDatagridComparatorInterface<T> {\n  private nestedProp: NestedProperty<T>;\n\n  constructor(public prop: string) {\n    this.nestedProp = new NestedProperty(prop);\n  }\n\n  public compare(a: T, b: T): number {\n    let propA = this.nestedProp.getPropValue(a);\n    let propB = this.nestedProp.getPropValue(b);\n\n    if (typeof propA === 'string') {\n      propA = propA.toLowerCase();\n    }\n\n    if (typeof propB === 'string') {\n      propB = propB.toLowerCase();\n    }\n\n    if (typeof propA === 'undefined' || propA === null) {\n      if (typeof propB === 'undefined' || propB === null) {\n        return 0;\n      } else {\n        return 1;\n      }\n    } else {\n      if (typeof propB === 'undefined' || propB === null) {\n        return -1;\n      } else if (propA < propB) {\n        return -1;\n      } else if (propA > propB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "prop",
            "type": "string"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "prop",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "nestedProp",
          "type": "NestedProperty<T>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [112]
        },
        {
          "name": "prop",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "compare",
          "args": [
            {
              "name": "a",
              "type": "T"
            },
            {
              "name": "b",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 16,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "a",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "b",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["ClrDatagridComparatorInterface"]
    },
    {
      "name": "DatagridPropertyNumericFilter",
      "id": "class-DatagridPropertyNumericFilter-549641d336d5f95ce7fa4eca45133ef0",
      "file": "src/clr-angular/data/datagrid/built-in/filters/datagrid-property-numeric-filter.ts",
      "type": "class",
      "sourceCode":
        "import { ClrDatagridNumericFilterInterface } from '../../interfaces/numeric-filter.interface';\nimport { NestedProperty } from '../nested-property';\n\nexport class DatagridPropertyNumericFilter<T = any> implements ClrDatagridNumericFilterInterface<T> {\n  private nestedProp: NestedProperty<T>;\n\n  constructor(public prop: string, public exact = false) {\n    this.nestedProp = new NestedProperty(prop);\n  }\n\n  accepts(item: T, low: number, high: number): boolean {\n    const propValue = this.nestedProp.getPropValue(item);\n    if (low !== null && propValue < low) {\n      return false;\n    }\n    if (high !== null && propValue > high) {\n      return false;\n    }\n    return true;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "prop",
            "type": "string"
          },
          {
            "name": "exact",
            "type": "",
            "defaultValue": "false"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "prop",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "exact",
            "type": "",
            "defaultValue": "false",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "exact",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        },
        {
          "name": "nestedProp",
          "type": "NestedProperty<T>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [112]
        },
        {
          "name": "prop",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            },
            {
              "name": "low",
              "type": "number"
            },
            {
              "name": "high",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 16,
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "low",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "high",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["ClrDatagridNumericFilterInterface"]
    },
    {
      "name": "DatagridPropertyStringFilter",
      "id": "class-DatagridPropertyStringFilter-1ef8a930d63665485c7b8a30def91ad5",
      "file": "src/clr-angular/data/datagrid/built-in/filters/datagrid-property-string-filter.ts",
      "type": "class",
      "sourceCode":
        "import { ClrDatagridStringFilterInterface } from '../../interfaces/string-filter.interface';\nimport { NestedProperty } from '../nested-property';\n\nexport class DatagridPropertyStringFilter<T = any> implements ClrDatagridStringFilterInterface<T> {\n  private nestedProp: NestedProperty<T>;\n\n  constructor(public prop: string, public exact = false) {\n    this.nestedProp = new NestedProperty(prop);\n  }\n\n  accepts(item: T, search: string): boolean {\n    const propValue = this.nestedProp.getPropValue(item);\n    if (typeof propValue === 'undefined') {\n      return false;\n    } else if (this.exact) {\n      return ('' + propValue).toLowerCase() === search;\n    } else {\n      return ('' + propValue).toLowerCase().indexOf(search) >= 0;\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "prop",
            "type": "string"
          },
          {
            "name": "exact",
            "type": "",
            "defaultValue": "false"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "prop",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "exact",
            "type": "",
            "defaultValue": "false",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "exact",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        },
        {
          "name": "nestedProp",
          "type": "NestedProperty<T>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [112]
        },
        {
          "name": "prop",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            },
            {
              "name": "search",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 16,
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "search",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["ClrDatagridStringFilterInterface"]
    },
    {
      "name": "DatagridStringFilterImpl",
      "id": "class-DatagridStringFilterImpl-11f17c358c5e787dabdc856b67965097",
      "file": "src/clr-angular/data/datagrid/built-in/filters/datagrid-string-filter-impl.ts",
      "type": "class",
      "sourceCode":
        "import { Observable, Subject } from 'rxjs';\nimport { ClrDatagridFilterInterface } from '../../interfaces/filter.interface';\nimport { ClrDatagridStringFilterInterface } from '../../interfaces/string-filter.interface';\nimport { DatagridPropertyStringFilter } from './datagrid-property-string-filter';\n\nexport class DatagridStringFilterImpl<T = any> implements ClrDatagridFilterInterface<T> {\n  constructor(public filterFn: ClrDatagridStringFilterInterface<T>) {}\n\n  /**\n   * The Observable required as part of the Filter interface\n   */\n  private _changes = new Subject<string>();\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get changes(): Observable<string> {\n    return this._changes.asObservable();\n  }\n\n  /**\n   * Raw input value\n   */\n  private _rawValue: string = '';\n  public get value(): string {\n    return this._rawValue;\n  }\n  /**\n   * Input value converted to lowercase\n   */\n  private _lowerCaseValue: string = '';\n  public get lowerCaseValue() {\n    return this._lowerCaseValue;\n  }\n  /**\n   * Common setter for the input value\n   */\n  public set value(value: string) {\n    if (!value) {\n      value = '';\n    }\n    if (value !== this._rawValue) {\n      this._rawValue = value;\n      this._lowerCaseValue = value.toLowerCase().trim();\n      this._changes.next(value);\n    }\n  }\n\n  /**\n   * Indicates if the filter is currently active, meaning the input is not empty\n   */\n  public isActive(): boolean {\n    return !!this.value;\n  }\n\n  /**\n   * Tests if an item matches a search text\n   */\n  public accepts(item: T): boolean {\n    // We always test with the lowercase value of the input, to stay case insensitive\n    return this.filterFn.accepts(item, this.lowerCaseValue);\n  }\n\n  public get state() {\n    if (this.filterFn instanceof DatagridPropertyStringFilter) {\n      return {\n        property: this.filterFn.prop,\n        value: this.value,\n      };\n    }\n    return this;\n  }\n\n  public equals(other: ClrDatagridFilterInterface<T, any>): boolean {\n    if (other instanceof DatagridStringFilterImpl) {\n      if (other.filterFn instanceof DatagridPropertyStringFilter) {\n        return (\n          this.filterFn instanceof DatagridPropertyStringFilter &&\n          other.filterFn.prop === this.filterFn.prop &&\n          other.value === this.value\n        );\n      }\n      return other === this;\n    }\n    return false;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "filterFn",
            "type": "ClrDatagridStringFilterInterface<T>"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "filterFn",
            "type": "ClrDatagridStringFilterInterface<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_changes",
          "defaultValue": "new Subject<string>()",
          "type": "",
          "optional": false,
          "description": "<p>The Observable required as part of the Filter interface</p>\n",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "_lowerCaseValue",
          "defaultValue": "''",
          "type": "string",
          "optional": false,
          "description": "<p>Input value converted to lowercase</p>\n",
          "line": 33,
          "modifierKind": [112]
        },
        {
          "name": "_rawValue",
          "defaultValue": "''",
          "type": "string",
          "optional": false,
          "description": "<p>Raw input value</p>\n",
          "line": 26,
          "modifierKind": [112]
        },
        {
          "name": "filterFn",
          "type": "ClrDatagridStringFilterInterface<T>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "accepts",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 61,
          "description": "<p>Tests if an item matches a search text</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "equals",
          "args": [
            {
              "name": "other",
              "type": "ClrDatagridFilterInterface<T | any>"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 76,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "other",
              "type": "ClrDatagridFilterInterface<T | any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isActive",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 54,
          "description": "<p>Indicates if the filter is currently active, meaning the input is not empty</p>\n",
          "modifierKind": [114]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "changes": {
          "name": "changes",
          "getSignature": {
            "name": "changes",
            "type": "",
            "returnType": "Observable<string>",
            "line": 19
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 40,
            "description": "<p>Common setter for the input value</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "lowerCaseValue": {
          "name": "lowerCaseValue",
          "getSignature": {
            "name": "lowerCaseValue",
            "type": "",
            "returnType": "",
            "line": 34
          }
        },
        "state": {
          "name": "state",
          "getSignature": {
            "name": "state",
            "type": "",
            "returnType": "",
            "line": 66
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["ClrDatagridFilterInterface"]
    },
    {
      "name": "DayModel",
      "id": "class-DayModel-9b4f9fc3433a56af5721271b88cb9a59",
      "file": "src/clr-angular/forms/datepicker/model/day.model.ts",
      "type": "class",
      "sourceCode":
        "export class DayModel {\n  constructor(public readonly year: number, public readonly month: number, public readonly date: number) {}\n\n  /**\n   * Checks if the passed CalendarDate is equal to itself.\n   */\n  isEqual(day: DayModel) {\n    if (day) {\n      return this.year === day.year && this.month === day.month && this.date === day.date;\n    }\n    return false;\n  }\n\n  toDate(): Date {\n    return new Date(this.year, this.month, this.date);\n  }\n\n  /**\n   * Returns a new DayModel which is incremented based on the value passed.\n   */\n  incrementBy(value: number): DayModel {\n    // Creating new Javascript Date object to increment because\n    // it will automatically take care of switching to next or previous\n    // months & years without we having to worry about it.\n    const date: Date = new Date(this.year, this.month, this.date + value);\n    return new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n\n  /**\n   * Clones the current day model.\n   */\n  clone(): DayModel {\n    return new DayModel(this.year, this.month, this.date);\n  }\n\n  toComparisonString(): string {\n    return `${this.year}${this.pad(this.month)}${this.pad(this.date)}`;\n  }\n\n  private pad(num: number): string {\n    return num < 10 ? `0${num}` : `${num}`;\n  }\n\n  public toDateString(): string {\n    return this.toDate().toLocaleDateString();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "year",
            "type": "number"
          },
          {
            "name": "month",
            "type": "number"
          },
          {
            "name": "date",
            "type": "number"
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "year",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "month",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "date",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "date",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [114, 132]
        },
        {
          "name": "month",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [114, 132]
        },
        {
          "name": "year",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [114, 132]
        }
      ],
      "methods": [
        {
          "name": "clone",
          "args": [],
          "optional": false,
          "returnType": "DayModel",
          "typeParameters": [],
          "line": 38,
          "description": "<p>Clones the current day model.</p>\n"
        },
        {
          "name": "incrementBy",
          "args": [
            {
              "name": "value",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "DayModel",
          "typeParameters": [],
          "line": 27,
          "description": "<p>Returns a new DayModel which is incremented based on the value passed.</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isEqual",
          "args": [
            {
              "name": "day",
              "type": "DayModel"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 13,
          "description": "<p>Checks if the passed CalendarDate is equal to itself.</p>\n",
          "jsdoctags": [
            {
              "name": "day",
              "type": "DayModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pad",
          "args": [
            {
              "name": "num",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 46,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "num",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toComparisonString",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 42
        },
        {
          "name": "toDate",
          "args": [],
          "optional": false,
          "returnType": "Date",
          "typeParameters": [],
          "line": 20
        },
        {
          "name": "toDateString",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 50,
          "modifierKind": [114]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DayViewModel",
      "id": "class-DayViewModel-88a7b2974808fb0bd701a3d29eba80ba",
      "file": "src/clr-angular/forms/datepicker/model/day-view.model.ts",
      "type": "class",
      "sourceCode":
        "import { DayModel } from './day.model';\n\nexport class DayViewModel {\n  constructor(\n    public dayModel: DayModel,\n    public isTodaysDate: boolean = false,\n    public isExcluded: boolean = false,\n    public isDisabled: boolean = false,\n    public isSelected: boolean = false,\n    public isFocusable: boolean = false\n  ) {}\n\n  /**\n   * Gets the tab index based on the isFocusable flag.\n   */\n  get tabIndex(): number {\n    return this.isFocusable ? 0 : -1;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "dayModel",
            "type": "DayModel"
          },
          {
            "name": "isTodaysDate",
            "type": "boolean",
            "defaultValue": "false"
          },
          {
            "name": "isExcluded",
            "type": "boolean",
            "defaultValue": "false"
          },
          {
            "name": "isDisabled",
            "type": "boolean",
            "defaultValue": "false"
          },
          {
            "name": "isSelected",
            "type": "boolean",
            "defaultValue": "false"
          },
          {
            "name": "isFocusable",
            "type": "boolean",
            "defaultValue": "false"
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "dayModel",
            "type": "DayModel",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "isTodaysDate",
            "type": "boolean",
            "defaultValue": "false",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "isExcluded",
            "type": "boolean",
            "defaultValue": "false",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "isDisabled",
            "type": "boolean",
            "defaultValue": "false",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "isSelected",
            "type": "boolean",
            "defaultValue": "false",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "isFocusable",
            "type": "boolean",
            "defaultValue": "false",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "dayModel",
          "type": "DayModel",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        },
        {
          "name": "isDisabled",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114]
        },
        {
          "name": "isExcluded",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114]
        },
        {
          "name": "isFocusable",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [114]
        },
        {
          "name": "isSelected",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [114]
        },
        {
          "name": "isTodaysDate",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "accessors": {
        "tabIndex": {
          "name": "tabIndex",
          "getSignature": {
            "name": "tabIndex",
            "type": "number",
            "returnType": "number",
            "line": 22,
            "description": "<p>Gets the tab index based on the isFocusable flag.</p>\n"
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "DeclarativeTreeNodeModel",
      "id": "class-DeclarativeTreeNodeModel-6654fcc4c2116a35baea3dd0e51fbac7",
      "file": "src/clr-angular/data/tree-view/models/declarative-tree-node.model.ts",
      "type": "class",
      "sourceCode":
        "import { TreeNodeModel } from './tree-node.model';\n\n/*\n * A declarative model is built by traversing the Angular component tree.\n * Declarative = Tree node components dictate the model\n */\nexport class DeclarativeTreeNodeModel<T> extends TreeNodeModel<T> {\n  constructor(parent: DeclarativeTreeNodeModel<T> | null) {\n    super();\n    this.parent = parent;\n    if (parent) {\n      parent._addChild(this);\n    }\n    this.children = [];\n  }\n\n  // Override for a more precise type\n  parent: DeclarativeTreeNodeModel<T> | null;\n  children: DeclarativeTreeNodeModel<T>[];\n\n  _addChild(child: DeclarativeTreeNodeModel<T>) {\n    this.children.push(child);\n  }\n\n  _removeChild(child: DeclarativeTreeNodeModel<T>) {\n    const index = this.children.indexOf(child);\n    if (index > -1) {\n      this.children.splice(index, 1);\n    }\n  }\n\n  destroy() {\n    if (this.parent) {\n      this.parent._removeChild(this);\n    }\n    super.destroy();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "parent",
            "type": "DeclarativeTreeNodeModel<T> | null"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "parent",
            "type": "DeclarativeTreeNodeModel<T> | null",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "children",
          "type": "DeclarativeTreeNodeModel<T>[]",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "parent",
          "type": "DeclarativeTreeNodeModel<T> | null",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "children",
          "type": "TreeNodeModel<T>[]",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [117],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "expanded",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "loading",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "model",
          "type": "T | null",
          "optional": false,
          "description": "",
          "line": 14,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "nodeId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "parent",
          "type": "TreeNodeModel<T> | null",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [117],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "selected",
          "defaultValue": "new BehaviorSubject<ClrSelectedState>(ClrSelectedState.UNSELECTED)",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        }
      ],
      "methods": [
        {
          "name": "_addChild",
          "args": [
            {
              "name": "child",
              "type": "DeclarativeTreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "jsdoctags": [
            {
              "name": "child",
              "type": "DeclarativeTreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_removeChild",
          "args": [
            {
              "name": "child",
              "type": "DeclarativeTreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "jsdoctags": [
            {
              "name": "child",
              "type": "DeclarativeTreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38
        },
        {
          "name": "_updateSelectionFromChildren",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "computeSelectionStateFromChildren",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 60,
          "modifierKind": [112],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "setSelected",
          "args": [
            {
              "name": "state",
              "type": "ClrSelectedState"
            },
            {
              "name": "propagateUp",
              "type": "boolean"
            },
            {
              "name": "propagateDown",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrSelectedState",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "propagateUp",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "propagateDown",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "toggleSelection",
          "args": [
            {
              "name": "propagate",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "jsdoctags": [
            {
              "name": "propagate",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        }
      ],
      "indexSignatures": [],
      "extends": "TreeNodeModel",
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "FocusableItem",
      "id": "class-FocusableItem-2e908d6d0f5f01ed42e2ebb2322eddde",
      "file": "src/clr-angular/utils/focus/focusable-item/focusable-item.ts",
      "type": "class",
      "sourceCode":
        "import { Observable } from 'rxjs';\n\nexport abstract class FocusableItem {\n  id: string;\n  disabled?: boolean;\n\n  abstract focus(): void;\n  abstract blur(): void;\n  abstract activate?(): void;\n\n  up?: FocusableItem | Observable<FocusableItem>;\n  down?: FocusableItem | Observable<FocusableItem>;\n  left?: FocusableItem | Observable<FocusableItem>;\n  right?: FocusableItem | Observable<FocusableItem>;\n}\n",
      "properties": [
        {
          "name": "disabled",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 11
        },
        {
          "name": "down",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 18
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "left",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 19
        },
        {
          "name": "right",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 20
        },
        {
          "name": "up",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 17
        }
      ],
      "methods": [
        {
          "name": "activate",
          "args": [],
          "optional": true,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "modifierKind": [117]
        },
        {
          "name": "blur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14,
          "modifierKind": [117]
        },
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "modifierKind": [117]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "HostWrapper",
      "id": "class-HostWrapper-46da78d224d989760af2bef61a000c7d",
      "file": "src/clr-angular/utils/host-wrapping/host-wrapper.ts",
      "type": "class",
      "sourceCode":
        "import {\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ElementRef,\n  InjectionToken,\n  Injector,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport { DynamicWrapper } from './dynamic-wrapper';\nimport { EmptyAnchor } from './empty-anchor';\n\n/**\n * HostWrapper must be called in OnInit to ensure that the Views are ready. If its called in a constructor the view is\n * still undefined.\n * TODO - make sure these comment annotations do not break ng-packgr.\n */\nexport class HostWrapper<W extends DynamicWrapper> implements Injector {\n  constructor(containerType: Type<W>, vcr: ViewContainerRef, index: number = 0) {\n    this.injector = vcr.injector;\n    // If the host is already wrapped, we don't do anything\n    if (!this.injector.get(containerType, null)) {\n      const cfr = this.injector.get(ComponentFactoryResolver);\n      const el = this.injector.get(ElementRef);\n\n      // We need a new anchor, since we're projecting the current one.\n      vcr.createComponent(cfr.resolveComponentFactory(EmptyAnchor));\n      const factory: ComponentFactory<W> = cfr.resolveComponentFactory(containerType);\n      // Craft the element array based on what slot to use. Angular only uses the index to determine\n      // which ng-content to project into, so if you have more than one ng-content you'll need to set\n      // the index in the constructor appropriately\n      const element = [];\n      element[index] = [el.nativeElement];\n      // We're assuming only one projection slot, but in more complex cases we might want to provide\n      // a different array of projected elements.\n      const containerRef = vcr.createComponent(factory, undefined, undefined, element);\n      // We can now remove the useless anchor\n      vcr.remove(0);\n\n      // We note that the container was dynamically created\n      containerRef.instance._dynamic = true;\n\n      // We keep the wrapper's injector to access the dependencies that weren't available before.\n      this.injector = containerRef.injector;\n    }\n  }\n\n  private injector: Injector;\n\n  get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T): T {\n    return this.injector.get(token, notFoundValue);\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "containerType",
            "type": "Type<W>"
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "index",
            "type": "number",
            "defaultValue": "0"
          }
        ],
        "line": 25,
        "jsdoctags": [
          {
            "name": "containerType",
            "type": "Type<W>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "index",
            "type": "number",
            "defaultValue": "0",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "injector",
          "type": "Injector",
          "optional": false,
          "description": "",
          "line": 55,
          "modifierKind": [112]
        }
      ],
      "description":
        "<p>HostWrapper must be called in OnInit to ensure that the Views are ready. If its called in a constructor the view is\nstill undefined.\nTODO - make sure these comment annotations do not break ng-packgr.</p>\n",
      "rawdescription":
        "HostWrapper must be called in OnInit to ensure that the Views are ready. If its called in a constructor the view is\nstill undefined.\nTODO - make sure these comment annotations do not break ng-packgr.",
      "methods": [
        {
          "name": "get",
          "args": [
            {
              "name": "token",
              "type": "Type<T> | InjectionToken<T>"
            },
            {
              "name": "notFoundValue",
              "type": "T",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": ["T"],
          "line": 57,
          "jsdoctags": [
            {
              "name": "token",
              "type": "Type<T> | InjectionToken<T>",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "notFoundValue",
              "type": "T",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["Injector"]
    },
    {
      "name": "LoadingListener",
      "id": "class-LoadingListener-e4ec8222409b10564453229d5d0ec8b4",
      "file": "src/clr-angular/utils/loading/loading-listener.ts",
      "type": "class",
      "sourceCode":
        "import { ClrLoadingState } from './loading';\n\n/**\n * This is an abstract class because we need it to still be a valid token for dependency injection after transpiling.\n * This does not mean you should extend it, simply implementing it is fine.\n */\nexport abstract class LoadingListener {\n  abstract loadingStateChange(state: ClrLoadingState): void;\n}\n",
      "properties": [],
      "description":
        "<p>This is an abstract class because we need it to still be a valid token for dependency injection after transpiling.\nThis does not mean you should extend it, simply implementing it is fine.</p>\n",
      "rawdescription":
        "This is an abstract class because we need it to still be a valid token for dependency injection after transpiling.\nThis does not mean you should extend it, simply implementing it is fine.",
      "methods": [
        {
          "name": "loadingStateChange",
          "args": [
            {
              "name": "state",
              "type": "ClrLoadingState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 14,
          "modifierKind": [117],
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrLoadingState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MockDomAdapter",
      "id": "class-MockDomAdapter-bfc71d63508b6b6b7ea4ae074ecd0aba",
      "file": "src/clr-angular/utils/dom-adapter/dom-adapter.mock.ts",
      "type": "class",
      "sourceCode":
        "import { DomAdapter } from './dom-adapter';\n\nexport class MockDomAdapter extends DomAdapter {\n  _userDefinedWidth = 0;\n  userDefinedWidth(element: any): number {\n    return this._userDefinedWidth;\n  }\n\n  _scrollBarWidth = 0;\n  scrollBarWidth(element: any) {\n    return this._scrollBarWidth;\n  }\n\n  _scrollWidth = 0;\n  scrollWidth(element: any) {\n    return this._scrollWidth;\n  }\n\n  _computedHeight = 0;\n  computedHeight(element: any) {\n    return this._computedHeight;\n  }\n}\n\nexport const MOCK_DOM_ADAPTER_PROVIDER = {\n  provide: DomAdapter,\n  useClass: MockDomAdapter,\n};\n",
      "properties": [
        {
          "name": "_computedHeight",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "_scrollBarWidth",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "_scrollWidth",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "_userDefinedWidth",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "methods": [
        {
          "name": "computedHeight",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 26,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollBarWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 16,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "scrollWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 21,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "userDefinedWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 11,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "clientRect",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "ClientRect",
          "typeParameters": [],
          "line": 36,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DomAdapter"
          }
        },
        {
          "name": "computedHeight",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 32,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DomAdapter"
          }
        },
        {
          "name": "focus",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DomAdapter"
          }
        },
        {
          "name": "minWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 48,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DomAdapter"
          }
        },
        {
          "name": "scrollBarWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 24,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DomAdapter"
          }
        },
        {
          "name": "scrollWidth",
          "args": [
            {
              "name": "element",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 28,
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DomAdapter"
          }
        },
        {
          "name": "userDefinedWidth",
          "args": [
            {
              "name": "element",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 17,
          "jsdoctags": [
            {
              "name": "element",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DomAdapter"
          }
        }
      ],
      "indexSignatures": [],
      "extends": "DomAdapter",
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MockDragAndDropEventBus",
      "id": "class-MockDragAndDropEventBus-bf3281481f5eb22ef6453b71eb3915ab",
      "file": "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.mock.ts",
      "type": "class",
      "sourceCode":
        "import { Subject } from 'rxjs';\n\nimport { DragEventType } from '../interfaces/drag-event.interface';\nimport { DragAndDropEventBusService } from './drag-and-drop-event-bus.service';\n\nexport class MockDragAndDropEventBus {\n  public dragStarted: Subject<any> = new Subject<any>();\n  public dragMoved: Subject<any> = new Subject<any>();\n  public dragEnded: Subject<any> = new Subject<any>();\n  public dropped: Subject<any> = new Subject<any>();\n\n  broadcast(event: any): void {\n    switch (event.type) {\n      case DragEventType.DRAG_START:\n        this.dragStarted.next(event);\n        break;\n      case DragEventType.DRAG_MOVE:\n        this.dragMoved.next(event);\n        break;\n      case DragEventType.DRAG_END:\n        this.dragEnded.next(event);\n        break;\n      case DragEventType.DROP:\n        this.dropped.next(event);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport const MOCK_DRAG_DROP_EVENT_BUS = {\n  provide: DragAndDropEventBusService,\n  useClass: MockDragAndDropEventBus,\n};\n",
      "properties": [
        {
          "name": "dragEnded",
          "defaultValue": "new Subject<any>()",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114]
        },
        {
          "name": "dragMoved",
          "defaultValue": "new Subject<any>()",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114]
        },
        {
          "name": "dragStarted",
          "defaultValue": "new Subject<any>()",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [114]
        },
        {
          "name": "dropped",
          "defaultValue": "new Subject<any>()",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "broadcast",
          "args": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MockDragEventListener",
      "id": "class-MockDragEventListener-2918f7c37c0f23b3a111128e9a7f473d",
      "file": "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.mock.ts",
      "type": "class",
      "sourceCode":
        "import { Subject } from 'rxjs';\nimport { DragEventListenerService } from './drag-event-listener.service';\n\n// This mock service is necessary because the real service uses Renderer2 and attaches complex event listeners.\n// This class mocks that as setting \".hasListener\" to true\n// when attachDragListener() is called and removes it when detachDragListener() is called.\nexport class MockDragEventListener {\n  private listeners: (() => void)[];\n  public draggableEl: any;\n  public dragStarted: Subject<any> = new Subject<any>();\n  public dragMoved: Subject<any> = new Subject<any>();\n  public dragEnded: Subject<any> = new Subject<any>();\n\n  public attachDragListeners(draggableEl: any) {\n    this.draggableEl = draggableEl;\n    this.draggableEl.hasListener = true;\n    this.draggableEl.setAttribute('hasListener', 'true');\n    this.listeners = [\n      () => {\n        this.draggableEl.removeAttribute('hasListener');\n      },\n    ];\n  }\n\n  public detachDragListeners() {\n    if (this.listeners) {\n      this.listeners.map(event => event());\n    }\n  }\n}\n\nexport const MOCK_DRAG_EVENT_LISTENER_PROVIDER = {\n  provide: DragEventListenerService,\n  useClass: MockDragEventListener,\n};\n",
      "properties": [
        {
          "name": "dragEnded",
          "defaultValue": "new Subject<any>()",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [114]
        },
        {
          "name": "draggableEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114]
        },
        {
          "name": "dragMoved",
          "defaultValue": "new Subject<any>()",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [114]
        },
        {
          "name": "dragStarted",
          "defaultValue": "new Subject<any>()",
          "type": "Subject<any>",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [114]
        },
        {
          "name": "listeners",
          "type": "(function)[]",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "attachDragListeners",
          "args": [
            {
              "name": "draggableEl",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "draggableEl",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "detachDragListeners",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "modifierKind": [114]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MockDragHandleRegistrar",
      "id": "class-MockDragHandleRegistrar-ca289a64ad609e97c2a9b3360af4d0ef",
      "file": "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.mock.ts",
      "type": "class",
      "sourceCode":
        "import { DragHandleRegistrarService } from './drag-handle-registrar.service';\n\nexport class MockDragHandleRegistrar {\n  private _customHandleEl: any;\n\n  get customHandle() {\n    return this._customHandleEl;\n  }\n\n  public registerCustomHandle(handleElement: Node) {\n    this._customHandleEl = handleElement;\n  }\n\n  public unregisterCustomHandle() {\n    delete this._customHandleEl;\n  }\n}\n\nexport const MOCK_DRAG_HANDLE_REGISTRAR_PROVIDER = {\n  provide: DragHandleRegistrarService,\n  useClass: MockDragHandleRegistrar,\n};\n",
      "properties": [
        {
          "name": "_customHandleEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "registerCustomHandle",
          "args": [
            {
              "name": "handleElement",
              "type": "Node"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "handleElement",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "unregisterCustomHandle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "customHandle": {
          "name": "customHandle",
          "getSignature": {
            "name": "customHandle",
            "type": "",
            "returnType": "",
            "line": 11
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MockFocusableItem",
      "id": "class-MockFocusableItem-1c1126c8510db10fad854b4f0a4fdf80",
      "file": "src/clr-angular/utils/focus/focusable-item/focusable-item.mock.ts",
      "type": "class",
      "sourceCode":
        "import { Observable } from 'rxjs';\nimport { FocusableItem } from './focusable-item';\n\nexport class MockFocusableItem implements FocusableItem {\n  constructor(public id: string) {}\n\n  disabled = false;\n\n  focus() {}\n  blur() {}\n  activate() {}\n\n  up?: FocusableItem | Observable<FocusableItem>;\n  down?: FocusableItem | Observable<FocusableItem>;\n  left?: FocusableItem | Observable<FocusableItem>;\n  right?: FocusableItem | Observable<FocusableItem>;\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "id",
            "type": "string"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "id",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "disabled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "down",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 20
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        },
        {
          "name": "left",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 21
        },
        {
          "name": "right",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 22
        },
        {
          "name": "up",
          "type": "FocusableItem | Observable<FocusableItem>",
          "optional": true,
          "description": "",
          "line": 19
        }
      ],
      "methods": [
        {
          "name": "activate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        },
        {
          "name": "blur",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16
        },
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["FocusableItem"]
    },
    {
      "name": "MockHideableColumnTemplateRef",
      "id": "class-MockHideableColumnTemplateRef-5db63852782d0b76047324d3db2336a8",
      "file": "src/clr-angular/data/datagrid/providers/columns.service.mock.ts",
      "type": "class",
      "sourceCode":
        "import { ColumnsService } from './columns.service';\nimport { EmbeddedViewRef, Injectable, TemplateRef } from '@angular/core';\nimport { columnStateFactory } from './column-state.provider';\nimport { DatagridColumnChanges } from '../enums/column-changes.enum';\nimport { ClrDatagridHideableColumn } from '../datagrid-hideable-column';\n\nclass MockHideableColumnTemplateRef extends TemplateRef<ClrDatagridHideableColumn> {\n  elementRef = null;\n  createEmbeddedView(): EmbeddedViewRef<any> {\n    return null;\n  }\n}\n\n@Injectable()\nexport class MockColumnsService extends ColumnsService {\n  // Sometimes we have to use an actual template ref.\n  // In that case, this service should be injected into the test component,\n  // and we need to assign the template ref from there.\n  templateRef: TemplateRef<any>;\n\n  mockColumns(columnNumber: number) {\n    for (let i = 0; i < columnNumber; i++) {\n      this.columns.push(columnStateFactory());\n    }\n  }\n\n  mockHideableAt(index: number, hidden: boolean = false) {\n    this.emitStateChange(this.columns[index], {\n      hideable: true,\n      titleTemplateRef: this.templateRef || new MockHideableColumnTemplateRef(),\n      hidden: hidden,\n      changes: [DatagridColumnChanges.HIDDEN],\n    });\n  }\n\n  mockAllHideable(hidden: boolean = false) {\n    this.columns.forEach((column, index) => this.mockHideableAt(index, hidden));\n  }\n\n  mockPartialHideable(from: number, to: number, hidden: boolean = false) {\n    this.columns.forEach((column, index) => {\n      if (index >= from && index <= to) {\n        this.mockHideableAt(index, hidden);\n      }\n    });\n  }\n}\n\nexport const MOCK_COLUMN_SERVICE_PROVIDER = {\n  provide: ColumnsService,\n  useClass: MockColumnsService,\n};\n",
      "properties": [
        {
          "name": "elementRef",
          "defaultValue": "null",
          "type": "null",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [
        {
          "name": "createEmbeddedView",
          "args": [],
          "optional": false,
          "returnType": "EmbeddedViewRef<any>",
          "typeParameters": [],
          "line": 14
        }
      ],
      "indexSignatures": [],
      "extends": "TemplateRef",
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MockPage",
      "id": "class-MockPage-51fc036e6db4f26684ca8f4b756600f3",
      "file": "src/clr-angular/wizard/wizard-page.mock.ts",
      "type": "class",
      "sourceCode":
        "import { TemplateRef } from '@angular/core';\n\nexport class MockPage {\n  constructor(pageIndex: number) {\n    this.id = 'this-is-my-page-id-' + pageIndex++;\n  }\n\n  public id: string;\n  public disabled = false;\n  public current = false;\n  public completed = false;\n  public readyToComplete = false;\n  public hasError = false;\n\n  public reset(): void {\n    this.disabled = false;\n    this.current = false;\n    this.completed = false;\n    this.readyToComplete = false;\n    this.hasError = false;\n  }\n\n  public navTitle: TemplateRef<any>;\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "pageIndex",
            "type": "number"
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "pageIndex",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "completed",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [114]
        },
        {
          "name": "current",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [114]
        },
        {
          "name": "disabled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [114]
        },
        {
          "name": "hasError",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [114]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [114]
        },
        {
          "name": "navTitle",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [114]
        },
        {
          "name": "readyToComplete",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [114]
        }
      ],
      "methods": [
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "modifierKind": [114]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "MockTableSizeService",
      "id": "class-MockTableSizeService-b64bd0a18cdea31706003178fb585b96",
      "file": "src/clr-angular/data/datagrid/providers/table-size.service.mock.ts",
      "type": "class",
      "sourceCode":
        "import { TableSizeService } from './table-size.service';\n\n// With this mock service, we could test individual child components of Datagrid that are dependent on TableSizeService.\nexport class MockTableSizeService {\n  // Currently only this property needed.\n  // We could add more properties if necessary in the future\n  public getColumnDragHeight(): string {\n    return '500px';\n  }\n}\n\nexport const MOCK_TABLE_SIZE_PROVIDER = {\n  provide: TableSizeService,\n  useClass: MockTableSizeService,\n};\n",
      "properties": [],
      "methods": [
        {
          "name": "getColumnDragHeight",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 12,
          "modifierKind": [114]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "NavServiceMock",
      "id": "class-NavServiceMock-7d646df418d5f58fc82d20bbeefddb77",
      "file": "src/clr-angular/wizard/providers/wizard-navigation.service.mock.ts",
      "type": "class",
      "sourceCode":
        "import { MockPage } from '../wizard-page.mock';\n\nexport class NavServiceMock {\n  currentPage: MockPage;\n  currentPageIsLast: boolean = false;\n  currentPageIsFirst: boolean = false;\n  wizardStopNavigation: boolean = false;\n  wizardDisableStepnav: boolean = false;\n}\n",
      "properties": [
        {
          "name": "currentPage",
          "type": "MockPage",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "currentPageIsFirst",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "currentPageIsLast",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "wizardDisableStepnav",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "wizardStopNavigation",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "NestedProperty",
      "id": "class-NestedProperty-ea95ad88fede1fbd7fafc52a0f2e95fa",
      "file": "src/clr-angular/data/datagrid/built-in/nested-property.ts",
      "type": "class",
      "sourceCode":
        "export class NestedProperty<T = any> {\n  private splitProp: string[];\n\n  constructor(private prop: string) {\n    if (prop.indexOf('.') >= 0) {\n      this.splitProp = prop.split('.');\n    }\n  }\n\n  // Safe getter for a deep object property, will not throw an error but return\n  // undefined if one of the intermediate properties is null or undefined.\n  public getPropValue(item: T): any {\n    if (this.splitProp) {\n      let value = item;\n      for (const nestedProp of this.splitProp) {\n        if (value == null || typeof value === 'undefined' || typeof value[nestedProp] === 'undefined') {\n          return undefined;\n        }\n        value = value[nestedProp];\n      }\n      return value;\n    } else {\n      return item[this.prop];\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "prop",
            "type": "string"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "prop",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "splitProp",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [112]
        }
      ],
      "description":
        "<p>Generic accessor for deep object properties\nthat can be specified as simple dot-separated strings.</p>\n",
      "rawdescription":
        "Generic accessor for deep object properties\nthat can be specified as simple dot-separated strings.",
      "methods": [
        {
          "name": "getPropValue",
          "args": [
            {
              "name": "item",
              "type": "T"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 21,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "item",
              "type": "T",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "OompaLoompa",
      "id": "class-OompaLoompa-5ff28d5ddbf837f052c9decf6eb0ae52",
      "file": "src/clr-angular/utils/chocolate/oompa-loompa.ts",
      "type": "class",
      "sourceCode":
        "import { AfterContentChecked, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { WillyWonka } from './willy-wonka';\n\nexport abstract class OompaLoompa implements AfterContentChecked, OnDestroy {\n  // FIXME: Request Injector once we move to Angular 4.2+, it'll allow easier refactors\n  constructor(cdr: ChangeDetectorRef, willyWonka: WillyWonka) {\n    this.subscription = willyWonka.chocolate.subscribe(() => {\n      if (this.latestFlavor !== this.flavor) {\n        cdr.detectChanges();\n      }\n    });\n  }\n\n  private subscription: Subscription;\n\n  private latestFlavor: any;\n\n  abstract get flavor(): any;\n\n  ngAfterContentChecked() {\n    this.latestFlavor = this.flavor;\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "willyWonka",
            "type": "WillyWonka"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "willyWonka",
            "type": "WillyWonka",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "latestFlavor",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "ngAfterContentChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "flavor": {
          "name": "flavor",
          "getSignature": {
            "name": "flavor",
            "type": "any",
            "returnType": "any",
            "line": 24
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["AfterContentChecked", "OnDestroy"]
    },
    {
      "name": "PageCollectionMock",
      "id": "class-PageCollectionMock-f682436ffedec528058b7d260c422c35",
      "file": "src/clr-angular/wizard/providers/page-collection.service.mock.ts",
      "type": "class",
      "sourceCode":
        "import { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nexport class PageCollectionMock {\n  private _pagesReset = new Subject<boolean>();\n  public get pagesReset(): Observable<boolean> {\n    return this._pagesReset.asObservable();\n  }\n\n  private _stepItemIdWasCalled = false;\n  public getStepItemIdForPage(): string {\n    this._stepItemIdWasCalled = true;\n    return 'mock-id';\n  }\n\n  public get stepItemIdWasCalled(): boolean {\n    return this._stepItemIdWasCalled;\n  }\n\n  public _previousPageIsCompleted = true;\n  public previousPageIsCompleted(page: any = null): boolean {\n    return this._previousPageIsCompleted;\n  }\n}\n",
      "properties": [
        {
          "name": "_pagesReset",
          "defaultValue": "new Subject<boolean>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [112]
        },
        {
          "name": "_previousPageIsCompleted",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [114]
        },
        {
          "name": "_stepItemIdWasCalled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "getStepItemIdForPage",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 17,
          "modifierKind": [114]
        },
        {
          "name": "previousPageIsCompleted",
          "args": [
            {
              "name": "page",
              "type": "any",
              "defaultValue": "null"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 27,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "page",
              "type": "any",
              "defaultValue": "null",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "pagesReset": {
          "name": "pagesReset",
          "getSignature": {
            "name": "pagesReset",
            "type": "",
            "returnType": "Observable<boolean>",
            "line": 12
          }
        },
        "stepItemIdWasCalled": {
          "name": "stepItemIdWasCalled",
          "getSignature": {
            "name": "stepItemIdWasCalled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "Popover",
      "id": "class-Popover-2a8001cfd1a4ee4b345682cf61d6a9a6",
      "file": "src/clr-angular/popover/common/popover.ts",
      "type": "class",
      "sourceCode":
        "import { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { PopoverOptions } from './popover-options.interface';\nexport enum Point {\n  RIGHT_CENTER,\n  RIGHT_TOP,\n  RIGHT_BOTTOM,\n  TOP_CENTER,\n  TOP_RIGHT,\n  TOP_LEFT,\n  BOTTOM_CENTER,\n  BOTTOM_RIGHT,\n  BOTTOM_LEFT,\n  LEFT_CENTER,\n  LEFT_TOP,\n  LEFT_BOTTOM,\n}\n\nconst POSITION_RELATIVE = 'relative';\nconst POSITION_ABSOLUTE = 'absolute';\nconst POSITION_FIXED = 'fixed';\n\nconst OVERFLOW_SCROLL = 'scroll';\nconst OVERFLOW_AUTO = 'auto';\n\nexport class Popover {\n  private _scroll: Subject<void>;\n\n  constructor(private element: any) {\n    // Browsers don't agree with what to do if some of these are not specified, so we set them all to be safe.\n    element.style.position = POSITION_ABSOLUTE;\n    element.style.top = 0;\n    element.style.bottom = 'auto';\n    element.style.left = 0;\n    element.style.right = 'auto';\n  }\n\n  // TODO: need a way to account for parameters that change dynamically (positioning).\n  public anchor(\n    anchor: any,\n    anchorAlign: Point,\n    popoverAlign: Point,\n    { offsetX = 0, offsetY = 0, useAnchorParent = false }: PopoverOptions = {}\n  ): Observable<any> {\n    // TODO: we are assuming here that the popover is inside or next to the anchor.\n    // We'd need to go up the popover tree too otherwise\n\n    this.addScrollEventListeners(anchor);\n    if (useAnchorParent) {\n      anchor = anchor.parentNode;\n    }\n    // explicitly override anchor's style to static\n    anchor.style.position = 'static';\n\n    const anchorRect = anchor.getBoundingClientRect();\n    const popoverRect = this.element.getBoundingClientRect();\n\n    // position of left top corner of anchor + the offset\n    let leftDiff: number = anchorRect.left - popoverRect.left + offsetX;\n    let topDiff: number = anchorRect.top - popoverRect.top + offsetY;\n\n    // first, adjust positioning based on anchor's align point\n    switch (anchorAlign) {\n      case Point.LEFT_TOP:\n      case Point.TOP_LEFT:\n        break;\n      case Point.TOP_CENTER:\n        leftDiff += anchorRect.width / 2;\n        break;\n      case Point.TOP_RIGHT:\n        leftDiff += anchorRect.width;\n        break;\n      case Point.RIGHT_TOP:\n        leftDiff += anchorRect.width;\n        break;\n      case Point.LEFT_BOTTOM:\n        topDiff += anchorRect.height;\n        break;\n      case Point.BOTTOM_LEFT:\n        topDiff += anchorRect.height;\n        break;\n      case Point.BOTTOM_CENTER:\n        topDiff += anchorRect.height;\n        leftDiff += anchorRect.width / 2;\n        break;\n      case Point.BOTTOM_RIGHT:\n        topDiff += anchorRect.height;\n        leftDiff += anchorRect.width;\n        break;\n      case Point.RIGHT_BOTTOM:\n        topDiff += anchorRect.height;\n        leftDiff += anchorRect.width;\n        break;\n      case Point.LEFT_CENTER:\n        topDiff += anchorRect.height / 2;\n        break;\n      case Point.RIGHT_CENTER:\n        topDiff += anchorRect.height / 2;\n        leftDiff += anchorRect.width;\n        break;\n      default:\n    }\n\n    // second, adjust positioning based on popover's align point\n    switch (popoverAlign) {\n      case Point.LEFT_TOP:\n      case Point.TOP_LEFT:\n        break;\n      case Point.TOP_CENTER:\n        leftDiff -= popoverRect.width / 2;\n        break;\n      case Point.TOP_RIGHT:\n        leftDiff -= popoverRect.width;\n        break;\n      case Point.RIGHT_TOP:\n        leftDiff -= popoverRect.width;\n        break;\n      case Point.LEFT_BOTTOM:\n        topDiff -= popoverRect.height;\n        break;\n      case Point.BOTTOM_LEFT:\n        topDiff -= popoverRect.height;\n        break;\n      case Point.BOTTOM_CENTER:\n        topDiff -= popoverRect.height;\n        leftDiff -= popoverRect.width / 2;\n        break;\n      case Point.BOTTOM_RIGHT:\n        topDiff -= popoverRect.height;\n        leftDiff -= popoverRect.width;\n        break;\n      case Point.RIGHT_BOTTOM:\n        topDiff -= popoverRect.height;\n        leftDiff -= popoverRect.width;\n        break;\n      case Point.LEFT_CENTER:\n        topDiff -= popoverRect.height / 2;\n        break;\n      case Point.RIGHT_CENTER:\n        topDiff -= popoverRect.height / 2;\n        leftDiff -= popoverRect.width;\n        break;\n      default:\n    }\n\n    // Third, adjust with popover's margins based on the two align points.\n    // Here, we make an assumption that popover is primarily positioned outside the\n    // anchor with minor offset. Without this assumption, it's impossible to apply\n    // the popover's margins in a predictable way. For example, assume that a popover\n    // and its anchor are exactly the same size. if a popover is positioned inside the\n    // anchor (which is technically possible), then it becomes impossible to know what to do\n    // if the popover has a non-zero margin value all around (because applying the margin in\n    // all four directions will result in no margin visually, which isn't what we want).\n    // Therefore, our logic makes assumptions about margins of interest given the points,\n    // and only covers the cases where popover is outside the anchor.\n\n    const popoverComputedStyle = getComputedStyle(this.element);\n    const marginLeft = parseInt(popoverComputedStyle.marginLeft, 10);\n    const marginRight = parseInt(popoverComputedStyle.marginRight, 10);\n    const marginTop = parseInt(popoverComputedStyle.marginTop, 10);\n    const marginBottom = parseInt(popoverComputedStyle.marginBottom, 10);\n\n    switch (anchorAlign) {\n      case Point.LEFT_TOP:\n      case Point.TOP_LEFT:\n      case Point.TOP_RIGHT:\n      case Point.RIGHT_TOP:\n        if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n          topDiff -= marginBottom;\n          leftDiff -= marginRight;\n        }\n        if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n          topDiff -= marginTop;\n          leftDiff += marginLeft;\n        }\n        if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n          topDiff += marginTop;\n          leftDiff += marginLeft;\n        }\n        if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n          topDiff += marginTop;\n          leftDiff -= marginRight;\n        }\n        break;\n      case Point.LEFT_BOTTOM:\n      case Point.BOTTOM_LEFT:\n      case Point.BOTTOM_RIGHT:\n      case Point.RIGHT_BOTTOM:\n        if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n          topDiff -= marginBottom;\n          leftDiff += marginLeft;\n        }\n        if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n          topDiff -= marginBottom;\n          leftDiff -= marginRight;\n        }\n        if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n          topDiff += marginTop;\n          leftDiff += marginLeft;\n        }\n        if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n          topDiff += marginTop;\n          leftDiff -= marginRight;\n        }\n        break;\n      case Point.TOP_CENTER:\n        topDiff -= marginBottom;\n        leftDiff += marginLeft;\n        leftDiff -= marginRight;\n        break;\n      case Point.BOTTOM_CENTER:\n        topDiff += marginTop;\n        leftDiff += marginLeft;\n        leftDiff -= marginRight;\n        break;\n      case Point.LEFT_CENTER:\n        topDiff += marginTop;\n        topDiff -= marginBottom;\n        leftDiff -= marginRight;\n        break;\n      case Point.RIGHT_CENTER:\n        topDiff += marginTop;\n        topDiff -= marginBottom;\n        leftDiff += marginLeft;\n        break;\n      default:\n    }\n\n    this.element.style.transform = `translateX(${Math.round(leftDiff)}px) translateY(${Math.round(topDiff)}px)`;\n    return this._scroll.asObservable();\n  }\n\n  public release() {\n    this.element.style.transform = '';\n    this.removeScrollEventListeners();\n  }\n\n  private isPositioned(container: any) {\n    const position = getComputedStyle(container).position;\n    return position === POSITION_RELATIVE || position === POSITION_ABSOLUTE || position === POSITION_FIXED;\n  }\n\n  /*\n   * Containers up to the first positioned one will have an event on scroll\n   */\n\n  private scrollableElements: HTMLElement[] = [];\n\n  private emitScrollEvent() {\n    this._scroll.next();\n  }\n\n  private boundOnScrollListener: any = this.emitScrollEvent.bind(this);\n\n  private addScrollEventListeners(e: any) {\n    this._scroll = new Subject<void>();\n    const anchor: any = e;\n    let current: any = e;\n    while (current && current !== document) {\n      if (this.scrolls(current)) {\n        current.addEventListener('scroll', this.boundOnScrollListener);\n        this.scrollableElements.push(current);\n      }\n      if (current !== anchor && this.isPositioned(current)) {\n        break;\n      }\n      current = current.parentNode;\n    }\n  }\n\n  private removeScrollEventListeners() {\n    for (const elem of this.scrollableElements) {\n      elem.removeEventListener('scroll', this.boundOnScrollListener);\n    }\n    this.scrollableElements.length = 0;\n    if (this._scroll) {\n      this._scroll.complete();\n      delete this._scroll;\n    }\n  }\n\n  private scrolls(container: any): boolean {\n    const computedStyles = getComputedStyle(container);\n    return (\n      computedStyles.overflowX === OVERFLOW_SCROLL ||\n      computedStyles.overflowX === OVERFLOW_AUTO ||\n      computedStyles.overflowY === OVERFLOW_SCROLL ||\n      computedStyles.overflowY === OVERFLOW_AUTO\n    );\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "element",
            "type": "any"
          }
        ],
        "line": 38,
        "jsdoctags": [
          {
            "name": "element",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_scroll",
          "type": "Subject<void>",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        },
        {
          "name": "boundOnScrollListener",
          "defaultValue": "this.emitScrollEvent.bind(this)",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 264,
          "modifierKind": [112]
        },
        {
          "name": "scrollableElements",
          "defaultValue": "[]",
          "type": "HTMLElement[]",
          "optional": false,
          "description": "",
          "line": 258,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "addScrollEventListeners",
          "args": [
            {
              "name": "e",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 266,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "e",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "anchor",
          "args": [
            {
              "name": "anchor",
              "type": "any"
            },
            {
              "name": "anchorAlign",
              "type": "Point"
            },
            {
              "name": "popoverAlign",
              "type": "Point"
            },
            {
              "type": "PopoverOptions",
              "defaultValue": "{}"
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 50,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "anchor",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "anchorAlign",
              "type": "Point",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "popoverAlign",
              "type": "Point",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "PopoverOptions",
              "defaultValue": "{}",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emitScrollEvent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 260,
          "modifierKind": [112]
        },
        {
          "name": "isPositioned",
          "args": [
            {
              "name": "container",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 249,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "container",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 244,
          "modifierKind": [114]
        },
        {
          "name": "removeScrollEventListeners",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 282,
          "modifierKind": [112]
        },
        {
          "name": "scrolls",
          "args": [
            {
              "name": "container",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 293,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "container",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "RecursiveTreeNodeModel",
      "id": "class-RecursiveTreeNodeModel-7796516e10b99484a0a085feb97a6c94",
      "file": "src/clr-angular/data/tree-view/models/recursive-tree-node.model.ts",
      "type": "class",
      "sourceCode":
        "import { isObservable, Subscription } from 'rxjs';\n\nimport { TreeNodeModel } from './tree-node.model';\nimport { AsyncArray, isPromise } from './async-array';\nimport { TreeFeaturesService } from '../tree-features.service';\n\n/*\n * A recursive model is built received from the app and traversed to create the corresponding components.\n * Recursive = Model dictates the tree node components\n */\nexport class RecursiveTreeNodeModel<T> extends TreeNodeModel<T> {\n  constructor(\n    model: T,\n    parent: RecursiveTreeNodeModel<T> | null,\n    private getChildren: (node: T) => AsyncArray<T> | undefined,\n    private featuresService: TreeFeaturesService<T> | undefined\n  ) {\n    super();\n    this.model = model;\n    this.parent = parent;\n  }\n\n  parent: RecursiveTreeNodeModel<T> | null;\n\n  private childrenFetched = false;\n\n  clearChildren() {\n    this._children.forEach(child => child.destroy());\n    delete this._children;\n    this.childrenFetched = false;\n  }\n\n  fetchChildren() {\n    if (this.childrenFetched) {\n      return;\n    }\n\n    const asyncChildren = this.getChildren(this.model);\n    if (isPromise(asyncChildren)) {\n      this.loading = true;\n      asyncChildren.then(raw => {\n        this._children = this.wrapChildren(raw);\n        this.loading = false;\n      });\n    } else if (isObservable(asyncChildren)) {\n      this.loading = true;\n      this.subscription = asyncChildren.subscribe(raw => {\n        this._children = this.wrapChildren(raw);\n        this.loading = false;\n      });\n    } else if (asyncChildren) {\n      // Synchronous case\n      this._children = this.wrapChildren(asyncChildren);\n    } else {\n      this._children = [];\n    }\n    this.childrenFetched = true;\n    if (this.featuresService) {\n      this.featuresService.childrenFetched.next();\n    }\n  }\n\n  private wrapChildren(rawModels: T[]) {\n    return rawModels.map(m => new RecursiveTreeNodeModel(m, this, this.getChildren, this.featuresService));\n  }\n\n  private _children: RecursiveTreeNodeModel<T>[] = [];\n  get children(): RecursiveTreeNodeModel<T>[] {\n    this.fetchChildren();\n    return this._children;\n  }\n  set children(value: RecursiveTreeNodeModel<T>[]) {\n    this._children = value;\n  }\n\n  private subscription: Subscription;\n\n  destroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    super.destroy();\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "model",
            "type": "T"
          },
          {
            "name": "parent",
            "type": "RecursiveTreeNodeModel<T> | null"
          },
          {
            "name": "getChildren",
            "type": "function",
            "function": [
              {
                "name": "node",
                "type": "T"
              }
            ]
          },
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T> | undefined"
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "model",
            "type": "T",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parent",
            "type": "RecursiveTreeNodeModel<T> | null",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "getChildren",
            "type": "function",
            "function": [
              {
                "name": "node",
                "type": "T"
              }
            ],
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T> | undefined",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_children",
          "defaultValue": "[]",
          "type": "RecursiveTreeNodeModel<T>[]",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [112]
        },
        {
          "name": "childrenFetched",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [112]
        },
        {
          "name": "parent",
          "type": "RecursiveTreeNodeModel<T> | null",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [112]
        },
        {
          "name": "children",
          "type": "TreeNodeModel<T>[]",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [117],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "expanded",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "loading",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "model",
          "type": "T | null",
          "optional": false,
          "description": "",
          "line": 14,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "nodeId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "parent",
          "type": "TreeNodeModel<T> | null",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [117],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "selected",
          "defaultValue": "new BehaviorSubject<ClrSelectedState>(ClrSelectedState.UNSELECTED)",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        }
      ],
      "methods": [
        {
          "name": "clearChildren",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84
        },
        {
          "name": "fetchChildren",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39
        },
        {
          "name": "wrapChildren",
          "args": [
            {
              "name": "rawModels",
              "type": "T[]"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 69,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "rawModels",
              "type": "T[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "_updateSelectionFromChildren",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "computeSelectionStateFromChildren",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 60,
          "modifierKind": [112],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32,
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "setSelected",
          "args": [
            {
              "name": "state",
              "type": "ClrSelectedState"
            },
            {
              "name": "propagateUp",
              "type": "boolean"
            },
            {
              "name": "propagateDown",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrSelectedState",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "propagateUp",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "propagateDown",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        },
        {
          "name": "toggleSelection",
          "args": [
            {
              "name": "propagate",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "jsdoctags": [
            {
              "name": "propagate",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "TreeNodeModel"
          }
        }
      ],
      "indexSignatures": [],
      "extends": "TreeNodeModel",
      "accessors": {
        "children": {
          "name": "children",
          "setSignature": {
            "name": "children",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "[]"
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "[]",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "children",
            "type": "[]",
            "returnType": "RecursiveTreeNodeModel[]",
            "line": 74
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "RegisteredFilter",
      "id": "class-RegisteredFilter-6a35fa82478eccf8f9ccd0bdf593fa40",
      "file": "src/clr-angular/data/datagrid/providers/filters.ts",
      "type": "class",
      "sourceCode":
        "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nimport { ClrDatagridFilterInterface } from '../interfaces/filter.interface';\nimport { Page } from './page';\nimport { StateDebouncer } from './state-debouncer.provider';\n\n@Injectable()\nexport class FiltersProvider<T = any> {\n  constructor(private _page: Page, private stateDebouncer: StateDebouncer) {}\n  /**\n   * This subject is the list of filters that changed last, not the whole list.\n   * We emit a list rather than just one filter to allow batch changes to several at once.\n   */\n  private _change = new Subject<ClrDatagridFilterInterface<T>[]>();\n  // We do not want to expose the Subject itself, but the Observable which is read-only\n  public get change(): Observable<ClrDatagridFilterInterface<T>[]> {\n    return this._change.asObservable();\n  }\n\n  /**\n   * List of all filters, whether they're active or not\n   */\n  private _all: RegisteredFilter<T, ClrDatagridFilterInterface<T>>[] = [];\n\n  /**\n   * Tests if at least one filter is currently active\n   */\n  public hasActiveFilters(): boolean {\n    // We do not use getActiveFilters() because this function will be called much more often\n    // and stopping the loop early might be relevant.\n    for (const { filter } of this._all) {\n      if (filter && filter.isActive()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns a list of all currently active filters\n   */\n  public getActiveFilters(): ClrDatagridFilterInterface<T>[] {\n    const ret: ClrDatagridFilterInterface<T>[] = [];\n    for (const { filter } of this._all) {\n      if (filter && filter.isActive()) {\n        ret.push(filter);\n      }\n    }\n    return ret;\n  }\n\n  /**\n   * Registers a filter, and returns a deregistration function\n   */\n  public add<F extends ClrDatagridFilterInterface<T>>(filter: F): RegisteredFilter<T, F> {\n    const subscription = filter.changes.subscribe(() => this.resetPageAndEmitFilterChange([filter]));\n    let hasUnregistered = false;\n    const registered = new RegisteredFilter(filter, () => {\n      if (hasUnregistered) {\n        return;\n      }\n      subscription.unsubscribe();\n      const matchIndex = this._all.findIndex(item => item.filter === filter);\n      if (matchIndex >= 0) {\n        this._all.splice(matchIndex, 1);\n      }\n      if (filter.isActive()) {\n        this.resetPageAndEmitFilterChange([]);\n      }\n      hasUnregistered = true;\n    });\n    this._all.push(registered);\n    if (filter.isActive()) {\n      this.resetPageAndEmitFilterChange([filter]);\n    }\n    return registered;\n  }\n\n  /**\n   * Accepts an item if it is accepted by all currently active filters\n   */\n  public accepts(item: T): boolean {\n    for (const { filter } of this._all) {\n      if (filter && filter.isActive() && !filter.accepts(item)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private resetPageAndEmitFilterChange(filters: ClrDatagridFilterInterface<T>[]) {\n    this.stateDebouncer.changeStart();\n    // filtering may change the page number such that current page number doesn't exist in the filtered dataset.\n    // So here we always set the current page to 1 so that it'll fetch first page's data with the given filter.\n    this._page.current = 1;\n    this._change.next(filters);\n    this.stateDebouncer.changeDone();\n  }\n}\n\nexport class RegisteredFilter<T, F extends ClrDatagridFilterInterface<T>> {\n  constructor(public filter: F, public unregister: () => void) {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "filter",
            "type": "F"
          },
          {
            "name": "unregister",
            "type": "function",
            "function": []
          }
        ],
        "line": 108,
        "jsdoctags": [
          {
            "name": "filter",
            "type": "F",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "unregister",
            "type": "function",
            "function": [],
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "filter",
          "type": "F",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [114]
        },
        {
          "name": "unregister",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [114]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ResponsiveNavCodes",
      "id": "class-ResponsiveNavCodes-f818aae82bbac8fe9847f7a4a4b88fa8",
      "file": "src/clr-angular/layout/nav/responsive-nav-codes.ts",
      "type": "class",
      "sourceCode":
        "export class ResponsiveNavCodes {\n  public static NAV_LEVEL_1: number = 1;\n  public static NAV_LEVEL_2: number = 2;\n  public static NAV_CLOSE_ALL: string = 'NAV_CLOSE_ALL';\n  public static NAV_OPEN: string = 'NAV_OPEN';\n  public static NAV_CLOSE: string = 'NAV_CLOSE';\n  public static NAV_TOGGLE: string = 'NAV_TOGGLE';\n  public static NAV_CLASS_HAMBURGER_MENU: string = 'open-hamburger-menu';\n  public static NAV_CLASS_OVERFLOW_MENU: string = 'open-overflow-menu';\n  public static NAV_CLASS_TRIGGER_1: string = 'header-hamburger-trigger';\n  public static NAV_CLASS_TRIGGER_2: string = 'header-overflow-trigger';\n  public static NAV_CLASS_LEVEL_1: string = 'clr-nav-level-1';\n  public static NAV_CLASS_LEVEL_2: string = 'clr-nav-level-2';\n}\n",
      "properties": [
        {
          "name": "NAV_CLASS_HAMBURGER_MENU",
          "defaultValue": "'open-hamburger-menu'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [115]
        },
        {
          "name": "NAV_CLASS_LEVEL_1",
          "defaultValue": "'clr-nav-level-1'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [115]
        },
        {
          "name": "NAV_CLASS_LEVEL_2",
          "defaultValue": "'clr-nav-level-2'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [115]
        },
        {
          "name": "NAV_CLASS_OVERFLOW_MENU",
          "defaultValue": "'open-overflow-menu'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [115]
        },
        {
          "name": "NAV_CLASS_TRIGGER_1",
          "defaultValue": "'header-hamburger-trigger'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [115]
        },
        {
          "name": "NAV_CLASS_TRIGGER_2",
          "defaultValue": "'header-overflow-trigger'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [115]
        },
        {
          "name": "NAV_CLOSE",
          "defaultValue": "'NAV_CLOSE'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [115]
        },
        {
          "name": "NAV_CLOSE_ALL",
          "defaultValue": "'NAV_CLOSE_ALL'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [115]
        },
        {
          "name": "NAV_LEVEL_1",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [115]
        },
        {
          "name": "NAV_LEVEL_2",
          "defaultValue": "2",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [115]
        },
        {
          "name": "NAV_OPEN",
          "defaultValue": "'NAV_OPEN'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [115]
        },
        {
          "name": "NAV_TOGGLE",
          "defaultValue": "'NAV_TOGGLE'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [115]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ResponsiveNavControlMessage",
      "id": "class-ResponsiveNavControlMessage-ce40614e818f1dbe2591f0c8b205112c",
      "file": "src/clr-angular/layout/nav/responsive-nav-control-message.ts",
      "type": "class",
      "sourceCode":
        "export class ResponsiveNavControlMessage {\n  constructor(private _controlCode: string, private _navLevel: number) {}\n\n  get controlCode(): string {\n    return this._controlCode;\n  }\n\n  get navLevel(): number {\n    return this._navLevel;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_controlCode",
            "type": "string"
          },
          {
            "name": "_navLevel",
            "type": "number"
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "_controlCode",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_navLevel",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "methods": [],
      "indexSignatures": [],
      "accessors": {
        "controlCode": {
          "name": "controlCode",
          "getSignature": {
            "name": "controlCode",
            "type": "string",
            "returnType": "string",
            "line": 10
          }
        },
        "navLevel": {
          "name": "navLevel",
          "getSignature": {
            "name": "navLevel",
            "type": "number",
            "returnType": "number",
            "line": 14
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "StackControl",
      "id": "class-StackControl-f8dadff72bb1dd0f29be488961433255",
      "file": "src/clr-angular/data/stack-view/stack-control.ts",
      "type": "class",
      "sourceCode":
        "import { EventEmitter } from '@angular/core';\nimport { ClrStackView } from './stack-view';\n\nexport class StackControl {\n  model: any;\n  modelChange: EventEmitter<any> = new EventEmitter<any>(false);\n\n  constructor(protected stackView: ClrStackView) {\n    // Make the ClrStackView editable, since it contains a StackControl\n    this.stackView.editable = true;\n    this.stackView.editingChange.subscribe((editing: boolean) => {\n      // Edit mode was closed\n      if (!editing) {\n        this.modelChange.emit(this.model);\n      }\n    });\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "stackView",
            "type": "ClrStackView"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "stackView",
            "type": "ClrStackView",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "model",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "modelChange",
          "defaultValue": "new EventEmitter<any>(false)",
          "type": "EventEmitter<any>",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "StepperModel",
      "id": "class-StepperModel-3a8c9152353ebd454c2c810e6966489f",
      "file": "src/clr-angular/accordion/stepper/models/stepper.model.ts",
      "type": "class",
      "sourceCode":
        "import { AccordionModel } from '../../models/accordion.model';\nimport { AccordionStatus } from '../../enums/accordion-status.enum';\n\nexport class StepperModel extends AccordionModel {\n  get allPanelsCompleted(): boolean {\n    return this.panels.length && this.getNumberOfIncompletePanels() === 0 && this.getNumberOfOpenPanels() === 0;\n  }\n\n  addPanel(id: string, open = false) {\n    super.addPanel(id, open);\n    this._panels[id].disabled = true;\n  }\n\n  updatePanelOrder(ids: string[]) {\n    super.updatePanelOrder(ids);\n    this.openFirstPanel();\n  }\n\n  togglePanel(panelId: string) {\n    if (this._panels[panelId].status === AccordionStatus.Complete) {\n      this._panels[panelId].open = !this._panels[panelId].open;\n    }\n  }\n\n  navigateToNextPanel(currentPanelId: string, currentPanelValid = true) {\n    if (currentPanelValid) {\n      this.completePanel(currentPanelId);\n      this.openNextPanel(this._panels[currentPanelId].id);\n    } else {\n      this.setPanelError(currentPanelId);\n    }\n  }\n\n  overrideInitialPanel(panelId: string) {\n    this.panels.filter(() => this._panels[panelId] !== undefined).forEach(panel => {\n      if (panel.index < this._panels[panelId].index) {\n        this.completePanel(panel.id);\n      } else if (panel.id === panelId) {\n        this._panels[panel.id].open = true;\n      } else {\n        this._panels[panel.id].open = false;\n      }\n    });\n  }\n\n  setPanelsWithErrors(ids: string[]) {\n    ids.forEach(id => this.setPanelError(id));\n  }\n\n  resetPanels() {\n    this.panels.forEach(p => this.resetPanel(p.id));\n    this.openFirstPanel();\n  }\n\n  getNextPanel(currentPanelId: string) {\n    return this.panels.find(s => s.index === this._panels[currentPanelId].index + 1);\n  }\n\n  private resetAllFuturePanels(panelId: string) {\n    this.panels.filter(panel => panel.index >= this._panels[panelId].index).forEach(panel => this.resetPanel(panel.id));\n  }\n\n  private resetPanel(panelId: string) {\n    this._panels[panelId].status = AccordionStatus.Inactive;\n    this._panels[panelId].open = false;\n    this._panels[panelId].disabled = true;\n  }\n\n  private openFirstPanel() {\n    const firstPanel = this.getFirstPanel();\n    this._panels[firstPanel.id].open = true;\n    this._panels[firstPanel.id].disabled = true;\n  }\n\n  private completePanel(panelId: string) {\n    this._panels[panelId].status = AccordionStatus.Complete;\n    this._panels[panelId].disabled = false;\n    this._panels[panelId].open = false;\n  }\n\n  private openNextPanel(currentPanelId: string) {\n    const nextPanel = this.getNextPanel(currentPanelId);\n\n    if (nextPanel) {\n      this.resetAllFuturePanels(nextPanel.id);\n      this._panels[nextPanel.id].open = true;\n      this._panels[nextPanel.id].disabled = true;\n    }\n  }\n\n  private setPanelError(panelId: string) {\n    this.resetAllFuturePanels(panelId);\n    this._panels[panelId].open = true;\n    this._panels[panelId].status = AccordionStatus.Error;\n  }\n\n  private getFirstPanel() {\n    return this.panels.find(panel => panel.index === 0);\n  }\n\n  private getNumberOfIncompletePanels() {\n    return this.panels.reduce((prev, next) => (next.status !== AccordionStatus.Complete ? prev + 1 : prev), 0);\n  }\n\n  private getNumberOfOpenPanels() {\n    return this.panels.reduce((prev, next) => (next.open !== false ? prev + 1 : prev), 0);\n  }\n}\n",
      "properties": [
        {
          "name": "_panels",
          "defaultValue": "{}",
          "type": "literal type",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [113],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "accordionCount",
          "defaultValue": "accordionCount++",
          "type": "",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [113],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "strategy",
          "defaultValue": "AccordionStrategy.Default",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [113],
          "inheritance": {
            "file": "AccordionModel"
          }
        }
      ],
      "methods": [
        {
          "name": "addPanel",
          "args": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "completePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getFirstPanel",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 103,
          "modifierKind": [112]
        },
        {
          "name": "getNextPanel",
          "args": [
            {
              "name": "currentPanelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 61,
          "jsdoctags": [
            {
              "name": "currentPanelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getNumberOfIncompletePanels",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 107,
          "modifierKind": [112]
        },
        {
          "name": "getNumberOfOpenPanels",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 111,
          "modifierKind": [112]
        },
        {
          "name": "navigateToNextPanel",
          "args": [
            {
              "name": "currentPanelId",
              "type": "string"
            },
            {
              "name": "currentPanelValid",
              "type": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "jsdoctags": [
            {
              "name": "currentPanelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "currentPanelValid",
              "type": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "openFirstPanel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "modifierKind": [112]
        },
        {
          "name": "openNextPanel",
          "args": [
            {
              "name": "currentPanelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "currentPanelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "overrideInitialPanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetAllFuturePanels",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetPanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetPanels",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56
        },
        {
          "name": "setPanelError",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setPanelsWithErrors",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "togglePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updatePanelOrder",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "addPanel",
          "args": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "closeAllPanels",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "modifierKind": [112],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "disablePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "disabled",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "disabled",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "removeOldPanels",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "setStrategy",
          "args": [
            {
              "name": "strategy",
              "type": "AccordionStrategy"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "jsdoctags": [
            {
              "name": "strategy",
              "type": "AccordionStrategy",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "togglePanel",
          "args": [
            {
              "name": "panelId",
              "type": "string"
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "jsdoctags": [
            {
              "name": "panelId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "open",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionModel"
          }
        },
        {
          "name": "updatePanelOrder",
          "args": [
            {
              "name": "ids",
              "type": "string[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "jsdoctags": [
            {
              "name": "ids",
              "type": "string[]",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "AccordionModel"
          }
        }
      ],
      "indexSignatures": [],
      "extends": "AccordionModel",
      "accessors": {
        "allPanelsCompleted": {
          "name": "allPanelsCompleted",
          "getSignature": {
            "name": "allPanelsCompleted",
            "type": "boolean",
            "returnType": "boolean",
            "line": 11
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "TreeNodeModel",
      "id": "class-TreeNodeModel-8dec4fd20b6f0a1b64871b27f201bcfe",
      "file": "src/clr-angular/data/tree-view/models/tree-node.model.ts",
      "type": "class",
      "sourceCode":
        "import { ClrSelectedState } from './selected-state.enum';\nimport { BehaviorSubject } from 'rxjs';\n\nexport abstract class TreeNodeModel<T> {\n  nodeId: string;\n  expanded: boolean;\n  selected = new BehaviorSubject<ClrSelectedState>(ClrSelectedState.UNSELECTED);\n  model: T | null;\n  /*\n   * Ideally, I would like to use a polymorphic this type here to ensure homogeneity of the tree, something like:\n   * abstract parent: this<T> | null;\n   * abstract children: this<T>[];\n   * But I'm hitting limitations on typescript not allowing that type in constructors or static methods.\n   * So I'm resorting to forcing override with more precise types by marking these abstract.\n   */\n  abstract parent: TreeNodeModel<T> | null;\n  abstract children: TreeNodeModel<T>[];\n\n  /*\n   * Being able to push this down to the RecursiveTreeNodeModel would require too much work on the angular components\n   * right now for them to know which kind of model they are using. So I'm lifting the public properties to this\n   * abstract parent class for now and we can revisit it later, when we're not facing such a close deadline.\n   */\n  loading = false;\n\n  destroy() {\n    // Just to be safe\n    this.selected.complete();\n  }\n\n  // Propagate by default when eager, don't propagate in the lazy-loaded tree.\n  setSelected(state: ClrSelectedState, propagateUp: boolean, propagateDown: boolean) {\n    if (state === this.selected.value) {\n      return;\n    }\n    this.selected.next(state);\n    if (propagateDown && state !== ClrSelectedState.INDETERMINATE && this.children) {\n      this.children.forEach(child => child.setSelected(state, false, true));\n    }\n    if (propagateUp && this.parent) {\n      this.parent._updateSelectionFromChildren();\n    }\n  }\n\n  toggleSelection(propagate: boolean) {\n    // Both unselected and indeterminate toggle to selected\n    const newState =\n      this.selected.value === ClrSelectedState.SELECTED ? ClrSelectedState.UNSELECTED : ClrSelectedState.SELECTED;\n    // NOTE: we always propagate selection up in this method because it is only called when the user takes an action.\n    // It should never be called from lifecycle hooks or app-provided inputs.\n    this.setSelected(newState, true, propagate);\n  }\n\n  private computeSelectionStateFromChildren() {\n    let oneSelected = false;\n    let oneUnselected = false;\n    // Using a good old for loop to exit as soon as we can tell, for better performance on large trees.\n    for (const child of this.children) {\n      switch (child.selected.value) {\n        case ClrSelectedState.INDETERMINATE:\n          return ClrSelectedState.INDETERMINATE;\n        case ClrSelectedState.SELECTED:\n          oneSelected = true;\n          if (oneUnselected) {\n            return ClrSelectedState.INDETERMINATE;\n          }\n          break;\n        case ClrSelectedState.UNSELECTED:\n        default:\n          // Default is the same as unselected, in case an undefined somehow made it all the way here.\n          oneUnselected = true;\n          if (oneSelected) {\n            return ClrSelectedState.INDETERMINATE;\n          }\n          break;\n      }\n    }\n    if (!oneSelected) {\n      return ClrSelectedState.UNSELECTED;\n    } else if (!oneUnselected) {\n      return ClrSelectedState.SELECTED;\n    }\n  }\n\n  /*\n   * Internal, but needs to be called by other nodes\n   */\n  _updateSelectionFromChildren() {\n    const newState = this.computeSelectionStateFromChildren();\n    if (newState === this.selected.value) {\n      return;\n    }\n    this.selected.next(newState);\n    if (this.parent) {\n      this.parent._updateSelectionFromChildren();\n    }\n  }\n}\n",
      "properties": [
        {
          "name": "children",
          "type": "TreeNodeModel<T>[]",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [117]
        },
        {
          "name": "expanded",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "loading",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "model",
          "type": "T | null",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "nodeId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "parent",
          "type": "TreeNodeModel<T> | null",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [117]
        },
        {
          "name": "selected",
          "defaultValue": "new BehaviorSubject<ClrSelectedState>(ClrSelectedState.UNSELECTED)",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [
        {
          "name": "_updateSelectionFromChildren",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94
        },
        {
          "name": "computeSelectionStateFromChildren",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 60,
          "modifierKind": [112]
        },
        {
          "name": "destroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 32
        },
        {
          "name": "setSelected",
          "args": [
            {
              "name": "state",
              "type": "ClrSelectedState"
            },
            {
              "name": "propagateUp",
              "type": "boolean"
            },
            {
              "name": "propagateDown",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrSelectedState",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "propagateUp",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "propagateDown",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleSelection",
          "args": [
            {
              "name": "propagate",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "jsdoctags": [
            {
              "name": "propagate",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "WillyWonka",
      "id": "class-WillyWonka-0a5b24ef6fa0345f08c6bcbc10ae1a92",
      "file": "src/clr-angular/utils/chocolate/willy-wonka.ts",
      "type": "class",
      "sourceCode":
        "import { AfterViewChecked } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\n/*\n * After a conversation with the Angular core team, it turns out we don't have much of a choice for our\n * declarative API, we need to fight against change detection and its one-way flow. This is\n * currently the least dirty solution to do what we want.\n *\n * Do not modify or even use this class unless you know exactly what you're doing.\n * It has the potential to trigger change detection loops or kill app performances.\n */\nexport class WillyWonka implements AfterViewChecked {\n  private _chocolate = new Subject<void>();\n\n  public get chocolate(): Observable<void> {\n    return this._chocolate.asObservable();\n  }\n\n  ngAfterViewChecked() {\n    this._chocolate.next();\n  }\n}\n",
      "properties": [
        {
          "name": "_chocolate",
          "defaultValue": "new Subject<void>()",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        }
      ],
      "methods": [
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "chocolate": {
          "name": "chocolate",
          "getSignature": {
            "name": "chocolate",
            "type": "",
            "returnType": "Observable<void>",
            "line": 21
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["AfterViewChecked"]
    },
    {
      "name": "WrappedFormControl",
      "id": "class-WrappedFormControl-05ff032d75679d8737a592c0c23f09da",
      "file": "src/clr-angular/forms/common/wrapped-control.ts",
      "type": "class",
      "sourceCode":
        "import {\n  HostBinding,\n  InjectionToken,\n  HostListener,\n  Injector,\n  Input,\n  OnInit,\n  Type,\n  ViewContainerRef,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { filter, distinctUntilChanged, startWith } from 'rxjs/operators';\n\nimport { HostWrapper } from '../../utils/host-wrapping/host-wrapper';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\n\nimport { ControlIdService } from './providers/control-id.service';\nimport { NgControlService } from './providers/ng-control.service';\nimport { IfErrorService } from './if-error/if-error.service';\nimport { NgControl } from '@angular/forms';\nimport { ControlClassService } from './providers/control-class.service';\nimport { MarkControlService } from './providers/mark-control.service';\n\nexport class WrappedFormControl<W extends DynamicWrapper> implements OnInit, OnDestroy {\n  protected ngControlService: NgControlService;\n  private ifErrorService: IfErrorService;\n  private controlClassService: ControlClassService;\n  private markControlService: MarkControlService;\n  protected renderer: Renderer2;\n  protected el: ElementRef<any>;\n\n  protected subscriptions: Subscription[] = [];\n  protected index = 0;\n  protected controlIdService: ControlIdService;\n\n  _id: string;\n\n  // I lost way too much time trying to make this work without injecting the ViewContainerRef and the Injector,\n  // I'm giving up. So we have to inject these two manually for now.\n  constructor(\n    protected vcr: ViewContainerRef,\n    protected wrapperType: Type<W>,\n    injector: Injector,\n    private ngControl: NgControl,\n    renderer: Renderer2,\n    el: ElementRef\n  ) {\n    this.renderer = renderer;\n    this.el = el;\n    try {\n      this.ngControlService = injector.get(NgControlService);\n      this.ifErrorService = injector.get(IfErrorService);\n      this.controlClassService = injector.get(ControlClassService);\n      this.markControlService = injector.get(MarkControlService);\n    } catch (e) {}\n\n    if (this.controlClassService) {\n      this.controlClassService.initControlClass(renderer, el.nativeElement);\n    }\n    if (this.markControlService) {\n      this.subscriptions.push(\n        this.markControlService.touchedChange.subscribe(() => {\n          this.ngControl.control.markAsTouched();\n          this.ngControl.control.updateValueAndValidity();\n        })\n      );\n    }\n  }\n\n  @HostBinding()\n  @Input()\n  get id() {\n    return this._id;\n  }\n  set id(value: string) {\n    this._id = value;\n    if (this.controlIdService) {\n      this.controlIdService.id = value;\n    }\n  }\n\n  @HostListener('blur')\n  triggerValidation() {\n    if (this.ifErrorService) {\n      this.ifErrorService.triggerStatusChange();\n    }\n  }\n\n  private _containerInjector: Injector;\n\n  // @TODO This method has a try/catch due to an unknown issue that came when building the clrToggle feature\n  // We need to figure out why this fails for the ClrToggle scenario but works for Date picker...\n  // To see the error, remove the try/catch here and run the ClrToggle suite to see issues getting the container\n  // injector in time, and this ONLY HAPPENS in tests and not in dev/prod mode.\n  protected getProviderFromContainer<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T): T {\n    try {\n      return this._containerInjector.get(token, notFoundValue);\n    } catch (e) {\n      return notFoundValue;\n    }\n  }\n\n  ngOnInit() {\n    this._containerInjector = new HostWrapper(this.wrapperType, this.vcr, this.index);\n    this.controlIdService = this._containerInjector.get(ControlIdService);\n\n    if (this._id) {\n      this.controlIdService.id = this._id;\n    } else {\n      this._id = this.controlIdService.id;\n    }\n\n    if (this.ngControlService) {\n      this.ngControlService.setControl(this.ngControl);\n    }\n\n    this.listenForErrorStateChanges();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  private listenForErrorStateChanges() {\n    if (this.ifErrorService) {\n      this.subscriptions.push(\n        this.ifErrorService.statusChanges\n          .pipe(startWith(false), filter(() => this.renderer && !!this.el), distinctUntilChanged())\n          .subscribe(error => this.setAriaDescribedBy(error))\n      );\n    }\n  }\n\n  private setAriaDescribedBy(error: boolean) {\n    this.renderer.setAttribute(this.el.nativeElement, 'aria-describedby', this.getAriaDescribedById(error));\n  }\n\n  private getAriaDescribedById(error: boolean): string {\n    return this.controlIdService.id.concat(error ? '-error' : '-helper');\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "wrapperType",
            "type": "Type<W>"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "ngControl",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 44,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "wrapperType",
            "type": "Type<W>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControl",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "_containerInjector",
          "type": "Injector",
          "optional": false,
          "description": "",
          "line": 97,
          "modifierKind": [112]
        },
        {
          "name": "_id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "controlClassService",
          "type": "ControlClassService",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [112]
        },
        {
          "name": "controlIdService",
          "type": "ControlIdService",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [113]
        },
        {
          "name": "el",
          "type": "ElementRef<any>",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [113]
        },
        {
          "name": "ifErrorService",
          "type": "IfErrorService",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [112]
        },
        {
          "name": "index",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [113]
        },
        {
          "name": "markControlService",
          "type": "MarkControlService",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [112]
        },
        {
          "name": "ngControlService",
          "type": "NgControlService",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [113]
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [113]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [113]
        }
      ],
      "methods": [
        {
          "name": "getAriaDescribedById",
          "args": [
            {
              "name": "error",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 146,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "error",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getProviderFromContainer",
          "args": [
            {
              "name": "token",
              "type": "Type<T> | InjectionToken<T>"
            },
            {
              "name": "notFoundValue",
              "type": "T",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": ["T"],
          "line": 103,
          "modifierKind": [113],
          "jsdoctags": [
            {
              "name": "token",
              "type": "Type<T> | InjectionToken<T>",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "notFoundValue",
              "type": "T",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listenForErrorStateChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 128
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111
        },
        {
          "name": "setAriaDescribedBy",
          "args": [
            {
              "name": "error",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "error",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "inputsClass": [
        {
          "name": "id",
          "line": 80
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "blur",
          "args": [],
          "argsDecorator": [],
          "line": 91
        }
      ],
      "implements": ["OnInit", "OnDestroy"]
    },
    {
      "name": "YearRangeModel",
      "id": "class-YearRangeModel-d6c25ff81f675f0a2e153a072057411d",
      "file": "src/clr-angular/forms/datepicker/model/year-range.model.ts",
      "type": "class",
      "sourceCode":
        "const YEARS_TO_DISPLAY: number = 10;\n\nexport class YearRangeModel {\n  constructor(private readonly year: number) {\n    this.generateYearRange();\n  }\n\n  yearRange: number[] = [];\n\n  /**\n   * Gets the number in the middle of the range.\n   */\n  get middleYear(): number {\n    return this.yearRange[Math.floor(this.yearRange.length / 2)];\n  }\n\n  /**\n   * Generates the year range based on the year parameter.\n   * eg: If 2018 is passed the output will be [2010, 2011, ..., 2019]\n   */\n  private generateYearRange() {\n    const remainder: number = this.year % YEARS_TO_DISPLAY;\n    const floor: number = this.year - remainder;\n    const ceil: number = floor + YEARS_TO_DISPLAY;\n    this.yearRange = this.generateRange(floor, ceil);\n  }\n\n  /**\n   * Function which generate a range of numbers from floor to ceil.\n   */\n  private generateRange(floor: number, ceil: number): number[] {\n    return Array.from({ length: ceil - floor }, (v, k) => k + floor);\n  }\n\n  /**\n   * Generates the YearRangeModel for the next decade.\n   */\n  nextDecade(): YearRangeModel {\n    return new YearRangeModel(this.year + 10);\n  }\n\n  /**\n   * Generates the YearRangeModel for the previous decade.\n   */\n  previousDecade(): YearRangeModel {\n    return new YearRangeModel(this.year - 10);\n  }\n\n  /**\n   * Generates the YearRangeModel for the current decade.\n   */\n  currentDecade(): YearRangeModel {\n    return new YearRangeModel(new Date().getFullYear());\n  }\n\n  /**\n   * Checks if the value is in the YearRangeModel.\n   */\n  inRange(value: number): boolean {\n    return this.yearRange.indexOf(value) > -1;\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "year",
            "type": "number"
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "year",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "yearRange",
          "defaultValue": "[]",
          "type": "number[]",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methods": [
        {
          "name": "currentDecade",
          "args": [],
          "optional": false,
          "returnType": "YearRangeModel",
          "typeParameters": [],
          "line": 58,
          "description": "<p>Generates the YearRangeModel for the current decade.</p>\n"
        },
        {
          "name": "generateRange",
          "args": [
            {
              "name": "floor",
              "type": "number"
            },
            {
              "name": "ceil",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "number[]",
          "typeParameters": [],
          "line": 37,
          "description": "<p>Function which generate a range of numbers from floor to ceil.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "floor",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "ceil",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "generateYearRange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "description":
            "<p>Generates the year range based on the year parameter.\neg: If 2018 is passed the output will be [2010, 2011, ..., 2019]</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "inRange",
          "args": [
            {
              "name": "value",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 65,
          "description": "<p>Checks if the value is in the YearRangeModel.</p>\n",
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "nextDecade",
          "args": [],
          "optional": false,
          "returnType": "YearRangeModel",
          "typeParameters": [],
          "line": 44,
          "description": "<p>Generates the YearRangeModel for the next decade.</p>\n"
        },
        {
          "name": "previousDecade",
          "args": [],
          "optional": false,
          "returnType": "YearRangeModel",
          "typeParameters": [],
          "line": 51,
          "description": "<p>Generates the YearRangeModel for the previous decade.</p>\n"
        }
      ],
      "indexSignatures": [],
      "accessors": {
        "middleYear": {
          "name": "middleYear",
          "getSignature": {
            "name": "middleYear",
            "type": "number",
            "returnType": "number",
            "line": 19,
            "description": "<p>Gets the number in the middle of the range.</p>\n"
          }
        }
      },
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [
    {
      "name": "AccordionOompaLoompa",
      "id": "directive-AccordionOompaLoompa-923afe2c4984483f437b2e7bbcc5e585",
      "file": "src/clr-angular/accordion/chocolate/accordion-oompa-loompa.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Optional } from '@angular/core';\n\nimport { OompaLoompa } from '../../utils/chocolate/oompa-loompa';\nimport { AccordionWillyWonka } from './accordion-willy-wonka';\nimport { IfExpandService } from '../../utils/conditional/if-expanded.service';\n\n@Directive({ selector: 'clr-accordion-panel' })\nexport class AccordionOompaLoompa extends OompaLoompa {\n  private expand: IfExpandService;\n\n  constructor(cdr: ChangeDetectorRef, @Optional() willyWonka: AccordionWillyWonka, ifExpandService: IfExpandService) {\n    if (!willyWonka) {\n      throw new Error('clr-accordion-panel should only be used inside of clr-accordion');\n    }\n    super(cdr, willyWonka);\n    this.expand = ifExpandService;\n  }\n\n  get flavor() {\n    return this.expand.expanded;\n  }\n}\n",
      "selector": "clr-accordion-panel",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "expand",
          "type": "IfExpandService",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "willyWonka",
            "type": "AccordionWillyWonka"
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "willyWonka",
            "type": "AccordionWillyWonka",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "flavor": {
          "name": "flavor",
          "getSignature": {
            "name": "flavor",
            "type": "",
            "returnType": "",
            "line": 25
          }
        }
      }
    },
    {
      "name": "AccordionWillyWonka",
      "id": "directive-AccordionWillyWonka-a9bc290dd44934309aed2ac0aaf6829b",
      "file": "src/clr-angular/accordion/chocolate/accordion-willy-wonka.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\n\nimport { WillyWonka } from '../../utils/chocolate/willy-wonka';\n\n@Directive({ selector: 'clr-accordion' })\nexport class AccordionWillyWonka extends WillyWonka {}\n",
      "selector": "clr-accordion",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ActionableOompaLoompa",
      "id": "directive-ActionableOompaLoompa-9b5bef75295b4fd6ba769a19308e9854",
      "file": "src/clr-angular/data/datagrid/chocolate/actionable-oompa-loompa.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Optional } from '@angular/core';\nimport { OompaLoompa } from '../../../utils/chocolate/oompa-loompa';\nimport { RowActionService } from '../providers/row-action-service';\nimport { DatagridWillyWonka } from './datagrid-willy-wonka';\n\n@Directive({ selector: 'clr-datagrid, clr-dg-row' })\nexport class ActionableOompaLoompa extends OompaLoompa {\n  private rowActions: RowActionService;\n\n  constructor(cdr: ChangeDetectorRef, @Optional() willyWonka: DatagridWillyWonka, rowActions: RowActionService) {\n    if (!willyWonka) {\n      throw new Error('clr-dg-row should only be used inside of a clr-datagrid');\n    }\n    super(cdr, willyWonka);\n    this.rowActions = rowActions;\n  }\n\n  get flavor() {\n    return this.rowActions.hasActionableRow;\n  }\n}\n",
      "selector": "clr-datagrid, clr-dg-row",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "rowActions",
          "type": "RowActionService",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "willyWonka",
            "type": "DatagridWillyWonka"
          },
          {
            "name": "rowActions",
            "type": "RowActionService"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "willyWonka",
            "type": "DatagridWillyWonka",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "rowActions",
            "type": "RowActionService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "flavor": {
          "name": "flavor",
          "getSignature": {
            "name": "flavor",
            "type": "",
            "returnType": "",
            "line": 23
          }
        }
      }
    },
    {
      "name": "ActiveOompaLoompa",
      "id": "directive-ActiveOompaLoompa-896ca9b9eb0d6a950da2baa16a0f629e",
      "file": "src/clr-angular/layout/tabs/chocolate/active-oompa-loompa.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Inject, Optional } from '@angular/core';\n\nimport { OompaLoompa } from '../../../utils/chocolate/oompa-loompa';\nimport { IF_ACTIVE_ID, IfActiveService } from '../../../utils/conditional/if-active.service';\n\nimport { TabsWillyWonka } from './tabs-willy-wonka';\n\n@Directive({ selector: '[clrTabLink], clr-tab-content' })\nexport class ActiveOompaLoompa extends OompaLoompa {\n  private ifActive: IfActiveService;\n  private id: number;\n\n  constructor(\n    cdr: ChangeDetectorRef,\n    @Optional() willyWonka: TabsWillyWonka,\n    @Inject(IF_ACTIVE_ID) id: number,\n    ifActive: IfActiveService\n  ) {\n    if (!willyWonka) {\n      throw new Error('clrTabLink and clr-tab-content should only be used inside of a clr-tabs');\n    }\n    super(cdr, willyWonka);\n    this.ifActive = ifActive;\n    this.id = id;\n  }\n\n  get flavor() {\n    return this.ifActive.current === this.id;\n  }\n}\n",
      "selector": "[clrTabLink], clr-tab-content",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "id",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "ifActive",
          "type": "IfActiveService",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "willyWonka",
            "type": "TabsWillyWonka"
          },
          {
            "name": "id",
            "type": "number"
          },
          {
            "name": "ifActive",
            "type": "IfActiveService"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "willyWonka",
            "type": "TabsWillyWonka",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ifActive",
            "type": "IfActiveService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "flavor": {
          "name": "flavor",
          "getSignature": {
            "name": "flavor",
            "type": "",
            "returnType": "",
            "line": 32
          }
        }
      }
    },
    {
      "name": "ClrAlertText",
      "id": "directive-ClrAlertText-46dee0e1012fc1d9f4271216abbf0739",
      "file": "src/clr-angular/emphasis/alert/alert-text.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\n\n/**\n * @remark\n * This directive is used only of selectin alert text.\n */\n@Directive({\n  selector: '.alert-text',\n})\nexport class ClrAlertText {}\n",
      "selector": ".alert-text",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "jsdoctags": [
        {
          "pos": 263,
          "end": 272,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 263,
            "end": 264,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 264,
            "end": 270,
            "flags": 0,
            "escapedText": "remark"
          },
          "comment": "This directive is used only of selectin alert text."
        }
      ]
    },
    {
      "name": "ClrCheckbox",
      "id": "directive-ClrCheckbox-6c0bb586f0eafe2d7f22fa1e43cfd98a",
      "file": "src/clr-angular/forms/checkbox/checkbox.ts",
      "type": "directive",
      "description":
        "<p>This implements both the clrCheckbox and clrToggle functionality, since they are both just checkboxes with different\nvisual styling. The challenge is that the container needs to know which selector was used, which the @Attribute\ndecorator gets for us to determine if the toggle is used, and emits a value to the wrapper container to tell it\nthere is a toggle switch instead.</p>\n",
      "sourceCode":
        "import { Directive, Renderer2, ElementRef, Injector, Self, Optional, ViewContainerRef, Attribute } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { ClrCheckboxWrapper, IS_TOGGLE } from './checkbox-wrapper';\nimport { WrappedFormControl } from '../common/wrapped-control';\n\n/**\n * This implements both the clrCheckbox and clrToggle functionality, since they are both just checkboxes with different\n * visual styling. The challenge is that the container needs to know which selector was used, which the @Attribute\n * decorator gets for us to determine if the toggle is used, and emits a value to the wrapper container to tell it\n * there is a toggle switch instead.\n */\n@Directive({ selector: '[clrCheckbox],[clrToggle]' })\nexport class ClrCheckbox extends WrappedFormControl<ClrCheckboxWrapper> {\n  constructor(\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef,\n    @Attribute('clrToggle') private toggle: string\n  ) {\n    super(vcr, ClrCheckboxWrapper, injector, control, renderer, el);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    const toggleService = this.getProviderFromContainer<BehaviorSubject<boolean>>(IS_TOGGLE, null);\n\n    if (toggleService && this.toggle !== null) {\n      toggleService.next(true);\n    }\n  }\n}\n",
      "selector": "[clrCheckbox],[clrToggle]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "toggle",
            "type": "string"
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toggle",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrDatagridHideableColumn",
      "id": "directive-ClrDatagridHideableColumn-7e2b9e3277cd147ea85e4cba79083445",
      "file": "src/clr-angular/data/datagrid/datagrid-hideable-column.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  Directive,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { ColumnsService } from './providers/columns.service';\nimport { ColumnState } from './interfaces/column-state.interface';\nimport { DatagridColumnChanges } from './enums/column-changes.enum';\nimport { COLUMN_STATE } from './providers/column-state.provider';\n\n@Directive({ selector: '[clrDgHideableColumn]' })\n\n/**\n *\n * @description\n * A structural directive meant to be used inside a clr-dg-column component.\n *\n * <clr-dg-column>\n *       <ng-container *clrDgHideableColumn=\"{ hidden: true }\">\n *           User ID\n *       </ng-container>\n *   </clr-dg-column>\n *\n * It sets up state and properties so that columns can be manges for hide/show by a service and an internal\n * datagrid toggle component.\n *\n */\nexport class ClrDatagridHideableColumn implements OnDestroy {\n  /**\n   *\n   * @description\n   * Used to initialize the column with either hidden or visible state.\n   *\n   */\n  private _hidden: boolean;\n\n  /**\n   *\n   * @description\n   * Setter fn for the @Input with the same name as this structural directive.\n   * It allows the user to pre-configure the column's hide/show state. { hidden: true }\n   * It's more verbose but has more Clarity.\n   *\n   *\n   * @example\n   * *clrDgHideableColumn\n   * *clrDgHideableColumn={hidden: false}\n   * *clrDgHideableColumn={hidden: true}\n   *\n   */\n  @Input('clrDgHideableColumn')\n  set clrDgHideableColumn(value: { hidden: boolean }) {\n    this.clrDgHidden = value && value.hidden ? value.hidden : false;\n  }\n\n  @Input('clrDgHidden')\n  set clrDgHidden(hidden: boolean) {\n    this._hidden = hidden ? hidden : false;\n    this.columnsService.emitStateChange(this.columnState, {\n      hidden: this._hidden,\n      changes: [DatagridColumnChanges.HIDDEN],\n    });\n  }\n\n  @Output('clrDgHiddenChange') public hiddenChange = new EventEmitter<boolean>();\n\n  constructor(\n    private titleTemplateRef: TemplateRef<any>,\n    private viewContainerRef: ViewContainerRef,\n    private columnsService: ColumnsService,\n    @Optional()\n    @Inject(COLUMN_STATE)\n    private columnState: BehaviorSubject<ColumnState>\n  ) {\n    this.viewContainerRef.createEmbeddedView(this.titleTemplateRef);\n\n    if (!this.columnState) {\n      throw new Error('The *clrDgHideableColumn directive can only be used inside of a clr-dg-column component.');\n    }\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnInit() {\n    this.columnsService.emitStateChange(this.columnState, {\n      hideable: true,\n      titleTemplateRef: this.titleTemplateRef,\n      hidden: this._hidden,\n      changes: [DatagridColumnChanges.HIDDEN],\n    });\n\n    this.subscriptions.push(\n      this.columnState.subscribe((state: ColumnState) => {\n        if (state.changes && state.changes.indexOf(DatagridColumnChanges.HIDDEN) > -1) {\n          this.hiddenChange.emit(state.hidden); // Can emit through @Output when desugared syntax is used\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrDgHideableColumn]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrDgHidden",
          "line": 70,
          "type": "boolean"
        },
        {
          "name": "clrDgHideableColumn",
          "line": 65,
          "type": "literal type"
        }
      ],
      "outputsClass": [
        {
          "name": "clrDgHiddenChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "line": 78,
          "type": "EventEmitter"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_hidden",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 48,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 1213,
              "end": 1229,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1213,
                "end": 1214,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1214,
                "end": 1225,
                "flags": 0,
                "escapedText": "description"
              },
              "comment": "<p>Used to initialize the column with either hidden or visible state.</p>\n"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 95,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 114
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 97
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "titleTemplateRef",
            "type": "TemplateRef<any>"
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef"
          },
          {
            "name": "columnsService",
            "type": "ColumnsService"
          },
          {
            "name": "columnState",
            "type": "BehaviorSubject<ColumnState>"
          }
        ],
        "line": 78,
        "jsdoctags": [
          {
            "name": "titleTemplateRef",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnsService",
            "type": "ColumnsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnState",
            "type": "BehaviorSubject<ColumnState>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "clrDgHideableColumn": {
          "name": "clrDgHideableColumn",
          "setSignature": {
            "name": "clrDgHideableColumn",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "literal type"
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "literal type",
                "tagName": {
                  "text": "param"
                }
              },
              {
                "tagName": {
                  "pos": 1595,
                  "end": 1602,
                  "flags": 0,
                  "escapedText": "example"
                },
                "comment":
                  "<p>*clrDgHideableColumn\n*clrDgHideableColumn={hidden: false}\n*clrDgHideableColumn={hidden: true}</p>\n"
              }
            ]
          }
        },
        "clrDgHidden": {
          "name": "clrDgHidden",
          "setSignature": {
            "name": "clrDgHidden",
            "type": "void",
            "args": [
              {
                "name": "hidden",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "hidden",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrDatagridItems",
      "id": "directive-ClrDatagridItems-9901050d1d41aa08a1881a2d79081588",
      "file": "src/clr-angular/data/datagrid/datagrid-items.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { NgForOf, NgForOfContext } from '@angular/common';\nimport {\n  Directive,\n  DoCheck,\n  Input,\n  IterableDiffer,\n  IterableDiffers,\n  TemplateRef,\n  TrackByFunction,\n  ViewContainerRef,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Items } from './providers/items';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[clrDgItems][clrDgItemsOf]',\n})\nexport class ClrDatagridItems<T> implements DoCheck, OnDestroy {\n  private iterableProxy: NgForOf<T>;\n  private _rawItems: T[];\n  private differ: IterableDiffer<T> | null = null;\n  private subscriptions: Subscription[] = [];\n\n  @Input('clrDgItemsOf')\n  public set rawItems(items: T[]) {\n    this._rawItems = items ? items : []; // local copy for ngOnChange diffing\n  }\n\n  @Input('clrDgItemsTrackBy')\n  set trackBy(value: TrackByFunction<T>) {\n    this.iterableProxy.ngForTrackBy = value;\n  }\n\n  constructor(\n    public template: TemplateRef<NgForOfContext<T>>,\n    private differs: IterableDiffers,\n    private items: Items,\n    private vcr: ViewContainerRef\n  ) {\n    items.smartenUp();\n    this.iterableProxy = new NgForOf<T>(this.vcr, this.template, this.differs);\n    this.subscriptions.push(\n      items.change.subscribe(newItems => {\n        this.iterableProxy.ngForOf = newItems;\n        this.iterableProxy.ngDoCheck();\n      })\n    );\n  }\n\n  ngDoCheck() {\n    if (!this.differ) {\n      this.differ = this.differs.find(this._rawItems).create(this.iterableProxy.ngForTrackBy);\n    }\n    if (this.differ) {\n      const changes = this.differ.diff(this._rawItems);\n      if (changes) {\n        // TODO: not very efficient right now,\n        // but premature optimization is the root of all evil.\n        this.items.all = this._rawItems;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrDgItems][clrDgItemsOf]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrDgItemsOf",
          "line": 32,
          "type": "[]"
        },
        {
          "name": "clrDgItemsTrackBy",
          "line": 37,
          "type": ""
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_rawItems",
          "type": "T[]",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [112]
        },
        {
          "name": "differ",
          "defaultValue": "null",
          "type": "IterableDiffer<T> | null",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [112]
        },
        {
          "name": "iterableProxy",
          "type": "NgForOf<T>",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [112]
        },
        {
          "name": "template",
          "type": "TemplateRef<NgForOfContext<T>>",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngDoCheck",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71
        }
      ],
      "implements": ["DoCheck", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "template",
            "type": "TemplateRef<NgForOfContext<T>>"
          },
          {
            "name": "differs",
            "type": "IterableDiffers"
          },
          {
            "name": "items",
            "type": "Items"
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "template",
            "type": "TemplateRef<NgForOfContext<T>>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "differs",
            "type": "IterableDiffers",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "items",
            "type": "Items",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "rawItems": {
          "name": "rawItems",
          "setSignature": {
            "name": "rawItems",
            "type": "void",
            "args": [
              {
                "name": "items",
                "type": "[]"
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "items",
                "type": "[]",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "trackBy": {
          "name": "trackBy",
          "setSignature": {
            "name": "trackBy",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrDatagridItemsTrackBy",
      "id": "directive-ClrDatagridItemsTrackBy-d37b6f72db9fc331e42b17a173297f9f",
      "file": "src/clr-angular/data/datagrid/datagrid-items-trackby.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Input, Optional, TrackByFunction } from '@angular/core';\n\nimport { Items } from './providers/items';\n\n@Directive({\n  selector: '[ngForTrackBy]',\n})\nexport class ClrDatagridItemsTrackBy<T = any> {\n  constructor(@Optional() private _items: Items<T>) {}\n\n  @Input('ngForTrackBy')\n  set trackBy(value: TrackByFunction<T>) {\n    if (this._items) {\n      this._items.trackBy = value;\n    }\n  }\n}\n",
      "selector": "[ngForTrackBy]",
      "providers": [],
      "inputsClass": [
        {
          "name": "ngForTrackBy",
          "line": 17,
          "type": ""
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_items",
            "type": "Items<T>"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "_items",
            "type": "Items<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "trackBy": {
          "name": "trackBy",
          "setSignature": {
            "name": "trackBy",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrDatalist",
      "id": "directive-ClrDatalist-ead201487136f704791fbd540633c4e8",
      "file": "src/clr-angular/forms/datalist/datalist.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Input, Directive, AfterContentInit, Optional } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\nimport { DatalistIdService } from './providers/datalist-id.service';\n\n@Directive({\n  selector: 'datalist',\n  host: {\n    '[id]': 'datalistId',\n  },\n})\nexport class ClrDatalist implements AfterContentInit {\n  private subscriptions: Subscription[] = [];\n  constructor(@Optional() private datalistIdService: DatalistIdService) {}\n  datalistId: string;\n\n  ngAfterContentInit() {\n    if (!this.datalistIdService) {\n      return;\n    }\n    this.subscriptions.push(this.datalistIdService.idChange.subscribe(id => (this.datalistId = id)));\n  }\n  @Input()\n  set id(idValue) {\n    if (!!idValue && this.datalistIdService) {\n      this.datalistId = idValue;\n      this.datalistIdService.id = idValue;\n    } else if (!!idValue) {\n      this.datalistId = idValue;\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "datalist",
      "providers": [],
      "inputsClass": [
        {
          "name": "id",
          "line": 30
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "datalistId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39
        }
      ],
      "implements": ["AfterContentInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "datalistIdService",
            "type": "DatalistIdService"
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "datalistIdService",
            "type": "DatalistIdService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "idValue",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "idValue",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrDatalistInput",
      "id": "directive-ClrDatalistInput-f5cf023e927b02c4ac2abf09a6a23f9f",
      "file": "src/clr-angular/forms/datalist/datalist-input.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  Directive,\n  ViewContainerRef,\n  Injector,\n  Self,\n  Optional,\n  Renderer2,\n  ElementRef,\n  HostListener,\n  AfterContentInit,\n} from '@angular/core';\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { ClrDatalistContainer } from './datalist-container';\nimport { NgControl } from '@angular/forms';\nimport { FocusService } from '../common/providers/focus.service';\nimport { DatalistIdService } from './providers/datalist-id.service';\n\n@Directive({\n  selector: '[clrDatalistInput]',\n  host: {\n    '[class.clr-input]': 'true',\n    '[attr.list]': 'listValue',\n  },\n})\nexport class ClrDatalistInput extends WrappedFormControl<ClrDatalistContainer> implements AfterContentInit {\n  constructor(\n    @Optional() private focusService: FocusService,\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef,\n    private datalistIdService: DatalistIdService\n  ) {\n    super(vcr, ClrDatalistContainer, injector, control, renderer, el);\n\n    if (!this.focusService) {\n      throw new Error('clrDatalist requires being wrapped in <clr-datalist-container>');\n    }\n  }\n\n  listValue: string;\n\n  ngAfterContentInit() {\n    // Subscriptions is inherited from WrappedFormControl, unsubscribe is handled there\n    this.subscriptions.push(this.datalistIdService.idChange.subscribe(id => (this.listValue = id)));\n  }\n\n  @HostListener('focus')\n  triggerFocus() {\n    if (this.focusService) {\n      this.focusService.focused = true;\n    }\n  }\n\n  @HostListener('blur')\n  triggerValidation() {\n    super.triggerValidation();\n    if (this.focusService) {\n      this.focusService.focused = false;\n    }\n  }\n}\n",
      "selector": "[clrDatalistInput]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "blur",
          "args": [],
          "argsDecorator": [],
          "line": 65
        },
        {
          "name": "focus",
          "args": [],
          "argsDecorator": [],
          "line": 58
        }
      ],
      "propertiesClass": [
        {
          "name": "listValue",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 50
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52
        }
      ],
      "implements": ["AfterContentInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "focusService",
            "type": "FocusService"
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "datalistIdService",
            "type": "DatalistIdService"
          }
        ],
        "line": 31,
        "jsdoctags": [
          {
            "name": "focusService",
            "type": "FocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "datalistIdService",
            "type": "DatalistIdService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrDateInput",
      "id": "directive-ClrDateInput-d2547b63467b1ed1cb3e067c70f7ca1a",
      "file": "src/clr-angular/forms/datepicker/date-input.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  PLATFORM_ID,\n  Renderer2,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\nimport { FocusService } from '../common/providers/focus.service';\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { ClrDateContainer } from './date-container';\nimport { DayModel } from './model/day.model';\nimport { DateFormControlService } from './providers/date-form-control.service';\nimport { DateIOService } from './providers/date-io.service';\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { DatepickerEnabledService } from './providers/datepicker-enabled.service';\nimport { DatepickerFocusService } from './providers/datepicker-focus.service';\nimport { datesAreEqual } from './utils/date-utils';\nimport { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';\n\n// There are four ways the datepicker value is set\n// 1. Value set by user typing into text input as a string ex: '01/28/2015'\n// 2. Value set explicitly by Angular Forms APIs as a string ex: '01/28/2015'\n// 3. Value set by user via datepicker UI as a Date Object\n// 4. Value set via `clrDate` input as a Date Object\n\n@Directive({\n  selector: '[clrDate]',\n  host: {\n    '[class.clr-input]': 'true',\n  },\n  providers: [DatepickerFocusService],\n})\nexport class ClrDateInput extends WrappedFormControl<ClrDateContainer> implements OnInit, AfterViewInit, OnDestroy {\n  @Input() placeholder: string;\n  @Output('clrDateChange') dateChange: EventEmitter<Date> = new EventEmitter<Date>(false);\n  @Input('clrDate')\n  set date(date: Date) {\n    if (this.previousDateChange !== date) {\n      this.updateDate(this.getValidDateValueFromDate(date));\n    }\n\n    if (!this.initialClrDateInputValue) {\n      this.initialClrDateInputValue = date;\n    }\n  }\n\n  @Input()\n  set min(dateString: string) {\n    this.dateIOService.setMinDate(dateString);\n  }\n\n  @Input()\n  set max(dateString: string) {\n    this.dateIOService.setMaxDate(dateString);\n  }\n\n  protected index = 1;\n  private initialClrDateInputValue: Date;\n  private previousDateChange: Date;\n\n  constructor(\n    viewContainerRef: ViewContainerRef,\n    injector: Injector,\n    protected el: ElementRef,\n    protected renderer: Renderer2,\n    @Self()\n    @Optional()\n    protected control: NgControl,\n    @Optional() private container: ClrDateContainer,\n    @Optional() private dateIOService: DateIOService,\n    @Optional() private dateNavigationService: DateNavigationService,\n    @Optional() private datepickerEnabledService: DatepickerEnabledService,\n    @Optional() private dateFormControlService: DateFormControlService,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private focusService: FocusService,\n    private datepickerFocusService: DatepickerFocusService\n  ) {\n    super(viewContainerRef, ClrDateContainer, injector, control, renderer, el);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.populateServicesFromContainerComponent();\n\n    this.subscriptions.push(\n      this.listenForUserSelectedDayChanges(),\n      this.listenForControlValueChanges(),\n      this.listenForTouchChanges(),\n      this.listenForDirtyChanges(),\n      this.listenForInputRefocus()\n    );\n  }\n\n  ngAfterViewInit() {\n    // I don't know why I have to do this but after using the new HostWrapping Module I have to delay the processing\n    // of the initial Input set by the user to here. If I do not 2 issues occur:\n    // 1. The Input setter is called before ngOnInit. ngOnInit initializes the services without which the setter fails.\n    // 2. The Renderer doesn't work before ngAfterViewInit (It used to before the new HostWrapping Module for some reason).\n    // I need the renderer to set the value property on the input to make sure that if the user has supplied a Date\n    // input object, we reflect it with the right date on the input field using the IO service. I am not sure if\n    // these are major issues or not but just noting them down here.\n    this.processInitialInputs();\n  }\n\n  @HostListener('focus')\n  setFocusStates() {\n    this.setFocus(true);\n  }\n\n  @HostListener('blur')\n  triggerValidation() {\n    super.triggerValidation();\n    this.setFocus(false);\n  }\n\n  @HostBinding('attr.placeholder')\n  get placeholderText(): string {\n    return this.placeholder ? this.placeholder : this.dateIOService.placeholderText;\n  }\n\n  @HostBinding('attr.type')\n  get inputType(): string {\n    return isPlatformBrowser(this.platformId) && this.usingNativeDatepicker() ? 'date' : 'text';\n  }\n\n  @HostListener('change', ['$event.target'])\n  onValueChange(target: HTMLInputElement) {\n    const validDateValue = this.dateIOService.getDateValueFromDateString(target.value);\n    if (this.usingClarityDatepicker() && validDateValue) {\n      this.updateDate(validDateValue, true);\n    } else if (this.usingNativeDatepicker()) {\n      const [year, month, day] = target.value.split('-');\n      this.updateDate(new Date(+year, +month - 1, +day), true);\n    } else {\n      this.emitDateOutput(null);\n    }\n  }\n\n  @Input('disabled')\n  set disabled(value: boolean | string) {\n    this.dateFormControlService.setDisabled(isBooleanAttributeSet(value));\n  }\n\n  private usingClarityDatepicker() {\n    return this.datepickerEnabledService.isEnabled;\n  }\n\n  private usingNativeDatepicker() {\n    return !this.datepickerEnabledService.isEnabled;\n  }\n\n  private setFocus(focus: boolean) {\n    if (this.focusService) {\n      this.focusService.focused = focus;\n    }\n  }\n\n  private populateServicesFromContainerComponent() {\n    if (!this.container) {\n      this.dateIOService = this.getProviderFromContainer(DateIOService);\n      this.dateNavigationService = this.getProviderFromContainer(DateNavigationService);\n      this.datepickerEnabledService = this.getProviderFromContainer(DatepickerEnabledService);\n      this.dateFormControlService = this.getProviderFromContainer(DateFormControlService);\n    }\n  }\n\n  private processInitialInputs() {\n    if (this.datepickerHasFormControl()) {\n      this.updateDate(this.dateIOService.getDateValueFromDateString(this.control.value));\n    } else {\n      this.updateDate(this.initialClrDateInputValue);\n    }\n  }\n\n  private updateDate(value: Date, setByUserInteraction = false) {\n    const date = this.getValidDateValueFromDate(value);\n\n    if (setByUserInteraction) {\n      this.emitDateOutput(date);\n    } else {\n      this.previousDateChange = date;\n    }\n\n    if (this.dateNavigationService) {\n      this.dateNavigationService.selectedDay = date\n        ? new DayModel(date.getFullYear(), date.getMonth(), date.getDate())\n        : null;\n    }\n\n    this.updateInput(date);\n  }\n\n  private updateInput(date: Date) {\n    if (date) {\n      const dateString = this.dateIOService.toLocaleDisplayFormatString(date);\n      if (this.usingNativeDatepicker()) {\n        // valueAsDate expects UTC, date from input is time-zoned\n        date.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n        this.renderer.setProperty(this.el.nativeElement, 'valueAsDate', date);\n      } else if (this.datepickerHasFormControl() && dateString !== this.control.value) {\n        this.control.control.setValue(dateString);\n      } else {\n        this.renderer.setProperty(this.el.nativeElement, 'value', dateString);\n      }\n    } else {\n      this.renderer.setProperty(this.el.nativeElement, 'value', '');\n    }\n  }\n\n  private getValidDateValueFromDate(date: Date) {\n    if (this.dateIOService) {\n      const dateString = this.dateIOService.toLocaleDisplayFormatString(date);\n      return this.dateIOService.getDateValueFromDateString(dateString);\n    } else {\n      return null;\n    }\n  }\n\n  private emitDateOutput(date: Date) {\n    if (!datesAreEqual(date, this.previousDateChange)) {\n      this.dateChange.emit(date);\n      this.previousDateChange = date;\n    } else if (!date && this.previousDateChange) {\n      this.dateChange.emit(null);\n      this.previousDateChange = null;\n    }\n  }\n\n  private datepickerHasFormControl() {\n    return !!this.control;\n  }\n\n  private listenForControlValueChanges() {\n    return of(this.datepickerHasFormControl())\n      .pipe(\n        filter(hasControl => hasControl),\n        switchMap(() => this.control.valueChanges),\n        // only update date value if not being set by user\n        filter(() => !this.datepickerFocusService.elementIsFocused(this.el.nativeElement))\n      )\n      .subscribe((value: string) => this.updateDate(this.dateIOService.getDateValueFromDateString(value)));\n  }\n\n  private listenForUserSelectedDayChanges() {\n    return this.dateNavigationService.selectedDayChange.subscribe(dayModel => this.updateDate(dayModel.toDate(), true));\n  }\n\n  private listenForTouchChanges() {\n    return this.dateFormControlService.touchedChange\n      .pipe(filter(() => this.datepickerHasFormControl()))\n      .subscribe(() => this.control.control.markAsTouched());\n  }\n\n  private listenForDirtyChanges() {\n    return this.dateFormControlService.dirtyChange\n      .pipe(filter(() => this.datepickerHasFormControl()))\n      .subscribe(() => this.control.control.markAsDirty());\n  }\n\n  private listenForInputRefocus() {\n    return this.dateNavigationService.selectedDayChange\n      .pipe(filter(date => !!date))\n      .subscribe(v => this.datepickerFocusService.focusInput(this.el.nativeElement));\n  }\n}\n",
      "selector": "[clrDate]",
      "providers": [
        {
          "name": "DatepickerFocusService"
        }
      ],
      "inputsClass": [
        {
          "name": "clrDate",
          "line": 60,
          "type": ""
        },
        {
          "name": "disabled",
          "line": 163,
          "type": ""
        },
        {
          "name": "max",
          "line": 76,
          "type": "string"
        },
        {
          "name": "min",
          "line": 71,
          "type": "string"
        },
        {
          "name": "placeholder",
          "line": 57,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "clrDateChange",
          "defaultValue": "new EventEmitter<Date>(false)",
          "line": 58,
          "type": "EventEmitter<Date>"
        }
      ],
      "hostBindings": [
        {
          "name": "attr.placeholder",
          "line": 140,
          "type": "string"
        },
        {
          "name": "attr.type",
          "line": 145,
          "type": "string"
        }
      ],
      "hostListeners": [
        {
          "name": "blur",
          "args": [],
          "argsDecorator": [],
          "line": 134
        },
        {
          "name": "change",
          "args": [
            {
              "name": "target",
              "type": "HTMLInputElement"
            }
          ],
          "argsDecorator": ["$event.target"],
          "line": 150
        },
        {
          "name": "focus",
          "args": [],
          "argsDecorator": [],
          "line": 129
        }
      ],
      "propertiesClass": [
        {
          "name": "index",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [113]
        },
        {
          "name": "initialClrDateInputValue",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [112]
        },
        {
          "name": "previousDateChange",
          "type": "Date",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "datepickerHasFormControl",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 252,
          "modifierKind": [112]
        },
        {
          "name": "emitDateOutput",
          "args": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 242,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getValidDateValueFromDate",
          "args": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 233,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listenForControlValueChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 256,
          "modifierKind": [112]
        },
        {
          "name": "listenForDirtyChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 277,
          "modifierKind": [112]
        },
        {
          "name": "listenForInputRefocus",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 283,
          "modifierKind": [112]
        },
        {
          "name": "listenForTouchChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 271,
          "modifierKind": [112]
        },
        {
          "name": "listenForUserSelectedDayChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 267,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 117
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104
        },
        {
          "name": "populateServicesFromContainerComponent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 181,
          "modifierKind": [112]
        },
        {
          "name": "processInitialInputs",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 190,
          "modifierKind": [112]
        },
        {
          "name": "setFocus",
          "args": [
            {
              "name": "focus",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 175,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "focus",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateDate",
          "args": [
            {
              "name": "value",
              "type": "Date"
            },
            {
              "name": "setByUserInteraction",
              "type": "",
              "defaultValue": "false"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 198,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "value",
              "type": "Date",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "setByUserInteraction",
              "type": "",
              "defaultValue": "false",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateInput",
          "args": [
            {
              "name": "date",
              "type": "Date"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 216,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "usingClarityDatepicker",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 167,
          "modifierKind": [112]
        },
        {
          "name": "usingNativeDatepicker",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 171,
          "modifierKind": [112]
        }
      ],
      "implements": ["OnInit", "AfterViewInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "container",
            "type": "ClrDateContainer"
          },
          {
            "name": "dateIOService",
            "type": "DateIOService"
          },
          {
            "name": "dateNavigationService",
            "type": "DateNavigationService"
          },
          {
            "name": "datepickerEnabledService",
            "type": "DatepickerEnabledService"
          },
          {
            "name": "dateFormControlService",
            "type": "DateFormControlService"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "focusService",
            "type": "FocusService"
          },
          {
            "name": "datepickerFocusService",
            "type": "DatepickerFocusService"
          }
        ],
        "line": 82,
        "jsdoctags": [
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "container",
            "type": "ClrDateContainer",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dateIOService",
            "type": "DateIOService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dateNavigationService",
            "type": "DateNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "datepickerEnabledService",
            "type": "DatepickerEnabledService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dateFormControlService",
            "type": "DateFormControlService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusService",
            "type": "FocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "datepickerFocusService",
            "type": "DatepickerFocusService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "date": {
          "name": "date",
          "setSignature": {
            "name": "date",
            "type": "void",
            "args": [
              {
                "name": "date",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "date",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "min": {
          "name": "min",
          "setSignature": {
            "name": "min",
            "type": "void",
            "args": [
              {
                "name": "dateString",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "dateString",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "max": {
          "name": "max",
          "setSignature": {
            "name": "max",
            "type": "void",
            "args": [
              {
                "name": "dateString",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "dateString",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 163,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrDraggable",
      "id": "directive-ClrDraggable-5bf94c4c3cd4b03f7e929ff48661a5b4",
      "file": "src/clr-angular/utils/drag-and-drop/draggable/draggable.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  AfterContentInit,\n  ComponentFactory,\n  ComponentFactoryResolver,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  OnDestroy,\n  Output,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Input } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DomAdapter } from '../../dom-adapter/dom-adapter';\nimport { ClrDragEvent } from '../drag-event';\nimport { ClrDraggableGhost } from '../draggable-ghost';\nimport { ClrIfDragged } from '../if-dragged';\nimport { DragEventInterface } from '../interfaces/drag-event.interface';\nimport { DragEventListenerService } from '../providers/drag-event-listener.service';\nimport { DragHandleRegistrarService } from '../providers/drag-handle-registrar.service';\nimport { DraggableSnapshotService } from '../providers/draggable-snapshot.service';\nimport { GlobalDragModeService } from '../providers/global-drag-mode.service';\n\n@Directive({\n  selector: '[clrDraggable]',\n  providers: [\n    DragEventListenerService,\n    DragHandleRegistrarService,\n    DraggableSnapshotService,\n    GlobalDragModeService,\n    DomAdapter,\n  ],\n  host: { '[class.draggable]': 'true', '[class.being-dragged]': 'dragOn' },\n})\nexport class ClrDraggable<T> implements AfterContentInit, OnDestroy {\n  private draggableEl: any;\n  private subscriptions: Subscription[] = [];\n  private componentFactory: ComponentFactory<ClrDraggableGhost<T>>;\n  public dragOn: boolean = false;\n\n  constructor(\n    private el: ElementRef,\n    private dragEventListener: DragEventListenerService<T>,\n    private dragHandleRegistrar: DragHandleRegistrarService<T>,\n    private viewContainerRef: ViewContainerRef,\n    private cfr: ComponentFactoryResolver,\n    private injector: Injector,\n    private draggableSnapshot: DraggableSnapshotService<T>,\n    private globalDragMode: GlobalDragModeService\n  ) {\n    this.draggableEl = this.el.nativeElement;\n    this.componentFactory = this.cfr.resolveComponentFactory<ClrDraggableGhost<T>>(ClrDraggableGhost);\n  }\n\n  @ContentChild(ClrIfDragged, { static: false })\n  customGhost: ClrIfDragged<T>;\n\n  @Input('clrDraggable')\n  set dataTransfer(value: T) {\n    this.dragEventListener.dragDataTransfer = value;\n  }\n\n  @Input('clrGroup')\n  set group(value: string | string[]) {\n    this.dragEventListener.group = value;\n  }\n\n  private createDefaultGhost(event: DragEventInterface<T>) {\n    this.draggableSnapshot.capture(this.draggableEl, event);\n    // NOTE: The default ghost element will appear\n    // next to the clrDraggable in the DOM as a sibling element.\n    this.viewContainerRef.createComponent(this.componentFactory, 0, this.injector, [\n      [this.draggableEl.cloneNode(true)],\n    ]);\n  }\n\n  private destroyDefaultGhost() {\n    this.viewContainerRef.clear();\n    this.draggableSnapshot.discard();\n  }\n\n  @Output('clrDragStart') dragStartEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n  @Output('clrDragMove') dragMoveEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n  @Output('clrDragEnd') dragEndEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n\n  ngAfterContentInit() {\n    this.dragHandleRegistrar.defaultHandleEl = this.draggableEl;\n\n    this.subscriptions.push(\n      this.dragEventListener.dragStarted.subscribe((event: DragEventInterface<T>) => {\n        this.globalDragMode.enter();\n        this.dragOn = true;\n        if (!this.customGhost) {\n          this.createDefaultGhost(event);\n        }\n\n        this.dragStartEmitter.emit(new ClrDragEvent(event));\n      })\n    );\n    this.subscriptions.push(\n      this.dragEventListener.dragMoved.subscribe((event: DragEventInterface<T>) => {\n        this.dragMoveEmitter.emit(new ClrDragEvent(event));\n      })\n    );\n    this.subscriptions.push(\n      this.dragEventListener.dragEnded.subscribe((event: DragEventInterface<T>) => {\n        this.globalDragMode.exit();\n        this.dragOn = false;\n        if (!this.customGhost) {\n          this.destroyDefaultGhost();\n        }\n        this.dragEndEmitter.emit(new ClrDragEvent(event));\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    this.dragEventListener.detachDragListeners();\n  }\n}\n",
      "selector": "[clrDraggable]",
      "providers": [
        {
          "name": "DragEventListenerService"
        },
        {
          "name": "DragHandleRegistrarService"
        },
        {
          "name": "DraggableSnapshotService"
        },
        {
          "name": "GlobalDragModeService"
        },
        {
          "name": "DomAdapter"
        }
      ],
      "inputsClass": [
        {
          "name": "clrDraggable",
          "line": 67,
          "type": ""
        },
        {
          "name": "clrGroup",
          "line": 72,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "clrDragEnd",
          "defaultValue": "new EventEmitter()",
          "line": 92,
          "type": "EventEmitter<ClrDragEvent<T>>"
        },
        {
          "name": "clrDragMove",
          "defaultValue": "new EventEmitter()",
          "line": 91,
          "type": "EventEmitter<ClrDragEvent<T>>"
        },
        {
          "name": "clrDragStart",
          "defaultValue": "new EventEmitter()",
          "line": 90,
          "type": "EventEmitter<ClrDragEvent<T>>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "componentFactory",
          "type": "ComponentFactory<ClrDraggableGhost<T>>",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [112]
        },
        {
          "name": "customGhost",
          "type": "ClrIfDragged<T>",
          "optional": false,
          "description": "",
          "line": 64,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrIfDragged, {static: false}"
            }
          ]
        },
        {
          "name": "draggableEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [112]
        },
        {
          "name": "dragOn",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "createDefaultGhost",
          "args": [
            {
              "name": "event",
              "type": "DragEventInterface<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "event",
              "type": "DragEventInterface<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "destroyDefaultGhost",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 125
        }
      ],
      "implements": ["AfterContentInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>"
          },
          {
            "name": "dragHandleRegistrar",
            "type": "DragHandleRegistrarService<T>"
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef"
          },
          {
            "name": "cfr",
            "type": "ComponentFactoryResolver"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "draggableSnapshot",
            "type": "DraggableSnapshotService<T>"
          },
          {
            "name": "globalDragMode",
            "type": "GlobalDragModeService"
          }
        ],
        "line": 47,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dragHandleRegistrar",
            "type": "DragHandleRegistrarService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cfr",
            "type": "ComponentFactoryResolver",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "draggableSnapshot",
            "type": "DraggableSnapshotService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalDragMode",
            "type": "GlobalDragModeService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "dataTransfer": {
          "name": "dataTransfer",
          "setSignature": {
            "name": "dataTransfer",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "group": {
          "name": "group",
          "setSignature": {
            "name": "group",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrDragHandle",
      "id": "directive-ClrDragHandle-b5ea0405f6e8266e5cd96d8c82b10320",
      "file": "src/clr-angular/utils/drag-and-drop/drag-handle.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, OnDestroy, Optional } from '@angular/core';\nimport { DragHandleRegistrarService } from './providers/drag-handle-registrar.service';\n\n@Directive({ selector: '[clrDragHandle]', host: { '[class.drag-handle]': 'true' } })\nexport class ClrDragHandle<T> implements OnDestroy {\n  constructor(private el: ElementRef, @Optional() private dragHandleRegistrar: DragHandleRegistrarService<T>) {\n    if (!this.dragHandleRegistrar) {\n      // ClrDragHandleRegistrar is provided in ClrDraggable so we expect it to be present here\n      // as clrDragHandle is required to be used only inside of a clrDraggable directive.\n      throw new Error('The clrDragHandle directive can only be used inside of a clrDraggable directive.');\n    }\n    this.dragHandleRegistrar.registerCustomHandle(this.el.nativeElement);\n  }\n\n  ngOnDestroy() {\n    this.dragHandleRegistrar.unregisterCustomHandle();\n  }\n}\n",
      "selector": "[clrDragHandle]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "dragHandleRegistrar",
            "type": "DragHandleRegistrarService<T>"
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dragHandleRegistrar",
            "type": "DragHandleRegistrarService<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrDropdownItem",
      "id": "directive-ClrDropdownItem-734bb51045ac55eb975beaefb65130d4",
      "file": "src/clr-angular/popover/dropdown/dropdown-item.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { AfterViewInit, Directive, ElementRef, Input, Renderer2 } from '@angular/core';\n\nimport { ClrDropdown } from './dropdown';\nimport { BASIC_FOCUSABLE_ITEM_PROVIDER } from '../../utils/focus/focusable-item/basic-focusable-item.service';\nimport { FocusableItem } from '../../utils/focus/focusable-item/focusable-item';\nimport { RootDropdownService } from './providers/dropdown.service';\n\n@Directive({\n  selector: '[clrDropdownItem]',\n  host: {\n    '[class.disabled]': 'disabled',\n    '[class.dropdown-item]': 'true',\n    '[attr.role]': '\"menuitem\"',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.disabled]': \"(disabled && setByDeprecatedDisabled)? '' : null\",\n  },\n  providers: [BASIC_FOCUSABLE_ITEM_PROVIDER],\n})\nexport class ClrDropdownItem implements AfterViewInit {\n  constructor(\n    private dropdown: ClrDropdown,\n    private el: ElementRef<HTMLElement>,\n    private _dropdownService: RootDropdownService,\n    private renderer: Renderer2,\n    private focusableItem: FocusableItem\n  ) {}\n\n  private unlisten;\n  public setByDeprecatedDisabled: boolean = false;\n\n  @Input('clrDisabled')\n  set disabled(value: boolean | string) {\n    // Empty string attribute evaluates to false but should disable the item, so we need to add a special case for it.\n    this.focusableItem.disabled = !!value || value === '';\n  }\n\n  get disabled() {\n    return this.focusableItem.disabled;\n  }\n\n  /*\n   * @deprecated since 3.0, remove in 4.0. the presence of this attribute makes it not-focusable in IE11. Use [clrDisabled] input instead.\n   */\n  @Input('disabled')\n  set disabledDeprecated(value: boolean | string) {\n    // Empty string attribute evaluates to false but should disable the item, so we need to add a special case for it.\n    this.focusableItem.disabled = !!value || value === '';\n    this.setByDeprecatedDisabled = true;\n  }\n\n  get disabledDeprecated() {\n    return this.focusableItem.disabled;\n  }\n\n  ngAfterViewInit() {\n    this.unlisten = this.renderer.listen(this.el.nativeElement, 'click', () => this.onDropdownItemClick());\n  }\n\n  onDropdownItemClick(): void {\n    if (this.dropdown.isMenuClosable && !this.el.nativeElement.classList.contains('disabled')) {\n      this._dropdownService.closeMenus();\n    }\n  }\n\n  ngOnDestroy() {\n    this.unlisten();\n  }\n}\n",
      "selector": "[clrDropdownItem]",
      "providers": [
        {
          "name": "BASIC_FOCUSABLE_ITEM_PROVIDER"
        }
      ],
      "inputsClass": [
        {
          "name": "clrDisabled",
          "line": 37,
          "type": ""
        },
        {
          "name": "disabled",
          "line": 50,
          "type": ""
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "setByDeprecatedDisabled",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [114]
        },
        {
          "name": "unlisten",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70
        },
        {
          "name": "onDropdownItemClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64
        }
      ],
      "implements": ["AfterViewInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "dropdown",
            "type": "ClrDropdown"
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>"
          },
          {
            "name": "_dropdownService",
            "type": "RootDropdownService"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "focusableItem",
            "type": "FocusableItem"
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "dropdown",
            "type": "ClrDropdown",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dropdownService",
            "type": "RootDropdownService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusableItem",
            "type": "FocusableItem",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "",
            "returnType": "",
            "line": 42
          }
        },
        "disabledDeprecated": {
          "name": "disabledDeprecated",
          "setSignature": {
            "name": "disabledDeprecated",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledDeprecated",
            "type": "",
            "returnType": "",
            "line": 56
          }
        }
      }
    },
    {
      "name": "ClrDropdownTrigger",
      "id": "directive-ClrDropdownTrigger-30db7083033241df677cbffea990fcde",
      "file": "src/clr-angular/popover/dropdown/dropdown-trigger.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, HostListener } from '@angular/core';\n\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\n\nimport { ClrDropdown } from './dropdown';\nimport { DropdownFocusHandler } from './providers/dropdown-focus-handler.service';\n\n@Directive({\n  // We support both selectors for legacy reasons\n  selector: '[clrDropdownTrigger],[clrDropdownToggle]',\n  host: {\n    '[class.dropdown-toggle]': 'isRootLevelToggle',\n    '[class.dropdown-item]': '!isRootLevelToggle',\n    '[class.expandable]': '!isRootLevelToggle',\n    '[class.active]': 'active',\n    '[attr.aria-haspopup]': '\"menu\"',\n    '[attr.aria-expanded]': 'active',\n  },\n})\nexport class ClrDropdownTrigger {\n  public isRootLevelToggle: boolean = true;\n\n  constructor(\n    dropdown: ClrDropdown,\n    private toggleService: ClrPopoverToggleService,\n    el: ElementRef<HTMLElement>,\n    focusHandler: DropdownFocusHandler\n  ) {\n    // if the containing dropdown has a parent, then this is not the root level one\n    if (dropdown.parent) {\n      this.isRootLevelToggle = false;\n    }\n    focusHandler.trigger = el.nativeElement;\n  }\n\n  get active(): boolean {\n    return this.toggleService.open;\n  }\n\n  @HostListener('click', ['$event'])\n  onDropdownTriggerClick(event: any): void {\n    this.toggleService.toggleWithEvent(event);\n  }\n}\n",
      "selector": "[clrDropdownTrigger],[clrDropdownToggle]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 46
        }
      ],
      "propertiesClass": [
        {
          "name": "isRootLevelToggle",
          "defaultValue": "true",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "dropdown",
            "type": "ClrDropdown"
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>"
          },
          {
            "name": "focusHandler",
            "type": "DropdownFocusHandler"
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "dropdown",
            "type": "ClrDropdown",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef<HTMLElement>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusHandler",
            "type": "DropdownFocusHandler",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "active": {
          "name": "active",
          "getSignature": {
            "name": "active",
            "type": "boolean",
            "returnType": "boolean",
            "line": 41
          }
        }
      }
    },
    {
      "name": "ClrDroppable",
      "id": "directive-ClrDroppable-4787b87ea82c3000ee4fa041482ac595",
      "file": "src/clr-angular/utils/drag-and-drop/droppable/droppable.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DomAdapter } from '../../dom-adapter/dom-adapter';\nimport { ClrDragEvent } from '../drag-event';\nimport { DragEventInterface, DragEventType } from '../interfaces/drag-event.interface';\nimport { ClrDropToleranceInterface } from '../interfaces/drop-tolerance.interface';\nimport { DragAndDropEventBusService } from '../providers/drag-and-drop-event-bus.service';\n\n@Directive({\n  selector: '[clrDroppable]',\n  providers: [DomAdapter],\n  host: { '[class.droppable]': 'true', '[class.draggable-match]': 'isDraggableMatch' },\n})\nexport class ClrDroppable<T> implements OnInit, OnDestroy {\n  private dragStartSubscription: Subscription;\n  private dragMoveSubscription: Subscription;\n  private dragEndSubscription: Subscription;\n\n  private droppableEl: any;\n  private clientRect: ClientRect;\n\n  constructor(\n    private el: ElementRef,\n    private eventBus: DragAndDropEventBusService<T>,\n    private domAdapter: DomAdapter,\n    private renderer: Renderer2\n  ) {\n    this.droppableEl = this.el.nativeElement;\n  }\n\n  isDraggableMatch: boolean = false;\n  private _isDraggableOver: boolean = false;\n\n  set isDraggableOver(value: boolean) {\n    // We need to add/remove this draggable-over class via Renderer2\n    // because isDraggableOver is set outside of NgZone.\n    if (value) {\n      this.renderer.addClass(this.droppableEl, 'draggable-over');\n    } else {\n      this.renderer.removeClass(this.droppableEl, 'draggable-over');\n    }\n    this._isDraggableOver = value;\n  }\n\n  private _group: string | string[];\n\n  @Input('clrGroup')\n  set group(value: string | string[]) {\n    this._group = value;\n  }\n\n  private _dropTolerance: ClrDropToleranceInterface = { top: 0, right: 0, bottom: 0, left: 0 };\n\n  private dropToleranceGenerator(top = 0, right = top, bottom = top, left = right): ClrDropToleranceInterface {\n    return { top, right, bottom, left };\n  }\n\n  @Input('clrDropTolerance')\n  set dropTolerance(value: number | string | ClrDropToleranceInterface) {\n    // If user provides an object here and wants to manipulate/update properties individually,\n    // the object must be immutable as we generate new object based user's given object.\n    if (typeof value === 'number') {\n      this._dropTolerance = this.dropToleranceGenerator(value);\n    } else if (typeof value === 'string') {\n      const toleranceValues = value\n        .trim()\n        .split(/\\s+/)\n        .map(tolerance => parseInt(tolerance, 10));\n      this._dropTolerance = this.dropToleranceGenerator(...toleranceValues);\n    } else if (value) {\n      // The value could be passed in as {left: 20, top: 30 }\n      // In this case, the rest of the direction properties should be 0.\n      // That's why we initialize properties with 0 first, then override with user's given value.\n      this._dropTolerance = { ...this.dropToleranceGenerator(0), ...value };\n    }\n  }\n\n  @Output('clrDragStart') dragStartEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n  @Output('clrDragMove') dragMoveEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n  @Output('clrDragEnd') dragEndEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n  @Output('clrDragLeave') dragLeaveEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n  @Output('clrDragEnter') dragEnterEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n  @Output('clrDrop') dropEmitter: EventEmitter<ClrDragEvent<T>> = new EventEmitter();\n\n  private unsubscribeFrom(subscription: Subscription): void {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n\n  private checkGroupMatch(draggableGroup: string | string[]): boolean {\n    // Both Draggable and Droppable have clrGroup input.\n    // The clrGroup input can be both a string key or array of string keys in Draggable and Droppable.\n\n    // It's not match if Draggable has no defined value assigned to clrGroup, but Droppable has a defined clrGroup.\n    if (!draggableGroup && this._group) {\n      return false;\n    }\n    // The same is true the other way round.\n    if (!this._group && draggableGroup) {\n      return false;\n    }\n\n    // It's match if both Draggable and Droppable have no assigned value for clrGroup.\n    if (!this._group && !draggableGroup) {\n      return true;\n    }\n\n    // It's match if both Draggable and Droppable have simple string keys that are matching.\n    // It's match if Draggable's simple clrGroup key is matching with one of the clrGroup keys of Droppable. The\n    // same is true the other way round.\n    // it's match if one of the clrGroup keys of Droppable is matching with one of the clrGroup keys of Draggable.\n    if (typeof draggableGroup === 'string') {\n      if (typeof this._group === 'string') {\n        return this._group === draggableGroup;\n      } else {\n        return this._group.indexOf(draggableGroup) > -1;\n      }\n    } else {\n      if (typeof this._group === 'string') {\n        return draggableGroup.indexOf(this._group) > -1;\n      } else {\n        return (this._group as string[]).some(groupKey => draggableGroup.indexOf(groupKey) > -1);\n      }\n    }\n  }\n\n  private isInDropArea(point: { pageX: number; pageY: number }): boolean {\n    if (!point) {\n      return false;\n    }\n\n    if (!this.clientRect) {\n      this.clientRect = this.domAdapter.clientRect(this.droppableEl);\n    }\n\n    if (\n      point.pageX >= this.clientRect.left - this._dropTolerance.left &&\n      point.pageX <= this.clientRect.right + this._dropTolerance.right &&\n      point.pageY >= this.clientRect.top - this._dropTolerance.top &&\n      point.pageY <= this.clientRect.bottom + this._dropTolerance.bottom\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private onDragStart(dragStartEvent: DragEventInterface<T>): void {\n    // Check draggable and droppable have a matching group key.\n    this.isDraggableMatch = this.checkGroupMatch(dragStartEvent.group);\n\n    // Subscribe to dragMoved and dragEnded only if draggable and droppable have a matching group key.\n    if (this.isDraggableMatch) {\n      this.dragStartEmitter.emit(new ClrDragEvent(dragStartEvent));\n      this.dragMoveSubscription = this.eventBus.dragMoved.subscribe((dragMoveEvent: DragEventInterface<T>) => {\n        this.onDragMove(dragMoveEvent);\n      });\n      this.dragEndSubscription = this.eventBus.dragEnded.subscribe((dragEndEvent: DragEventInterface<T>) => {\n        this.onDragEnd(dragEndEvent);\n      });\n    }\n  }\n\n  private onDragMove(dragMoveEvent: DragEventInterface<T>): void {\n    const isInDropArea = this.isInDropArea(dragMoveEvent.dropPointPosition);\n    if (!this._isDraggableOver && isInDropArea) {\n      this.isDraggableOver = true;\n      const dragEnterEvent = { ...dragMoveEvent, type: DragEventType.DRAG_ENTER };\n      this.eventBus.broadcast(dragEnterEvent);\n      this.dragEnterEmitter.emit(new ClrDragEvent(dragEnterEvent));\n    } else if (this._isDraggableOver && !isInDropArea) {\n      this.isDraggableOver = false;\n      const dragLeaveEvent = { ...dragMoveEvent, type: DragEventType.DRAG_LEAVE };\n      this.eventBus.broadcast(dragLeaveEvent);\n      this.dragLeaveEmitter.emit(new ClrDragEvent(dragLeaveEvent));\n    }\n\n    this.dragMoveEmitter.emit(new ClrDragEvent(dragMoveEvent));\n  }\n\n  private onDragEnd(dragEndEvent: DragEventInterface<T>): void {\n    if (this._isDraggableOver) {\n      if (dragEndEvent.ghostElement) {\n        // By this point, the draggable ghost component is destroyed,\n        // but the element would be active until its animation completes.\n        // As such, once the ghost is dropped over, we will give it \"dropped\" class.\n\n        // This process cannot be done in the ghost component\n        // because any subscription to the drop event is ineffective or invalid\n        // as the component had been already destroyed.\n        this.renderer.addClass(dragEndEvent.ghostElement, 'dropped');\n      }\n\n      const dropEvent = { ...dragEndEvent, type: DragEventType.DROP };\n      this.eventBus.broadcast(dropEvent);\n      this.dropEmitter.emit(new ClrDragEvent(dropEvent));\n      this.isDraggableOver = false;\n    }\n    this.dragEndEmitter.emit(new ClrDragEvent(dragEndEvent));\n    this.unsubscribeFrom(this.dragMoveSubscription);\n    this.unsubscribeFrom(this.dragEndSubscription);\n    this.isDraggableMatch = false;\n    delete this.clientRect;\n  }\n\n  ngOnInit() {\n    this.dragStartSubscription = this.eventBus.dragStarted.subscribe((dragStartEvent: DragEventInterface<T>) => {\n      this.onDragStart(dragStartEvent);\n    });\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeFrom(this.dragStartSubscription);\n    this.unsubscribeFrom(this.dragMoveSubscription);\n    this.unsubscribeFrom(this.dragEndSubscription);\n  }\n}\n",
      "selector": "[clrDroppable]",
      "providers": [
        {
          "name": "DomAdapter"
        }
      ],
      "inputsClass": [
        {
          "name": "clrDropTolerance",
          "line": 65,
          "type": ""
        },
        {
          "name": "clrGroup",
          "line": 54,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "clrDragEnd",
          "defaultValue": "new EventEmitter()",
          "line": 86,
          "type": "EventEmitter<ClrDragEvent<T>>"
        },
        {
          "name": "clrDragEnter",
          "defaultValue": "new EventEmitter()",
          "line": 88,
          "type": "EventEmitter<ClrDragEvent<T>>"
        },
        {
          "name": "clrDragLeave",
          "defaultValue": "new EventEmitter()",
          "line": 87,
          "type": "EventEmitter<ClrDragEvent<T>>"
        },
        {
          "name": "clrDragMove",
          "defaultValue": "new EventEmitter()",
          "line": 85,
          "type": "EventEmitter<ClrDragEvent<T>>"
        },
        {
          "name": "clrDragStart",
          "defaultValue": "new EventEmitter()",
          "line": 84,
          "type": "EventEmitter<ClrDragEvent<T>>"
        },
        {
          "name": "clrDrop",
          "defaultValue": "new EventEmitter()",
          "line": 89,
          "type": "EventEmitter<ClrDragEvent<T>>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_dropTolerance",
          "defaultValue": "{ top: 0, right: 0, bottom: 0, left: 0 }",
          "type": "ClrDropToleranceInterface",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [112]
        },
        {
          "name": "_group",
          "type": "string | string[]",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [112]
        },
        {
          "name": "_isDraggableOver",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        },
        {
          "name": "clientRect",
          "type": "ClientRect",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [112]
        },
        {
          "name": "dragEndSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        },
        {
          "name": "dragMoveSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        },
        {
          "name": "dragStartSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [112]
        },
        {
          "name": "droppableEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [112]
        },
        {
          "name": "isDraggableMatch",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 37
        }
      ],
      "methodsClass": [
        {
          "name": "checkGroupMatch",
          "args": [
            {
              "name": "draggableGroup",
              "type": "string | string[]"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 97,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "draggableGroup",
              "type": "string | string[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "dropToleranceGenerator",
          "args": [
            {
              "name": "top",
              "type": "number",
              "defaultValue": "0"
            },
            {
              "name": "right",
              "type": "",
              "defaultValue": "top"
            },
            {
              "name": "bottom",
              "type": "",
              "defaultValue": "top"
            },
            {
              "name": "left",
              "type": "",
              "defaultValue": "right"
            }
          ],
          "optional": false,
          "returnType": "ClrDropToleranceInterface",
          "typeParameters": [],
          "line": 60,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "top",
              "type": "number",
              "defaultValue": "0",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "right",
              "type": "",
              "defaultValue": "top",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "bottom",
              "type": "",
              "defaultValue": "top",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "left",
              "type": "",
              "defaultValue": "right",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "isInDropArea",
          "args": [
            {
              "name": "point",
              "type": "literal type"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "point",
              "type": "literal type",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 219
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 213
        },
        {
          "name": "onDragEnd",
          "args": [
            {
              "name": "dragEndEvent",
              "type": "DragEventInterface<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 188,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "dragEndEvent",
              "type": "DragEventInterface<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onDragMove",
          "args": [
            {
              "name": "dragMoveEvent",
              "type": "DragEventInterface<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 171,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "dragMoveEvent",
              "type": "DragEventInterface<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onDragStart",
          "args": [
            {
              "name": "dragStartEvent",
              "type": "DragEventInterface<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 155,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "dragStartEvent",
              "type": "DragEventInterface<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "unsubscribeFrom",
          "args": [
            {
              "name": "subscription",
              "type": "Subscription"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "subscription",
              "type": "Subscription",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["OnInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "eventBus",
            "type": "DragAndDropEventBusService<T>"
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "eventBus",
            "type": "DragAndDropEventBusService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "isDraggableOver": {
          "name": "isDraggableOver",
          "setSignature": {
            "name": "isDraggableOver",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "group": {
          "name": "group",
          "setSignature": {
            "name": "group",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "dropTolerance": {
          "name": "dropTolerance",
          "setSignature": {
            "name": "dropTolerance",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrFocusOnViewInit",
      "id": "directive-ClrFocusOnViewInit-182f503aee36b4075744a73e8e5c1790",
      "file": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Input,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\nimport { FOCUS_ON_VIEW_INIT } from './focus-on-view-init.provider';\n\n/*  This directive is for guiding the document focus to the newly added content when its view is initialized \n    so that assistive technologies can read its content. */\n@Directive({\n  selector: '[clrFocusOnViewInit]',\n})\nexport class ClrFocusOnViewInit implements AfterViewInit {\n  constructor(\n    private el: ElementRef,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject(FOCUS_ON_VIEW_INIT) private focusOnViewInit: boolean,\n    @Inject(DOCUMENT) document: any,\n    private renderer: Renderer2\n  ) {\n    this._isEnabled = this.focusOnViewInit;\n\n    // Angular compiler doesn't understand the type Document\n    // when working out the metadata for injectable parameters,\n    // even though it understands the injection token DOCUMENT\n    // https://github.com/angular/angular/issues/20351\n    this.document = document;\n  }\n\n  private document: Document;\n  private directFocus = true; // true if the element gets focused without need to set tabindex;\n\n  @HostListener('focusout')\n  onFocusout() {\n    if (!this.directFocus) {\n      // manually set attributes and styles should be removed\n      this.renderer.removeAttribute(this.el.nativeElement, 'tabindex');\n      this.renderer.setStyle(this.el.nativeElement, 'outline', null);\n    }\n  }\n\n  private _isEnabled: boolean;\n  @Input('clrFocusOnViewInit')\n  set isEnabled(value: boolean) {\n    if (this.focusOnViewInit && typeof value === 'boolean') {\n      this._isEnabled = value;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.focus();\n  }\n\n  private focus() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    if (!this._isEnabled) {\n      return;\n    }\n    if (this.document && this.document.activeElement !== this.el.nativeElement) {\n      this.el.nativeElement.focus();\n      if (this.document.activeElement !== this.el.nativeElement) {\n        // if it's not directly focused now, it means it was a non-interactive element\n        // so we need to give it a tabindex.\n        this.directFocus = false;\n        this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');\n        this.renderer.setStyle(this.el.nativeElement, 'outline', 'none');\n        this.el.nativeElement.focus();\n      }\n    }\n  }\n}\n",
      "selector": "[clrFocusOnViewInit]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrFocusOnViewInit",
          "line": 56,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "focusout",
          "args": [],
          "argsDecorator": [],
          "line": 46
        }
      ],
      "propertiesClass": [
        {
          "name": "_isEnabled",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112]
        },
        {
          "name": "directFocus",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "document",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62
        }
      ],
      "implements": ["AfterViewInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "focusOnViewInit",
            "type": "boolean"
          },
          {
            "name": "document",
            "type": "any"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          }
        ],
        "line": 25,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusOnViewInit",
            "type": "boolean",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "document",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "isEnabled": {
          "name": "isEnabled",
          "setSignature": {
            "name": "isEnabled",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrForm",
      "id": "directive-ClrForm-d1f070b5e005f41eb33022e3f9f71bea",
      "file": "src/clr-angular/forms/common/form.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  ContentChildren,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  PLATFORM_ID,\n  QueryList,\n  Input,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { LayoutService } from './providers/layout.service';\nimport { MarkControlService } from './providers/mark-control.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ClrLabel } from './label';\nimport { AriaLiveService } from '../../utils/a11y/aria-live.service';\n\n@Directive({\n  selector: '[clrForm]',\n  providers: [LayoutService, MarkControlService, AriaLiveService],\n  host: {\n    '[class.clr-form]': 'true',\n    '[class.clr-form-horizontal]': 'layoutService.isHorizontal()',\n    '[class.clr-form-compact]': 'layoutService.isCompact()',\n  },\n})\nexport class ClrForm {\n  private invalidControls = [];\n\n  @Input('clrLabelSize')\n  set labelSize(size: number) {\n    this.layoutService.labelSize = size;\n  }\n\n  constructor(\n    public layoutService: LayoutService,\n    private markControlService: MarkControlService,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private el: ElementRef,\n    private commonStrings: ClrCommonStringsService,\n    private ariaLiveService: AriaLiveService\n  ) {}\n\n  /** @deprecated since 2.0 */\n  markAsDirty(updateAriaLiveText?: boolean) {\n    this.markAsTouched((updateAriaLiveText = true));\n  }\n\n  // Trying to avoid adding an input and keep this backwards compatible at the same time\n  markAsTouched(updateAriaLiveText?: boolean) {\n    this.markControlService.markAsTouched();\n\n    // I don't think consumers will call this with undefined, null or other values but\n    // want to make sure this only guards against when this is called with false\n    if (updateAriaLiveText !== false && isPlatformBrowser(this.platformId)) {\n      this.invalidControls = Array.from(this.el.nativeElement.querySelectorAll('.ng-invalid'));\n      if (this.invalidControls.length > 0) {\n        this.invalidControls[0].focus();\n        this.updateAriaLive();\n      }\n    }\n  }\n\n  @ContentChildren(ClrLabel, { descendants: true })\n  labels: QueryList<ClrLabel>;\n\n  @HostListener('submit')\n  onFormSubmit() {\n    this.markAsTouched();\n  }\n\n  private updateAriaLive(): void {\n    if (this.invalidControls.length === 0) {\n      return;\n    }\n\n    const errorList = this.labels.filter(label => this.invalidControls.find(control => label.forAttr === control.id));\n\n    this.ariaLiveService.announce(\n      this.commonStrings.parse(this.commonStrings.keys.formErrorSummary, { ERROR_NUMBER: errorList.length.toString() })\n    );\n  }\n}\n",
      "selector": "[clrForm]",
      "providers": [
        {
          "name": "LayoutService"
        },
        {
          "name": "MarkControlService"
        },
        {
          "name": "AriaLiveService"
        }
      ],
      "inputsClass": [
        {
          "name": "clrLabelSize",
          "line": 37,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "submit",
          "args": [],
          "argsDecorator": [],
          "line": 74
        }
      ],
      "propertiesClass": [
        {
          "name": "invalidControls",
          "defaultValue": "[]",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [112]
        },
        {
          "name": "labels",
          "type": "QueryList<ClrLabel>",
          "optional": false,
          "description": "",
          "line": 71,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrLabel, {descendants: true}"
            }
          ]
        },
        {
          "name": "layoutService",
          "type": "LayoutService",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "markAsDirty",
          "args": [
            {
              "name": "updateAriaLiveText",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "description": "",
          "jsdoctags": [
            {
              "name": "updateAriaLiveText",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "markAsTouched",
          "args": [
            {
              "name": "updateAriaLiveText",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56,
          "jsdoctags": [
            {
              "name": "updateAriaLiveText",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateAriaLive",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "modifierKind": [112]
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "markControlService",
            "type": "MarkControlService"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService"
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "markControlService",
            "type": "MarkControlService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "labelSize": {
          "name": "labelSize",
          "setSignature": {
            "name": "labelSize",
            "type": "void",
            "args": [
              {
                "name": "size",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "size",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrIconCustomTag",
      "id": "directive-ClrIconCustomTag-7ebf911d960ab41091883a8d907a9189",
      "file": "src/clr-angular/icon/icon.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\n\n@Directive({ selector: 'clr-icon' })\nexport class ClrIconCustomTag {\n  // No behavior\n  // The only purpose is to \"declare\" the tag in Angular\n}\n",
      "selector": "clr-icon",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ClrIfActive",
      "id": "directive-ClrIfActive-f21abea3f2d1835d898a551bb450c9a5",
      "file": "src/clr-angular/utils/conditional/if-active.directive.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  Directive,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IF_ACTIVE_ID, IfActiveService } from './if-active.service';\n\n@Directive({ selector: '[clrIfActive]' })\n\n/**********\n *\n * @class ClrIfActive\n *\n * @description\n * A structural directive that controls whether or not the associated TemplateRef is instantiated or not.\n * It makes use of a Component instance level service: IfActiveService to maintain state between itself and\n * the component using it in the component template.\n *\n */\nexport class ClrIfActive implements OnDestroy {\n  private subscription: Subscription;\n  private wasActive: boolean = false;\n\n  constructor(\n    private ifActiveService: IfActiveService,\n    @Inject(IF_ACTIVE_ID) private id: number,\n    private template: TemplateRef<any>,\n    private container: ViewContainerRef\n  ) {\n    this.checkAndUpdateView(ifActiveService.current);\n\n    this.subscription = this.ifActiveService.currentChange.subscribe(newCurrentId => {\n      this.checkAndUpdateView(newCurrentId);\n    });\n  }\n\n  private checkAndUpdateView(currentId: number) {\n    const isNowActive = currentId === this.id;\n    // only emit if the new active state is changed since last time.\n    if (isNowActive !== this.wasActive) {\n      this.updateView(isNowActive);\n      this.activeChange.emit(isNowActive);\n      this.wasActive = isNowActive;\n    }\n  }\n\n  /*********\n   *\n   * @description\n   * A setter that updates IfActiveService.active with value.\n   *\n   * @param value\n   */\n  @Input('clrIfActive')\n  public set active(value: boolean) {\n    if (value) {\n      this.ifActiveService.current = this.id;\n    }\n  }\n\n  /**********\n   * @property activeChange\n   *\n   * @description\n   * An event emitter that emits when the active property is set to allow for 2way binding when the directive is\n   * used with de-structured / de-sugared syntax.\n   *\n   */\n  @Output('clrIfActiveChange') activeChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /********\n   *\n   * @description\n   * A getter that returns the current IfActiveService.active value.\n   */\n  public get active() {\n    return this.ifActiveService.current === this.id;\n  }\n\n  /*********\n   *\n   * @description\n   * Function that takes a any value and either created an embedded view for the associated ViewContainerRef or,\n   * Clears all views from the ViewContainerRef\n   * @param value\n   */\n  public updateView(value: boolean) {\n    if (value) {\n      this.container.createEmbeddedView(this.template);\n    } else {\n      this.container.clear();\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n",
      "selector": "[clrIfActive]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrIfActive",
          "description": "<hr>\n",
          "line": 67,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrIfActiveChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "description": "<hr>\n",
          "line": 81,
          "type": "EventEmitter<boolean>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        },
        {
          "name": "wasActive",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "checkAndUpdateView",
          "args": [
            {
              "name": "currentId",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "currentId",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107
        },
        {
          "name": "updateView",
          "args": [
            {
              "name": "value",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "description": "<hr>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2690,
                "end": 2695,
                "flags": 0,
                "escapedText": "value"
              },
              "type": "boolean",
              "tagName": {
                "pos": 2684,
                "end": 2689,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService"
          },
          {
            "name": "id",
            "type": "number"
          },
          {
            "name": "template",
            "type": "TemplateRef<any>"
          },
          {
            "name": "container",
            "type": "ViewContainerRef"
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "container",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "active": {
          "name": "active",
          "setSignature": {
            "name": "active",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 67,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "name": {
                  "pos": 1798,
                  "end": 1803,
                  "flags": 0,
                  "escapedText": "value"
                },
                "type": "boolean",
                "tagName": {
                  "pos": 1792,
                  "end": 1797,
                  "flags": 0,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          "getSignature": {
            "name": "active",
            "type": "",
            "returnType": "",
            "line": 88,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "pos": 2311,
                "end": 2327,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 2311,
                  "end": 2312,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 2312,
                  "end": 2323,
                  "flags": 0,
                  "escapedText": "description"
                },
                "comment": "<p>A getter that returns the current IfActiveService.active value.</p>\n"
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrIfDetail",
      "id": "directive-ClrIfDetail-13e6fdec39369107570d47788352b863",
      "file": "src/clr-angular/data/datagrid/datagrid-if-detail.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DetailService } from './providers/detail.service';\n\n@Directive({\n  selector: '[clrIfDetail]',\n})\nexport class ClrIfDetail implements OnInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  private skip = false; // This keeps us from resetting the input and calling the toggle twice\n\n  @Input('clrIfDetail')\n  set state(model) {\n    if (!this.skip) {\n      this.detailService.toggle(model);\n    }\n    this.skip = false;\n  }\n\n  @Output('clrIfDetailChange') public stateChange = new EventEmitter<any>(null);\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private detailService: DetailService\n  ) {\n    this.detailService.enabled = true;\n  }\n\n  ngOnInit() {\n    this.subscriptions.push(\n      this.detailService.stateChange.subscribe(state => {\n        if (state === true) {\n          this.togglePanel(true);\n        } else {\n          this.togglePanel(false);\n        }\n      })\n    );\n  }\n\n  private togglePanel(showPanel: boolean) {\n    let stateChangeParams = null;\n    this.viewContainer.clear();\n    if (showPanel === true) {\n      this.viewContainer.createEmbeddedView(this.templateRef, { $implicit: this.detailService.state });\n      this.skip = true;\n      stateChangeParams = this.detailService.state;\n    }\n\n    this.stateChange.emit(stateChangeParams);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrIfDetail]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrIfDetail",
          "line": 28
        }
      ],
      "outputsClass": [
        {
          "name": "clrIfDetailChange",
          "defaultValue": "new EventEmitter<any>(null)",
          "line": 35,
          "type": "EventEmitter"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "skip",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45
        },
        {
          "name": "togglePanel",
          "args": [
            {
              "name": "showPanel",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "showPanel",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["OnInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>"
          },
          {
            "name": "viewContainer",
            "type": "ViewContainerRef"
          },
          {
            "name": "detailService",
            "type": "DetailService"
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainer",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "state": {
          "name": "state",
          "setSignature": {
            "name": "state",
            "type": "void",
            "args": [
              {
                "name": "model",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "model",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrIfDragged",
      "id": "directive-ClrIfDragged-293da9badb077b63d24b3b6f540ac3ad",
      "file": "src/clr-angular/utils/drag-and-drop/if-dragged.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, OnDestroy, Optional, SkipSelf, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DragEventInterface } from './interfaces/drag-event.interface';\nimport { DragEventListenerService } from './providers/drag-event-listener.service';\n\n// This structural directive will be used mainly together with `clr-draggable-ghost` directive inside of clrDraggable\n// directive. The directive is responsible for instantiating `clr-draggable-ghost` directive only during dragging so\n// that Angular Change Detection is prevented from running if a component or directive is placed inside of the\n// `clr-draggable-ghost` directive.\n\n@Directive({ selector: '[clrIfDragged]' })\nexport class ClrIfDragged<T> implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n  constructor(\n    private template: TemplateRef<any>,\n    @Optional()\n    @SkipSelf()\n    private container: ViewContainerRef,\n    @Optional() private dragEventListener: DragEventListenerService<T>\n  ) {\n    if (!this.dragEventListener || !this.container) {\n      throw new Error('The *clrIfDragged directive can only be used inside of a clrDraggable directive.');\n    }\n\n    this.subscriptions.push(\n      this.dragEventListener.dragStarted.subscribe((event: DragEventInterface<T>) => {\n        this.container.createEmbeddedView(this.template);\n      })\n    );\n    this.subscriptions.push(\n      this.dragEventListener.dragEnded.subscribe((event: DragEventInterface<T>) => {\n        this.container.clear();\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrIfDragged]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "template",
            "type": "TemplateRef<any>"
          },
          {
            "name": "container",
            "type": "ViewContainerRef"
          },
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>"
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "container",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrIfError",
      "id": "directive-ClrIfError-7ecdfbbe1454c2d0024f9e12f4165647",
      "file": "src/clr-angular/forms/common/if-error/if-error.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Input, Optional, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IfErrorService } from './if-error.service';\nimport { NgControlService } from '../providers/ng-control.service';\nimport { NgControl } from '@angular/forms';\n\n@Directive({ selector: '[clrIfError]' })\nexport class ClrIfError {\n  constructor(\n    @Optional() private ifErrorService: IfErrorService,\n    @Optional() private ngControlService: NgControlService,\n    private template: TemplateRef<any>,\n    private container: ViewContainerRef\n  ) {\n    if (!this.ifErrorService) {\n      throw new Error('clrIfError can only be used within a form control container element like clr-input-container');\n    } else {\n      this.displayError(false);\n    }\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        // If there is a specific error to track, check it, otherwise check overall validity\n        if (this.error && this.control) {\n          this.displayError(this.control.hasError(this.error));\n        } else {\n          this.displayError(invalid);\n        }\n      })\n    );\n  }\n\n  @Input('clrIfError') error: string;\n\n  private subscriptions: Subscription[] = [];\n  private displayed: boolean = false;\n  private control: NgControl;\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  private displayError(invalid: boolean) {\n    if (invalid && !this.displayed) {\n      this.container.createEmbeddedView(this.template);\n      this.displayed = true;\n    } else if (!invalid) {\n      this.container.clear();\n      this.displayed = false;\n    }\n  }\n}\n",
      "selector": "[clrIfError]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrIfError",
          "line": 43,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [112]
        },
        {
          "name": "displayed",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "displayError",
          "args": [
            {
              "name": "invalid",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "invalid",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          },
          {
            "name": "template",
            "type": "TemplateRef<any>"
          },
          {
            "name": "container",
            "type": "ViewContainerRef"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "container",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrIfExpanded",
      "id": "directive-ClrIfExpanded-589bde77a74da3ea03c29311d23973f7",
      "file": "src/clr-angular/utils/conditional/if-expanded.directive.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IfExpandService } from './if-expanded.service';\n\n@Directive({ selector: '[clrIfExpanded]' })\nexport class ClrIfExpanded implements OnInit, OnDestroy {\n  private _expanded: boolean = false;\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input('clrIfExpanded')\n  set expanded(value: boolean) {\n    if (typeof value === 'boolean') {\n      this.expand.expanded = value;\n      this._expanded = value;\n    }\n  }\n\n  @Output('clrIfExpandedChange') expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  constructor(\n    @Optional() private template: TemplateRef<any>,\n    private container: ViewContainerRef,\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private expand: IfExpandService\n  ) {\n    expand.expandable++;\n    this._subscriptions.push(\n      expand.expandChange.subscribe(() => {\n        this.updateView();\n        this.expandedChange.emit(this.expand.expanded);\n      })\n    );\n  }\n\n  /**\n   * Subscriptions to all the services and queries changes\n   */\n  private _subscriptions: Subscription[] = [];\n\n  private updateView() {\n    if (this.expand.expanded && this.container.length !== 0) {\n      return;\n    }\n    if (this.template) {\n      if (this.expand.expanded) {\n        // Should we pass a context? I don't see anything useful to pass right now,\n        // but we can come back to it in the future as a solution for additional features.\n        this.container.createEmbeddedView(this.template);\n      } else {\n        // TODO: Move when we move the animation logic to Datagrid Row Expand\n        // We clear before the animation is over. Not ideal, but doing better would involve a much heavier\n        // process for very little gain. Once Angular animations are dynamic enough, we should be able to\n        // get the optimal behavior.\n        this.container.clear();\n      }\n    } else {\n      try {\n        // If we don't have a template ref, we fallback to a crude display: none for now.\n        if (this.expand.expanded) {\n          this.renderer.setStyle(this.el.nativeElement, 'display', null);\n        } else {\n          this.renderer.setStyle(this.el.nativeElement, 'display', 'none');\n        }\n      } catch (e) {\n        // We catch the case where clrIfExpanded was put on a non-DOM element, and we just do nothing\n      }\n    }\n  }\n\n  ngOnInit() {\n    this.updateView();\n  }\n\n  ngOnDestroy() {\n    this.expand.expandable--;\n    this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrIfExpanded]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrIfExpanded",
          "line": 32,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrIfExpandedChange",
          "defaultValue": "new EventEmitter<boolean>(true)",
          "line": 39,
          "type": "EventEmitter<boolean>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_expanded",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [112]
        },
        {
          "name": "_subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "<p>Subscriptions to all the services and queries changes</p>\n",
          "line": 60,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92
        },
        {
          "name": "updateView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "modifierKind": [112]
        }
      ],
      "implements": ["OnInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "template",
            "type": "TemplateRef<any>"
          },
          {
            "name": "container",
            "type": "ViewContainerRef"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "expand",
            "type": "IfExpandService"
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "container",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expand",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        }
      }
    },
    {
      "name": "ClrIfOpen",
      "id": "directive-ClrIfOpen-8239a0662a54b95481eb5741e4c06cf1",
      "file": "src/clr-angular/utils/conditional/if-open.directive.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, EventEmitter, Input, OnDestroy, Output, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ClrPopoverToggleService } from '../popover/providers/popover-toggle.service';\n\n@Directive({ selector: '[clrIfOpen]' })\n\n/**********\n *\n * @class ClrIfOpen\n *\n * @description\n * A structural directive that controls whether or not the associated TemplateRef is instantiated or not.\n * It makes use of a Component instance level service: ClrPopoverToggleService to maintain state between itself and the component\n * using it in the component template.\n *\n */\nexport class ClrIfOpen implements OnDestroy {\n  private subscription: Subscription;\n\n  /*********\n   *\n   * @description\n   * A setter that updates ClrPopoverToggleService.open with value.\n   *\n   * @param value\n   */\n  @Input('clrIfOpen')\n  public set open(value: boolean) {\n    this.toggleService.open = value;\n  }\n\n  /**********\n   * @property openChange\n   *\n   * @description\n   * An event emitter that emits when the open property is set to allow for 2way binding when the directive is\n   * used with de-structured / de-sugared syntax.\n   */\n  @Output('clrIfOpenChange') openChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /********\n   *\n   * @description\n   * A getter that returns the current ClrPopoverToggleService.open value.\n   *\n   */\n  public get open() {\n    return this.toggleService.open;\n  }\n\n  constructor(\n    private toggleService: ClrPopoverToggleService,\n    private template: TemplateRef<any>,\n    private container: ViewContainerRef\n  ) {\n    this.subscription = this.toggleService.openChange.subscribe(change => {\n      this.updateView(change);\n      this.openChange.emit(change);\n    });\n  }\n\n  /*********\n   *\n   * @description\n   * Function that takes a boolean value and either created an embedded view for the associated ViewContainerRef or,\n   * Clears all views from the ViewContainerRef\n   * @param value\n   */\n  public updateView(value: boolean) {\n    if (value) {\n      this.container.createEmbeddedView(this.template);\n    } else {\n      this.container.clear();\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n",
      "selector": "[clrIfOpen]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrIfOpen",
          "description": "<hr>\n",
          "line": 34,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrIfOpenChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "description": "<hr>\n",
          "line": 45,
          "type": "EventEmitter<boolean>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 24,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83
        },
        {
          "name": "updateView",
          "args": [
            {
              "name": "value",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "description": "<hr>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": {
                "pos": 2182,
                "end": 2187,
                "flags": 0,
                "escapedText": "value"
              },
              "type": "boolean",
              "tagName": {
                "pos": 2176,
                "end": 2181,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "template",
            "type": "TemplateRef<any>"
          },
          {
            "name": "container",
            "type": "ViewContainerRef"
          }
        ],
        "line": 55,
        "jsdoctags": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "container",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "open": {
          "name": "open",
          "setSignature": {
            "name": "open",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 34,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "name": {
                  "pos": 1034,
                  "end": 1039,
                  "flags": 0,
                  "escapedText": "value"
                },
                "type": "boolean",
                "tagName": {
                  "pos": 1028,
                  "end": 1033,
                  "flags": 0,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          "getSignature": {
            "name": "open",
            "type": "",
            "returnType": "",
            "line": 53,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "pos": 1498,
                "end": 1514,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 1498,
                  "end": 1499,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 1499,
                  "end": 1510,
                  "flags": 0,
                  "escapedText": "description"
                },
                "comment": "<p>A getter that returns the current ClrPopoverToggleService.open value.</p>\n"
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrInput",
      "id": "directive-ClrInput-9998a09cdf1422f630907abb047ac7f9",
      "file": "src/clr-angular/forms/input/input.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Optional, ViewContainerRef, Renderer2, ElementRef, Injector, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport { ClrInputContainer } from './input-container';\nimport { WrappedFormControl } from '../common/wrapped-control';\n\n@Directive({ selector: '[clrInput]', host: { '[class.clr-input]': 'true' } })\nexport class ClrInput extends WrappedFormControl<ClrInputContainer> {\n  protected index = 1;\n\n  constructor(\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef\n  ) {\n    super(vcr, ClrInputContainer, injector, control, renderer, el);\n  }\n}\n",
      "selector": "[clrInput]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "index",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [113]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrKeyFocusItem",
      "id": "directive-ClrKeyFocusItem-43036d7a375d86f9c67b1dc0086f38f7",
      "file": "src/clr-angular/utils/focus/key-focus/key-focus-item.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, Inject, PLATFORM_ID, HostBinding } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Directive({\n  selector: '[clrKeyFocusItem]',\n})\nexport class ClrKeyFocusItem {\n  @HostBinding('attr.tabindex') tabIndex = -1;\n\n  get nativeElement() {\n    return this.elementRef.nativeElement;\n  }\n\n  constructor(private elementRef: ElementRef, @Inject(PLATFORM_ID) private platformId: Object) {}\n\n  focus() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.elementRef.nativeElement.focus();\n    }\n  }\n}\n",
      "selector": "[clrKeyFocusItem]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [
        {
          "name": "attr.tabindex",
          "defaultValue": "-1",
          "line": 14
        }
      ],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "focus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "nativeElement": {
          "name": "nativeElement",
          "getSignature": {
            "name": "nativeElement",
            "type": "",
            "returnType": "",
            "line": 16
          }
        }
      }
    },
    {
      "name": "ClrLabel",
      "id": "directive-ClrLabel-fe23d143bae9286c126c448c2a617c05",
      "file": "src/clr-angular/forms/common/label.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, HostBinding, Input, OnDestroy, OnInit, Optional, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ControlIdService } from './providers/control-id.service';\nimport { LayoutService } from './providers/layout.service';\nimport { NgControlService } from './providers/ng-control.service';\n\n@Directive({ selector: 'label' })\nexport class ClrLabel implements OnInit, OnDestroy {\n  constructor(\n    @Optional() private controlIdService: ControlIdService,\n    @Optional() private layoutService: LayoutService,\n    @Optional() private ngControlService: NgControlService,\n    private renderer: Renderer2,\n    private el: ElementRef\n  ) {}\n\n  @HostBinding('attr.for')\n  @Input('for')\n  forAttr: string;\n\n  private subscriptions: Subscription[] = [];\n  private enableGrid = true;\n\n  get labelText(): string {\n    return this.el.nativeElement && this.el.nativeElement.textContent;\n  }\n\n  ngOnInit() {\n    // Only add the clr-control-label if it is inside a control container\n    if (this.controlIdService || this.ngControlService) {\n      this.renderer.addClass(this.el.nativeElement, 'clr-control-label');\n    }\n    // Only set the grid column classes if we are in the right context and if they aren't already set\n    if (\n      this.enableGrid &&\n      this.layoutService &&\n      !this.layoutService.isVertical() &&\n      this.el.nativeElement &&\n      this.el.nativeElement.className.indexOf('clr-col') < 0\n    ) {\n      this.renderer.addClass(this.el.nativeElement, 'clr-col-12');\n      this.renderer.addClass(this.el.nativeElement, `clr-col-md-${this.layoutService.labelSize}`);\n    }\n    if (this.controlIdService && !this.forAttr) {\n      this.subscriptions.push(this.controlIdService.idChange.subscribe(id => (this.forAttr = id)));\n    }\n  }\n\n  disableGrid() {\n    this.enableGrid = false;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "label",
      "providers": [],
      "inputsClass": [
        {
          "name": "for",
          "line": 25,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "enableGrid",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "disableGrid",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34
        }
      ],
      "implements": ["OnInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "controlIdService",
            "type": "ControlIdService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "controlIdService",
            "type": "ControlIdService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "labelText": {
          "name": "labelText",
          "getSignature": {
            "name": "labelText",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        }
      }
    },
    {
      "name": "ClrLayout",
      "id": "directive-ClrLayout-3b72c5f567b566697d7f8667b47807c9",
      "file": "src/clr-angular/forms/common/layout.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Input, OnInit } from '@angular/core';\nimport { Layouts, LayoutService } from './providers/layout.service';\n\n@Directive({\n  selector: '[clrForm][clrLayout]',\n})\nexport class ClrLayout implements OnInit {\n  @Input('clrLayout') layout: Layouts;\n\n  constructor(public layoutService: LayoutService) {}\n\n  ngOnInit() {\n    // Only set the layout if it is a valid option\n    if (this.layout && this.layoutService.isValid(this.layout)) {\n      this.layoutService.layout = this.layout;\n    }\n  }\n}\n",
      "selector": "[clrForm][clrLayout]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrLayout",
          "line": 14,
          "type": "Layouts"
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "layoutService",
          "type": "LayoutService",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18
        }
      ],
      "implements": ["OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "layoutService",
            "type": "LayoutService"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrLoading",
      "id": "directive-ClrLoading-4dbef87e689dd717cd8c58b494969113",
      "file": "src/clr-angular/utils/loading/loading.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Input, OnDestroy, Optional } from '@angular/core';\n\nimport { LoadingListener } from './loading-listener';\n\nexport enum ClrLoadingState {\n  DEFAULT,\n  LOADING,\n  SUCCESS,\n  ERROR,\n}\n\n@Directive({ selector: '[clrLoading]' })\nexport class ClrLoading implements OnDestroy {\n  // We find the first parent that handles something loading\n  constructor(@Optional() private listener: LoadingListener) {}\n\n  private _loadingState: ClrLoadingState = ClrLoadingState.DEFAULT;\n\n  public get loadingState() {\n    return this._loadingState;\n  }\n\n  @Input('clrLoading')\n  public set loadingState(value: boolean | ClrLoadingState) {\n    if (value === true) {\n      value = ClrLoadingState.LOADING;\n    } else if (!value) {\n      value = ClrLoadingState.DEFAULT;\n    }\n\n    if (value === this._loadingState) {\n      return;\n    }\n\n    this._loadingState = value;\n    if (this.listener) {\n      this.listener.loadingStateChange(value);\n    }\n  }\n\n  ngOnDestroy() {\n    this.loadingState = ClrLoadingState.DEFAULT;\n  }\n}\n",
      "selector": "[clrLoading]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrLoading",
          "line": 29,
          "type": ""
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_loadingState",
          "defaultValue": "ClrLoadingState.DEFAULT",
          "type": "ClrLoadingState",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "listener",
            "type": "LoadingListener"
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "listener",
            "type": "LoadingListener",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "loadingState": {
          "name": "loadingState",
          "setSignature": {
            "name": "loadingState",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "loadingState",
            "type": "",
            "returnType": "",
            "line": 24
          }
        }
      }
    },
    {
      "name": "ClrMainContainer",
      "id": "directive-ClrMainContainer-e93bb43271c2c606a1c72863888fc27b",
      "file": "src/clr-angular/layout/main-container/main-container.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ResponsiveNavigationService } from '../nav/providers/responsive-navigation.service';\nimport { ResponsiveNavCodes } from '../nav/responsive-nav-codes';\nimport { ResponsiveNavControlMessage } from '../nav/responsive-nav-control-message';\n\n@Directive({ selector: 'clr-main-container', host: { '[class.main-container]': 'true' } })\nexport class ClrMainContainer implements OnDestroy, OnInit {\n  private _subscription: Subscription;\n  private _classList: DOMTokenList;\n\n  constructor(private elRef: ElementRef, private responsiveNavService: ResponsiveNavigationService) {}\n\n  ngOnInit() {\n    this._classList = this.elRef.nativeElement.classList;\n    this._subscription = this.responsiveNavService.navControl.subscribe({\n      next: (message: ResponsiveNavControlMessage) => {\n        this.processMessage(message);\n      },\n    });\n  }\n\n  processMessage(message: ResponsiveNavControlMessage): void {\n    let navClass: string = ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU;\n    if (message.controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL) {\n      this._classList.remove(ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU);\n      this._classList.remove(ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU);\n    } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n      this.controlNav(message.controlCode, navClass);\n    } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n      navClass = ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU;\n      this.controlNav(message.controlCode, navClass);\n    }\n  }\n\n  controlNav(controlCode: string, navClass: string): void {\n    if (controlCode === ResponsiveNavCodes.NAV_OPEN) {\n      this._classList.add(navClass);\n    } else if (controlCode === ResponsiveNavCodes.NAV_CLOSE) {\n      this._classList.remove(navClass);\n    } else if (controlCode === ResponsiveNavCodes.NAV_TOGGLE) {\n      this._classList.toggle(navClass);\n    }\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\n}\n",
      "selector": "clr-main-container",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_classList",
          "type": "DOMTokenList",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "_subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "controlNav",
          "args": [
            {
              "name": "controlCode",
              "type": "string"
            },
            {
              "name": "navClass",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "jsdoctags": [
            {
              "name": "controlCode",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "navClass",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20
        },
        {
          "name": "processMessage",
          "args": [
            {
              "name": "message",
              "type": "ResponsiveNavControlMessage"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "jsdoctags": [
            {
              "name": "message",
              "type": "ResponsiveNavControlMessage",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["OnDestroy", "OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "elRef",
            "type": "ElementRef"
          },
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "elRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrModalBody",
      "id": "directive-ClrModalBody-4af25e55687c5893a28386e7c14599a7",
      "file": "src/clr-angular/modal/modal-body.ts",
      "type": "directive",
      "description":
        "<p>Allows modal overflow area to be scrollable via keyboard.\nThe modal body will focus with keyboard navigation only.\nThis allows inner focusable items to be focused without\nthe overflow scroll being focused.</p>\n",
      "sourceCode":
        "import { Directive, HostListener } from '@angular/core';\n\n/**\n * Allows modal overflow area to be scrollable via keyboard.\n * The modal body will focus with keyboard navigation only.\n * This allows inner focusable items to be focused without\n * the overflow scroll being focused.\n */\n@Directive({\n  selector: '.modal-body',\n  host: {\n    '[attr.tabindex]': 'tabindex',\n  },\n})\nexport class ClrModalBody {\n  tabindex = 0;\n\n  @HostListener('mousedown')\n  mouseDown() {\n    // tabindex = 0 binding should be removed\n    // so it won't be focused when click starts with mousedown\n    delete this.tabindex;\n  }\n\n  @HostListener('mouseup')\n  mouseUp() {\n    // set the tabindex binding back when click is completed with mouseup\n    this.tabindex = 0;\n  }\n}\n",
      "selector": ".modal-body",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "mousedown",
          "args": [],
          "argsDecorator": [],
          "line": 25
        },
        {
          "name": "mouseup",
          "args": [],
          "argsDecorator": [],
          "line": 32
        }
      ],
      "propertiesClass": [
        {
          "name": "tabindex",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 22
        }
      ],
      "methodsClass": []
    },
    {
      "name": "ClrNavLevel",
      "id": "directive-ClrNavLevel-d45dae9892f8076002014b70a4bd8fb0",
      "file": "src/clr-angular/layout/nav/nav-level.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, HostListener, Input, OnInit } from '@angular/core';\n\nimport { ResponsiveNavigationService } from './providers/responsive-navigation.service';\nimport { ResponsiveNavCodes } from './responsive-nav-codes';\n\n@Directive({ selector: '[clr-nav-level]' })\nexport class ClrNavLevel implements OnInit {\n  @Input('clr-nav-level') _level: number;\n\n  constructor(private responsiveNavService: ResponsiveNavigationService, private elementRef: ElementRef) {}\n\n  ngOnInit() {\n    if (this.level !== ResponsiveNavCodes.NAV_LEVEL_1 && this.level !== ResponsiveNavCodes.NAV_LEVEL_2) {\n      console.error('Nav Level can only be 1 or 2');\n      return;\n    }\n    this.responsiveNavService.registerNav(this.level);\n    this.addNavClass(this.level);\n  }\n\n  addNavClass(level: number) {\n    const navHostClassList = this.elementRef.nativeElement.classList;\n    if (level === ResponsiveNavCodes.NAV_LEVEL_1) {\n      navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_1);\n    } else if (level === ResponsiveNavCodes.NAV_LEVEL_2) {\n      navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_2);\n    }\n  }\n\n  get level(): number {\n    return this._level;\n  }\n\n  // getter to access the responsive navigation codes from the template\n  get responsiveNavCodes(): ResponsiveNavCodes {\n    return ResponsiveNavCodes;\n  }\n\n  open(): void {\n    this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, this.level);\n  }\n\n  close(): void {\n    this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, this.level);\n  }\n\n  // TODO: Figure out whats the best way to do this. Possible methods\n  // 1. HostListener (current solution)\n  // 2. Directives on the .nav-link class. We discussed on moving away from class selectors but I forget the reason\n  // why\n  @HostListener('click', ['$event.target'])\n  onMouseClick(target: any) {\n    let current: any = target; // Get the element in the DOM on which the mouse was clicked\n    const navHost: any = this.elementRef.nativeElement; // Get the current nav native HTML element\n\n    // Start checking if current and navHost are equal.\n    // If not traverse to the parentNode and check again.\n    while (current) {\n      if (current === navHost) {\n        return;\n      } else if (current.classList.contains('nav-link')) {\n        this.close();\n        return;\n      }\n      current = current.parentNode;\n    }\n  }\n\n  ngOnDestroy() {\n    this.responsiveNavService.unregisterNav(this.level);\n  }\n}\n",
      "selector": "[clr-nav-level]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clr-nav-level",
          "line": 13,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [
            {
              "name": "target",
              "type": "any"
            }
          ],
          "argsDecorator": ["$event.target"],
          "line": 57
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "addNavClass",
          "args": [
            {
              "name": "level",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "jsdoctags": [
            {
              "name": "level",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44
        }
      ],
      "implements": ["OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService"
          },
          {
            "name": "elementRef",
            "type": "ElementRef"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elementRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "level": {
          "name": "level",
          "getSignature": {
            "name": "level",
            "type": "number",
            "returnType": "number",
            "line": 35
          }
        },
        "responsiveNavCodes": {
          "name": "responsiveNavCodes",
          "getSignature": {
            "name": "responsiveNavCodes",
            "type": "",
            "returnType": "ResponsiveNavCodes",
            "line": 40
          }
        }
      }
    },
    {
      "name": "ClrPassword",
      "id": "directive-ClrPassword-d295fbf37ad17941a578e0a6a0eeed4e",
      "file": "src/clr-angular/forms/password/password.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n\nimport { ClrPasswordContainer, TOGGLE_SERVICE } from './password-container';\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { FocusService } from '../common/providers/focus.service';\n\n@Directive({ selector: '[clrPassword]', host: { '[class.clr-input]': 'true' } })\nexport class ClrPassword extends WrappedFormControl<ClrPasswordContainer> implements OnInit, OnDestroy {\n  protected index = 1;\n\n  constructor(\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef,\n    @Optional() private focusService: FocusService,\n    @Optional()\n    @Inject(TOGGLE_SERVICE)\n    private toggleService: BehaviorSubject<boolean>\n  ) {\n    super(vcr, ClrPasswordContainer, injector, control, renderer, el);\n\n    if (!this.focusService) {\n      throw new Error('clrPassword requires being wrapped in <clr-password-container>');\n    }\n\n    this.subscriptions.push(\n      this.toggleService.subscribe(toggle => {\n        renderer.setProperty(el.nativeElement, 'type', toggle ? 'text' : 'password');\n      })\n    );\n  }\n\n  @HostListener('focus')\n  triggerFocus() {\n    if (this.focusService) {\n      this.focusService.focused = true;\n    }\n  }\n\n  @HostListener('blur')\n  triggerValidation() {\n    super.triggerValidation();\n    if (this.focusService) {\n      this.focusService.focused = false;\n    }\n  }\n}\n",
      "selector": "[clrPassword]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "blur",
          "args": [],
          "argsDecorator": [],
          "line": 65
        },
        {
          "name": "focus",
          "args": [],
          "argsDecorator": [],
          "line": 58
        }
      ],
      "propertiesClass": [
        {
          "name": "index",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [113]
        }
      ],
      "methodsClass": [],
      "implements": ["OnInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "focusService",
            "type": "FocusService"
          },
          {
            "name": "toggleService",
            "type": "BehaviorSubject<boolean>"
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusService",
            "type": "FocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toggleService",
            "type": "BehaviorSubject<boolean>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrPopoverAnchor",
      "id": "directive-ClrPopoverAnchor-da6b252c968d4c31d89889671d4fc482",
      "file": "src/clr-angular/utils/popover/popover-anchor.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef } from '@angular/core';\nimport { ClrPopoverEventsService } from './providers/popover-events.service';\n\n@Directive({\n  selector: '[clrPopoverAnchor]',\n  host: {\n    '[class.clr-anchor]': 'true',\n  },\n})\nexport class ClrPopoverAnchor {\n  constructor(smartEventService: ClrPopoverEventsService, element: ElementRef) {\n    smartEventService.anchorButtonRef = element;\n  }\n}\n",
      "selector": "[clrPopoverAnchor]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "smartEventService",
            "type": "ClrPopoverEventsService"
          },
          {
            "name": "element",
            "type": "ElementRef"
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "smartEventService",
            "type": "ClrPopoverEventsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "element",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrPopoverCloseButton",
      "id": "directive-ClrPopoverCloseButton-58cf077a37689705f1db504787d4f832",
      "file": "src/clr-angular/utils/popover/popover-close-button.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, EventEmitter, Output, HostListener, OnDestroy, AfterViewInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ClrPopoverEventsService } from './providers/popover-events.service';\nimport { ClrPopoverToggleService } from './providers/popover-toggle.service';\nimport { filter } from 'rxjs/operators';\n\n@Directive({\n  selector: '[clrPopoverCloseButton]',\n  host: {\n    '[class.clr-smart-close-button]': 'true',\n  },\n})\nexport class ClrPopoverCloseButton implements OnDestroy, AfterViewInit {\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private elementRef: ElementRef,\n    private smartEventsService: ClrPopoverEventsService,\n    private smartOpenService: ClrPopoverToggleService\n  ) {\n    this.subscriptions.push(\n      smartOpenService.openChange.pipe(filter(value => !value)).subscribe(() => {\n        this.closeChange.next();\n      })\n    );\n  }\n\n  @Output('clrPopoverOnCloseChange') closeChange: EventEmitter<void> = new EventEmitter<void>();\n\n  @HostListener('click', ['$event'])\n  handleClick(event: MouseEvent) {\n    this.smartOpenService.toggleWithEvent(event);\n    this.smartEventsService.setAnchorFocus();\n  }\n\n  ngAfterViewInit() {\n    this.smartEventsService.closeButtonRef = this.elementRef;\n    this.smartEventsService.setCloseFocus();\n  }\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrPopoverCloseButton]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "clrPopoverOnCloseChange",
          "defaultValue": "new EventEmitter<void>()",
          "line": 35,
          "type": "EventEmitter<void>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 38
        }
      ],
      "propertiesClass": [
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47
        }
      ],
      "implements": ["OnDestroy", "AfterViewInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "elementRef",
            "type": "ElementRef"
          },
          {
            "name": "smartEventsService",
            "type": "ClrPopoverEventsService"
          },
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService"
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "elementRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartEventsService",
            "type": "ClrPopoverEventsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrPopoverContent",
      "id": "directive-ClrPopoverContent-f6cdcfeba1a2921b8813d4a6aad58fa4",
      "file": "src/clr-angular/utils/popover/popover-content.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  Directive,\n  EmbeddedViewRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Renderer2,\n  TemplateRef,\n  ViewContainerRef,\n  AfterContentChecked,\n  EventEmitter,\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\nimport { ClrPopoverToggleService } from './providers/popover-toggle.service';\nimport { ClrPopoverEventsService } from './providers/popover-events.service';\nimport { ClrPopoverPositionService } from './providers/popover-position.service';\nimport { ClrPopoverPosition } from './interfaces/popover-position.interface';\nimport { debounceTime } from 'rxjs/operators';\n\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\n@Directive({ selector: '[clrPopoverContent]' })\nexport class ClrPopoverContent implements AfterContentChecked, OnDestroy {\n  private view: EmbeddedViewRef<void>;\n  private subscriptions: Subscription[] = [];\n\n  @Input('clrPopoverContent')\n  public set open(value: boolean) {\n    this.smartOpenService.open = !!value;\n  }\n\n  @Input('clrPopoverContentAt')\n  set contentAt(position: ClrPopoverPosition) {\n    this.smartPositionService.position = position;\n  }\n\n  @Input('clrPopoverContentOutsideClickToClose')\n  set outsideClickClose(clickToClose) {\n    this.smartEventsService.outsideClickClose = !!clickToClose;\n  }\n\n  @Input('clrPopoverContentScrollToClose')\n  set scrollToClose(scrollToClose) {\n    this.smartEventsService.scrollToClose = !!scrollToClose;\n  }\n\n  constructor(\n    @Inject(DOCUMENT) private document: HTMLDocument,\n    private container: ViewContainerRef,\n    private template: TemplateRef<any>,\n    private renderer: Renderer2,\n    private smartPositionService: ClrPopoverPositionService,\n    private smartEventsService: ClrPopoverEventsService,\n    private smartOpenService: ClrPopoverToggleService\n  ) {}\n\n  ngAfterViewInit() {\n    this.subscriptions.push(\n      this.smartOpenService.openChange.subscribe(change => {\n        if (change) {\n          this.addContent();\n        } else {\n          this.removeContent();\n        }\n      }),\n      this.smartPositionService.shouldRealign.subscribe(() => {\n        this.shouldRealign = true;\n        // Avoid flickering on initialization, caused by the asynchronous nature of the\n        // check-collector pattern.\n        this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '0');\n      }),\n      // Here we collect subsequent synchronously received content-check events and only take action\n      // at the end of the cycle. See below for details on the check-collector pattern.\n      this.checkCollector.pipe(debounceTime(0)).subscribe(() => {\n        this.alignContent();\n        this.shouldRealign = false;\n        this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '1');\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.removeContent();\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  private removeContent(): void {\n    if (!this.view) {\n      return;\n    }\n    this.view.rootNodes.forEach(node => this.renderer.removeChild(this.document.body, node));\n    this.container.clear();\n    delete this.view;\n  }\n\n  /**\n   * TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.\n   * A note about the use of appendChild/removeChild\n   * The DebugElement is keeping a reference to the detached node and its unclear why.\n   * This does warrant further investigation. But, since it doesn't happen in production mode\n   * it is a low priority issue for now.\n   */\n  private addContent() {\n    // Create the view container\n    this.view = this.container.createEmbeddedView(this.template);\n    this.smartEventsService.contentRef = this.view.rootNodes[0]; // So we know where/what to set close focus on\n    this.renderer.addClass(this.view.rootNodes[0], 'clr-popover-content');\n    // Reset to the begining of the document to be available for sizing/positioning calculations.\n    // If we add new content to the bottom it triggers changes in the layout that may lead to false anchor\n    // coordinates values.\n    this.renderer.setStyle(this.view.rootNodes[0], 'top', '0px');\n    this.renderer.setStyle(this.view.rootNodes[0], 'left', '0px');\n    // We need to hide it during the calculation phase, while it's not yet finally positioned.\n    this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '0');\n    this.renderer.listen(this.view.rootNodes[0], 'click', event => {\n      this.smartOpenService.openEvent = event;\n    });\n    this.view.rootNodes.forEach(node => {\n      this.renderer.appendChild(this.document.body, node);\n    });\n    // Mark for realingment on the next content-check cycle.\n    this.shouldRealign = true;\n  }\n\n  private shouldRealign = false;\n\n  // Check-collector pattern:\n  // In order to get accurate content height/width values, we cannot calculate alignment offsets until\n  // after the projected content has stabilized.\n  // As multiple check events may happen in the same rendering cycle, we need to collect all events\n  // and only act after the content is really stable. Or we may get wrong intermediate positioning values.\n  // We will channel subsequent content check events through this observable.\n  private checkCollector: EventEmitter<void> = new EventEmitter();\n\n  ngAfterContentChecked(): void {\n    if (this.smartOpenService.open && this.view && this.shouldRealign) {\n      // Channel content-check event through the check-collector\n      this.checkCollector.emit();\n    }\n  }\n\n  private alignContent() {\n    if (!this.view) {\n      return;\n    }\n    const positionCoords = this.smartPositionService.alignContent(this.view.rootNodes[0]);\n    this.renderer.setStyle(this.view.rootNodes[0], 'top', `${positionCoords.yOffset}px`);\n    this.renderer.setStyle(this.view.rootNodes[0], 'left', `${positionCoords.xOffset}px`);\n  }\n}\n",
      "selector": "[clrPopoverContent]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrPopoverContent",
          "line": 36,
          "type": "boolean"
        },
        {
          "name": "clrPopoverContentAt",
          "line": 41,
          "type": ""
        },
        {
          "name": "clrPopoverContentOutsideClickToClose",
          "line": 46
        },
        {
          "name": "clrPopoverContentScrollToClose",
          "line": 51
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "checkCollector",
          "defaultValue": "new EventEmitter()",
          "type": "EventEmitter<void>",
          "optional": false,
          "description": "",
          "line": 141,
          "modifierKind": [112]
        },
        {
          "name": "shouldRealign",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 133,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        },
        {
          "name": "view",
          "type": "EmbeddedViewRef<void>",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111,
          "description":
            "<p>TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.\nA note about the use of appendChild/removeChild\nThe DebugElement is keeping a reference to the detached node and its unclear why.\nThis does warrant further investigation. But, since it doesn&#39;t happen in production mode\nit is a low priority issue for now.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "alignContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterContentChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 143
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90
        },
        {
          "name": "removeContent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "modifierKind": [112]
        }
      ],
      "jsdoctags": [
        {
          "pos": 922,
          "end": 930,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 922,
            "end": 923,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 923,
            "end": 930,
            "flags": 0,
            "escapedText": "dynamic"
          }
        }
      ],
      "implements": ["AfterContentChecked", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "document",
            "type": "HTMLDocument"
          },
          {
            "name": "container",
            "type": "ViewContainerRef"
          },
          {
            "name": "template",
            "type": "TemplateRef<any>"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "smartPositionService",
            "type": "ClrPopoverPositionService"
          },
          {
            "name": "smartEventsService",
            "type": "ClrPopoverEventsService"
          },
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService"
          }
        ],
        "line": 53,
        "jsdoctags": [
          {
            "name": "document",
            "type": "HTMLDocument",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "container",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "template",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartPositionService",
            "type": "ClrPopoverPositionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartEventsService",
            "type": "ClrPopoverEventsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "open": {
          "name": "open",
          "setSignature": {
            "name": "open",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "contentAt": {
          "name": "contentAt",
          "setSignature": {
            "name": "contentAt",
            "type": "void",
            "args": [
              {
                "name": "position",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "position",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "outsideClickClose": {
          "name": "outsideClickClose",
          "setSignature": {
            "name": "outsideClickClose",
            "type": "void",
            "args": [
              {
                "name": "clickToClose",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "clickToClose",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "scrollToClose": {
          "name": "scrollToClose",
          "setSignature": {
            "name": "scrollToClose",
            "type": "void",
            "args": [
              {
                "name": "scrollToClose",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "scrollToClose",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrPopoverOpenCloseButton",
      "id": "directive-ClrPopoverOpenCloseButton-f90e60cead7d503372b1c33e8a6ff6c6",
      "file": "src/clr-angular/utils/popover/popover-open-close-button.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, EventEmitter, HostListener, OnDestroy, Output } from '@angular/core';\nimport { ClrPopoverToggleService } from './providers/popover-toggle.service';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[clrPopoverOpenCloseButton]',\n  host: {\n    '[class.clr-smart-open-close]': 'true',\n  },\n})\nexport class ClrPopoverOpenCloseButton implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  constructor(private smartOpenService: ClrPopoverToggleService) {\n    this.subscriptions.push(\n      this.smartOpenService.openChange.subscribe(change => {\n        this.openCloseChange.next(change);\n      })\n    );\n  }\n\n  @Output('clrPopoverOpenCloseChange') openCloseChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  @HostListener('click', ['$event'])\n  handleClick(event: MouseEvent) {\n    this.smartOpenService.toggleWithEvent(event);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrPopoverOpenCloseButton]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "clrPopoverOpenCloseChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "line": 29,
          "type": "EventEmitter<boolean>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 32
        }
      ],
      "propertiesClass": [
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService"
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "smartOpenService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrRadio",
      "id": "directive-ClrRadio-8f6126dbc40062cd58b29bb678a839af",
      "file": "src/clr-angular/forms/radio/radio.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, Injector, Optional, Renderer2, Self, ViewContainerRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { ClrRadioWrapper } from '../radio/radio-wrapper';\n\n@Directive({ selector: '[clrRadio]' })\nexport class ClrRadio extends WrappedFormControl<ClrRadioWrapper> {\n  constructor(\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef\n  ) {\n    super(vcr, ClrRadioWrapper, injector, control, renderer, el);\n  }\n}\n",
      "selector": "[clrRadio]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrRange",
      "id": "directive-ClrRange-50e36b8ddaab3dbeb9b1b059d6609340",
      "file": "src/clr-angular/forms/range/range.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Optional, ViewContainerRef, Renderer2, ElementRef, Injector, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { ClrRangeContainer } from './range-container';\n\n@Directive({ selector: '[clrRange]', host: { '[class.clr-range]': 'true' } })\nexport class ClrRange extends WrappedFormControl<ClrRangeContainer> {\n  constructor(\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef\n  ) {\n    super(vcr, ClrRangeContainer, injector, control, renderer, el);\n  }\n\n  // Notes: We need an output here EventEmitter for the value\n  // Does this implementation also need a display for the value?\n}\n",
      "selector": "[clrRange]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrRecursiveForOf",
      "id": "directive-ClrRecursiveForOf-b795d7e0e01b982c61ed8a58012cd83a",
      "file": "src/clr-angular/data/tree-view/recursive-for-of.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Input, OnChanges, OnDestroy, TemplateRef } from '@angular/core';\nimport { TreeFeaturesService } from './tree-features.service';\nimport { RecursiveTreeNodeModel } from './models/recursive-tree-node.model';\nimport { TreeNodeModel } from './models/tree-node.model';\nimport { AsyncArray } from './models/async-array';\nimport { Subscription } from 'rxjs';\n\nexport interface ClrRecursiveForOfContext<T> {\n  $implicit: T;\n  clrModel: TreeNodeModel<T>;\n}\n\n@Directive({ selector: '[clrRecursiveFor][clrRecursiveForOf]' })\nexport class ClrRecursiveForOf<T> implements OnChanges, OnDestroy {\n  constructor(\n    private template: TemplateRef<ClrRecursiveForOfContext<T>>,\n    private featuresService: TreeFeaturesService<T>,\n    private cdr: ChangeDetectorRef\n  ) {}\n\n  // TODO: accept NgIterable<T>\n  @Input('clrRecursiveForOf') nodes: T | T[];\n\n  // TODO: accept NgIterable<T> return type\n  @Input('clrRecursiveForGetChildren') getChildren: (node: T) => AsyncArray<T>;\n\n  private childrenFetchSubscription: Subscription;\n\n  // I'm using OnChanges instead of OnInit to easily keep up to date with dynamic trees. Maybe optimizable later.\n  ngOnChanges() {\n    let wrapped: RecursiveTreeNodeModel<T>[];\n    if (Array.isArray(this.nodes)) {\n      wrapped = this.nodes.map(node => new RecursiveTreeNodeModel(node, null, this.getChildren, this.featuresService));\n    } else {\n      wrapped = [new RecursiveTreeNodeModel(this.nodes, null, this.getChildren, this.featuresService)];\n    }\n    if (!this.childrenFetchSubscription) {\n      this.childrenFetchSubscription = this.featuresService.childrenFetched.subscribe(() => {\n        this.cdr.detectChanges();\n      });\n    }\n\n    this.featuresService.recursion = {\n      template: this.template,\n      root: wrapped,\n    };\n  }\n\n  ngOnDestroy() {\n    if (this.childrenFetchSubscription) {\n      this.childrenFetchSubscription.unsubscribe();\n    }\n  }\n}\n",
      "selector": "[clrRecursiveFor][clrRecursiveForOf]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrRecursiveForGetChildren",
          "line": 31,
          "type": "function"
        },
        {
          "name": "clrRecursiveForOf",
          "line": 28,
          "type": "T | T[]"
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "childrenFetchSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55
        }
      ],
      "implements": ["OnChanges", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "template",
            "type": "TemplateRef<ClrRecursiveForOfContext<T>>"
          },
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>"
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "template",
            "type": "TemplateRef<ClrRecursiveForOfContext<T>>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrSelect",
      "id": "directive-ClrSelect-9cdbd576e891c362fb253a5aee4c1b7d",
      "file": "src/clr-angular/forms/select/select.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ViewContainerRef, Renderer2, ElementRef, Injector, Optional, Self } from '@angular/core';\n\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { ClrSelectContainer } from './select-container';\nimport { NgControl } from '@angular/forms';\n\n@Directive({ selector: '[clrSelect]', host: { '[class.clr-select]': 'true' } })\nexport class ClrSelect extends WrappedFormControl<ClrSelectContainer> {\n  protected index = 1;\n\n  constructor(\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef\n  ) {\n    super(vcr, ClrSelectContainer, injector, control, renderer, el);\n  }\n}\n",
      "selector": "[clrSelect]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "index",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [113]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrSignpostTrigger",
      "id": "directive-ClrSignpostTrigger-c2cb2784eccfbbe48d750e43e6f090b7",
      "file": "src/clr-angular/popover/signpost/signpost-trigger.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { Directive, ElementRef, HostListener, Inject, OnDestroy, PLATFORM_ID } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { SignpostFocusManager } from './providers/signpost-focus-manager.service';\nimport { SignpostIdService } from './providers/signpost-id.service';\n\n@Directive({\n  selector: '[clrSignpostTrigger]',\n  host: {\n    class: 'signpost-trigger',\n    '[attr.aria-label]': 'commonStrings.keys.signpostToggle',\n    '[attr.aria-expanded]': 'ariaExpanded',\n    '[attr.aria-controls]': 'ariaControl',\n    '[class.active]': 'isOpen',\n  },\n})\n\n/*********\n *\n * @description\n * A Directive added to the ClrSignpost Trigger button that will call the ClrSignpost.toggle() function to hide/show the\n * ClrSignpostContent.\n *\n */\nexport class ClrSignpostTrigger implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  public ariaExpanded: boolean;\n  public ariaControl: string;\n  public isOpen: boolean;\n\n  private document: Document;\n\n  constructor(\n    private toggleService: ClrPopoverToggleService,\n    private el: ElementRef,\n    public commonStrings: ClrCommonStringsService,\n    private signpostIdService: SignpostIdService,\n    private signpostFocusManager: SignpostFocusManager,\n    @Inject(DOCUMENT) document: any,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    this.document = document;\n  }\n\n  ngOnInit() {\n    this.signpostFocusManager.triggerEl = this.el.nativeElement;\n    this.subscriptions.push(\n      this.toggleService.openChange.subscribe((isOpen: boolean) => {\n        this.ariaExpanded = isOpen;\n\n        const prevIsOpen = this.isOpen;\n        this.isOpen = isOpen;\n\n        // openChange fires false on initialization because signpost starts as closed by default\n        // but we shouldn't focus on that initial false value\n        // we should focus back only if it's closed after being opened\n        if (!this.isOpen && prevIsOpen) {\n          this.focusOnClose();\n        }\n      }),\n      this.signpostIdService.id.subscribe(idChange => (this.ariaControl = idChange))\n    );\n  }\n\n  private focusOnClose() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    // we have to set the focus back on the trigger only if the focus is reset back to the body element\n    // if the focus is on another element, we are not allowed to move that focus back to this trigger again.\n    if (!this.isOpen && this.document.activeElement === this.document.body) {\n      this.signpostFocusManager.focusTrigger();\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n\n  /**********\n   *\n   * @description\n   * click handler for the ClrSignpost trigger button used to hide/show ClrSignpostContent.\n   */\n  @HostListener('click', ['$event'])\n  onSignpostTriggerClick(event: Event): void {\n    this.toggleService.toggleWithEvent(event);\n  }\n}\n",
      "selector": "[clrSignpostTrigger]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [
            {
              "name": "event",
              "type": "Event"
            }
          ],
          "argsDecorator": ["$event"],
          "description": "<hr>\n",
          "line": 94
        }
      ],
      "propertiesClass": [
        {
          "name": "ariaControl",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [114]
        },
        {
          "name": "ariaExpanded",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [114]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 44,
          "modifierKind": [114]
        },
        {
          "name": "document",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [112]
        },
        {
          "name": "isOpen",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "focusOnClose",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "signpostIdService",
            "type": "SignpostIdService"
          },
          {
            "name": "signpostFocusManager",
            "type": "SignpostFocusManager"
          },
          {
            "name": "document",
            "type": "any"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "signpostIdService",
            "type": "SignpostIdService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "signpostFocusManager",
            "type": "SignpostFocusManager",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "document",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrStackContentInput",
      "id": "directive-ClrStackContentInput-f8d27f84f746dd547fc8eea1eb46a2a9",
      "file": "src/clr-angular/data/stack-view/stack-content-input.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Inject } from '@angular/core';\nimport { UNIQUE_ID } from '../../utils/id-generator/id-generator.service';\n\n@Directive({\n  selector: '[clrStackInput]',\n  host: {\n    '[class.clr-input]': 'true',\n    '[attr.aria-labelledby]': 'uniqueId',\n  },\n})\nexport class ClrStackContentInput {\n  constructor(@Inject(UNIQUE_ID) public uniqueId: string) {}\n}\n",
      "selector": "[clrStackInput]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "uniqueId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "uniqueId",
            "type": "string"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "uniqueId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrStackViewCustomTags",
      "id": "directive-ClrStackViewCustomTags-1d306e0631c27669f26b86d82ddeaf47",
      "file": "src/clr-angular/data/stack-view/stack-view-custom-tags.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\n\n@Directive({ selector: 'clr-stack-label, clr-stack-content' })\nexport class ClrStackViewCustomTags {\n  // No behavior\n  // The only purpose is to \"declare\" the tag in Angular\n}\n",
      "selector": "clr-stack-label, clr-stack-content",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ClrStepButton",
      "id": "directive-ClrStepButton-116b9240627943b69f387160cdac18ae",
      "file": "src/clr-angular/accordion/stepper/step-button.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, HostListener, HostBinding, Input, OnInit } from '@angular/core';\n\nimport { StepperService } from './providers/stepper.service';\nimport { ClrStepperPanel } from './stepper-panel';\n\nexport enum ClrStepButtonType {\n  Next = 'next',\n  Submit = 'submit',\n}\n\n@Directive({\n  selector: '[clrStepButton]',\n  host: {\n    '[class.clr-step-button]': 'true',\n    '[class.btn]': 'true',\n    '[type]': \"'button'\",\n  },\n})\nexport class ClrStepButton implements OnInit {\n  @Input('clrStepButton') type: ClrStepButtonType | string = ClrStepButtonType.Next;\n  @HostBinding('class.btn-primary') submitButton = false;\n\n  constructor(private clrStep: ClrStepperPanel, private stepperService: StepperService) {}\n\n  ngOnInit() {\n    this.submitButton = this.type === ClrStepButtonType.Submit;\n  }\n\n  @HostListener('click')\n  navigateToNextPanel() {\n    this.stepperService.navigateToNextPanel(this.clrStep.id, this.clrStep.formGroup.valid);\n  }\n}\n",
      "selector": "[clrStepButton]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrStepButton",
          "defaultValue": "ClrStepButtonType.Next",
          "line": 26,
          "type": "ClrStepButtonType | string"
        }
      ],
      "outputsClass": [],
      "hostBindings": [
        {
          "name": "class.btn-primary",
          "defaultValue": "false",
          "line": 27
        }
      ],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "line": 36
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31
        }
      ],
      "implements": ["OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "clrStep",
            "type": "ClrStepperPanel"
          },
          {
            "name": "stepperService",
            "type": "StepperService"
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "clrStep",
            "type": "ClrStepperPanel",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stepperService",
            "type": "StepperService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrTabLink",
      "id": "directive-ClrTabLink-d9b811d4494c1f4f3643baaa58dfd6e1",
      "file": "src/clr-angular/layout/tabs/tab-link.directive.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  ComponentFactoryResolver,\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport { IF_ACTIVE_ID, IfActiveService } from '../../utils/conditional/if-active.service';\nimport { TemplateRefContainer } from '../../utils/template-ref/template-ref-container';\nimport { TabsService } from './providers/tabs.service';\n\nimport { AriaService } from './providers/aria.service';\nimport { TABS_ID } from './tabs-id.provider';\nimport { TabsLayout } from './enums/tabs-layout.enum';\n\nlet nbTabLinkComponents: number = 0;\n\n@Directive({\n  selector: '[clrTabLink]',\n  host: {\n    '[attr.aria-hidden]': 'false',\n    '[class.btn]': 'true',\n    role: 'tab',\n    type: 'button',\n  },\n})\nexport class ClrTabLink {\n  private _inOverflow: boolean;\n\n  @Input('clrTabLinkInOverflow')\n  set inOverflow(inOverflow) {\n    this._inOverflow = inOverflow;\n  }\n\n  get inOverflow(): boolean {\n    return this._inOverflow && this.tabsService.layout !== TabsLayout.VERTICAL;\n  }\n\n  @HostBinding('class.btn-link')\n  @HostBinding('class.nav-link')\n  get addLinkClasses() {\n    return !this.inOverflow;\n  }\n\n  templateRefContainer: TemplateRefContainer;\n\n  constructor(\n    public ifActiveService: IfActiveService,\n    @Inject(IF_ACTIVE_ID) private id: number,\n    private ariaService: AriaService,\n    public el: ElementRef,\n    private cfr: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    private tabsService: TabsService,\n    @Inject(TABS_ID) public tabsId: number\n  ) {\n    if (!this.tabLinkId) {\n      this.tabLinkId = 'clr-tab-link-' + nbTabLinkComponents++;\n    }\n\n    // Tab links can be rendered in one of two places: in the main area or inside the overflow dropdown menu.\n    // Here, we create a container so that its template can be used to create embeddedView on the fly.\n    // See TabsService's renderView() method and how it's used in Tabs class for an example.\n    const factory = this.cfr.resolveComponentFactory(TemplateRefContainer);\n    this.templateRefContainer = this.viewContainerRef.createComponent(factory, 1, undefined, [\n      [this.el.nativeElement],\n    ]).instance;\n  }\n\n  @HostBinding('attr.aria-controls')\n  get ariaControls(): string {\n    return this.ariaService.ariaControls;\n  }\n\n  get tabLinkId(): string {\n    return this.ariaService.ariaLabelledBy;\n  }\n\n  @HostBinding('id')\n  @Input('id')\n  set tabLinkId(id: string) {\n    this.ariaService.ariaLabelledBy = id;\n  }\n\n  @HostListener('click')\n  activate() {\n    this.ifActiveService.current = this.id;\n  }\n\n  @HostBinding('class.active')\n  @HostBinding('attr.aria-selected')\n  get active() {\n    return this.ifActiveService.current === this.id;\n  }\n}\n",
      "selector": "[clrTabLink]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrTabLinkInOverflow",
          "line": 40
        },
        {
          "name": "id",
          "line": 90,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "hostBindings": [
        {
          "name": "attr.aria-controls",
          "line": 80,
          "type": "string"
        },
        {
          "name": "class.active",
          "line": 101
        },
        {
          "name": "class.btn-link",
          "line": 50
        }
      ],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "line": 95
        }
      ],
      "propertiesClass": [
        {
          "name": "_inOverflow",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [112]
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [114]
        },
        {
          "name": "ifActiveService",
          "type": "IfActiveService",
          "optional": false,
          "description": "",
          "line": 57,
          "modifierKind": [114]
        },
        {
          "name": "tabsId",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 64,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "TABS_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "templateRefContainer",
          "type": "TemplateRefContainer",
          "optional": false,
          "description": "",
          "line": 54
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService"
          },
          {
            "name": "id",
            "type": "number"
          },
          {
            "name": "ariaService",
            "type": "AriaService"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "cfr",
            "type": "ComponentFactoryResolver"
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef"
          },
          {
            "name": "tabsService",
            "type": "TabsService"
          },
          {
            "name": "tabsId",
            "type": "number"
          }
        ],
        "line": 54,
        "jsdoctags": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaService",
            "type": "AriaService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cfr",
            "type": "ComponentFactoryResolver",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainerRef",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tabsService",
            "type": "TabsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tabsId",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "inOverflow": {
          "name": "inOverflow",
          "setSignature": {
            "name": "inOverflow",
            "type": "void",
            "args": [
              {
                "name": "inOverflow",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "inOverflow",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "inOverflow",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "tabLinkId": {
          "name": "tabLinkId",
          "setSignature": {
            "name": "tabLinkId",
            "type": "void",
            "args": [
              {
                "name": "id",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 90,
            "jsdoctags": [
              {
                "name": "id",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "tabLinkId",
            "type": "string",
            "returnType": "string",
            "line": 84
          }
        }
      }
    },
    {
      "name": "ClrTextarea",
      "id": "directive-ClrTextarea-3c5d4fa872f64755f99134be6e844d39",
      "file": "src/clr-angular/forms/textarea/textarea.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ViewContainerRef, Renderer2, ElementRef, Injector, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\n\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { ClrTextareaContainer } from './textarea-container';\n\n@Directive({ selector: '[clrTextarea]', host: { '[class.clr-textarea]': 'true' } })\nexport class ClrTextarea extends WrappedFormControl<ClrTextareaContainer> {\n  protected index = 1;\n\n  constructor(\n    vcr: ViewContainerRef,\n    injector: Injector,\n    @Self()\n    @Optional()\n    control: NgControl,\n    renderer: Renderer2,\n    el: ElementRef\n  ) {\n    super(vcr, ClrTextareaContainer, injector, control, renderer, el);\n  }\n}\n",
      "selector": "[clrTextarea]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "index",
          "defaultValue": "1",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [113]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "control",
            "type": "NgControl"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "control",
            "type": "NgControl",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrTooltipTrigger",
      "id": "directive-ClrTooltipTrigger-23592326c901cee3cbbb3515e64a14d4",
      "file": "src/clr-angular/popover/tooltip/tooltip-trigger.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, HostListener } from '@angular/core';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { TooltipIdService } from './providers/tooltip-id.service';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[clrTooltipTrigger]',\n  host: {\n    tabindex: '0',\n    '[class.tooltip-trigger]': 'true',\n    '[attr.aria-describedby]': 'ariaDescribedBy',\n    '[attr.role]': '\"button\"',\n  },\n})\nexport class ClrTooltipTrigger {\n  public ariaDescribedBy;\n  private subs: Subscription[] = [];\n  constructor(private toggleService: ClrPopoverToggleService, private tooltipIdService: TooltipIdService) {\n    // The aria-described by comes from the id of content. It\n    this.subs.push(this.tooltipIdService.id.subscribe(tooltipId => (this.ariaDescribedBy = tooltipId)));\n  }\n\n  @HostListener('mouseenter')\n  @HostListener('focus')\n  showTooltip(): void {\n    this.toggleService.open = true;\n  }\n\n  @HostListener('mouseleave')\n  @HostListener('blur')\n  hideTooltip(): void {\n    this.toggleService.open = false;\n  }\n\n  ngOnDestroy() {\n    this.subs.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "selector": "[clrTooltipTrigger]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "mouseenter",
          "args": [],
          "argsDecorator": [],
          "line": 31
        },
        {
          "name": "mouseleave",
          "args": [],
          "argsDecorator": [],
          "line": 37
        }
      ],
      "propertiesClass": [
        {
          "name": "ariaDescribedBy",
          "type": "",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [114]
        },
        {
          "name": "subs",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "tooltipIdService",
            "type": "TooltipIdService"
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tooltipIdService",
            "type": "TooltipIdService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrTreeNodeLink",
      "id": "directive-ClrTreeNodeLink-29b37f71603e9f09f03b49ec09ec16ee",
      "file": "src/clr-angular/data/tree-view/tree-node-link.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '.clr-treenode-link',\n})\nexport class ClrTreeNodeLink {\n  constructor(private el: ElementRef) {}\n\n  activate() {\n    if (this.el.nativeElement && this.el.nativeElement.click) {\n      this.el.nativeElement.click();\n    }\n  }\n}\n",
      "selector": ".clr-treenode-link",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "activate",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrVerticalNavIcon",
      "id": "directive-ClrVerticalNavIcon-24800dc3cebe91bf82e5b77f54b2d7c4",
      "file": "src/clr-angular/layout/vertical-nav/vertical-nav-icon.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, OnDestroy } from '@angular/core';\nimport { VerticalNavIconService } from './providers/vertical-nav-icon.service';\n\n@Directive({ selector: '[clrVerticalNavIcon]', host: { class: 'nav-icon' } })\nexport class ClrVerticalNavIcon implements OnDestroy {\n  constructor(private _verticalNavIconService: VerticalNavIconService) {\n    this._verticalNavIconService.registerIcon();\n  }\n\n  ngOnDestroy() {\n    this._verticalNavIconService.unregisterIcon();\n  }\n}\n",
      "selector": "[clrVerticalNavIcon]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_verticalNavIconService",
            "type": "VerticalNavIconService"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "_verticalNavIconService",
            "type": "VerticalNavIconService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrWizardCustomTags",
      "id": "directive-ClrWizardCustomTags-ba4a79282deaac64a85c1631e73cb732",
      "file": "src/clr-angular/wizard/wizard-custom-tags.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\n\n@Directive({ selector: 'clr-wizard-title, clr-wizard-pagetitle' })\nexport class ClrWizardCustomTags {\n  // No behavior\n  // The only purpose is to \"declare\" the tag in Angular\n}\n",
      "selector": "clr-wizard-title, clr-wizard-pagetitle",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ClrWizardPageButtons",
      "id": "directive-ClrWizardPageButtons-5366412d00b5dbd2b554482c498a6c87",
      "file": "src/clr-angular/wizard/wizard-page-buttons.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[clrPageButtons]' })\nexport class ClrWizardPageButtons {\n  constructor(public pageButtonsTemplateRef: TemplateRef<any>) {}\n}\n",
      "selector": "[clrPageButtons]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "pageButtonsTemplateRef",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "pageButtonsTemplateRef",
            "type": "TemplateRef<any>"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "pageButtonsTemplateRef",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrWizardPageHeaderActions",
      "id": "directive-ClrWizardPageHeaderActions-728412ea87200afa88150e1b08d3c2eb",
      "file": "src/clr-angular/wizard/wizard-page-header-actions.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[clrPageHeaderActions]' })\nexport class ClrWizardPageHeaderActions {\n  constructor(public pageHeaderActionsTemplateRef: TemplateRef<any>) {}\n}\n",
      "selector": "[clrPageHeaderActions]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "pageHeaderActionsTemplateRef",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "pageHeaderActionsTemplateRef",
            "type": "TemplateRef<any>"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "pageHeaderActionsTemplateRef",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrWizardPageNavTitle",
      "id": "directive-ClrWizardPageNavTitle-4ba23ae1fd88f38f6257c0e1614c6f05",
      "file": "src/clr-angular/wizard/wizard-page-navtitle.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[clrPageNavTitle]' })\nexport class ClrWizardPageNavTitle {\n  constructor(public pageNavTitleTemplateRef: TemplateRef<any>) {}\n}\n",
      "selector": "[clrPageNavTitle]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "pageNavTitleTemplateRef",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "pageNavTitleTemplateRef",
            "type": "TemplateRef<any>"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "pageNavTitleTemplateRef",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrWizardPageTitle",
      "id": "directive-ClrWizardPageTitle-02f7df5bd15356216d047c9932514e0b",
      "file": "src/clr-angular/wizard/wizard-page-title.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[clrPageTitle]' })\nexport class ClrWizardPageTitle {\n  constructor(public pageTitleTemplateRef: TemplateRef<any>) {}\n}\n",
      "selector": "[clrPageTitle]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "pageTitleTemplateRef",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "pageTitleTemplateRef",
            "type": "TemplateRef<any>"
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "pageTitleTemplateRef",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DatagridCellRenderer",
      "id": "directive-DatagridCellRenderer-2b5800b2554e2c368b3816634bc35e22",
      "file": "src/clr-angular/data/datagrid/render/cell-renderer.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, OnDestroy, Renderer2 } from '@angular/core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { DatagridRenderStep } from '../enums/render-step.enum';\n\nimport { HIDDEN_COLUMN_CLASS, STRICT_WIDTH_CLASS } from './constants';\nimport { DatagridRenderOrganizer } from './render-organizer';\nimport { ColumnState } from '../interfaces/column-state.interface';\nimport { ALL_COLUMN_CHANGES, DatagridColumnChanges } from '../enums/column-changes.enum';\n\n@Directive({ selector: 'clr-dg-cell' })\nexport class DatagridCellRenderer implements OnDestroy {\n  private stateSubscription: Subscription;\n\n  private runAllChanges: DatagridColumnChanges[];\n\n  // @TODO(JEREMY) Work out how to dedupe some of this code between header and cell renderers\n  set columnState(columnState: BehaviorSubject<ColumnState>) {\n    if (this.stateSubscription) {\n      this.stateSubscription.unsubscribe();\n    }\n\n    this.runAllChanges = ALL_COLUMN_CHANGES;\n    this.stateSubscription = columnState.subscribe(state => this.stateChanges(state));\n  }\n\n  constructor(private el: ElementRef, private renderer: Renderer2, organizer: DatagridRenderOrganizer) {\n    this.subscriptions.push(\n      organizer.filterRenderSteps(DatagridRenderStep.CLEAR_WIDTHS).subscribe(() => this.clearWidth())\n    );\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    if (this.stateSubscription) {\n      this.stateSubscription.unsubscribe();\n    }\n  }\n\n  private stateChanges(state: ColumnState) {\n    if (this.runAllChanges) {\n      state.changes = this.runAllChanges;\n      delete this.runAllChanges;\n    }\n    if (state.changes && state.changes.length) {\n      state.changes.forEach(change => {\n        switch (change) {\n          case DatagridColumnChanges.WIDTH:\n            this.setWidth(state);\n            break;\n          case DatagridColumnChanges.HIDDEN:\n            this.setHidden(state);\n            break;\n          default:\n            break;\n        }\n      });\n    }\n  }\n\n  private clearWidth() {\n    this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n    this.renderer.setStyle(this.el.nativeElement, 'width', null);\n  }\n\n  private setWidth(state: ColumnState) {\n    if (state.strictWidth) {\n      this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n    } else {\n      this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n    }\n    this.renderer.setStyle(this.el.nativeElement, 'width', state.width + 'px');\n  }\n\n  private setHidden(state: ColumnState) {\n    if (state.hidden) {\n      this.renderer.addClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n    } else {\n      this.renderer.removeClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n    }\n  }\n}\n",
      "selector": "clr-dg-cell",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "runAllChanges",
          "type": "DatagridColumnChanges[]",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        },
        {
          "name": "stateSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "clearWidth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40
        },
        {
          "name": "setHidden",
          "args": [
            {
              "name": "state",
              "type": "ColumnState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 82,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "state",
              "type": "ColumnState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setWidth",
          "args": [
            {
              "name": "state",
              "type": "ColumnState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "state",
              "type": "ColumnState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "stateChanges",
          "args": [
            {
              "name": "state",
              "type": "ColumnState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "state",
              "type": "ColumnState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer"
          }
        ],
        "line": 30,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "columnState": {
          "name": "columnState",
          "setSignature": {
            "name": "columnState",
            "type": "void",
            "args": [
              {
                "name": "columnState",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "columnState",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "DatagridDetailRegisterer",
      "id": "directive-DatagridDetailRegisterer-2929dec599e66111ececf089668dd5a2",
      "file": "src/clr-angular/data/datagrid/datagrid-detail-registerer.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, Optional } from '@angular/core';\nimport { ExpandableRowsCount } from './providers/global-expandable-rows';\n\n/*\n * I don't think this deserves to be in IfExpanded itself,\n * so I'm adding a second directive on the same selector for now just for the datagrid\n */\n@Directive({ selector: '[clrIfExpanded]' })\nexport class DatagridDetailRegisterer {\n  constructor(@Optional() private expandableRowsCount: ExpandableRowsCount) {\n    if (this.expandableRowsCount) {\n      this.expandableRowsCount.register();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.expandableRowsCount) {\n      this.expandableRowsCount.unregister();\n    }\n  }\n}\n",
      "selector": "[clrIfExpanded]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "expandableRowsCount",
            "type": "ExpandableRowsCount"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "expandableRowsCount",
            "type": "ExpandableRowsCount",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DatagridHeaderRenderer",
      "id": "directive-DatagridHeaderRenderer-05a2de0405977bf3a4e8e09d10b5c298",
      "file": "src/clr-angular/data/datagrid/render/header-renderer.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, EventEmitter, Inject, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';\nimport { DatagridRenderStep } from '../enums/render-step.enum';\nimport { ColumnResizerService } from '../providers/column-resizer.service';\nimport { HIDDEN_COLUMN_CLASS, STRICT_WIDTH_CLASS } from './constants';\nimport { DatagridRenderOrganizer } from './render-organizer';\nimport { ColumnState } from '../interfaces/column-state.interface';\nimport { DatagridColumnChanges } from '../enums/column-changes.enum';\nimport { COLUMN_STATE, COLUMN_STATE_PROVIDER } from '../providers/column-state.provider';\nimport { ColumnsService } from '../providers/columns.service';\n\n@Directive({ selector: 'clr-dg-column', providers: [ColumnResizerService, COLUMN_STATE_PROVIDER] })\nexport class DatagridHeaderRenderer implements OnDestroy {\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private organizer: DatagridRenderOrganizer,\n    private domAdapter: DomAdapter,\n    private columnResizerService: ColumnResizerService,\n    private columnsService: ColumnsService,\n    @Inject(COLUMN_STATE) private columnState: BehaviorSubject<ColumnState>\n  ) {\n    this.subscriptions.push(\n      this.organizer.filterRenderSteps(DatagridRenderStep.CLEAR_WIDTHS).subscribe(() => this.clearWidth())\n    );\n\n    this.subscriptions.push(columnState.subscribe(state => this.stateChanges(state)));\n  }\n\n  @Output('clrDgColumnResize') resizeEmitter: EventEmitter<number> = new EventEmitter();\n\n  /**\n   * Indicates if the column has a strict width, so it doesn't shrink or expand based on the content.\n   */\n  private widthSet: boolean = false;\n  private autoSet: boolean = false;\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  private stateChanges(state: ColumnState) {\n    if (state.changes && state.changes.length) {\n      state.changes.forEach(change => {\n        switch (change) {\n          case DatagridColumnChanges.WIDTH:\n            this.setWidth(state);\n            break;\n          case DatagridColumnChanges.HIDDEN:\n            this.setHidden(state);\n            break;\n          default:\n            break;\n        }\n      });\n    }\n  }\n\n  private clearWidth() {\n    // remove the width only if we set it, and it is not changed by dragging.\n    if (this.widthSet && !this.columnResizerService.resizedBy) {\n      this.renderer.setStyle(this.el.nativeElement, 'width', null);\n    }\n    if (this.autoSet) {\n      this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n    }\n  }\n\n  private detectStrictWidth(): number {\n    if (this.columnResizerService.resizedBy) {\n      return this.columnResizerService.widthAfterResize;\n    } else if (this.autoSet) {\n      return 0;\n    } else {\n      return this.domAdapter.userDefinedWidth(this.el.nativeElement);\n    }\n  }\n\n  private computeWidth(strictWidth: number): number {\n    let width: number = strictWidth;\n    if (!width) {\n      width = this.domAdapter.scrollWidth(this.el.nativeElement);\n    }\n    return width;\n  }\n\n  public getColumnWidthState(): Partial<ColumnState> {\n    const strictWidth = this.detectStrictWidth();\n    return {\n      width: this.computeWidth(strictWidth),\n      strictWidth: strictWidth,\n    };\n  }\n\n  public setColumnState(index: number) {\n    this.columnsService.columns[index] = this.columnState;\n  }\n\n  private setWidth(state: ColumnState) {\n    if (state.strictWidth) {\n      if (this.columnResizerService.resizedBy) {\n        this.resizeEmitter.emit(state.width);\n        this.renderer.setStyle(this.el.nativeElement, 'width', state.width + 'px');\n        this.widthSet = false;\n      }\n      // Don't set width if there is a user-defined one. Just add the strict width class.\n      this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n      this.autoSet = false;\n    } else {\n      this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n      this.renderer.setStyle(this.el.nativeElement, 'width', state.width + 'px');\n      this.widthSet = true;\n      this.autoSet = true;\n    }\n  }\n\n  private setHidden(state: ColumnState) {\n    if (state.hidden) {\n      this.renderer.addClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n    } else {\n      this.renderer.removeClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n    }\n  }\n}\n",
      "selector": "clr-dg-column",
      "providers": [
        {
          "name": "ColumnResizerService"
        },
        {
          "name": "COLUMN_STATE_PROVIDER"
        }
      ],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "clrDgColumnResize",
          "defaultValue": "new EventEmitter()",
          "line": 37,
          "type": "EventEmitter<number>"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "autoSet",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [112]
        },
        {
          "name": "widthSet",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>Indicates if the column has a strict width, so it doesn&#39;t shrink or expand based on the content.</p>\n",
          "line": 42,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "clearWidth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "modifierKind": [112]
        },
        {
          "name": "computeWidth",
          "args": [
            {
              "name": "strictWidth",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 88,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "strictWidth",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "detectStrictWidth",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 78,
          "modifierKind": [112]
        },
        {
          "name": "getColumnWidthState",
          "args": [],
          "optional": false,
          "returnType": "Partial<ColumnState>",
          "typeParameters": [],
          "line": 96,
          "modifierKind": [114]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47
        },
        {
          "name": "setColumnState",
          "args": [
            {
              "name": "index",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "index",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setHidden",
          "args": [
            {
              "name": "state",
              "type": "ColumnState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 126,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "state",
              "type": "ColumnState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setWidth",
          "args": [
            {
              "name": "state",
              "type": "ColumnState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 108,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "state",
              "type": "ColumnState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "stateChanges",
          "args": [
            {
              "name": "state",
              "type": "ColumnState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "state",
              "type": "ColumnState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer"
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          },
          {
            "name": "columnResizerService",
            "type": "ColumnResizerService"
          },
          {
            "name": "columnsService",
            "type": "ColumnsService"
          },
          {
            "name": "columnState",
            "type": "BehaviorSubject<ColumnState>"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnResizerService",
            "type": "ColumnResizerService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnsService",
            "type": "ColumnsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnState",
            "type": "BehaviorSubject<ColumnState>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DatagridMainRenderer",
      "id": "directive-DatagridMainRenderer-73e16bd131b4f78aef5da1f3a1e2c2fe",
      "file": "src/clr-angular/data/datagrid/render/main-renderer.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  AfterViewInit,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  PLATFORM_ID,\n  QueryList,\n  Renderer2,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DatagridRenderStep } from '../enums/render-step.enum';\nimport { Items } from '../providers/items';\nimport { Page } from '../providers/page';\nimport { TableSizeService } from '../providers/table-size.service';\n\nimport { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';\nimport { DatagridHeaderRenderer } from './header-renderer';\nimport { NoopDomAdapter } from './noop-dom-adapter';\nimport { DatagridRenderOrganizer } from './render-organizer';\nimport { ColumnsService } from '../providers/columns.service';\nimport { DatagridColumnChanges } from '../enums/column-changes.enum';\nimport { DatagridRowRenderer } from './row-renderer';\nimport { ColumnStateDiff } from '../interfaces/column-state.interface';\nimport { DetailService } from '../providers/detail.service';\n\n// Fixes build error\n// @dynamic (https://github.com/angular/angular/issues/19698#issuecomment-338340211)\nexport const domAdapterFactory = (platformId: Object) => {\n  if (isPlatformBrowser(platformId)) {\n    return new DomAdapter();\n  } else {\n    return new NoopDomAdapter();\n  }\n};\n\n// Fixes build error\n// @dynamic (https://github.com/angular/angular/issues/19698#issuecomment-338340211)\n@Directive({\n  selector: 'clr-datagrid',\n  providers: [{ provide: DomAdapter, useFactory: domAdapterFactory, deps: [PLATFORM_ID] }],\n})\nexport class DatagridMainRenderer<T = any> implements AfterContentInit, AfterViewInit, AfterViewChecked, OnDestroy {\n  constructor(\n    private organizer: DatagridRenderOrganizer,\n    private items: Items,\n    private page: Page,\n    private domAdapter: DomAdapter,\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private detailService: DetailService,\n    private tableSizeService: TableSizeService,\n    private columnsService: ColumnsService\n  ) {\n    this.subscriptions.push(\n      this.organizer\n        .filterRenderSteps(DatagridRenderStep.COMPUTE_COLUMN_WIDTHS)\n        .subscribe(() => this.computeHeadersWidth())\n    );\n\n    this.subscriptions.push(\n      this.page.sizeChange.subscribe(() => {\n        if (this._heightSet) {\n          this.resetDatagridHeight();\n        }\n      })\n    );\n    this.subscriptions.push(this.detailService.stateChange.subscribe(state => this.toggleDetailPane(state)));\n    this.subscriptions.push(this.items.change.subscribe(() => (this.shouldStabilizeColumns = true)));\n  }\n\n  @ContentChildren(DatagridHeaderRenderer) private headers: QueryList<DatagridHeaderRenderer>;\n  @ContentChildren(DatagridRowRenderer, { descendants: true })\n  private rows: QueryList<DatagridRowRenderer>; // if expandable row is expanded initially, query its cells too.\n\n  ngAfterContentInit() {\n    this.setupColumns();\n\n    this.subscriptions.push(\n      this.headers.changes.subscribe(() => {\n        // TODO: only re-stabilize if a column was added or removed. Reordering is fine.\n        // Need to setup columns before stabalizing them\n        this.setupColumns();\n        this.columnsSizesStable = false;\n        this.stabilizeColumns();\n      })\n    );\n  }\n\n  // Initialize and set Table width for horizontal scrolling here.\n  ngAfterViewInit() {\n    this.tableSizeService.table = this.el;\n  }\n\n  ngAfterViewChecked() {\n    if (this.shouldStabilizeColumns) {\n      this.stabilizeColumns();\n    }\n    if (this.shouldComputeHeight()) {\n      setTimeout(() => {\n        this.computeDatagridHeight();\n      });\n    }\n  }\n\n  private setupColumns() {\n    this.headers.forEach((header, index) => header.setColumnState(index));\n    this.columnsService.columns.splice(this.headers.length); // Trim any old columns\n    this.rows.forEach(row => row.setColumnState());\n  }\n\n  private _heightSet: boolean = false;\n\n  private shouldComputeHeight(): boolean {\n    if (!this._heightSet && this.page.size > 0) {\n      if (this.items.displayed.length === this.page.size) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public toggleDetailPane(state: boolean) {\n    if (this.headers) {\n      if (state && !this.columnsService.hasCache()) {\n        this.columnsService.cache();\n        this.headers.forEach((header, index) => {\n          if (index > 0) {\n            this.columnsService.emitStateChangeAt(index, {\n              changes: [DatagridColumnChanges.HIDDEN],\n              hidden: state,\n            });\n          }\n        });\n      } else if (!state) {\n        this.columnsService.resetToLastCache();\n      }\n    }\n  }\n\n  /**\n   * Computes the height of the datagrid.\n   *\n   * NOTE: We had to choose to set the height instead of the min-height because\n   * IE 11 requires the height on the parent for the children flex grow/shrink properties to work.\n   * When we used min-height, 1 1 auto doesn't used to work in IE11 :-(\n   * But this doesn't affect the fix. It works in both fixed & variable height datagrids.\n   *\n   * Refer: http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0\n   */\n  private computeDatagridHeight() {\n    // IE doesn't return correct value for getComputedStyle(element).getPropertyValue(\"height\")\n    const value: number = this.domAdapter.clientRect(this.el.nativeElement).height;\n    this.renderer.setStyle(this.el.nativeElement, 'height', value + 'px');\n    this._heightSet = true;\n  }\n\n  private resetDatagridHeight() {\n    this.renderer.setStyle(this.el.nativeElement, 'height', '');\n    this._heightSet = false;\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Makes each header compute its width.\n   */\n  private computeHeadersWidth() {\n    const nbColumns: number = this.headers.length;\n    let allStrict = true;\n    this.headers.forEach((header, index) => {\n      // On the last header column check whether all columns have strict widths.\n      // If all columns have strict widths, remove the strict width from the last column and make it the column's\n      // minimum width so that when all previous columns shrink, it will get a flexible width and cover the empty\n      // gap in the Datagrid.\n      const state: ColumnStateDiff = {\n        changes: [DatagridColumnChanges.WIDTH],\n        ...header.getColumnWidthState(),\n      };\n\n      if (!state.strictWidth) {\n        allStrict = false;\n      }\n\n      if (nbColumns === index + 1 && allStrict) {\n        state.strictWidth = 0;\n      }\n\n      this.columnsService.emitStateChangeAt(index, state);\n    });\n  }\n\n  /**\n   * Indicates if we want to re-compute columns width. This should only happen:\n   * 1) When headers change, with columns being added or removed\n   * 2) When rows are lazily loaded for the first time\n   */\n  private columnsSizesStable = false;\n\n  private shouldStabilizeColumns = true;\n\n  /**\n   * Triggers a whole re-rendring cycle to set column sizes, if needed.\n   */\n  private stabilizeColumns() {\n    this.shouldStabilizeColumns = false;\n    if (this.columnsSizesStable) {\n      // Nothing to do.\n      return;\n    }\n    // Resize when the rows are loaded.\n    if (this.items.displayed.length > 0) {\n      this.organizer.resize();\n      this.columnsSizesStable = true;\n    }\n  }\n}\n",
      "selector": "clr-datagrid",
      "providers": [
        {
          "name": "{ provide: DomAdapter, useFactory: domAdapterFactory, deps: [PLATFORM_ID] }"
        }
      ],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_heightSet",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 121,
          "modifierKind": [112]
        },
        {
          "name": "columnsSizesStable",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description":
            "<p>Indicates if we want to re-compute columns width. This should only happen:</p>\n<p>1) When headers change, with columns being added or removed\n2) When rows are lazily loaded for the first time</p>\n",
          "line": 211,
          "modifierKind": [112]
        },
        {
          "name": "headers",
          "type": "QueryList<DatagridHeaderRenderer>",
          "optional": false,
          "description": "",
          "line": 81,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "DatagridHeaderRenderer"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "rows",
          "type": "QueryList<DatagridRowRenderer>",
          "optional": false,
          "description": "",
          "line": 83,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "DatagridRowRenderer, {descendants: true}"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "shouldStabilizeColumns",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 213,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 172,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "computeDatagridHeight",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 160,
          "description":
            "<p>Computes the height of the datagrid.</p>\n<p>NOTE: We had to choose to set the height instead of the min-height because\nIE 11 requires the height on the parent for the children flex grow/shrink properties to work.\nWhen we used min-height, 1 1 auto doesn&#39;t used to work in IE11 :-(\nBut this doesn&#39;t affect the fix. It works in both fixed &amp; variable height datagrids.</p>\n<p>Refer: <a href=\"http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0\">http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0</a></p>\n",
          "modifierKind": [112]
        },
        {
          "name": "computeHeadersWidth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 181,
          "description": "<p>Makes each header compute its width.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 174
        },
        {
          "name": "resetDatagridHeight",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 167,
          "modifierKind": [112]
        },
        {
          "name": "setupColumns",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112]
        },
        {
          "name": "shouldComputeHeight",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 123,
          "modifierKind": [112]
        },
        {
          "name": "stabilizeColumns",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 218,
          "description": "<p>Triggers a whole re-rendring cycle to set column sizes, if needed.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "toggleDetailPane",
          "args": [
            {
              "name": "state",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "state",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["AfterContentInit", "AfterViewInit", "AfterViewChecked", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer"
          },
          {
            "name": "items",
            "type": "Items"
          },
          {
            "name": "page",
            "type": "Page"
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "detailService",
            "type": "DetailService"
          },
          {
            "name": "tableSizeService",
            "type": "TableSizeService"
          },
          {
            "name": "columnsService",
            "type": "ColumnsService"
          }
        ],
        "line": 52,
        "jsdoctags": [
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "items",
            "type": "Items",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "page",
            "type": "Page",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tableSizeService",
            "type": "TableSizeService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnsService",
            "type": "ColumnsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DatagridRowRenderer",
      "id": "directive-DatagridRowRenderer-1a4897b865503f718984a9b84bbdf19f",
      "file": "src/clr-angular/data/datagrid/render/row-renderer.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { AfterContentInit, ContentChildren, Directive, OnDestroy, QueryList } from '@angular/core';\n\nimport { DatagridCellRenderer } from './cell-renderer';\nimport { ColumnsService } from '../providers/columns.service';\nimport { Subscription } from 'rxjs';\n\n@Directive({ selector: 'clr-dg-row, clr-dg-row-detail' })\nexport class DatagridRowRenderer implements AfterContentInit, OnDestroy {\n  @ContentChildren(DatagridCellRenderer) private cells: QueryList<DatagridCellRenderer>;\n\n  constructor(private columnsService: ColumnsService) {}\n\n  ngAfterContentInit() {\n    this.setColumnState(); // case #3 and #4\n    this.subscriptions.push(\n      this.cells.changes.subscribe(() => {\n        this.setColumnState(); // case #2\n        // Note on case #2: In the case of dynamic columns, when one column (header/cell together) gets deleted,\n        // this.cells.changes emits before this.columnsService.columns gets updated in MainRenderer\n        // when this.headers.changes emits as well. So that means there will be n+1 column state providers\n        // when this.cells.changes emits. Hence, we should quit earlier there. But this method will be called\n        // right after again when this.headers.changes emits. By then, there will be the same number of column state\n        // providers as column headers.\n      })\n    );\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  public setColumnState() {\n    // This method runs in four cases:\n    // 1. When the initial rows appear on the first page.\n    //    In this case, the method will be called in DatagridMainRenderer.\n    // 2. When columns (corresponding header/cells) get added and deleted.\n    //    In this case, the method will be called in DatagridMainRenderer. (Read the note on this case above).\n    // 3. When rows load asynchronously.\n    //    In this case, the method will be called in this class.\n    // 4. When rows load after switching pages.\n    //    In this case, the method will be called in this class (Basically, same as the case 3).\n    if (this.cells.length === this.columnsService.columns.length) {\n      this.cells.forEach((cell, index) => {\n        if (this.columnsService.columns[index]) {\n          cell.columnState = this.columnsService.columns[index];\n        }\n      });\n    }\n  }\n}\n",
      "selector": "clr-dg-row, clr-dg-row-detail",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "cells",
          "type": "QueryList<DatagridCellRenderer>",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "DatagridCellRenderer"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35
        },
        {
          "name": "setColumnState",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "modifierKind": [114]
        }
      ],
      "implements": ["AfterContentInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "columnsService",
            "type": "ColumnsService"
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "columnsService",
            "type": "ColumnsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "DatagridWillyWonka",
      "id": "directive-DatagridWillyWonka-e0ce1a24ff1545b3d1a0ea705543b2e0",
      "file": "src/clr-angular/data/datagrid/chocolate/datagrid-willy-wonka.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\nimport { WillyWonka } from '../../../utils/chocolate/willy-wonka';\n\n@Directive({ selector: 'clr-datagrid' })\nexport class DatagridWillyWonka extends WillyWonka {}\n",
      "selector": "clr-datagrid",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "ExpandableOompaLoompa",
      "id": "directive-ExpandableOompaLoompa-96a5e94e13ad45263f990e1395c93241",
      "file": "src/clr-angular/data/datagrid/chocolate/expandable-oompa-loompa.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Optional } from '@angular/core';\nimport { OompaLoompa } from '../../../utils/chocolate/oompa-loompa';\nimport { ExpandableRowsCount } from '../providers/global-expandable-rows';\nimport { DatagridWillyWonka } from './datagrid-willy-wonka';\n\n@Directive({ selector: 'clr-datagrid, clr-dg-row' })\nexport class ExpandableOompaLoompa extends OompaLoompa {\n  private expandableCount: ExpandableRowsCount;\n\n  constructor(\n    cdr: ChangeDetectorRef,\n    @Optional() willyWonka: DatagridWillyWonka,\n    expandableCount: ExpandableRowsCount\n  ) {\n    if (!willyWonka) {\n      throw new Error('clr-dg-row should only be used inside of a clr-datagrid');\n    }\n    super(cdr, willyWonka);\n    this.expandableCount = expandableCount;\n  }\n\n  get flavor() {\n    return this.expandableCount.hasExpandableRow;\n  }\n}\n",
      "selector": "clr-datagrid, clr-dg-row",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "expandableCount",
          "type": "ExpandableRowsCount",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "willyWonka",
            "type": "DatagridWillyWonka"
          },
          {
            "name": "expandableCount",
            "type": "ExpandableRowsCount"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "willyWonka",
            "type": "DatagridWillyWonka",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expandableCount",
            "type": "ExpandableRowsCount",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "flavor": {
          "name": "flavor",
          "getSignature": {
            "name": "flavor",
            "type": "",
            "returnType": "",
            "line": 27
          }
        }
      }
    },
    {
      "name": "FocusTrapDirective",
      "id": "directive-FocusTrapDirective-98a661d3af1b212b79e28762c7ad624c",
      "file": "src/clr-angular/utils/focus-trap/focus-trap.directive.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  PLATFORM_ID,\n  Renderer2,\n} from '@angular/core';\n\nimport { FocusTrapTracker } from './focus-trap-tracker.service';\n\ninterface FocusTrapConfig {\n  strict: boolean;\n}\n\n@Directive({ selector: '[clrFocusTrap]' })\nexport class FocusTrapDirective implements AfterViewInit, OnDestroy {\n  private previousActiveElement: any;\n  private previousTrappedActiveElement: any;\n  private localFocusEscaped = false;\n  private document: Document;\n  private parentElement: Element;\n\n  private topReboundEl: any;\n  private bottomReboundEl: any;\n\n  constructor(\n    private el: ElementRef,\n    private injector: Injector,\n    private focusTrapsTracker: FocusTrapTracker,\n    private renderer: Renderer2,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {\n    this.document = this.injector.get(DOCUMENT);\n    this.focusTrapsTracker.current = this;\n\n    this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0');\n  }\n\n  private _config: FocusTrapConfig = {\n    strict: true,\n  };\n  @Input('clrFocusTrap')\n  set config(config: FocusTrapConfig) {\n    this._config = Object.assign(this._config, config);\n  }\n\n  @HostListener('document:focusin', ['$event'])\n  onFocusIn(event: any) {\n    if (this.focusTrapsTracker.current !== this || !isPlatformBrowser(this.platformId) || this.localFocusEscaped) {\n      return;\n    }\n    const nativeElement: HTMLElement = this.el.nativeElement;\n    if (this._config.strict && event.target && !nativeElement.contains(event.target)) {\n      // When the focus trap is global, always steal focus back if it goes outside\n      nativeElement.focus();\n    } else if (event.target === this.bottomReboundEl && nativeElement.contains(this.previousTrappedActiveElement)) {\n      // When the focus trap is local, if the user navigates via keyboard to the end element from within the trap, move to top\n      nativeElement.focus();\n    } else if (event.target === this.topReboundEl) {\n      // When the focus trap is local, if the user navigates via keyboard back to start element from within the trap, move to bottom\n      // @TODO implement an acceptable solution to SHIFT+TAB navigation\n    } else if (event.target !== nativeElement && !nativeElement.contains(event.target)) {\n      // If a user has escaped the trap using the mouse\n      // relax, don't do it, when you want to go to it, living those dreams, scheme those schemes, hit me with those laser beams\n      this.localFocusEscaped = true;\n    }\n    // Track the last focused item, so we can check\n    this.previousTrappedActiveElement = event.target;\n  }\n\n  private createFocusableOffScreenEl(): any {\n    // Not using Renderer2's createElement method because that leads to DOM leakage.\n    // https://github.com/angular/angular/issues/26954\n    const offScreenSpan = this.document.createElement('span');\n    this.renderer.setAttribute(offScreenSpan, 'tabindex', '0');\n    this.renderer.addClass(offScreenSpan, 'offscreen-focus-rebounder');\n\n    return offScreenSpan;\n  }\n\n  private addReboundEls() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.topReboundEl = this.createFocusableOffScreenEl();\n      this.bottomReboundEl = this.createFocusableOffScreenEl();\n      const hostElement = this.el.nativeElement;\n      // Add reboundBeforeTrapEl right outside of host element\n      this.renderer.insertBefore(hostElement.parentElement, this.topReboundEl, hostElement);\n      // Add reboundAfterTrapEl right after host element\n      if (hostElement.nextSibling) {\n        this.renderer.insertBefore(hostElement.parentNode, this.bottomReboundEl, hostElement.nextSibling);\n      } else {\n        this.renderer.appendChild(hostElement.parentNode, this.bottomReboundEl);\n      }\n    }\n  }\n\n  private removeReboundEls() {\n    if (isPlatformBrowser(this.platformId) && this.topReboundEl && this.bottomReboundEl) {\n      this.parentElement.removeChild(this.topReboundEl);\n      this.parentElement.removeChild(this.bottomReboundEl);\n      // These are here to to make sure that\n      // we completely delete all traces of the removed DOM objects.\n      delete this.topReboundEl;\n      delete this.bottomReboundEl;\n    }\n  }\n\n  public setPreviousFocus(): void {\n    if (this.previousActiveElement && this.previousActiveElement.focus) {\n      this.previousActiveElement.focus();\n    }\n  }\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.previousActiveElement = <HTMLElement>this.document.activeElement;\n      this.parentElement = this.el.nativeElement.parentElement;\n    }\n\n    this.addReboundEls();\n  }\n\n  ngOnDestroy() {\n    this.removeReboundEls();\n    this.setPreviousFocus();\n    this.focusTrapsTracker.activatePreviousTrapper();\n  }\n}\n",
      "selector": "[clrFocusTrap]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrFocusTrap",
          "line": 54,
          "type": ""
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "document:focusin",
          "args": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 59
        }
      ],
      "propertiesClass": [
        {
          "name": "_config",
          "defaultValue": "{\n    strict: true,\n  }",
          "type": "FocusTrapConfig",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [112]
        },
        {
          "name": "bottomReboundEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [112]
        },
        {
          "name": "document",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [112]
        },
        {
          "name": "localFocusEscaped",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [112]
        },
        {
          "name": "parentElement",
          "type": "Element",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [112]
        },
        {
          "name": "previousActiveElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [112]
        },
        {
          "name": "previousTrappedActiveElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [112]
        },
        {
          "name": "topReboundEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addReboundEls",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92,
          "modifierKind": [112]
        },
        {
          "name": "createFocusableOffScreenEl",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 82,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 125
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134
        },
        {
          "name": "removeReboundEls",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 108,
          "modifierKind": [112]
        },
        {
          "name": "setPreviousFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 119,
          "modifierKind": [114]
        }
      ],
      "implements": ["AfterViewInit", "OnDestroy"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "focusTrapsTracker",
            "type": "FocusTrapTracker"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusTrapsTracker",
            "type": "FocusTrapTracker",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "config": {
          "name": "config",
          "setSignature": {
            "name": "config",
            "type": "void",
            "args": [
              {
                "name": "config",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "config",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "MainContainerWillyWonka",
      "id": "directive-MainContainerWillyWonka-7771659374df3f65188fd13d5fa4a955",
      "file": "src/clr-angular/layout/nav/chocolate/main-container-willy-wonka.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\nimport { WillyWonka } from '../../../utils/chocolate/willy-wonka';\n\n@Directive({ selector: 'clr-main-container' })\nexport class MainContainerWillyWonka extends WillyWonka {}\n",
      "selector": "clr-main-container",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "NavDetectionOompaLoompa",
      "id": "directive-NavDetectionOompaLoompa-774e6fb05030e8f8d059369a77c5ab00",
      "file": "src/clr-angular/layout/nav/chocolate/nav-detection-oompa-loompa.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Optional } from '@angular/core';\nimport { OompaLoompa } from '../../../utils/chocolate/oompa-loompa';\nimport { ResponsiveNavigationService } from '../providers/responsive-navigation.service';\nimport { MainContainerWillyWonka } from './main-container-willy-wonka';\n\n@Directive({ selector: 'clr-header' })\nexport class NavDetectionOompaLoompa extends OompaLoompa {\n  private responsiveNavService: ResponsiveNavigationService;\n\n  constructor(\n    cdr: ChangeDetectorRef,\n    @Optional() willyWonka: MainContainerWillyWonka,\n    responsiveNavService: ResponsiveNavigationService\n  ) {\n    if (!willyWonka) {\n      throw new Error('clr-header should only be used inside of a clr-main-container');\n    }\n    super(cdr, willyWonka);\n    this.responsiveNavService = responsiveNavService;\n  }\n\n  // NavDetectionOompaLoompa is the addition of the nav levels\n  // Since we support 2 levels, the possibilities are 0, 1 or 3 (1 + 2)\n  get flavor() {\n    return this.responsiveNavService.responsiveNavList.reduce((sum, navLevel) => sum + navLevel, 0);\n  }\n}\n",
      "selector": "clr-header",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "responsiveNavService",
          "type": "ResponsiveNavigationService",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "willyWonka",
            "type": "MainContainerWillyWonka"
          },
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "willyWonka",
            "type": "MainContainerWillyWonka",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "flavor": {
          "name": "flavor",
          "getSignature": {
            "name": "flavor",
            "type": "",
            "returnType": "",
            "line": 29
          }
        }
      }
    },
    {
      "name": "OutsideClick",
      "id": "directive-OutsideClick-dd363afb9fa2516a4c4567c474aeb979",
      "file": "src/clr-angular/utils/outside-click/outside-click.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({ selector: '[clrOutsideClick]' })\nexport class OutsideClick {\n  constructor(private el: ElementRef) {}\n\n  @Input('clrStrict') strict = false;\n\n  @Output('clrOutsideClick') outsideClick = new EventEmitter<any>(false);\n\n  @HostListener('document:click', ['$event'])\n  documentClick(event: MouseEvent) {\n    const target = event.target; // Get the element in the DOM on which the mouse was clicked\n    const host = this.el.nativeElement; // Get the current actionMenu native HTML element\n\n    if (target === host) {\n      return;\n    }\n    if (!this.strict && host.contains(target)) {\n      return;\n    }\n    this.outsideClick.emit(event);\n  }\n}\n",
      "selector": "[clrOutsideClick]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrStrict",
          "defaultValue": "false",
          "line": 12
        }
      ],
      "outputsClass": [
        {
          "name": "clrOutsideClick",
          "defaultValue": "new EventEmitter<any>(false)",
          "line": 14,
          "type": "EventEmitter"
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "document:click",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 17
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "PopoverDirectiveOld",
      "id": "directive-PopoverDirectiveOld-60454ed81b28cb8f0490eb263b6b1889",
      "file": "src/clr-angular/popover/common/popover-old.directive.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive, EmbeddedViewRef, EventEmitter, Input, Output, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Point, Popover } from './popover';\nimport { PopoverOptions } from './popover-options.interface';\n\nlet openCount: number = 0;\nconst waiting: Array<() => void> = []; // pending create functions\n\n@Directive({ selector: '[clrPopoverOld]' })\nexport class PopoverDirectiveOld {\n  private _popoverInstance: Popover;\n  private _subscription: Subscription;\n\n  @Input('clrPopoverOldAnchor') anchorElem: any;\n  @Input('clrPopoverOldAnchorPoint') anchorPoint: Point;\n  @Input('clrPopoverOldPopoverPoint') popoverPoint: Point;\n  @Input('clrPopoverOldOptions') popoverOptions: PopoverOptions = {};\n  @Output('clrPopoverOldChange') clrPopoverOldChange = new EventEmitter<boolean>(false);\n\n  constructor(private templateRef: TemplateRef<any>, private viewContainer: ViewContainerRef) {}\n\n  @Input()\n  set clrPopoverOld(open: boolean) {\n    if (open) {\n      if (this.popoverOptions.allowMultipleOpen) {\n        this.createPopover();\n      } else {\n        if (openCount === 0) {\n          this.createPopover();\n        } else {\n          waiting.push(() => {\n            this.createPopover();\n          });\n        }\n      }\n    } else {\n      this.viewContainer.clear();\n      this.destroyPopover();\n\n      if (!this.popoverOptions.allowMultipleOpen) {\n        if (waiting.length > 0) {\n          const createPopoverFn = waiting.shift();\n          createPopoverFn();\n        }\n      }\n    }\n  }\n\n  createPopover() {\n    const embeddedViewRef: EmbeddedViewRef<any> = <EmbeddedViewRef<any>>this.viewContainer.createEmbeddedView(\n      this.templateRef\n    );\n\n    // TODO: Not sure of the risks associated with using this. Find an alternative.\n    // Needed for find the correct height and width of dynamically created views\n    // inside of the popover. For Eg: Button Groups\n    embeddedViewRef.detectChanges();\n\n    // filter out other nodes in the view ref so we are only left with element nodes\n    const elementNodes: HTMLElement[] = embeddedViewRef.rootNodes.filter((node: any) => {\n      return node.nodeType === 1;\n    });\n\n    // we take the first element node in the embedded view; usually there should only be one anyways\n    this._popoverInstance = new Popover(elementNodes[0]);\n    this._subscription = this._popoverInstance\n      .anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)\n      .subscribe(() => {\n        this.clrPopoverOldChange.emit(false);\n      });\n    openCount++;\n  }\n\n  destroyPopover() {\n    if (this._popoverInstance) {\n      this._subscription.unsubscribe();\n      this._popoverInstance.release();\n      delete this._popoverInstance;\n      openCount--;\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyPopover();\n  }\n}\n",
      "selector": "[clrPopoverOld]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrPopoverOld",
          "line": 29,
          "type": "boolean"
        },
        {
          "name": "clrPopoverOldAnchor",
          "line": 20,
          "type": "any"
        },
        {
          "name": "clrPopoverOldAnchorPoint",
          "line": 21,
          "type": "Point"
        },
        {
          "name": "clrPopoverOldOptions",
          "defaultValue": "{}",
          "line": 23,
          "type": "PopoverOptions"
        },
        {
          "name": "clrPopoverOldPopoverPoint",
          "line": 22,
          "type": "Point"
        }
      ],
      "outputsClass": [
        {
          "name": "clrPopoverOldChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 24,
          "type": "EventEmitter"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [112]
        },
        {
          "name": "_subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 18,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "createPopover",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55
        },
        {
          "name": "destroyPopover",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>"
          },
          {
            "name": "viewContainer",
            "type": "ViewContainerRef"
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "viewContainer",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "clrPopoverOld": {
          "name": "clrPopoverOld",
          "setSignature": {
            "name": "clrPopoverOld",
            "type": "void",
            "args": [
              {
                "name": "open",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "open",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "StepperOompaLoompa",
      "id": "directive-StepperOompaLoompa-4e8c6ce12b31a5263150e2ed5c7a80ce",
      "file": "src/clr-angular/accordion/stepper/chocolate/stepper-oompa-loompa.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { ChangeDetectorRef, Directive, Optional } from '@angular/core';\n\nimport { OompaLoompa } from '../../../utils/chocolate/oompa-loompa';\nimport { StepperWillyWonka } from './stepper-willy-wonka';\nimport { IfExpandService } from '../../../utils/conditional/if-expanded.service';\n\n@Directive({ selector: 'clr-stepper-panel, [clrStepButton]' })\nexport class StepperOompaLoompa extends OompaLoompa {\n  private expand: IfExpandService;\n\n  constructor(cdr: ChangeDetectorRef, @Optional() willyWonka: StepperWillyWonka, ifExpandService: IfExpandService) {\n    if (!willyWonka) {\n      throw new Error('clr-stepper-panel should only be used inside of clrStepper');\n    }\n    super(cdr, willyWonka);\n    this.expand = ifExpandService;\n  }\n\n  get flavor() {\n    return this.expand.expanded;\n  }\n}\n",
      "selector": "clr-stepper-panel, [clrStepButton]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "expand",
          "type": "IfExpandService",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "willyWonka",
            "type": "StepperWillyWonka"
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService"
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "willyWonka",
            "type": "StepperWillyWonka",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "flavor": {
          "name": "flavor",
          "getSignature": {
            "name": "flavor",
            "type": "",
            "returnType": "",
            "line": 25
          }
        }
      }
    },
    {
      "name": "StepperWillyWonka",
      "id": "directive-StepperWillyWonka-ed5d0739d05c40c6959df89fdbe45af3",
      "file": "src/clr-angular/accordion/stepper/chocolate/stepper-willy-wonka.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\n\nimport { WillyWonka } from '../../../utils/chocolate/willy-wonka';\n\n@Directive({ selector: 'form[clrStepper]' })\nexport class StepperWillyWonka extends WillyWonka {}\n",
      "selector": "form[clrStepper]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "TabsWillyWonka",
      "id": "directive-TabsWillyWonka-98ec22eded4d88e1e84be920a68a3b6d",
      "file": "src/clr-angular/layout/tabs/chocolate/tabs-willy-wonka.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import { Directive } from '@angular/core';\nimport { WillyWonka } from '../../../utils/chocolate/willy-wonka';\n\n@Directive({ selector: 'clr-tabs' })\nexport class TabsWillyWonka extends WillyWonka {}\n",
      "selector": "clr-tabs",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": []
    },
    {
      "name": "VirtualForOf",
      "id": "directive-VirtualForOf-05a60eca1949e72a18f67f337f98a91e",
      "file": "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts",
      "type": "directive",
      "description": "",
      "sourceCode":
        "import {\n  AfterViewInit,\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  NgZone,\n  Renderer2,\n  RendererFactory2,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\n\nimport {\n  getScrollTop,\n  offsetHeight,\n  preserveScrollAfterAppend,\n  preserveScrollAfterPrepend,\n  ratioBottomReady,\n  ratioTopReady,\n  setScrollTop,\n  startListening,\n  stopListening,\n} from './dom-helpers';\nimport { isNonNgIterable, NonNgIterable } from './non-ng-iterable';\n\nenum Side {\n  START = -1,\n  END = 1,\n}\n\n// Number of viewport heights we preload on each side. This could very well become an input.\nconst PRELOAD_MARGIN = 1;\n\n/*\n * INTERNAL, do not use outside of Clarity itself.\n *\n * TODO:\n * - support trackBy\n * - support \"snap scroll\"\n * - export index\n * - export firstDisplayed and LastDisplayed\n */\n@Directive({ selector: '[clrVirtualForOf]' })\nexport class VirtualForOf<T> implements AfterViewInit {\n  constructor(\n    private viewContainer: ViewContainerRef,\n    private template: TemplateRef<{ $implicit: T }>,\n    renderer: Renderer2,\n    private rendererFactory: RendererFactory2,\n    private ngZone: NgZone\n  ) {\n    this.containerEl = <HTMLElement>renderer.parentNode(viewContainer.element.nativeElement);\n  }\n\n  private containerEl: HTMLElement;\n\n  // Until we have a way to tell Angular not to iterate over the whole iterable as soon as it's passed as an input,\n  // we can't accept an NgIterable here so we have this weird Array | NonNgIterable type.\n  private _items: Array<T> | NonNgIterable<T>;\n  @Input('clrVirtualForOf')\n  set items(value: Array<T> | NonNgIterable<T>) {\n    this._items = value;\n    // Sadly, I couldn't figure out a way to make this removal synchronous.\n    // The removeSynchronously() trick doesn't work because change detection has already called begin() once.\n    this.viewContainer.clear();\n    this.start = -1;\n    this.end = 0;\n    this.rendererFactory.whenRenderingDone().then(() => this.fill());\n  }\n\n  private start = -1;\n  private end = 0;\n\n  /**\n   * Computes the offset height of the first/last item in the view\n   * @param {Side} side: indicates which item to measure, first or last\n   */\n  private computeHeight(side: Side) {\n    const index = side === Side.START ? 0 : this.viewContainer.length - 1;\n    return offsetHeight((<EmbeddedViewRef<{ $implicit: T }>>this.viewContainer.get(index)).rootNodes);\n  }\n\n  /**\n   * Removes the first/last item from the view\n   * @param {Side} side: indicates which item to remove, first or last\n   */\n  private remove(side: Side) {\n    const index = side === Side.START ? 0 : this.viewContainer.length - 1;\n    this.viewContainer.remove(index);\n    if (side === Side.START) {\n      this.start++;\n    } else {\n      this.end--;\n    }\n  }\n\n  /**\n   * Adds another item from the list to the view\n   * @param {Side} side: indicates whether to prepend or append\n   * @returns {boolean}: returns true while there are more items, false when the iterator is done\n   */\n  private add(side: Side): boolean {\n    const index = side === Side.START ? this.start : this.end;\n    let added;\n    if (!this._items) {\n      return false;\n    }\n    if (isNonNgIterable(this._items)) {\n      added = this._items.get(index);\n    } else {\n      added = this._items[index];\n    }\n    if (typeof added === 'undefined') {\n      return false;\n    }\n    if (side === Side.START) {\n      this.start--;\n    } else {\n      this.end++;\n    }\n    // We have to detect changes immediately for the height to be correct before adding more items.\n    this.viewContainer\n      .createEmbeddedView(this.template, { $implicit: added }, side === Side.START ? 0 : undefined)\n      .detectChanges();\n    return true;\n  }\n\n  /**\n   * Removes items on one side that are too far from the viewport\n   */\n  private trimSide(side: Side) {\n    let alreadyRemoved = 0;\n    while (this.viewContainer.length > 0) {\n      const toRemove = this.computeHeight(side);\n      const offset = alreadyRemoved + toRemove;\n      const ratioReady = side === Side.START ? ratioTopReady : ratioBottomReady;\n      if (ratioReady(this.containerEl, offset) < PRELOAD_MARGIN) {\n        break;\n      }\n      this.remove(side);\n      alreadyRemoved += toRemove;\n    }\n  }\n\n  /**\n   * Removes all items that are too far from the viewport\n   */\n  private trim() {\n    this.trimSide(Side.START);\n    this.trimSide(Side.END);\n  }\n\n  /**\n   * Adds item on one side of the viewport\n   */\n  private fillSide(side: Side) {\n    const ratioReady = side === Side.START ? ratioTopReady : ratioBottomReady;\n    const preserveScroll = side === Side.START ? preserveScrollAfterPrepend : preserveScrollAfterAppend;\n    // We load \"one viewport\" ahead\n    while (ratioReady(this.containerEl) < PRELOAD_MARGIN) {\n      if (!preserveScroll(this.containerEl, () => this.add(side))) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Adds item in and around the viewport\n   */\n  private fill() {\n    this.fillSide(Side.END);\n    this.fillSide(Side.START);\n  }\n\n  /**\n   * Since our update on scroll re-triggers a scroll event, we ignore events where the scrollTop hasn't changed.\n   */\n  private ignoreScrollTop: number;\n\n  /**\n   * Named scroll listener so we can remove it on destroy.\n   */\n  private scrollListener = () => {\n    if (this.ignoreScrollTop === getScrollTop(this.containerEl)) {\n      return;\n    }\n    this.removeSynchronously(() => this.trim());\n    this.fill();\n    /*\n             * Yes, we're using a dirty hack. It fixes an OSX bug with the inertia scrolling that breaks Chrome itself.\n             */\n    // The scrollTop might have changed so we need to get it a second time here, we can't use the value from\n    // above.\n    const currentScrollTop = getScrollTop(this.containerEl);\n    if (currentScrollTop > 0) {\n      this.ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          this.ignoreScrollTop = currentScrollTop - 1;\n          setScrollTop(this.containerEl, currentScrollTop - 1);\n          requestAnimationFrame(() => {\n            this.ignoreScrollTop = currentScrollTop;\n            setScrollTop(this.containerEl, currentScrollTop);\n          });\n        });\n      });\n    }\n  };\n\n  ngAfterViewInit() {\n    // This is called too often on iOS and trackpads, so we need to run it outside of the NgZone\n    // and add the event listener directly on the native element rather than use the renderer.\n    this.ngZone.runOutsideAngular(() => {\n      startListening(this.containerEl, 'scroll', this.scrollListener);\n    });\n  }\n\n  ngOnDestroy() {\n    stopListening(this.containerEl, 'scroll', this.scrollListener);\n  }\n\n  /**\n   * Allows us to force the renderer to properly update the DOM before moving on.\n   */\n  private removeSynchronously<R>(operation: () => R): R {\n    if (this.rendererFactory.begin) {\n      this.rendererFactory.begin();\n    }\n    const result = operation();\n    if (this.rendererFactory.end) {\n      this.rendererFactory.end();\n    }\n    return result;\n  }\n}\n",
      "selector": "[clrVirtualForOf]",
      "providers": [],
      "inputsClass": [
        {
          "name": "clrVirtualForOf",
          "line": 66,
          "type": ""
        }
      ],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "_items",
          "type": "Array<T> | NonNgIterable<T>",
          "optional": false,
          "description": "",
          "line": 64,
          "modifierKind": [112]
        },
        {
          "name": "containerEl",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [112]
        },
        {
          "name": "end",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 77,
          "modifierKind": [112]
        },
        {
          "name": "ignoreScrollTop",
          "type": "number",
          "optional": false,
          "description":
            "<p>Since our update on scroll re-triggers a scroll event, we ignore events where the scrollTop hasn&#39;t changed.</p>\n",
          "line": 183,
          "modifierKind": [112]
        },
        {
          "name": "scrollListener",
          "defaultValue": "() => {...}",
          "type": "",
          "optional": false,
          "description": "<p>Named scroll listener so we can remove it on destroy.</p>\n",
          "line": 188,
          "modifierKind": [112]
        },
        {
          "name": "start",
          "defaultValue": "-1",
          "type": "",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "add",
          "args": [
            {
              "name": "side",
              "type": "Side"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 107,
          "description": "<p>Adds another item from the list to the view</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": {
                "pos": 3002,
                "end": 3006,
                "flags": 0,
                "escapedText": "side"
              },
              "type": "Side",
              "tagName": {
                "pos": 2989,
                "end": 2994,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>: indicates whether to prepend or append</p>\n",
              "typeExpression": {
                "pos": 2995,
                "end": 3001,
                "flags": 0,
                "kind": 277,
                "type": {
                  "pos": 2996,
                  "end": 3000,
                  "flags": 2097152,
                  "kind": 161,
                  "typeName": {
                    "pos": 2996,
                    "end": 3000,
                    "flags": 2097152,
                    "escapedText": "Side"
                  }
                }
              }
            },
            {
              "tagName": {
                "pos": 3053,
                "end": 3060,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": "<p>: returns true while there are more items, false when the iterator is done</p>\n",
              "returnType": "boolean"
            }
          ]
        },
        {
          "name": "computeHeight",
          "args": [
            {
              "name": "side",
              "type": "Side"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 83,
          "description": "<p>Computes the offset height of the first/last item in the view</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": {
                "pos": 2281,
                "end": 2285,
                "flags": 0,
                "escapedText": "side"
              },
              "type": "Side",
              "tagName": {
                "pos": 2268,
                "end": 2273,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>: indicates which item to measure, first or last</p>\n",
              "typeExpression": {
                "pos": 2274,
                "end": 2280,
                "flags": 0,
                "kind": 277,
                "type": {
                  "pos": 2275,
                  "end": 2279,
                  "flags": 2097152,
                  "kind": 161,
                  "typeName": {
                    "pos": 2275,
                    "end": 2279,
                    "flags": 2097152,
                    "escapedText": "Side"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "fill",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 175,
          "description": "<p>Adds item in and around the viewport</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "fillSide",
          "args": [
            {
              "name": "side",
              "type": "Side"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 161,
          "description": "<p>Adds item on one side of the viewport</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "side",
              "type": "Side",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 214
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 222
        },
        {
          "name": "remove",
          "args": [
            {
              "name": "side",
              "type": "Side"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92,
          "description": "<p>Removes the first/last item from the view</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": {
                "pos": 2633,
                "end": 2637,
                "flags": 0,
                "escapedText": "side"
              },
              "type": "Side",
              "tagName": {
                "pos": 2620,
                "end": 2625,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>: indicates which item to remove, first or last</p>\n",
              "typeExpression": {
                "pos": 2626,
                "end": 2632,
                "flags": 0,
                "kind": 277,
                "type": {
                  "pos": 2627,
                  "end": 2631,
                  "flags": 2097152,
                  "kind": 161,
                  "typeName": {
                    "pos": 2627,
                    "end": 2631,
                    "flags": 2097152,
                    "escapedText": "Side"
                  }
                }
              }
            }
          ]
        },
        {
          "name": "removeSynchronously",
          "args": [
            {
              "name": "operation",
              "type": "function",
              "function": []
            }
          ],
          "optional": false,
          "returnType": "R",
          "typeParameters": ["R"],
          "line": 229,
          "description": "<p>Allows us to force the renderer to properly update the DOM before moving on.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "operation",
              "type": "function",
              "function": [],
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "trim",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 153,
          "description": "<p>Removes all items that are too far from the viewport</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "trimSide",
          "args": [
            {
              "name": "side",
              "type": "Side"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136,
          "description": "<p>Removes items on one side that are too far from the viewport</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "side",
              "type": "Side",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "implements": ["AfterViewInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "viewContainer",
            "type": "ViewContainerRef"
          },
          {
            "name": "template",
            "type": "TemplateRef<literal type>"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "rendererFactory",
            "type": "RendererFactory2"
          },
          {
            "name": "ngZone",
            "type": "NgZone"
          }
        ],
        "line": 49,
        "jsdoctags": [
          {
            "name": "viewContainer",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "template",
            "type": "TemplateRef<literal type>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "rendererFactory",
            "type": "RendererFactory2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngZone",
            "type": "NgZone",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "items": {
          "name": "items",
          "setSignature": {
            "name": "items",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    }
  ],
  "components": [
    {
      "name": "BasicWizardTestComponent",
      "id": "component-BasicWizardTestComponent-0caf18588a710ed392f7b617657c89ae",
      "file": "src/clr-angular/wizard/test-components/basic-wizard.mock.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template":
        "<clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n    <clr-wizard-title>My Wizard Title</clr-wizard-title>\n    <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n    <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n    <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n    <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n        <p>Content for step 1</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 2</ng-template>\n        <p>Content for step 2</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 3</ng-template>\n        <p>Content for step 3</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 4</ng-template>\n        <p>Content for step 4</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 5</ng-template>\n        <p>Content for step 5</p>\n    </clr-wizard-page>\n</clr-wizard>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "open",
          "defaultValue": "true",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 45
        },
        {
          "name": "wizard",
          "type": "ClrWizard",
          "optional": false,
          "description": "",
          "line": 44,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'wizard', {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ViewChild } from '@angular/core';\nimport { ClrWizard } from '../wizard';\n\n@Component({\n  template: `\n        <clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n            <clr-wizard-title>My Wizard Title</clr-wizard-title>\n            <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n            <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n            <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n            <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n                <p>Content for step 1</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 2</ng-template>\n                <p>Content for step 2</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 3</ng-template>\n                <p>Content for step 3</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 4</ng-template>\n                <p>Content for step 4</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 5</ng-template>\n                <p>Content for step 5</p>\n            </clr-wizard-page>\n        </clr-wizard>\n    `,\n})\nexport class BasicWizardTestComponent {\n  @ViewChild('wizard', { static: true })\n  wizard: ClrWizard;\n  open: boolean = true;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrAccordion",
      "id": "component-ClrAccordion-3520047a66984c335fbc51a16e91144d",
      "file": "src/clr-angular/accordion/accordion.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "AccordionService"
        }
      ],
      "selector": "clr-accordion",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrAccordionMultiPanel",
          "defaultValue": "false",
          "line": 34
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "panels",
          "type": "QueryList<ClrAccordionPanel>",
          "optional": false,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrAccordionPanel, {descendants: true}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 37
        }
      ],
      "methodsClass": [
        {
          "name": "listenForDOMChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 64,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45,
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41
        },
        {
          "name": "setAccordionStrategy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59,
          "modifierKind": [112]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  ContentChildren,\n  QueryList,\n  ChangeDetectionStrategy,\n  Input,\n  SimpleChanges,\n  OnInit,\n  OnChanges,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport { startWith } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\nimport { AccordionService } from './providers/accordion.service';\nimport { ClrAccordionPanel } from './accordion-panel';\nimport { AccordionStrategy } from './enums/accordion-strategy.enum';\n\n@Component({\n  selector: 'clr-accordion',\n  template: `<ng-content></ng-content>`,\n  host: { '[class.clr-accordion]': 'true' },\n  providers: [AccordionService],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClrAccordion implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n  @Input('clrAccordionMultiPanel') multiPanel = false;\n  @ContentChildren(ClrAccordionPanel, { descendants: true })\n  panels: QueryList<ClrAccordionPanel>;\n  subscriptions: Subscription[] = [];\n\n  constructor(private accordionService: AccordionService) {}\n\n  ngOnInit() {\n    this.setAccordionStrategy();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.multiPanel.currentValue !== changes.multiPanel.previousValue) {\n      this.setAccordionStrategy();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.subscriptions.push(this.listenForDOMChanges());\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  private setAccordionStrategy() {\n    const strategy = this.multiPanel ? AccordionStrategy.Multi : AccordionStrategy.Default;\n    this.accordionService.setStrategy(strategy);\n  }\n\n  private listenForDOMChanges() {\n    return this.panels.changes\n      .pipe(startWith(this.panels))\n      .subscribe(panels => this.accordionService.updatePanelOrder(panels.toArray().map(p => p.id)));\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "accordionService",
            "type": "AccordionService"
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "accordionService",
            "type": "AccordionService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnChanges", "AfterViewInit", "OnDestroy"]
    },
    {
      "name": "ClrAccordionContent",
      "id": "component-ClrAccordionContent-7580c656b37fa58a1c6817ca46fa7969",
      "file": "src/clr-angular/accordion/accordion-content.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-accordion-content, clr-step-content",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'clr-accordion-content, clr-step-content',\n  template: `<ng-content></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClrAccordionContent {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrAccordionDescription",
      "id": "component-ClrAccordionDescription-50edabfd908adb8af94cd1b29be6313b",
      "file": "src/clr-angular/accordion/accordion-description.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-accordion-description, clr-step-description",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'clr-accordion-description, clr-step-description',\n  template: `<ng-content></ng-content>`,\n  host: { '[class.clr-accordion-description]': 'true' },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClrAccordionDescription {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrAccordionPanel",
      "id": "component-ClrAccordionPanel-5bdc2317bc40d0b8e642ac78f976e617",
      "file": "src/clr-angular/accordion/accordion-panel.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfExpandService"
        },
        {
          "name": "UNIQUE_ID_PROVIDER"
        }
      ],
      "selector": "clr-accordion-panel",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./accordion-panel.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrAccordionPanelDisabled",
          "defaultValue": "false",
          "line": 41
        },
        {
          "name": "clrAccordionPanelOpen",
          "defaultValue": "false",
          "line": 42
        }
      ],
      "outputsClass": [
        {
          "name": "clrAccordionPanelOpenChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "line": 43,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "accordionDescription",
          "type": "QueryList<ClrAccordionDescription>",
          "optional": false,
          "description": "",
          "line": 44,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrAccordionDescription"
            }
          ]
        },
        {
          "name": "AccordionStatus",
          "defaultValue": "AccordionStatus",
          "type": "",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [132]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [114]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "isAccordion",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "panel",
          "type": "Observable<AccordionPanelModel>",
          "optional": false,
          "description": "",
          "line": 46
        }
      ],
      "methodsClass": [
        {
          "name": "collapsePanelOnAnimationDone",
          "args": [
            {
              "name": "panel",
              "type": "AccordionPanelModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "jsdoctags": [
            {
              "name": "panel",
              "type": "AccordionPanelModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "emitPanelChange",
          "args": [
            {
              "name": "panel",
              "type": "AccordionPanelModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "panel",
              "type": "AccordionPanelModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAccordionContentId",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 88,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAccordionHeaderId",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 92,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getPanelStateClasses",
          "args": [
            {
              "name": "panel",
              "type": "AccordionPanelModel"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 84,
          "jsdoctags": [
            {
              "name": "panel",
              "type": "AccordionPanelModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57
        },
        {
          "name": "togglePanel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  EventEmitter,\n  Output,\n  SimpleChanges,\n  Inject,\n  OnInit,\n  OnChanges,\n  ContentChildren,\n  QueryList,\n} from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { UNIQUE_ID_PROVIDER, UNIQUE_ID } from '../utils/id-generator/id-generator.service';\nimport { ClrCommonStringsService } from '../utils/i18n/common-strings.service';\nimport { AccordionService } from './providers/accordion.service';\nimport { AccordionStatus } from './enums/accordion-status.enum';\nimport { panelAnimation } from './utils/animation';\nimport { IfExpandService } from '../utils/conditional/if-expanded.service';\nimport { AccordionPanelModel } from './models/accordion.model';\nimport { ClrAccordionDescription } from './accordion-description';\n\n@Component({\n  selector: 'clr-accordion-panel',\n  templateUrl: './accordion-panel.html',\n  host: { '[class.clr-accordion-panel]': 'true' },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: panelAnimation,\n  providers: [IfExpandService, UNIQUE_ID_PROVIDER],\n})\nexport class ClrAccordionPanel implements OnInit, OnChanges {\n  @Input('clrAccordionPanelDisabled') disabled = false;\n  @Input('clrAccordionPanelOpen') panelOpen = false;\n  @Output('clrAccordionPanelOpenChange') panelOpenChange = new EventEmitter<boolean>();\n  @ContentChildren(ClrAccordionDescription) accordionDescription: QueryList<ClrAccordionDescription>;\n\n  panel: Observable<AccordionPanelModel>;\n  readonly AccordionStatus = AccordionStatus;\n  isAccordion = true;\n\n  constructor(\n    public commonStrings: ClrCommonStringsService,\n    private accordionService: AccordionService,\n    private ifExpandService: IfExpandService,\n    @Inject(UNIQUE_ID) public id: string\n  ) {}\n\n  ngOnInit() {\n    this.panel = this.accordionService.getPanelChanges(this.id).pipe(tap(panel => this.emitPanelChange(panel)));\n    this.accordionService.addPanel(this.id, this.panelOpen);\n    this.accordionService.togglePanel(this.id, this.panelOpen);\n    this.accordionService.disablePanel(this.id, this.disabled);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.panel && changes.panelOpen && changes.panelOpen.currentValue !== changes.panelOpen.previousValue) {\n      this.accordionService.togglePanel(this.id, changes.panelOpen.currentValue);\n    }\n\n    if (this.panel && changes.disabled && changes.disabled.currentValue !== changes.disabled.previousValue) {\n      this.accordionService.disablePanel(this.id, changes.disabled.currentValue);\n    }\n  }\n\n  togglePanel() {\n    this.accordionService.togglePanel(this.id);\n  }\n\n  collapsePanelOnAnimationDone(panel: AccordionPanelModel) {\n    if (!panel.open) {\n      this.ifExpandService.expanded = false;\n    }\n  }\n\n  getPanelStateClasses(panel: AccordionPanelModel) {\n    return `clr-accordion-panel-${panel.status} ${panel.open ? 'clr-accordion-panel-open' : ''}`;\n  }\n\n  getAccordionContentId(id: string) {\n    return `clr-accordion-content-${id}'`;\n  }\n\n  getAccordionHeaderId(id: string) {\n    return `clr-accordion-header-${id}`;\n  }\n\n  private emitPanelChange(panel: AccordionPanelModel) {\n    this.panelOpenChange.emit(panel.open);\n\n    if (panel.open) {\n      this.ifExpandService.expanded = true;\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "accordionService",
            "type": "AccordionService"
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService"
          },
          {
            "name": "id",
            "type": "string"
          }
        ],
        "line": 48,
        "jsdoctags": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "accordionService",
            "type": "AccordionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnChanges"],
      "templateData":
        "<ng-container *ngIf=\"panel | async; let panel\">\n  <div *ngIf=\"panel.status !== AccordionStatus.Inactive\" aria-live=\"assertive\" class=\"clr-sr-only\">\n    <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n  </div>\n\n  <div role=\"group\" [ngClass]=\"getPanelStateClasses(panel)\">\n    <div class=\"clr-accordion-header\">\n      <button\n        type=\"button\"\n        class=\"clr-accordion-header-button\"\n        (click)=\"togglePanel()\"\n        [id]=\"getAccordionHeaderId(panel.templateId)\"\n        [disabled]=\"isAccordion && panel.disabled\"\n        [attr.aria-disabled]=\"!isAccordion && panel.disabled\"\n        [attr.aria-controls]=\"getAccordionContentId(panel.templateId)\"\n        [attr.aria-expanded]=\"panel.open\"\n        [class.clr-accordion-header-has-description]=\"(accordionDescription.changes | async)?.length || accordionDescription.length\"\n        #headerButton\n      >\n        <span class=\"clr-sr-only\">\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Complete\">{{commonStrings.keys.success}}</ng-container>\n        </span>\n        <span class=\"clr-accordion-status\">\n          <clr-icon shape=\"angle\" dir=\"right\" class=\"clr-accordion-angle\"></clr-icon>\n          <span class=\"clr-accordion-number\"></span>\n          <clr-icon shape=\"exclamation-circle\" class=\"clr-accordion-error-icon\"></clr-icon>\n          <clr-icon shape=\"check-circle\" class=\"clr-accordion-complete-icon\"></clr-icon>\n        </span>\n        <ng-content select=\"clr-accordion-title, clr-step-title\"></ng-content>\n        <ng-content select=\"clr-accordion-description, clr-step-description\"></ng-content>\n      </button>\n    </div>\n    <div\n      @skipInitialRender\n      role=\"region\"\n      [id]=\"getAccordionContentId(panel.templateId)\"\n      [attr.aria-hidden]=\"!panel.open\"\n      [attr.aria-labelledby]=\"getAccordionHeaderId(panel.templateId)\"\n    >\n      <div\n        *ngIf=\"panel.open\"\n        @toggle\n        (@toggle.done)=\"collapsePanelOnAnimationDone(panel)\"\n        class=\"clr-accordion-content\">\n        <div class=\"clr-accordion-inner-content\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n"
    },
    {
      "name": "ClrAccordionTitle",
      "id": "component-ClrAccordionTitle-73078587aa65be3eaf371dafd666d6a5",
      "file": "src/clr-angular/accordion/accordion-title.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-accordion-title, clr-step-title",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'clr-accordion-title, clr-step-title',\n  template: `<ng-content></ng-content>`,\n  host: { '[class.clr-accordion-title]': 'true' },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClrAccordionTitle {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrAlert",
      "id": "component-ClrAlert-65f087ebd86308dbdcb7e6442894f87b",
      "file": "src/clr-angular/emphasis/alert/alert.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "AlertIconAndTypesService"
        },
        {
          "name": "AriaLiveService"
        }
      ],
      "selector": "clr-alert",
      "styleUrls": [],
      "styles": [":host { display: block; }"],
      "templateUrl": ["./alert.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrAlertAppLevel",
          "defaultValue": "false",
          "line": 49,
          "type": "boolean"
        },
        {
          "name": "clrAlertClosable",
          "defaultValue": "true",
          "line": 48,
          "type": "boolean"
        },
        {
          "name": "clrAlertClosed",
          "defaultValue": "false",
          "line": 54,
          "type": "boolean"
        },
        {
          "name": "clrAlertIcon",
          "line": 94,
          "type": "string"
        },
        {
          "name": "clrAlertSizeSmall",
          "defaultValue": "false",
          "line": 47,
          "type": "boolean"
        },
        {
          "name": "clrAlertType",
          "line": 58,
          "type": "string"
        },
        {
          "name": "clrAssertive",
          "line": 72,
          "type": "boolean"
        },
        {
          "name": "clrCloseButtonAriaLabel",
          "defaultValue": "this.commonStrings.keys.alertCloseButtonAriaLabel",
          "line": 52,
          "type": "string"
        },
        {
          "name": "clrOff",
          "line": 73,
          "type": "boolean"
        },
        {
          "name": "clrPolite",
          "defaultValue": "true",
          "description":
            "<p>clrPolite is not used in the code. Is here just to provide\ncode complition and also mark component what type AriaLive\nwill be used.</p>\n",
          "line": 71,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrAlertClosedChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 55,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "alertTexts",
          "type": "QueryList<ElementRef>",
          "optional": false,
          "description": "",
          "line": 103,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrAlertText, {descendants: true, read: ElementRef}"
            }
          ]
        },
        {
          "name": "cdr",
          "type": "ChangeDetectorRef",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [114]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [114]
        },
        {
          "name": "hidden",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 134,
          "modifierKind": [112]
        },
        {
          "name": "iconService",
          "type": "AlertIconAndTypesService",
          "optional": false,
          "description": "",
          "line": 35,
          "modifierKind": [114]
        },
        {
          "name": "multiAlertService",
          "type": "MultiAlertService",
          "optional": false,
          "description": "",
          "line": 37,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "previouslyHidden",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 133,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "announceAriaLiveMessage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 123,
          "description":
            "<p>This handle the find what content to be annonced withing the aria-live container\nalerts that are hidden will be ignored.</p>\n",
          "modifierKind": [112],
          "jsdoctags": []
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 164
        },
        {
          "name": "detectChangesIfNeeded",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 175
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  ChangeDetectorRef,\n  ElementRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  AfterViewInit,\n  ContentChildren,\n  QueryList,\n} from '@angular/core';\n\n// providers\nimport { AlertIconAndTypesService } from './providers/icon-and-types.service';\nimport { MultiAlertService } from './providers/multi-alert.service';\nimport { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { AriaLiveService, AriaLivePoliteness } from '../../utils/a11y/aria-live.service';\nimport { ClrAlertText } from './alert-text';\n\n@Component({\n  selector: 'clr-alert',\n  providers: [AlertIconAndTypesService, AriaLiveService],\n  templateUrl: './alert.html',\n  styles: [':host { display: block; }'],\n})\nexport class ClrAlert implements AfterViewInit {\n  constructor(\n    public iconService: AlertIconAndTypesService,\n    public cdr: ChangeDetectorRef,\n    @Optional() public multiAlertService: MultiAlertService,\n    public commonStrings: ClrCommonStringsService,\n    private ariaLiveService: AriaLiveService\n  ) {}\n\n  ngAfterViewInit() {\n    // Announce the first time the alert is render if it is not hidden\n    this.announceAriaLiveMessage();\n  }\n\n  @Input('clrAlertSizeSmall') isSmall: boolean = false;\n  @Input('clrAlertClosable') closable: boolean = true;\n  @Input('clrAlertAppLevel') isAppLevel: boolean = false;\n\n  // Aria\n  @Input() clrCloseButtonAriaLabel: string = this.commonStrings.keys.alertCloseButtonAriaLabel;\n\n  @Input('clrAlertClosed') _closed: boolean = false;\n  @Output('clrAlertClosedChange') _closedChanged: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  @Input('clrAlertType')\n  set alertType(val: string) {\n    this.iconService.alertType = val;\n  }\n\n  get alertType(): string {\n    return this.iconService.alertType;\n  }\n\n  /**\n   * clrPolite is not used in the code. Is here just to provide\n   * code complition and also mark component what type AriaLive\n   * will be used.\n   */\n  @Input('clrPolite') polite: boolean = true;\n  @Input('clrAssertive') assertive: boolean;\n  @Input('clrOff') off: boolean;\n  /**\n   * There is an order on how the attributes will take effect.\n   * Assertive, Off, Polite.\n   *\n   * Polite is default if non is passed.\n   *\n   * In the case of setting all of them to true. Assertive will be used.\n   *\n   */\n  get ariaLive(): AriaLivePoliteness {\n    if (isBooleanAttributeSet(this.assertive)) {\n      return AriaLivePoliteness.assertive;\n    }\n    if (isBooleanAttributeSet(this.off)) {\n      return AriaLivePoliteness.off;\n    }\n    return AriaLivePoliteness.polite;\n  }\n\n  @Input('clrAlertIcon')\n  set alertIconShape(value: string) {\n    this.iconService.alertIconShape = value;\n  }\n\n  get alertClass(): string {\n    return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;\n  }\n\n  @ContentChildren(ClrAlertText, { descendants: true, read: ElementRef })\n  alertTexts: QueryList<ElementRef>;\n  /**\n   * This handle the find what content to be annonced withing the aria-live container\n   * alerts that are hidden will be ignored.\n   *\n   * @remark\n   * We depend on the ClrAlertText Directive to find and parse the alert messages.\n   * Also this require the HTML markup for the alert to be\n   * ```html\n   * <div class=\"alert\" role=\"alert\">\n   *    <div class=\"alert-items\">\n   *        <div class=\"alert-item static\">\n   *            <span class=\"alert-text\">\n   *                 ...\n   *            </span>\n   *        </div>\n   *    </div>\n   * </div>\n   * ```\n   */\n  private announceAriaLiveMessage(): void {\n    if (!this.isHidden && this.alertTexts.length) {\n      const message = this.alertTexts.map(alertText => alertText.nativeElement.textContent).join(' ');\n      // Don't call announce when there is nothing to say\n      if (message) {\n        this.ariaLiveService.announce(message, this.ariaLive);\n      }\n    }\n  }\n\n  private previouslyHidden = false;\n  private hidden = false;\n\n  private detectChangesIfNeeded() {\n    if (this.previouslyHidden !== this.hidden) {\n      this.previouslyHidden = this.hidden;\n      this.cdr.detectChanges();\n      // when alert hidden state change we could check and try to announce it.\n      this.announceAriaLiveMessage();\n    }\n  }\n\n  get isHidden() {\n    if (this.multiAlertService) {\n      // change detection issue in production mode causes currentAlert to be undefined when only the first alert exists\n      // https://github.com/vmware/clarity/issues/2430\n      if (this.multiAlertService.currentAlert === this || this.multiAlertService.count === 0) {\n        if (this.hidden === true) {\n          this.previouslyHidden = true;\n          this.hidden = false;\n        }\n      } else if (this.hidden === false) {\n        this.previouslyHidden = false;\n        this.hidden = true;\n      }\n      this.detectChangesIfNeeded();\n    }\n\n    return this.hidden;\n  }\n\n  close(): void {\n    if (!this.closable) {\n      return;\n    }\n    this._closed = true;\n    if (this.multiAlertService) {\n      this.multiAlertService.close();\n    }\n    this._closedChanged.emit(true);\n  }\n\n  open(): void {\n    this._closed = false;\n    this._closedChanged.emit(false);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ":host { display: block; }\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "iconService",
            "type": "AlertIconAndTypesService"
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "multiAlertService",
            "type": "MultiAlertService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService"
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "iconService",
            "type": "AlertIconAndTypesService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "multiAlertService",
            "type": "MultiAlertService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"],
      "accessors": {
        "alertType": {
          "name": "alertType",
          "setSignature": {
            "name": "alertType",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "val",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alertType",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "ariaLive": {
          "name": "ariaLive",
          "getSignature": {
            "name": "ariaLive",
            "type": "",
            "returnType": "AriaLivePoliteness",
            "line": 83,
            "description":
              "<p>There is an order on how the attributes will take effect.\nAssertive, Off, Polite.</p>\n<p>Polite is default if non is passed.</p>\n<p>In the case of setting all of them to true. Assertive will be used.</p>\n"
          }
        },
        "alertIconShape": {
          "name": "alertIconShape",
          "setSignature": {
            "name": "alertIconShape",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 94,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "alertClass": {
          "name": "alertClass",
          "getSignature": {
            "name": "alertClass",
            "type": "string",
            "returnType": "string",
            "line": 98
          }
        },
        "isHidden": {
          "name": "isHidden",
          "getSignature": {
            "name": "isHidden",
            "type": "",
            "returnType": "",
            "line": 145
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n    *ngIf=\"!_closed\"\n    class=\"alert\"\n    [ngClass]=\"alertClass\"\n    [class.alert-hidden]=\"isHidden\"\n    [class.alert-sm]=\"isSmall\"\n    [class.alert-app-level]=\"isAppLevel\">\n    <div class=\"alert-items\">\n        <ng-content></ng-content>\n    </div>\n    <button\n        type=\"button\"\n        class=\"close\"\n        *ngIf=\"closable\"\n        (click)=\"close()\"\n        [attr.aria-label]=\"clrCloseButtonAriaLabel\"\n        >\n        <clr-icon shape=\"close\"></clr-icon>\n    </button>\n</div>\n"
    },
    {
      "name": "ClrAlertItem",
      "id": "component-ClrAlertItem-face8bf8043f79a5cc6481d2f87aba97",
      "file": "src/clr-angular/emphasis/alert/alert-item.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-alert-item",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div class=\"alert-icon-wrapper\">\n    <clr-icon class=\"alert-icon\"\n      [attr.shape]=\"iconService.alertIconShape\"\n      [attr.title]=\"iconService.alertIconTitle\"></clr-icon>\n</div>\n<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "iconService",
          "type": "AlertIconAndTypesService",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\nimport { AlertIconAndTypesService } from './providers/icon-and-types.service';\n\n@Component({\n  selector: 'clr-alert-item',\n  template: `\n        <div class=\"alert-icon-wrapper\">\n            <clr-icon class=\"alert-icon\" \n              [attr.shape]=\"iconService.alertIconShape\" \n              [attr.title]=\"iconService.alertIconTitle\"></clr-icon>\n        </div>\n        <ng-content></ng-content>\n    `,\n  host: { class: 'alert-item' },\n})\nexport class ClrAlertItem {\n  constructor(public iconService: AlertIconAndTypesService) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "iconService",
            "type": "AlertIconAndTypesService"
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "iconService",
            "type": "AlertIconAndTypesService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrAlerts",
      "id": "component-ClrAlerts-332d4cbf8f7be2670a8038001c3a595a",
      "file": "src/clr-angular/emphasis/alert/alerts.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "MultiAlertService"
        }
      ],
      "selector": "clr-alerts",
      "styleUrls": [],
      "styles": [":host { display: block }"],
      "templateUrl": ["./alerts.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrCurrentAlert",
          "description": "<p>Input/Output to support two way binding on current alert instance</p>\n",
          "line": 58,
          "type": ""
        },
        {
          "name": "clrCurrentAlertIndex",
          "description": "<p>Input/Output to support two way binding on current alert index</p>\n",
          "line": 39,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "clrCurrentAlertChange",
          "defaultValue": "new EventEmitter<ClrAlert>(false)",
          "line": 66,
          "type": "EventEmitter"
        },
        {
          "name": "clrCurrentAlertIndexChange",
          "defaultValue": "new EventEmitter<number>(false)",
          "line": 45,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "allAlerts",
          "type": "QueryList<ClrAlert>",
          "optional": false,
          "description": "",
          "line": 33,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrAlert"
            }
          ]
        },
        {
          "name": "multiAlertService",
          "type": "MultiAlertService",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { ClrAlert } from './alert';\nimport { MultiAlertService } from './providers/multi-alert.service';\n\n@Component({\n  selector: 'clr-alerts',\n  templateUrl: './alerts.html',\n  providers: [MultiAlertService],\n  host: {\n    '[class.alerts]': 'true',\n    '[class.alert-danger]': \"this.currentAlertType == 'danger'\",\n    '[class.alert-info]': \"this.currentAlertType == 'info'\",\n    '[class.alert-success]': \"this.currentAlertType == 'success'\",\n    '[class.alert-warning]': \"this.currentAlertType == 'warning'\",\n  },\n  styles: [':host { display: block }'],\n})\nexport class ClrAlerts implements AfterContentInit, OnDestroy {\n  @ContentChildren(ClrAlert) allAlerts: QueryList<ClrAlert>;\n\n  /**\n   * Input/Output to support two way binding on current alert index\n   */\n  @Input('clrCurrentAlertIndex')\n  public set _inputCurrentIndex(index: number) {\n    if (Number.isInteger(index) && index >= 0) {\n      this.multiAlertService.current = index;\n    }\n  }\n\n  @Output('clrCurrentAlertIndexChange') public currentAlertIndexChange = new EventEmitter<number>(false);\n\n  set currentAlertIndex(index: number) {\n    this.multiAlertService.current = index;\n  }\n  get currentAlertIndex() {\n    return this.multiAlertService.current;\n  }\n\n  /**\n   * Input/Output to support two way binding on current alert instance\n   */\n  @Input('clrCurrentAlert')\n  set currentAlert(alert: ClrAlert) {\n    if (alert) {\n      this.multiAlertService.currentAlert = alert;\n    }\n  }\n  get currentAlert() {\n    return this.multiAlertService.currentAlert;\n  }\n  @Output('clrCurrentAlertChange') public currentAlertChange = new EventEmitter<ClrAlert>(false);\n\n  /**\n   * Ensure we are only dealing with alerts that have not been closed yet\n   */\n  get alerts() {\n    return this.allAlerts.filter(alert => {\n      return alert.isHidden === false;\n    });\n  }\n\n  get currentAlertType(): string {\n    if (this.multiAlertService.currentAlert) {\n      return this.multiAlertService.currentAlert.alertType;\n    }\n    return '';\n  }\n\n  constructor(public multiAlertService: MultiAlertService) {}\n\n  ngAfterContentInit() {\n    this.multiAlertService.manage(this.allAlerts);\n    this.multiAlertService.changes.subscribe(index => {\n      this.currentAlertIndexChange.next(index);\n      this.currentAlertChange.next(this.multiAlertService.currentAlert);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.multiAlertService.destroy();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ":host { display: block }\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "multiAlertService",
            "type": "MultiAlertService"
          }
        ],
        "line": 82,
        "jsdoctags": [
          {
            "name": "multiAlertService",
            "type": "MultiAlertService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "OnDestroy"],
      "accessors": {
        "_inputCurrentIndex": {
          "name": "_inputCurrentIndex",
          "setSignature": {
            "name": "_inputCurrentIndex",
            "type": "void",
            "args": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 39,
            "description": "<p>Input/Output to support two way binding on current alert index</p>\n",
            "jsdoctags": [
              {
                "name": "index",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "currentAlertIndex": {
          "name": "currentAlertIndex",
          "setSignature": {
            "name": "currentAlertIndex",
            "type": "void",
            "args": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "index",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentAlertIndex",
            "type": "",
            "returnType": "",
            "line": 50
          }
        },
        "currentAlert": {
          "name": "currentAlert",
          "setSignature": {
            "name": "currentAlert",
            "type": "void",
            "args": [
              {
                "name": "alert",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "description": "<p>Input/Output to support two way binding on current alert instance</p>\n",
            "jsdoctags": [
              {
                "name": "alert",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentAlert",
            "type": "",
            "returnType": "",
            "line": 63
          }
        },
        "alerts": {
          "name": "alerts",
          "getSignature": {
            "name": "alerts",
            "type": "",
            "returnType": "",
            "line": 71,
            "description": "<p>Ensure we are only dealing with alerts that have not been closed yet</p>\n"
          }
        },
        "currentAlertType": {
          "name": "currentAlertType",
          "getSignature": {
            "name": "currentAlertType",
            "type": "string",
            "returnType": "string",
            "line": 77
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<clr-alerts-pager\n        *ngIf=\"multiAlertService.count > 1\"\n        [clrCurrentAlertIndex]=\"currentAlertIndex\">\n</clr-alerts-pager>\n<ng-content select=\"clr-alert\"></ng-content>\n"
    },
    {
      "name": "ClrAlertsPager",
      "id": "component-ClrAlertsPager-3ba524ce7f083298dd6ab57c3149a40c",
      "file": "src/clr-angular/emphasis/alert/alerts-pager.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-alerts-pager",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./alerts-pager.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrCurrentAlert",
          "description": "<p>Input/Output to support two way binding on current alert instance</p>\n",
          "line": 25,
          "type": ""
        },
        {
          "name": "clrCurrentAlertIndex",
          "description": "<p>Input/Output to support two way binding on current alert index</p>\n",
          "line": 40,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "clrCurrentAlertChange",
          "defaultValue": "new EventEmitter<ClrAlert>(false)",
          "line": 34,
          "type": "EventEmitter"
        },
        {
          "name": "clrCurrentAlertIndexChange",
          "defaultValue": "new EventEmitter<number>()",
          "line": 47,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [114]
        },
        {
          "name": "multiAlertService",
          "type": "MultiAlertService",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [114]
        },
        {
          "name": "multiAlertServiceChanges",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51
        },
        {
          "name": "pageDown",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62
        },
        {
          "name": "pageUp",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ClrAlert } from './alert';\nimport { MultiAlertService } from './providers/multi-alert.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\n\n@Component({\n  selector: 'clr-alerts-pager',\n  templateUrl: './alerts-pager.html',\n  host: { '[class.alerts-pager]': 'true' },\n})\nexport class ClrAlertsPager implements OnInit, OnDestroy {\n  private multiAlertServiceChanges: Subscription;\n\n  /**\n   * Input/Output to support two way binding on current alert instance\n   */\n  @Input('clrCurrentAlert')\n  set currentAlert(alert: ClrAlert) {\n    if (alert) {\n      this.multiAlertService.currentAlert = alert;\n    }\n  }\n  get currentAlert() {\n    return this.multiAlertService.currentAlert;\n  }\n\n  @Output('clrCurrentAlertChange') currentAlertChange = new EventEmitter<ClrAlert>(false);\n\n  /**\n   * Input/Output to support two way binding on current alert index\n   */\n  @Input('clrCurrentAlertIndex')\n  set currentAlertIndex(index: number) {\n    this.multiAlertService.current = index;\n  }\n  get currentAlertIndex() {\n    return this.multiAlertService.current;\n  }\n\n  @Output('clrCurrentAlertIndexChange') currentAlertIndexChange = new EventEmitter<number>();\n\n  constructor(public multiAlertService: MultiAlertService, public commonStrings: ClrCommonStringsService) {}\n\n  ngOnInit() {\n    this.multiAlertServiceChanges = this.multiAlertService.changes.subscribe(index => {\n      this.currentAlertIndexChange.emit(index);\n      this.currentAlertChange.emit(this.multiAlertService.activeAlerts[index]);\n    });\n  }\n\n  pageUp() {\n    this.multiAlertService.next();\n  }\n\n  pageDown() {\n    this.multiAlertService.previous();\n  }\n\n  ngOnDestroy() {\n    this.multiAlertServiceChanges.unsubscribe();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "multiAlertService",
            "type": "MultiAlertService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 47,
        "jsdoctags": [
          {
            "name": "multiAlertService",
            "type": "MultiAlertService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "accessors": {
        "currentAlert": {
          "name": "currentAlert",
          "setSignature": {
            "name": "currentAlert",
            "type": "void",
            "args": [
              {
                "name": "alert",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "description": "<p>Input/Output to support two way binding on current alert instance</p>\n",
            "jsdoctags": [
              {
                "name": "alert",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentAlert",
            "type": "",
            "returnType": "",
            "line": 30
          }
        },
        "currentAlertIndex": {
          "name": "currentAlertIndex",
          "setSignature": {
            "name": "currentAlertIndex",
            "type": "void",
            "args": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 40,
            "description": "<p>Input/Output to support two way binding on current alert index</p>\n",
            "jsdoctags": [
              {
                "name": "index",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentAlertIndex",
            "type": "",
            "returnType": "",
            "line": 43
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class=\"alerts-pager-control\">\n    <div class=\"alerts-page-down\">\n        <button class=\"alerts-pager-button\" (click)=\"pageDown()\">\n            <clr-icon shape=\"caret left\" [attr.title]=\"commonStrings.keys.previous\"></clr-icon>\n        </button>\n    </div>\n    <div class=\"alerts-pager-text\">\n        {{this.multiAlertService.current+1}} / {{this.multiAlertService.count}}\n    </div>\n    <div class=\"alerts-page-up\">\n        <button class=\"alerts-pager-button\" (click)=\"pageUp()\">\n            <clr-icon shape=\"caret right\" [attr.title]=\"commonStrings.keys.next\"></clr-icon>\n        </button>\n    </div>\n</div>\n"
    },
    {
      "name": "ClrButton",
      "id": "component-ClrButton-3437fff7954dfbb3505a94507b7140d1",
      "file": "src/clr-angular/button/button-group/button.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: LoadingListener, useExisting: ClrButton }"
        }
      ],
      "selector": "clr-button",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-template #buttonProjectedRef>\n    <button\n        [class]=\"classNames\"\n        (click)=\"emitClick()\"\n        [attr.type]=\"type\"\n        [attr.name]=\"name\"\n        [attr.disabled]=\"disabled\"\n        [id]=\"id\">\n        <span class=\"spinner spinner-inline\" *ngIf=\"loading\"></span>\n        <ng-content></ng-content>\n    </button>\n</ng-template>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "class",
          "line": 69,
          "type": "string"
        },
        {
          "name": "clrInMenu",
          "line": 50,
          "type": "boolean"
        },
        {
          "name": "disabled",
          "line": 125,
          "type": "any"
        },
        {
          "name": "id",
          "line": 112,
          "type": "string"
        },
        {
          "name": "name",
          "line": 86,
          "type": "string"
        },
        {
          "name": "type",
          "line": 99,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "click",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 139,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_classNames",
          "defaultValue": "'btn'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 62,
          "modifierKind": [112]
        },
        {
          "name": "_disabled",
          "defaultValue": "null",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 118,
          "modifierKind": [112]
        },
        {
          "name": "_enableService",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 32,
          "modifierKind": [112]
        },
        {
          "name": "_id",
          "defaultValue": "null",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 105,
          "modifierKind": [112]
        },
        {
          "name": "_inMenu",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "_name",
          "defaultValue": "null",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [112]
        },
        {
          "name": "_type",
          "defaultValue": "null",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 92,
          "modifierKind": [112]
        },
        {
          "name": "buttonInGroupService",
          "type": "ButtonInGroupService",
          "optional": false,
          "description": "",
          "line": 40,
          "decorators": [
            {
              "name": "SkipSelf",
              "stringifiedArguments": ""
            },
            {
              "name": "Optional",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "loading",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 133,
          "modifierKind": [114]
        },
        {
          "name": "templateRef",
          "type": "TemplateRef<ClrButton>",
          "optional": false,
          "description": "",
          "line": 35,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'buttonProjectedRef', {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "emitClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 141
        },
        {
          "name": "loadingStateChange",
          "args": [
            {
              "name": "state",
              "type": "ClrLoadingState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 135,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrLoadingState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Input, Optional, Output, SkipSelf, TemplateRef, ViewChild } from '@angular/core';\n\nimport { ClrLoadingState } from '../../utils/loading/loading';\nimport { LoadingListener } from '../../utils/loading/loading-listener';\nimport { ButtonInGroupService } from '../providers/button-in-group.service';\n\n@Component({\n  selector: 'clr-button',\n  template: `\n        <ng-template #buttonProjectedRef>\n            <button \n                [class]=\"classNames\" \n                (click)=\"emitClick()\"\n                [attr.type]=\"type\"\n                [attr.name]=\"name\"\n                [attr.disabled]=\"disabled\"\n                [id]=\"id\">\n                <span class=\"spinner spinner-inline\" *ngIf=\"loading\"></span>\n                <ng-content></ng-content>\n            </button>\n        </ng-template>\n    `,\n  providers: [{ provide: LoadingListener, useExisting: ClrButton }],\n})\nexport class ClrButton implements LoadingListener {\n  private _enableService: boolean = false;\n\n  @ViewChild('buttonProjectedRef', { static: true })\n  templateRef: TemplateRef<ClrButton>;\n\n  constructor(\n    @SkipSelf()\n    @Optional()\n    public buttonInGroupService: ButtonInGroupService\n  ) {}\n\n  private _inMenu: boolean = false;\n\n  get inMenu(): boolean {\n    return this._inMenu;\n  }\n\n  @Input('clrInMenu')\n  set inMenu(value: boolean) {\n    value = !!value;\n    if (this._inMenu !== value) {\n      this._inMenu = value;\n      // We check if the service flag is enabled\n      // and if the service exists because the service is optional\n      if (this._enableService && this.buttonInGroupService) {\n        this.buttonInGroupService.updateButtonGroup(this);\n      }\n    }\n  }\n\n  private _classNames: string = 'btn';\n\n  get classNames(): string {\n    return this._classNames;\n  }\n\n  @Input('class')\n  set classNames(value: string) {\n    if (typeof value === 'string') {\n      const classNames: string[] = value.split(' ');\n      if (classNames.indexOf('btn') === -1) {\n        classNames.push('btn');\n      }\n      this._classNames = classNames.join(' ');\n    }\n  }\n\n  private _name: string = null;\n\n  get name(): string {\n    return this._name;\n  }\n\n  @Input('name')\n  set name(value: string) {\n    if (typeof value === 'string') {\n      this._name = value;\n    }\n  }\n\n  private _type: string = null;\n\n  get type(): string {\n    return this._type;\n  }\n\n  @Input('type')\n  set type(value: string) {\n    if (typeof value === 'string') {\n      this._type = value;\n    }\n  }\n\n  private _id: string = null;\n\n  get id(): string {\n    return this._id;\n  }\n\n  @Input('id')\n  set id(value: string) {\n    if (typeof value === 'string') {\n      this._id = value;\n    }\n  }\n\n  private _disabled: any = null;\n\n  get disabled(): any {\n    return this._disabled;\n  }\n\n  @Input('disabled')\n  set disabled(value: any) {\n    if (value !== null && value !== false) {\n      this._disabled = '';\n    } else {\n      this._disabled = null;\n    }\n  }\n\n  public loading: boolean;\n\n  loadingStateChange(state: ClrLoadingState): void {\n    this.loading = state === ClrLoadingState.LOADING;\n  }\n\n  @Output('click') _click: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  emitClick(): void {\n    this._click.emit(true);\n  }\n\n  ngAfterViewInit() {\n    this._enableService = true;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "buttonInGroupService",
            "type": "ButtonInGroupService"
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "buttonInGroupService",
            "type": "ButtonInGroupService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["LoadingListener"],
      "accessors": {
        "inMenu": {
          "name": "inMenu",
          "setSignature": {
            "name": "inMenu",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "inMenu",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        },
        "classNames": {
          "name": "classNames",
          "setSignature": {
            "name": "classNames",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "classNames",
            "type": "string",
            "returnType": "string",
            "line": 64
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 81
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 99,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 94
          }
        },
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 112,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "id",
            "type": "string",
            "returnType": "string",
            "line": 107
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "any"
              }
            ],
            "returnType": "void",
            "line": 125,
            "jsdoctags": [
              {
                "name": "value",
                "type": "any",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "any",
            "returnType": "any",
            "line": 120
          }
        }
      }
    },
    {
      "name": "ClrButtonGroup",
      "id": "component-ClrButtonGroup-ffacabab72951d1ad14dcddfa53ef025",
      "file": "src/clr-angular/button/button-group/button-group.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ButtonInGroupService"
        }
      ],
      "selector": "clr-button-group",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["button-group.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrMenuPosition",
          "line": 113,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_menuPosition",
          "type": "string",
          "optional": false,
          "description": "<p>Overflow Menu</p>\n",
          "line": 106,
          "modifierKind": [112]
        },
        {
          "name": "_openMenu",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 160,
          "modifierKind": [112]
        },
        {
          "name": "_overflowMenuToggleClicked",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>Flag with indicates if the overflow menu toggle was clicked.\nIf true, this can save us traversing the DOM to find\nwhether the click was withing the button group toggle\nor menu in the onMouseClick method</p>\n",
          "line": 190,
          "modifierKind": [112]
        },
        {
          "name": "anchorPoint",
          "defaultValue": "Point.BOTTOM_LEFT",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 170,
          "modifierKind": [114]
        },
        {
          "name": "buttonGroupNewService",
          "type": "ButtonInGroupService",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [114]
        },
        {
          "name": "buttons",
          "type": "QueryList<ClrButton>",
          "optional": false,
          "description": "",
          "line": 23,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrButton"
            }
          ]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [114]
        },
        {
          "name": "inlineButtons",
          "defaultValue": "[]",
          "type": "ClrButton[]",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "menuButtons",
          "defaultValue": "[]",
          "type": "ClrButton[]",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "popoverPoint",
          "defaultValue": "Point.LEFT_TOP",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 171,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "getMoveIndex",
          "args": [
            {
              "name": "buttonToMove",
              "type": "ClrButton"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 81,
          "description": "<p>Author: Eudes</p>\n<p>Finds the order of a button w.r.t other buttons</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 2306,
                "end": 2318,
                "flags": 0,
                "escapedText": "buttonToMove"
              },
              "type": "ClrButton",
              "tagName": {
                "pos": 2300,
                "end": 2305,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": ""
            },
            {
              "tagName": {
                "pos": 2325,
                "end": 2332,
                "flags": 0,
                "escapedText": "returns"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "initializeButtons",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "description":
            "<ol>\n<li>Initializes the initial Button Group View</li>\n<li>Subscribes to changes on the ContentChildren\n in case the user content projection changes</li>\n</ol>\n"
        },
        {
          "name": "rearrangeButton",
          "args": [
            {
              "name": "button",
              "type": "ClrButton"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "description": "<p>Moves the button into the other ViewContainer\nwhen an update is received.</p>\n",
          "jsdoctags": [
            {
              "name": {
                "pos": 1642,
                "end": 1648,
                "flags": 0,
                "escapedText": "button"
              },
              "type": "ClrButton",
              "tagName": {
                "pos": 1636,
                "end": 1641,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        },
        {
          "name": "toggleMenu",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 179,
          "description":
            "<p>Toggle the ClrDropdown Menu when the ClrDropdown Toggle is\nclicked. Also set a flag that indicates that the toggle\nwas clicked so that we don&#39;t traverse the DOM to find the\nlocation of the click.</p>\n"
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "document:click",
          "args": [
            {
              "name": "target",
              "type": "any"
            }
          ],
          "argsDecorator": ["$event.target"],
          "description":
            "<p>Called on mouse clicks anywhere in the DOM.\nChecks to see if the mouseclick happened on the host or outside</p>\n",
          "line": 198
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChildren, ElementRef, HostListener, Input, QueryList } from '@angular/core';\n\nimport { Point } from '../../popover/common/popover';\nimport { CLR_MENU_POSITIONS } from '../../popover/dropdown/menu-positions';\nimport { ButtonInGroupService } from '../providers/button-in-group.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\n\nimport { ClrButton } from './button';\n\n@Component({\n  selector: 'clr-button-group',\n  templateUrl: 'button-group.html',\n  providers: [ButtonInGroupService],\n  host: { '[class.btn-group]': 'true' },\n})\nexport class ClrButtonGroup {\n  @ContentChildren(ClrButton) buttons: QueryList<ClrButton>;\n\n  constructor(\n    public buttonGroupNewService: ButtonInGroupService,\n    private elementRef: ElementRef,\n    public commonStrings: ClrCommonStringsService\n  ) {}\n\n  inlineButtons: ClrButton[] = [];\n  menuButtons: ClrButton[] = [];\n\n  /**\n   * 1. Initializes the initial Button Group View\n   * 2. Subscribes to changes on the ContentChildren\n   *    in case the user content projection changes\n   */\n  ngAfterContentInit() {\n    this.initializeButtons();\n    this.buttonGroupNewService.changes.subscribe(button => this.rearrangeButton(button));\n    this.buttons.changes.subscribe(() => {\n      this.initializeButtons();\n    });\n  }\n\n  /**\n   * Moves the button into the other ViewContainer\n   * when an update is received.\n   *\n   * @param button\n   */\n  rearrangeButton(button: ClrButton): void {\n    let fromView: ClrButton[];\n    let toView: ClrButton[];\n    if (button.inMenu) {\n      fromView = this.inlineButtons;\n      toView = this.menuButtons;\n    } else {\n      fromView = this.menuButtons;\n      toView = this.inlineButtons;\n    }\n    const index: number = fromView.indexOf(button);\n    if (index > -1) {\n      fromView.splice(index, 1);\n      const moveIndex = this.getMoveIndex(button);\n      if (moveIndex <= toView.length) {\n        toView.splice(moveIndex, 0, button);\n      }\n    }\n  }\n\n  /**\n   * Author: Eudes\n   *\n   * Finds the order of a button w.r.t other buttons\n   *\n   * @param buttonToMove\n   * @returns\n   */\n  getMoveIndex(buttonToMove: ClrButton): number {\n    const tempArr: ClrButton[] = this.buttons.filter(button => button.inMenu === buttonToMove.inMenu);\n    return tempArr.indexOf(buttonToMove);\n  }\n\n  initializeButtons(): void {\n    const tempInlineButtons: ClrButton[] = [];\n    const tempInMenuButtons: ClrButton[] = [];\n    this.buttons.forEach(button => {\n      if (button.inMenu) {\n        tempInMenuButtons.push(button);\n      } else {\n        tempInlineButtons.push(button);\n      }\n    });\n    this.inlineButtons = tempInlineButtons;\n    this.menuButtons = tempInMenuButtons;\n  }\n\n  /**\n   * Overflow Menu\n   *\n   */\n\n  // Indicates the position of the overflow menu\n  private _menuPosition: string;\n\n  get menuPosition(): string {\n    return this._menuPosition;\n  }\n\n  @Input('clrMenuPosition')\n  set menuPosition(pos: string) {\n    if (pos && CLR_MENU_POSITIONS.indexOf(pos) > -1) {\n      this._menuPosition = pos;\n    } else {\n      this._menuPosition = 'bottom-left';\n    }\n    // set the popover values based on menu position\n    switch (this._menuPosition) {\n      case 'top-right':\n        this.anchorPoint = Point.TOP_RIGHT;\n        this.popoverPoint = Point.RIGHT_BOTTOM;\n        break;\n      case 'top-left':\n        this.anchorPoint = Point.TOP_LEFT;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        break;\n      case 'bottom-right':\n        this.anchorPoint = Point.BOTTOM_RIGHT;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      case 'bottom-left':\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'right-top':\n        this.anchorPoint = Point.RIGHT_TOP;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'right-bottom':\n        this.anchorPoint = Point.RIGHT_BOTTOM;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        break;\n      case 'left-top':\n        this.anchorPoint = Point.LEFT_TOP;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      case 'left-bottom':\n        this.anchorPoint = Point.LEFT_BOTTOM;\n        this.popoverPoint = Point.RIGHT_BOTTOM;\n        break;\n      default:\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n    }\n  }\n\n  private _openMenu: boolean = false;\n\n  get openMenu(): boolean {\n    return this._openMenu;\n  }\n\n  set openMenu(value: boolean) {\n    this._openMenu = value;\n  }\n\n  public anchorPoint: Point = Point.BOTTOM_LEFT; // default if menuPosition isn't set\n  public popoverPoint: Point = Point.LEFT_TOP; // default if menuPosition isn't set\n\n  /**\n   * Toggle the ClrDropdown Menu when the ClrDropdown Toggle is\n   * clicked. Also set a flag that indicates that the toggle\n   * was clicked so that we don't traverse the DOM to find the\n   * location of the click.\n   */\n  toggleMenu(): void {\n    this.openMenu = !this.openMenu;\n    this._overflowMenuToggleClicked = true;\n  }\n\n  /**\n   * Flag with indicates if the overflow menu toggle was clicked.\n   * If true, this can save us traversing the DOM to find\n   * whether the click was withing the button group toggle\n   * or menu in the onMouseClick method\n   */\n  private _overflowMenuToggleClicked: boolean = false;\n\n  // TODO: Generic Directive to handle this\n  /**\n   * Called on mouse clicks anywhere in the DOM.\n   * Checks to see if the mouseclick happened on the host or outside\n   */\n  @HostListener('document:click', ['$event.target'])\n  onMouseClick(target: any): void {\n    if (this.openMenu && !this._overflowMenuToggleClicked) {\n      // Reset the overflow menu toggle clicked flag\n      this._overflowMenuToggleClicked = false;\n      let current: any = target; // Get the element in the DOM on which the mouse was clicked\n      const host: any = this.elementRef.nativeElement; // Current Button Group\n\n      if (current.classList.contains('dropdown-menu')) {\n        current = current.parentNode;\n        while (current) {\n          if (current === document) {\n            this.openMenu = false;\n            return;\n          }\n\n          // If clicked on dropdown menu and menu is in host\n          // do nothing\n          if (current === host) {\n            return;\n          }\n          current = current.parentNode;\n        }\n      }\n      this.openMenu = false;\n    }\n    this._overflowMenuToggleClicked = false; // Reset the overflow menu toggle clicked flag\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "buttonGroupNewService",
            "type": "ButtonInGroupService"
          },
          {
            "name": "elementRef",
            "type": "ElementRef"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "buttonGroupNewService",
            "type": "ButtonInGroupService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elementRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "menuPosition": {
          "name": "menuPosition",
          "setSignature": {
            "name": "menuPosition",
            "type": "void",
            "args": [
              {
                "name": "pos",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 113,
            "jsdoctags": [
              {
                "name": "pos",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "menuPosition",
            "type": "string",
            "returnType": "string",
            "line": 108
          }
        },
        "openMenu": {
          "name": "openMenu",
          "setSignature": {
            "name": "openMenu",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 166,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "openMenu",
            "type": "boolean",
            "returnType": "boolean",
            "line": 162
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<ng-container *ngFor=\"let inlineButton of inlineButtons\">\n    <ng-template [ngTemplateOutlet]=\"inlineButton.templateRef\"></ng-template>\n</ng-container>\n<ng-container *ngIf=\"menuButtons.length > 0\">\n    <div\n        class=\"btn-group-overflow open\"\n        [ngClass]=\"menuPosition\"\n        #anchor>\n        <button\n            class=\"btn dropdown-toggle\"\n            (click)=\"toggleMenu()\">\n            <clr-icon shape=\"ellipsis-horizontal\" [attr.title]=\"commonStrings.keys.more\"></clr-icon>\n        </button>\n        <div\n            class=\"dropdown-menu\"\n            *clrPopoverOld=\"openMenu; anchor: anchor; anchorPoint: anchorPoint; popoverPoint: popoverPoint;\">\n            <ng-template [ngTemplateOutlet]=\"ref\"></ng-template>\n        </div>\n    </div>\n</ng-container>\n<ng-template #ref>\n    <ng-container *ngFor=\"let menuButton of menuButtons\">\n        <ng-template [ngTemplateOutlet]=\"menuButton.templateRef\"></ng-template>\n    </ng-container>\n</ng-template>\n"
    },
    {
      "name": "ClrCalendar",
      "id": "component-ClrCalendar-263d4158a10925d96e4f410cd4b1482d",
      "file": "src/clr-angular/forms/datepicker/calendar.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-calendar",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./calendar.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_subs",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [112]
        },
        {
          "name": "calendarViewModel",
          "type": "CalendarViewModel",
          "optional": false,
          "description": "<p>Calendar View Model to generate the Calendar.</p>\n",
          "line": 38
        }
      ],
      "methodsClass": [
        {
          "name": "generateCalendarView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92,
          "description":
            "<p>Generates the Calendar View based on the calendar retrieved from the DateNavigationService.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeSubscriptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "description":
            "<p>Initialize subscriptions to:</p>\n<ol>\n<li>update the calendar view model.</li>\n<li>update the focusable day in the calendar view model.</li>\n<li>focus on the focusable day in the calendar.</li>\n</ol>\n",
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 135,
          "description": "<p>Focuses on the focusable day when the Calendar View is initialized.</p>\n"
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "description": "<p>Unsubscribe from subscriptions.</p>\n"
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keydown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "description": "<p>Delegates Keyboard arrow navigation to the DateNavigationService.</p>\n",
          "line": 107
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '../../utils/key-codes/key-codes';\n\nimport { CalendarViewModel } from './model/calendar-view.model';\nimport { CalendarModel } from './model/calendar.model';\nimport { DayModel } from './model/day.model';\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { DatepickerFocusService } from './providers/datepicker-focus.service';\nimport { LocaleHelperService } from './providers/locale-helper.service';\nimport { NO_OF_DAYS_IN_A_WEEK } from './utils/constants';\nimport { ClrDayOfWeek } from './interfaces/day-of-week.interface';\nimport { DateIOService } from './providers/date-io.service';\n\n@Component({ selector: 'clr-calendar', templateUrl: './calendar.html' })\nexport class ClrCalendar implements OnDestroy {\n  private _subs: Subscription[] = [];\n  constructor(\n    private _localeHelperService: LocaleHelperService,\n    private _dateNavigationService: DateNavigationService,\n    private _datepickerFocusService: DatepickerFocusService,\n    private _dateIOService: DateIOService,\n    private _elRef: ElementRef\n  ) {\n    this.generateCalendarView();\n    this.initializeSubscriptions();\n  }\n\n  /**\n   * Calendar View Model to generate the Calendar.\n   */\n  calendarViewModel: CalendarViewModel;\n\n  /**\n   * Gets the locale days according to the TranslationWidth.Narrow format.\n   */\n  get localeDays(): ReadonlyArray<ClrDayOfWeek> {\n    return this._localeHelperService.localeDays;\n  }\n\n  get calendar(): CalendarModel {\n    return this._dateNavigationService.displayedCalendar;\n  }\n\n  get selectedDay(): DayModel {\n    return this._dateNavigationService.selectedDay;\n  }\n\n  get focusedDay(): DayModel {\n    return this._dateNavigationService.focusedDay;\n  }\n\n  get today(): DayModel {\n    return this._dateNavigationService.today;\n  }\n\n  /**\n   * Initialize subscriptions to:\n   * 1. update the calendar view model.\n   * 2. update the focusable day in the calendar view model.\n   * 3. focus on the focusable day in the calendar.\n   */\n  private initializeSubscriptions(): void {\n    this._subs.push(\n      this._dateNavigationService.displayedCalendarChange.subscribe(() => {\n        this.generateCalendarView();\n      })\n    );\n\n    this._subs.push(\n      this._dateNavigationService.focusedDayChange.subscribe((focusedDay: DayModel) => {\n        this.calendarViewModel.updateFocusableDay(focusedDay);\n      })\n    );\n\n    this._subs.push(\n      this._dateNavigationService.focusOnCalendarChange.subscribe(() => {\n        this._datepickerFocusService.focusCell(this._elRef);\n      })\n    );\n  }\n\n  /**\n   * Generates the Calendar View based on the calendar retrieved from the DateNavigationService.\n   */\n  private generateCalendarView(): void {\n    this.calendarViewModel = new CalendarViewModel(\n      this.calendar,\n      this.selectedDay,\n      this.focusedDay,\n      this.today,\n      this._localeHelperService.firstDayOfWeek,\n      this._dateIOService.disabledDates\n    );\n  }\n\n  /**\n   * Delegates Keyboard arrow navigation to the DateNavigationService.\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent) {\n    if (event && this.focusedDay) {\n      switch (event.keyCode) {\n        case UP_ARROW:\n          event.preventDefault();\n          this._dateNavigationService.incrementFocusDay(-1 * NO_OF_DAYS_IN_A_WEEK);\n          break;\n        case DOWN_ARROW:\n          event.preventDefault();\n          this._dateNavigationService.incrementFocusDay(NO_OF_DAYS_IN_A_WEEK);\n          break;\n        case LEFT_ARROW:\n          event.preventDefault();\n          this._dateNavigationService.incrementFocusDay(-1);\n          break;\n        case RIGHT_ARROW:\n          event.preventDefault();\n          this._dateNavigationService.incrementFocusDay(1);\n          break;\n        default:\n          break; // No default case. TSLint x-(\n      }\n    }\n  }\n\n  /**\n   * Focuses on the focusable day when the Calendar View is initialized.\n   */\n  ngAfterViewInit() {\n    this._datepickerFocusService.focusCell(this._elRef);\n  }\n\n  /**\n   * Unsubscribe from subscriptions.\n   */\n  ngOnDestroy(): void {\n    this._subs.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService"
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService"
          },
          {
            "name": "_datepickerFocusService",
            "type": "DatepickerFocusService"
          },
          {
            "name": "_dateIOService",
            "type": "DateIOService"
          },
          {
            "name": "_elRef",
            "type": "ElementRef"
          }
        ],
        "line": 23,
        "jsdoctags": [
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_datepickerFocusService",
            "type": "DatepickerFocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dateIOService",
            "type": "DateIOService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_elRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "accessors": {
        "localeDays": {
          "name": "localeDays",
          "getSignature": {
            "name": "localeDays",
            "type": "",
            "returnType": "ReadonlyArray<ClrDayOfWeek>",
            "line": 43,
            "description": "<p>Gets the locale days according to the TranslationWidth.Narrow format.</p>\n"
          }
        },
        "calendar": {
          "name": "calendar",
          "getSignature": {
            "name": "calendar",
            "type": "",
            "returnType": "CalendarModel",
            "line": 47
          }
        },
        "selectedDay": {
          "name": "selectedDay",
          "getSignature": {
            "name": "selectedDay",
            "type": "",
            "returnType": "DayModel",
            "line": 51
          }
        },
        "focusedDay": {
          "name": "focusedDay",
          "getSignature": {
            "name": "focusedDay",
            "type": "",
            "returnType": "DayModel",
            "line": 55
          }
        },
        "today": {
          "name": "today",
          "getSignature": {
            "name": "today",
            "type": "",
            "returnType": "DayModel",
            "line": 59
          }
        }
      },
      "templateData":
        "<table class=\"calendar-table\">\n    <tr class=\"calendar-row weekdays\">\n        <td *ngFor=\"let day of localeDays\" class=\"calendar-cell weekday\" role=\"heading\" [attr.aria-label]=\"day.day\">\n            {{day.narrow}}\n        </td>\n    </tr>\n    <tr class=\"calendar-row\" *ngFor=\"let row of calendarViewModel.calendarView\">\n        <td *ngFor=\"let dayView of row\" class=\"calendar-cell\">\n            <clr-day [clrDayView]=\"dayView\"></clr-day>\n        </td>\n    </tr>\n</table>\n"
    },
    {
      "name": "ClrCheckboxContainer",
      "id": "component-ClrCheckboxContainer-a21c33530f6f73f8a3a1fd71d92446c9",
      "file": "src/clr-angular/forms/checkbox/checkbox-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "NgControlService"
        },
        {
          "name": "ControlClassService"
        },
        {
          "name": "IfErrorService"
        }
      ],
      "selector": "clr-checkbox-container,clr-toggle-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [class.clr-control-inline]=\"clrInline\" [ngClass]=\"controlClass()\">\n  <ng-content select=\"clr-checkbox-wrapper,clr-toggle-wrapper\"></ng-content>\n  <div class=\"clr-subtext-wrapper\">\n    <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n    <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n    <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrInline",
          "line": 54,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "inline",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 114
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 110
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, Input, OnDestroy, Optional } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { ClrLabel } from '../common/label';\nimport { ControlClassService } from '../common/providers/control-class.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\n\n@Component({\n  selector: 'clr-checkbox-container,clr-toggle-container',\n  template: `\n    <ng-content select=\"label\"></ng-content>\n    <label *ngIf=\"!label && addGrid()\"></label>\n    <div class=\"clr-control-container\" [class.clr-control-inline]=\"clrInline\" [ngClass]=\"controlClass()\">\n      <ng-content select=\"clr-checkbox-wrapper,clr-toggle-wrapper\"></ng-content>\n      <div class=\"clr-subtext-wrapper\">\n        <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n        <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n      </div>\n    </div>\n  `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [NgControlService, ControlClassService, IfErrorService],\n})\nexport class ClrCheckboxContainer implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n  invalid = false;\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n  private inline = false;\n  control: NgControl;\n  // private formGroup: AbstractControl;\n\n  /*\n   * Here we want to support the following cases\n   * clrInline - true by presence\n   * clrInline=\"true|false\" - unless it is explicitly false, strings are considered true\n   * [clrInline]=\"true|false\" - expect a boolean\n   */\n  @Input()\n  set clrInline(value: boolean | string) {\n    if (typeof value === 'string') {\n      this.inline = value === 'false' ? false : true;\n    } else {\n      this.inline = !!value;\n    }\n  }\n  get clrInline() {\n    return this.inline;\n  }\n\n  // @TODO Solve for group validation, which doesn't work now with ngModelGroup\n  // Blocked by https://github.com/angular/angular/issues/20268\n  // @Input()\n  // set clrFormGroup(value: FormGroup) {\n  //   this.formGroup = value;\n  // }\n\n  // @Input()\n  // set clrFormArray(value: FormArray) {\n  //   this.formGroup = value;\n  // }\n\n  constructor(\n    private ifErrorService: IfErrorService,\n    @Optional() private layoutService: LayoutService,\n    private controlClassService: ControlClassService,\n    private ngControlService: NgControlService\n  ) {\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n  }\n\n  ngOnInit() {\n    // @TODO put a solution in for form group validation\n    // if (!this.formGroup) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n    // } else {\n    //   // Because ngModel does this, we have to delay a tick to get the result\n    //   Promise.resolve().then(() => {\n    //     this.subscriptions.push(\n    //       this.formGroup.statusChanges.subscribe(() => {\n    //         this.invalid = this.formGroup.invalid;\n    //       })\n    //     );\n    //   });\n    // }\n  }\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid(), this.inline ? 'clr-control-inline' : '');\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 63,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "accessors": {
        "clrInline": {
          "name": "clrInline",
          "setSignature": {
            "name": "clrInline",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "clrInline",
            "type": "",
            "returnType": "",
            "line": 61
          }
        }
      }
    },
    {
      "name": "ClrCheckboxWrapper",
      "id": "component-ClrCheckboxWrapper-88675796b961081e9d6a7d4bb345aede",
      "file": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ControlIdService"
        },
        {
          "name": "IS_TOGGLE_PROVIDER"
        }
      ],
      "selector": "clr-checkbox-wrapper,clr-toggle-wrapper",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"[clrCheckbox],[clrToggle]\"></ng-content>\n<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label\"></label>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: true}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [112]
        },
        {
          "name": "toggle",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 40
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, OnInit, ContentChild, Inject, InjectionToken, OnDestroy } from '@angular/core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { ClrLabel } from '../common/label';\n\nexport const IS_TOGGLE = new InjectionToken<BehaviorSubject<boolean>>('IS_TOGGLE');\nexport function isToggleFactory() {\n  return new BehaviorSubject<boolean>(false);\n}\nexport const IS_TOGGLE_PROVIDER = { provide: IS_TOGGLE, useFactory: isToggleFactory };\n\n@Component({\n  selector: 'clr-checkbox-wrapper,clr-toggle-wrapper',\n  template: `\n    <ng-content select=\"[clrCheckbox],[clrToggle]\"></ng-content>\n    <ng-content select=\"label\"></ng-content>\n    <label *ngIf=\"!label\"></label>\n  `,\n  host: {\n    '[class.clr-checkbox-wrapper]': '!toggle',\n    '[class.clr-toggle-wrapper]': 'toggle',\n  },\n  providers: [ControlIdService, IS_TOGGLE_PROVIDER],\n})\nexport class ClrCheckboxWrapper implements DynamicWrapper, OnInit, OnDestroy {\n  // We need both _dynamic for HostWrapper and ContentChild(ClrLabel) in cases where\n  // the user puts a radio inside a wrapper without a label, host wrapping doesn't apply\n  // but we'd still need to insert a label\n  _dynamic = false;\n  @ContentChild(ClrLabel, { static: true })\n  label: ClrLabel;\n  toggle = false;\n  private subscriptions: Subscription[] = [];\n\n  constructor(@Inject(IS_TOGGLE) toggleService: BehaviorSubject<boolean>) {\n    this.subscriptions.push(\n      toggleService.subscribe(state => {\n        this.toggle = state;\n      })\n    );\n  }\n\n  ngOnInit() {\n    if (this.label) {\n      this.label.disableGrid();\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "toggleService",
            "type": "BehaviorSubject<boolean>"
          }
        ],
        "line": 41,
        "jsdoctags": [
          {
            "name": "toggleService",
            "type": "BehaviorSubject<boolean>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper", "OnInit", "OnDestroy"]
    },
    {
      "name": "ClrCombobox",
      "id": "component-ClrCombobox-a29c75833289d713487635e244afa5e9",
      "file": "src/clr-angular/forms/combobox/combobox.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ClrPopoverToggleService"
        },
        {
          "name": "{ provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef }"
        },
        {
          "name": "OptionSelectionService"
        },
        {
          "name": "{ provide: ComboboxDomAdapter, useFactory: comboboxDomAdapterFactory, deps: [PLATFORM_ID] }"
        }
      ],
      "selector": "clr-combobox",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./combobox.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "input",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'input', {static: false}"
            }
          ]
        },
        {
          "name": "options",
          "type": "ClrOptions",
          "optional": false,
          "description": "",
          "line": 56,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrOptions, {static: false}"
            }
          ]
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 57,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "closeMenuOnTabPress",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeSubscriptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 109
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113
        },
        {
          "name": "registerPopoverIgnoredInput",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "modifierKind": [112]
        },
        {
          "name": "renderSelection",
          "args": [
            {
              "name": "selectedOption",
              "type": "ClrOption<T>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "selectedOption",
              "type": "ClrOption<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleOptionsMenu",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "line": 96
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { isPlatformBrowser } from '@angular/common';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  PLATFORM_ID,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { TAB } from '../../utils/key-codes/key-codes';\n\nimport { ClrOption } from './option';\nimport { ClrOptions } from './options';\nimport { OptionSelectionService } from './providers/option-selection.service';\nimport { ComboboxDomAdapter } from './utils/combobox-dom-adapter.service';\nimport { ComboboxNoopDomAdapter } from './utils/combobox-noop-dom-adapter.service';\n\n// Fixes build error\n// @dynamic (https://github.com/angular/angular/issues/19698#issuecomment-338340211)\nexport function comboboxDomAdapterFactory(platformId: Object) {\n  if (isPlatformBrowser(platformId)) {\n    return new ComboboxDomAdapter();\n  } else {\n    return new ComboboxNoopDomAdapter();\n  }\n}\n\n@Component({\n  selector: 'clr-combobox',\n  templateUrl: './combobox.html',\n  providers: [\n    ClrPopoverToggleService,\n    { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },\n    OptionSelectionService,\n    { provide: ComboboxDomAdapter, useFactory: comboboxDomAdapterFactory, deps: [PLATFORM_ID] },\n  ],\n  host: { '[class.clr-combobox]': 'true' },\n})\nexport class ClrCombobox<T> implements AfterContentInit, OnDestroy {\n  @ViewChild('input', { static: false })\n  input: ElementRef;\n  @ContentChild(ClrOptions, { static: false })\n  options: ClrOptions;\n  private subscription: Subscription;\n\n  constructor(\n    private toggleService: ClrPopoverToggleService,\n    private optionSelectionService: OptionSelectionService<T>,\n    private renderer: Renderer2,\n    private domAdapter: ComboboxDomAdapter\n  ) {\n    // TODO: Might need to delay this to later in the lifecycle and use a BehaviorSubject instead\n    this.initializeSubscriptions();\n  }\n\n  private initializeSubscriptions(): void {\n    this.subscription = this.optionSelectionService.renderSelectionChanged.subscribe((option: ClrOption<T>) => {\n      this.renderSelection(option);\n    });\n  }\n\n  private renderSelection(selectedOption: ClrOption<T>): void {\n    if (this.input && selectedOption) {\n      this.domAdapter.clearChildren(this.input.nativeElement);\n      const clone: HTMLElement = this.domAdapter.cloneNode(selectedOption.elRef.nativeElement);\n      this.renderer.setAttribute(clone, 'contenteditable', 'false');\n      this.renderer.appendChild(this.input.nativeElement, clone);\n    }\n  }\n\n  private registerPopoverIgnoredInput() {\n    if (this.input) {\n      // @TODO COMBOBOX: intentionally commented; resolve while merging the Combobox\n      //this.toggleService.registerIgnoredElement(this.input);\n    }\n  }\n\n  toggleOptionsMenu(event: MouseEvent): void {\n    this.toggleService.toggleWithEvent(event);\n  }\n\n  @HostListener('click')\n  focusInput() {\n    if (this.input) {\n      this.domAdapter.focus(this.input.nativeElement);\n    }\n  }\n\n  closeMenuOnTabPress(event: KeyboardEvent) {\n    if (event && event.keyCode === TAB) {\n      this.toggleService.open = false;\n    }\n  }\n\n  // Lifecycle methods\n  ngAfterContentInit() {\n    this.registerPopoverIgnoredInput();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "optionSelectionService",
            "type": "OptionSelectionService<T>"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "domAdapter",
            "type": "ComboboxDomAdapter"
          }
        ],
        "line": 57,
        "jsdoctags": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "optionSelectionService",
            "type": "OptionSelectionService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "ComboboxDomAdapter",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "OnDestroy"],
      "templateData":
        "<!--\n* Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<!--\nThe div below is contenteditable instead of the host to avoid the input being focused\neven if the user clicks outside of the clr-select-input.\nMore info here: https://stackoverflow.com/a/34445203/3538394\n-->\n<div class=\"clr-combobox-input-container\">\n    <div class=\"clr-combobox-input\" contenteditable=\"true\" #input (keydown)=\"closeMenuOnTabPress($event)\">\n        <!-- Highlighted options will be rendererd here later.-->\n    </div>\n    <button class=\"clr-combobox-trigger\" tabindex=\"-1\" (click)=\"toggleOptionsMenu($event)\">\n        <clr-icon shape=\"caret down\" size=\"12\"></clr-icon>\n    </button>\n</div>\n\n<!-- Content projected by the consumer in ng-template. -->\n<ng-template #projectedOptions>\n    <ng-content></ng-content>\n</ng-template>\n\n<!-- Create the options menu ourself if the consumer doesnt provide the menu. -->\n<clr-options *ngIf=\"!options\">\n    <ng-container [ngTemplateOutlet]=\"projectedOptions\"></ng-container>\n</clr-options>\n\n<!-- If consumer provides the menu, render it -->\n<ng-container *ngIf=\"options\" [ngTemplateOutlet]=\"projectedOptions\"></ng-container>\n"
    },
    {
      "name": "ClrControlError",
      "id": "component-ClrControlError-112f1c25e7e0d482ba5824dae816a418",
      "file": "src/clr-angular/forms/common/error.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "AriaLiveService"
        }
      ],
      "selector": "clr-control-error",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "controlIdService",
          "type": "ControlIdService",
          "optional": false,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Optional, ElementRef, AfterViewInit } from '@angular/core';\nimport { ControlIdService } from './providers/control-id.service';\nimport { AriaLiveService } from '../../utils/a11y/aria-live.service';\n\n@Component({\n  providers: [AriaLiveService],\n  selector: 'clr-control-error',\n  template: `\n    <ng-content></ng-content>\n    `,\n  host: {\n    '[class.clr-subtext]': 'true',\n    '[id]': 'controlIdService?.id + \"-error\"',\n  },\n})\nexport class ClrControlError implements AfterViewInit {\n  constructor(\n    @Optional() public controlIdService: ControlIdService,\n    private ariaLiveService: AriaLiveService,\n    private el: ElementRef\n  ) {}\n\n  ngAfterViewInit() {\n    this.ariaLiveService.announce(this.el.nativeElement);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "controlIdService",
            "type": "ControlIdService"
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 22,
        "jsdoctags": [
          {
            "name": "controlIdService",
            "type": "ControlIdService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"]
    },
    {
      "name": "ClrControlHelper",
      "id": "component-ClrControlHelper-30aaf8fad57091c1e2a4331b1309e66d",
      "file": "src/clr-angular/forms/common/helper.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-control-helper",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "controlIdService",
          "type": "ControlIdService",
          "optional": false,
          "description": "",
          "line": 21,
          "decorators": [
            {
              "name": "Optional",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Optional } from '@angular/core';\nimport { ControlIdService } from './providers/control-id.service';\n\n@Component({\n  selector: 'clr-control-helper',\n  template: `\n    <ng-content></ng-content>\n    `,\n  host: {\n    '[class.clr-subtext]': 'true',\n    '[id]': 'controlIdService?.id + \"-helper\"',\n  },\n})\nexport class ClrControlHelper {\n  constructor(@Optional() public controlIdService: ControlIdService) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "controlIdService",
            "type": "ControlIdService"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "controlIdService",
            "type": "ControlIdService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrDatagrid",
      "id": "component-ClrDatagrid-5845a02fc67d20207cfb9b7ffe450c45",
      "file": "src/clr-angular/data/datagrid/datagrid.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "Selection"
        },
        {
          "name": "Sort"
        },
        {
          "name": "FiltersProvider"
        },
        {
          "name": "Page"
        },
        {
          "name": "Items"
        },
        {
          "name": "DatagridRenderOrganizer"
        },
        {
          "name": "RowActionService"
        },
        {
          "name": "ExpandableRowsCount"
        },
        {
          "name": "StateDebouncer"
        },
        {
          "name": "DetailService"
        },
        {
          "name": "UNIQUE_ID_PROVIDER"
        },
        {
          "name": "StateProvider"
        },
        {
          "name": "TableSizeService"
        },
        {
          "name": "ColumnsService"
        },
        {
          "name": "DisplayModeService"
        }
      ],
      "selector": "clr-datagrid",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./datagrid.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDetailExpandableAriaLabel",
          "defaultValue": "this.commonStrings.keys.detailExpandableAriaLabel",
          "line": 161,
          "type": "string"
        },
        {
          "name": "clrDgLoading",
          "line": 104,
          "type": "boolean"
        },
        {
          "name": "clrDgPreserveSelection",
          "line": 164,
          "type": "boolean"
        },
        {
          "name": "clrDgRowSelection",
          "line": 173,
          "type": "boolean"
        },
        {
          "name": "clrDgSelected",
          "description": "<p>Array of all selected items</p>\n",
          "line": 130,
          "type": "[]"
        },
        {
          "name": "clrDgSingleActionableAriaLabel",
          "defaultValue": "this.commonStrings.keys.singleActionableAriaLabel",
          "line": 160,
          "type": "string"
        },
        {
          "name": "clrDgSingleSelected",
          "description": "<p>Selected item in single-select mode</p>\n",
          "line": 145,
          "type": ""
        },
        {
          "name": "clrDgSingleSelectionAriaLabel",
          "defaultValue": "this.commonStrings.keys.singleSelectionAriaLabel",
          "line": 159,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "clrDgRefresh",
          "defaultValue": "new EventEmitter<ClrDatagridStateInterface<T>>(false)",
          "description":
            "<p>Output emitted whenever the data needs to be refreshed, based on user action or external ones</p>\n",
          "line": 111,
          "type": "EventEmitter"
        },
        {
          "name": "clrDgSelectedChange",
          "defaultValue": "new EventEmitter<T[]>(false)",
          "line": 139,
          "type": "EventEmitter"
        },
        {
          "name": "clrDgSingleSelectedChange",
          "defaultValue": "new EventEmitter<T>(false)",
          "line": 157,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_calculationRows",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 317,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'calculationRows', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "_displayedRows",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 315,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'displayedRows', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "_projectedCalculationColumns",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 313,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'projectedCalculationColumns', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "_projectedDisplayColumns",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 311,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'projectedDisplayColumns', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "_subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "<p>Subscriptions to all the services and queries changes</p>\n",
          "line": 300,
          "modifierKind": [112]
        },
        {
          "name": "columns",
          "type": "QueryList<ClrDatagridColumn<T>>",
          "optional": false,
          "description": "<p>Hideable Column data source / detection.</p>\n",
          "line": 206,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrDatagridColumn"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [114]
        },
        {
          "name": "datagridTable",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 219,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'datagridTable', {static: false, read: ElementRef}"
            }
          ]
        },
        {
          "name": "detailService",
          "type": "DetailService",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [114]
        },
        {
          "name": "expandableRows",
          "type": "ExpandableRowsCount",
          "optional": false,
          "description": "",
          "line": 78,
          "modifierKind": [114]
        },
        {
          "name": "items",
          "type": "Items<T>",
          "optional": false,
          "description": "",
          "line": 77,
          "modifierKind": [114]
        },
        {
          "name": "iterator",
          "type": "ClrDatagridItems<T>",
          "optional": false,
          "description": "<p>We grab the smart iterator from projected content</p>\n",
          "line": 124,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrDatagridItems, {static: false}"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "placeholder",
          "type": "ClrDatagridPlaceholder<T>",
          "optional": false,
          "description": "<p>Custom placeholder detection</p>\n",
          "line": 201,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrDatagridPlaceholder, {static: false}"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "rowActionService",
          "type": "RowActionService",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [114]
        },
        {
          "name": "rows",
          "type": "QueryList<ClrDatagridRow<T>>",
          "optional": false,
          "description":
            "<p>When the datagrid is user-managed without the smart iterator, we get the items displayed\nby querying the projected content. This is needed to keep track of the models currently\ndisplayed, typically for selection.</p>\n",
          "line": 214,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrDatagridRow"
            }
          ]
        },
        {
          "name": "scrollableColumns",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 216,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'scrollableColumns', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "selection",
          "type": "Selection<T>",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [114]
        },
        {
          "name": "SELECTION_TYPE",
          "defaultValue": "SelectionType",
          "type": "",
          "optional": false,
          "description": "",
          "line": 94,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "dataChanged",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 116,
          "description": "<p>Public method to re-trigger the computation of displayed items manually</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 221
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 241,
          "description":
            "<p>Our setup happens in the view of some of our components, so we wait for it to be done before starting</p>\n"
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 302
        },
        {
          "name": "resize",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 306
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ClrDatagridColumn } from './datagrid-column';\nimport { ClrDatagridItems } from './datagrid-items';\nimport { ClrDatagridPlaceholder } from './datagrid-placeholder';\nimport { ClrDatagridRow } from './datagrid-row';\nimport { DatagridDisplayMode } from './enums/display-mode.enum';\nimport { ClrDatagridStateInterface } from './interfaces/state.interface';\nimport { DisplayModeService } from './providers/display-mode.service';\nimport { FiltersProvider } from './providers/filters';\nimport { ExpandableRowsCount } from './providers/global-expandable-rows';\nimport { Items } from './providers/items';\nimport { Page } from './providers/page';\nimport { RowActionService } from './providers/row-action-service';\nimport { Selection } from './providers/selection';\nimport { Sort } from './providers/sort';\nimport { StateDebouncer } from './providers/state-debouncer.provider';\nimport { StateProvider } from './providers/state.provider';\nimport { TableSizeService } from './providers/table-size.service';\nimport { DatagridRenderOrganizer } from './render/render-organizer';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { SelectionType } from './enums/selection-type';\nimport { ColumnsService } from './providers/columns.service';\nimport { DetailService } from './providers/detail.service';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\n\n@Component({\n  selector: 'clr-datagrid',\n  templateUrl: './datagrid.html',\n  providers: [\n    Selection,\n    Sort,\n    FiltersProvider,\n    Page,\n    Items,\n    DatagridRenderOrganizer,\n    RowActionService,\n    ExpandableRowsCount,\n    StateDebouncer,\n    DetailService,\n    UNIQUE_ID_PROVIDER,\n    StateProvider,\n    TableSizeService,\n    ColumnsService,\n    DisplayModeService,\n  ],\n  host: {\n    '[class.datagrid-host]': 'true',\n    '[class.datagrid-detail-open]': 'detailService.isOpen',\n  },\n})\nexport class ClrDatagrid<T = any> implements AfterContentInit, AfterViewInit, OnDestroy {\n  constructor(\n    private organizer: DatagridRenderOrganizer,\n    public items: Items<T>,\n    public expandableRows: ExpandableRowsCount,\n    public selection: Selection<T>,\n    public rowActionService: RowActionService,\n    private stateProvider: StateProvider<T>,\n    private displayMode: DisplayModeService,\n    private renderer: Renderer2,\n    public detailService: DetailService,\n    @Inject(UNIQUE_ID) datagridId: string,\n    private el: ElementRef,\n    private page: Page,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    this.detailService.id = datagridId;\n  }\n\n  /* reference to the enum so that template can access */\n  public SELECTION_TYPE = SelectionType;\n\n  /**\n   * Freezes the datagrid while data is loading\n   */\n  public get loading(): boolean {\n    return this.items.loading;\n  }\n\n  @Input('clrDgLoading')\n  public set loading(value: boolean) {\n    this.items.loading = value;\n  }\n\n  /**\n   * Output emitted whenever the data needs to be refreshed, based on user action or external ones\n   */\n  @Output('clrDgRefresh') public refresh = new EventEmitter<ClrDatagridStateInterface<T>>(false);\n\n  /**\n   * Public method to re-trigger the computation of displayed items manually\n   */\n  public dataChanged() {\n    this.items.refresh();\n  }\n\n  /**\n   * We grab the smart iterator from projected content\n   */\n  @ContentChild(ClrDatagridItems, { static: false })\n  public iterator: ClrDatagridItems<T>;\n\n  /**\n   * Array of all selected items\n   */\n  @Input('clrDgSelected')\n  set selected(value: T[]) {\n    if (value) {\n      this.selection.selectionType = SelectionType.Multi;\n    } else {\n      this.selection.selectionType = SelectionType.None;\n    }\n    this.selection.updateCurrent(value, false);\n  }\n\n  @Output('clrDgSelectedChange') selectedChanged = new EventEmitter<T[]>(false);\n\n  /**\n   * Selected item in single-select mode\n   */\n  @Input('clrDgSingleSelected')\n  set singleSelected(value: T) {\n    this.selection.selectionType = SelectionType.Single;\n    // the clrDgSingleSelected is updated in one of two cases:\n    // 1. an explicit value is passed\n    // 2. is being set to null or undefined, where previously it had a value\n    if (value) {\n      this.selection.currentSingle = value;\n    } else if (this.selection.currentSingle) {\n      this.selection.currentSingle = null;\n    }\n  }\n\n  @Output('clrDgSingleSelectedChange') singleSelectedChanged = new EventEmitter<T>(false);\n\n  @Input() clrDgSingleSelectionAriaLabel: string = this.commonStrings.keys.singleSelectionAriaLabel;\n  @Input() clrDgSingleActionableAriaLabel: string = this.commonStrings.keys.singleActionableAriaLabel;\n  @Input() clrDetailExpandableAriaLabel: string = this.commonStrings.keys.detailExpandableAriaLabel;\n\n  @Input()\n  set clrDgPreserveSelection(state: boolean) {\n    this.selection.preserveSelection = state;\n  }\n  /**\n   * @deprecated since 2.0, remove in 3.0\n   *\n   * Selection/Deselection on row click mode\n   */\n  @Input('clrDgRowSelection')\n  set rowSelectionMode(value: boolean) {\n    this.selection.rowSelectionMode = value;\n  }\n\n  /**\n   * Indicates if all currently displayed items are selected\n   */\n  public get allSelected() {\n    return this.selection.isAllSelected();\n  }\n\n  /**\n   * Selects/deselects all currently displayed items\n   * @param value\n   */\n  public set allSelected(value: boolean) {\n    /**\n     * This is a setter but we ignore the value.\n     * It's strange, but it lets us have an indeterminate state where only\n     * some of the items are selected.\n     */\n    this.selection.toggleAll();\n  }\n\n  /**\n   * Custom placeholder detection\n   */\n  @ContentChild(ClrDatagridPlaceholder, { static: false })\n  public placeholder: ClrDatagridPlaceholder<T>;\n\n  /**\n   * Hideable Column data source / detection.\n   */\n  @ContentChildren(ClrDatagridColumn) public columns: QueryList<ClrDatagridColumn<T>>;\n\n  /**\n   * When the datagrid is user-managed without the smart iterator, we get the items displayed\n   * by querying the projected content. This is needed to keep track of the models currently\n   * displayed, typically for selection.\n   */\n\n  @ContentChildren(ClrDatagridRow) rows: QueryList<ClrDatagridRow<T>>;\n  @ViewChild('scrollableColumns', { static: false, read: ViewContainerRef })\n  scrollableColumns: ViewContainerRef;\n\n  @ViewChild('datagridTable', { static: false, read: ElementRef })\n  datagridTable: ElementRef;\n\n  ngAfterContentInit() {\n    if (!this.items.smart) {\n      this.items.all = this.rows.map((row: ClrDatagridRow<T>) => row.item);\n    }\n\n    this._subscriptions.push(\n      this.rows.changes.subscribe(() => {\n        if (!this.items.smart) {\n          this.items.all = this.rows.map((row: ClrDatagridRow<T>) => row.item);\n        }\n        this.rows.forEach(row => {\n          this._displayedRows.insert(row._view);\n        });\n      })\n    );\n  }\n\n  /**\n   * Our setup happens in the view of some of our components, so we wait for it to be done before starting\n   */\n  ngAfterViewInit() {\n    // TODO: determine if we can get rid of provider wiring in view init so that subscriptions can be done earlier\n    this.refresh.emit(this.stateProvider.state);\n    this._subscriptions.push(\n      this.stateProvider.change.subscribe(state => this.refresh.emit(state)),\n      this.selection.change.subscribe(s => {\n        if (this.selection.selectionType === SelectionType.Single) {\n          this.singleSelectedChanged.emit(<T>s);\n        } else if (this.selection.selectionType === SelectionType.Multi) {\n          this.selectedChanged.emit(<T[]>s);\n        }\n      }),\n      this.page.change.subscribe(() => {\n        this.datagridTable.nativeElement.focus();\n      }),\n      // A subscription that listens for displayMode changes on the datagrid\n      this.displayMode.view.subscribe(viewChange => {\n        // Remove any projected columns from the projectedDisplayColumns container\n        for (let i = this._projectedDisplayColumns.length; i > 0; i--) {\n          this._projectedDisplayColumns.detach();\n        }\n        // Remove any projected columns from the projectedCalculationColumns container\n        for (let i = this._projectedCalculationColumns.length; i > 0; i--) {\n          this._projectedCalculationColumns.detach();\n        }\n        // Remove any projected rows from the calculationRows container\n        for (let i = this._calculationRows.length; i > 0; i--) {\n          this._calculationRows.detach();\n        }\n        // Remove any projected rows from the displayedRows container\n        for (let i = this._displayedRows.length; i > 0; i--) {\n          this._displayedRows.detach();\n        }\n        if (viewChange === DatagridDisplayMode.DISPLAY) {\n          // Set state, style for the datagrid to DISPLAY and insert row & columns into containers\n          this.renderer.removeClass(this.el.nativeElement, 'datagrid-calculate-mode');\n          this.columns.forEach(column => {\n            this._projectedDisplayColumns.insert(column._view);\n          });\n          this.rows.forEach(row => {\n            this._displayedRows.insert(row._view);\n          });\n        } else {\n          // Set state, style for the datagrid to CALCULATE and insert row & columns into containers\n          this.renderer.addClass(this.el.nativeElement, 'datagrid-calculate-mode');\n          this.columns.forEach(column => {\n            this._projectedCalculationColumns.insert(column._view);\n          });\n          this.rows.forEach(row => {\n            this._calculationRows.insert(row._view);\n          });\n        }\n      })\n    );\n  }\n\n  /**\n   * Subscriptions to all the services and queries changes\n   */\n  private _subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n\n  resize(): void {\n    this.organizer.resize();\n  }\n\n  @ViewChild('projectedDisplayColumns', { static: false, read: ViewContainerRef })\n  _projectedDisplayColumns: ViewContainerRef;\n  @ViewChild('projectedCalculationColumns', { static: false, read: ViewContainerRef })\n  _projectedCalculationColumns: ViewContainerRef;\n  @ViewChild('displayedRows', { static: false, read: ViewContainerRef })\n  _displayedRows: ViewContainerRef;\n  @ViewChild('calculationRows', { static: false, read: ViewContainerRef })\n  _calculationRows: ViewContainerRef;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer"
          },
          {
            "name": "items",
            "type": "Items<T>"
          },
          {
            "name": "expandableRows",
            "type": "ExpandableRowsCount"
          },
          {
            "name": "selection",
            "type": "Selection<T>"
          },
          {
            "name": "rowActionService",
            "type": "RowActionService"
          },
          {
            "name": "stateProvider",
            "type": "StateProvider<T>"
          },
          {
            "name": "displayMode",
            "type": "DisplayModeService"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "detailService",
            "type": "DetailService"
          },
          {
            "name": "datagridId",
            "type": "string"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "page",
            "type": "Page"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 74,
        "jsdoctags": [
          {
            "name": "organizer",
            "type": "DatagridRenderOrganizer",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "items",
            "type": "Items<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expandableRows",
            "type": "ExpandableRowsCount",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "selection",
            "type": "Selection<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "rowActionService",
            "type": "RowActionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stateProvider",
            "type": "StateProvider<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "displayMode",
            "type": "DisplayModeService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "datagridId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "page",
            "type": "Page",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "AfterViewInit", "OnDestroy"],
      "accessors": {
        "loading": {
          "name": "loading",
          "setSignature": {
            "name": "loading",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 104,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "loading",
            "type": "boolean",
            "returnType": "boolean",
            "line": 99,
            "description": "<p>Freezes the datagrid while data is loading</p>\n"
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "[]"
              }
            ],
            "returnType": "void",
            "line": 130,
            "description": "<p>Array of all selected items</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "[]",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "singleSelected": {
          "name": "singleSelected",
          "setSignature": {
            "name": "singleSelected",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 145,
            "description": "<p>Selected item in single-select mode</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrDgPreserveSelection": {
          "name": "clrDgPreserveSelection",
          "setSignature": {
            "name": "clrDgPreserveSelection",
            "type": "void",
            "args": [
              {
                "name": "state",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 164,
            "jsdoctags": [
              {
                "name": "state",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "rowSelectionMode": {
          "name": "rowSelectionMode",
          "setSignature": {
            "name": "rowSelectionMode",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 173,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "allSelected": {
          "name": "allSelected",
          "setSignature": {
            "name": "allSelected",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 188,
            "description": "<p>Selects/deselects all currently displayed items</p>\n",
            "jsdoctags": [
              {
                "name": {
                  "pos": 5799,
                  "end": 5804,
                  "flags": 0,
                  "escapedText": "value"
                },
                "type": "boolean",
                "tagName": {
                  "pos": 5793,
                  "end": 5798,
                  "flags": 0,
                  "escapedText": "param"
                },
                "comment": ""
              }
            ]
          },
          "getSignature": {
            "name": "allSelected",
            "type": "",
            "returnType": "",
            "line": 180,
            "description": "<p>Indicates if all currently displayed items are selected</p>\n"
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<ng-content select=\"clr-dg-action-bar\"></ng-content>\n<div class=\"datagrid-outer-wrapper\">\n  <div class=\"datagrid-inner-wrapper\">\n    <div class=\"datagrid\" #datagrid [attr.aria-hidden]=\"detailService.isOpen ? true : null\">\n      <div class=\"datagrid-table-wrapper\">\n        <div role=\"grid\" class=\"datagrid-table\" tabindex=\"-1\" #datagridTable>\n          <div role=\"rowgroup\" class=\"datagrid-header\">\n            <div role=\"row\" class=\"datagrid-row\">\n              <div class=\"datagrid-row-master datagrid-row-flex\">\n                <div class=\"datagrid-row-sticky\">\n                  <!--header for datagrid where you can select multiple rows -->\n                  <div role=\"columnheader\" class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                       *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\">\n                            <span class=\"datagrid-column-title\">\n                                <input clrCheckbox type=\"checkbox\" [(ngModel)]=\"allSelected\"\n                                       [attr.aria-label]=\"commonStrings.keys.selectAll\">\n                            </span>\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                  <!-- header for datagrid where you can select one row only -->\n                  <div role=\"columnheader\" class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                       *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\"\n                       [attr.aria-label]=\"clrDgSingleSelectionAriaLabel\">\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                  <!-- header for single row action; only displayType if we have at least one actionable row in datagrid -->\n                  <div role=\"columnheader\" class=\"datagrid-column datagrid-row-actions datagrid-fixed-column\"\n                       *ngIf=\"rowActionService.hasActionableRow\" [attr.aria-label]=\"clrDgSingleActionableAriaLabel\">\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                  <!-- header for carets; only displayType if we have at least one expandable row in datagrid -->\n                  <div role=\"columnheader\" class=\"datagrid-column datagrid-expandable-caret datagrid-fixed-column\"\n                       *ngIf=\"expandableRows.hasExpandableRow || detailService.enabled\" [attr.aria-label]=\"clrDetailExpandableAriaLabel\">\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                </div>\n                <div class=\"datagrid-row-scrollable\">\n                  <ng-container #projectedDisplayColumns></ng-container>\n                </div>\n              </div>\n            </div>\n          </div>\n          <ng-container #displayedRows></ng-container>\n          <!-- Custom placeholder overrides the default empty one -->\n          <ng-content select=\"clr-dg-placeholder\"></ng-content>\n          <clr-dg-placeholder *ngIf=\"!placeholder\"></clr-dg-placeholder>\n        </div>\n      </div>\n    </div>\n    <ng-content select=\"clr-dg-footer\"></ng-content>\n    <div class=\"datagrid-spinner\" *ngIf=\"loading\">\n      <clr-spinner clrMedium>Loading</clr-spinner>\n    </div>\n  </div>\n  <ng-content select=\"[clrIfDetail],clr-dg-detail\"></ng-content>\n</div>\n\n<div class=\"datagrid-calculation-table\">\n  <div class=\"datagrid-calculation-header\">\n    <ng-container #projectedCalculationColumns></ng-container>\n  </div>\n  <ng-container #calculationRows></ng-container>\n</div>\n"
    },
    {
      "name": "ClrDatagridActionBar",
      "id": "component-ClrDatagridActionBar-eb616b50ba5885c5282326891c543b9c",
      "file": "src/clr-angular/data/datagrid/datagrid-action-bar.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-action-bar",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'clr-dg-action-bar',\n  template: `\n        <ng-content></ng-content>\n    `,\n  host: { '[class.datagrid-action-bar]': 'true' },\n})\nexport class ClrDatagridActionBar {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrDatagridActionOverflow",
      "id": "component-ClrDatagridActionOverflow-f0fb8274363ba1a299710e8c13a5e75f",
      "file": "src/clr-angular/data/datagrid/datagrid-action-overflow.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "UNIQUE_ID_PROVIDER"
        },
        {
          "name": "ClrPopoverToggleService"
        },
        {
          "name": "ClrPopoverEventsService"
        },
        {
          "name": "ClrPopoverPositionService"
        }
      ],
      "selector": "clr-dg-action-overflow",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button class=\"datagrid-action-toggle\"\n        type=\"button\"\n        role=\"button\"\n        aria-haspopup=\"true\"\n        #anchor\n        [attr.aria-controls]=\"popoverId\"\n        [attr.aria-expanded]=\"open\"\n        [attr.aria-label]=\"commonStrings.keys.rowActions\"\n        clrPopoverAnchor\n        clrPopoverOpenCloseButton>\n    <clr-icon shape=\"ellipsis-vertical\" [attr.title]=\"commonStrings.keys.rowActions\"></clr-icon>\n</button>\n\n<div class=\"datagrid-action-overflow\"\n     role=\"menu\"\n     [id]=\"popoverId\"\n     [attr.aria-hidden]=\"!open\"\n     [attr.id]=\"popoverId\"\n     clrFocusTrap\n     *clrPopoverContent=\"open at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n    <ng-content></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgActionOverflowOpen",
          "line": 104,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrDgActionOverflowOpenChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 114,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_open",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 85,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 62,
          "modifierKind": [114]
        },
        {
          "name": "popoverId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 66,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "smartPosition",
          "defaultValue":
            "{\n    axis: ClrAxis.HORIZONTAL,\n    side: ClrSide.AFTER,\n    anchor: ClrAlignment.CENTER,\n    content: ClrAlignment.CENTER,\n  }",
          "type": "ClrPopoverPosition",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "focusFirstButton",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Inject, Input, OnDestroy, Output, NgZone, PLATFORM_ID } from '@angular/core';\n\nimport { RowActionService } from './providers/row-action-service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\nimport { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';\nimport { ClrAlignment } from '../../utils/popover/enums/alignment.enum';\nimport { ClrSide } from '../../utils/popover/enums/side.enum';\nimport { ClrAxis } from '../../utils/popover/enums/axis.enum';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';\nimport { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';\nimport { Subscription } from 'rxjs';\n\nlet clrDgActionId = 0;\n\n@Component({\n  selector: 'clr-dg-action-overflow',\n  providers: [UNIQUE_ID_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService],\n  template: `\n      <button class=\"datagrid-action-toggle\"\n              type=\"button\"\n              role=\"button\"\n              aria-haspopup=\"true\"\n              #anchor\n              [attr.aria-controls]=\"popoverId\"\n              [attr.aria-expanded]=\"open\"\n              [attr.aria-label]=\"commonStrings.keys.rowActions\"\n              clrPopoverAnchor\n              clrPopoverOpenCloseButton>\n          <clr-icon shape=\"ellipsis-vertical\" [attr.title]=\"commonStrings.keys.rowActions\"></clr-icon>\n      </button>\n\n      <div class=\"datagrid-action-overflow\"\n           role=\"menu\"\n           [id]=\"popoverId\"\n           [attr.aria-hidden]=\"!open\"\n           [attr.id]=\"popoverId\"\n           clrFocusTrap\n           *clrPopoverContent=\"open at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n          <ng-content></ng-content>\n      </div>\n  `,\n})\nexport class ClrDatagridActionOverflow implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n  public smartPosition: ClrPopoverPosition = {\n    axis: ClrAxis.HORIZONTAL,\n    side: ClrSide.AFTER,\n    anchor: ClrAlignment.CENTER,\n    content: ClrAlignment.CENTER,\n  };\n\n  constructor(\n    private rowActionService: RowActionService,\n    public commonStrings: ClrCommonStringsService,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private zone: NgZone,\n    private smartToggleService: ClrPopoverToggleService,\n    @Inject(UNIQUE_ID) public popoverId: string\n  ) {\n    this.rowActionService.register();\n    this.subscriptions.push(\n      this.smartToggleService.openChange.subscribe(openState => {\n        this.open = openState;\n        if (openState) {\n          this.focusFirstButton();\n        }\n      })\n    );\n    this.popoverId = 'clr-action-menu' + clrDgActionId++;\n  }\n\n  ngOnDestroy() {\n    this.rowActionService.unregister();\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  private _open: boolean = false;\n  public get open() {\n    return this._open;\n  }\n\n  private focusFirstButton(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.zone.runOutsideAngular(() => {\n        setTimeout(() => {\n          const firstButton: HTMLButtonElement = document.querySelector('button.action-item');\n          if (firstButton) {\n            firstButton.focus();\n          }\n        });\n      });\n    }\n  }\n\n  @Input('clrDgActionOverflowOpen')\n  public set open(open: boolean) {\n    const openState = !!open;\n    if (!!openState !== this.open) {\n      // prevents chocolate mess\n      this.smartToggleService.open = openState;\n      this.openChange.emit(openState);\n      this._open = openState;\n    }\n  }\n\n  @Output('clrDgActionOverflowOpenChange') public openChange = new EventEmitter<boolean>(false);\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "rowActionService",
            "type": "RowActionService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "zone",
            "type": "NgZone"
          },
          {
            "name": "smartToggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "popoverId",
            "type": "string"
          }
        ],
        "line": 58,
        "jsdoctags": [
          {
            "name": "rowActionService",
            "type": "RowActionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "zone",
            "type": "NgZone",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartToggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "popoverId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "accessors": {
        "open": {
          "name": "open",
          "setSignature": {
            "name": "open",
            "type": "void",
            "args": [
              {
                "name": "open",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 104,
            "jsdoctags": [
              {
                "name": "open",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "open",
            "type": "",
            "returnType": "",
            "line": 86
          }
        }
      }
    },
    {
      "name": "ClrDatagridCell",
      "id": "component-ClrDatagridCell-b830bedbafea59e7a976b4b7364e61c1",
      "file": "src/clr-angular/data/datagrid/datagrid-cell.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-cell",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "signpost",
          "type": "QueryList<ClrSignpost>",
          "optional": false,
          "description": "<hr>\n",
          "line": 32,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrSignpost"
            }
          ],
          "jsdoctags": [
            {
              "pos": 802,
              "end": 812,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 802,
                "end": 803,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 803,
                "end": 811,
                "flags": 0,
                "escapedText": "property"
              },
              "comment": "<p>signpost</p>\n"
            },
            {
              "pos": 831,
              "end": 847,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 831,
                "end": 832,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 832,
                "end": 843,
                "flags": 0,
                "escapedText": "description"
              },
              "comment": ""
            },
            {
              "pos": 849,
              "end": 863,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 849,
                "end": 850,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 850,
                "end": 862,
                "flags": 0,
                "escapedText": "ContentChild"
              },
              "comment":
                "<p>is used to detect the presence of a Signpost in the projected content.\nOn the host, we set the .datagrid-signpost-trigger class on the cell when signpost.length is greater than 0.</p>\n"
            }
          ]
        },
        {
          "name": "wrappedInjector",
          "type": "Injector",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChildren, Injector, OnInit, QueryList, ViewContainerRef } from '@angular/core';\n\nimport { ClrSignpost } from '../../popover/signpost/signpost';\nimport { HostWrapper } from '../../utils/host-wrapping/host-wrapper';\nimport { WrappedCell } from './wrapped-cell';\n\n@Component({\n  selector: 'clr-dg-cell',\n  template: `\n        <ng-content></ng-content>\n    `,\n  host: {\n    '[class.datagrid-cell]': 'true',\n    '[class.datagrid-signpost-trigger]': 'signpost.length > 0',\n    role: 'gridcell',\n  },\n})\nexport class ClrDatagridCell implements OnInit {\n  /*********\n   * @property signpost\n   *\n   * @description\n   * @ContentChild is used to detect the presence of a Signpost in the projected content.\n   * On the host, we set the .datagrid-signpost-trigger class on the cell when signpost.length is greater than 0.\n   *\n   */\n  @ContentChildren(ClrSignpost) signpost: QueryList<ClrSignpost>;\n\n  constructor(private vcr: ViewContainerRef) {}\n\n  private wrappedInjector: Injector;\n\n  ngOnInit() {\n    this.wrappedInjector = new HostWrapper(WrappedCell, this.vcr);\n  }\n\n  public get _view() {\n    return this.wrappedInjector.get(WrappedCell, this.vcr).cellView;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          }
        ],
        "line": 32,
        "jsdoctags": [
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "_view": {
          "name": "_view",
          "getSignature": {
            "name": "_view",
            "type": "",
            "returnType": "",
            "line": 42
          }
        }
      }
    },
    {
      "name": "ClrDatagridColumn",
      "id": "component-ClrDatagridColumn-92f3ec2cdcd6f9d70fdf781c2b71aff7",
      "file": "src/clr-angular/data/datagrid/datagrid-column.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ClrPopoverPositionService"
        },
        {
          "name": "ClrPopoverEventsService"
        },
        {
          "name": "ClrPopoverToggleService"
        }
      ],
      "selector": "clr-dg-column",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div class=\"datagrid-column-flex\">\n    <!-- I'm really not happy with that select since it's not very scalable -->\n    <ng-content select=\"clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter\"></ng-content>\n\n    <clr-dg-string-filter\n            *ngIf=\"field && !customFilter && (colType=='string')\"\n            [clrDgStringFilter]=\"registered\"\n            [(clrFilterValue)]=\"filterValue\"></clr-dg-string-filter>\n\n    <clr-dg-numeric-filter\n            *ngIf=\"field && !customFilter && (colType=='number')\"\n            [clrDgNumericFilter]=\"registered\"\n            [(clrFilterValue)]=\"filterValue\"></clr-dg-numeric-filter>\n\n    <ng-template #columnTitle>\n        <ng-content></ng-content>\n    </ng-template>\n\n    <button\n      class=\"datagrid-column-title\"\n      [attr.aria-label]=\"commonStrings.keys.sortColumn\"\n      *ngIf=\"sortable\"\n      (click)=\"sort()\"\n      type=\"button\">\n        <ng-container  *ngTemplateOutlet=\"columnTitle\"></ng-container>\n        <clr-icon\n                *ngIf=\"sortIcon\"\n                [attr.shape]=\"sortIcon\"\n                class=\"sort-icon\"></clr-icon>\n    </button>\n\n    <span class=\"datagrid-column-title\" *ngIf=\"!sortable\">\n        <ng-container *ngTemplateOutlet=\"columnTitle\"></ng-container>\n    </span>\n\n    <clr-dg-column-separator *ngIf=\"showSeparator\"></clr-dg-column-separator>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgColType",
          "defaultValue": "'string'",
          "line": 163,
          "type": "\"string\" | \"number\""
        },
        {
          "name": "clrDgField",
          "line": 166,
          "type": "string"
        },
        {
          "name": "clrDgSortBy",
          "line": 193,
          "type": ""
        },
        {
          "name": "clrDgSorted",
          "line": 231,
          "type": "boolean"
        },
        {
          "name": "clrDgSortOrder",
          "line": 256,
          "type": ""
        },
        {
          "name": "clrFilterValue",
          "line": 338,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "clrDgSortedChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "description": "",
          "line": 243,
          "type": "EventEmitter"
        },
        {
          "name": "clrDgSortOrderChange",
          "defaultValue": "new EventEmitter<ClrDatagridSortOrder>()",
          "line": 293,
          "type": "EventEmitter"
        },
        {
          "name": "clrFilterValueChange",
          "defaultValue": "new EventEmitter()",
          "line": 366,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_field",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 151,
          "modifierKind": [112]
        },
        {
          "name": "_sortBy",
          "type": "ClrDatagridComparatorInterface<T>",
          "optional": false,
          "description": "<p>ClrDatagridComparatorInterface to use when sorting the column</p>\n",
          "line": 186,
          "modifierKind": [112]
        },
        {
          "name": "_sorted",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "<p>Indicates if the column is currently sorted</p>\n",
          "line": 222,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 7764,
              "end": 7776,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 7764,
                "end": 7765,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 7765,
                "end": 7775,
                "flags": 0,
                "escapedText": "deprecated"
              },
              "comment": "<p>This will be removed soon, in favor of the sortOrder mechanism</p>\n"
            }
          ]
        },
        {
          "name": "_sortOrder",
          "defaultValue": "ClrDatagridSortOrder.UNSORTED",
          "type": "ClrDatagridSortOrder",
          "optional": false,
          "description": "<p>Indicates how the column is currently sorted</p>\n",
          "line": 250,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 98,
          "modifierKind": [114]
        },
        {
          "name": "customFilter",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "<p>A custom filter for this column that can be provided in the projected content</p>\n",
          "line": 321,
          "modifierKind": [114]
        },
        {
          "name": "showSeparator",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 105,
          "modifierKind": [114]
        },
        {
          "name": "sortIcon",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 295,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "<p>Subscription to the sort service changes</p>\n",
          "line": 110,
          "modifierKind": [112]
        },
        {
          "name": "wrappedInjector",
          "type": "Injector",
          "optional": false,
          "description": "",
          "line": 368,
          "modifierKind": [112]
        },
        {
          "name": "registered",
          "type": "RegisteredFilter<T | F>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "listenForDetailPaneChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 116,
          "modifierKind": [112]
        },
        {
          "name": "listenForSortingChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 126,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 370
        },
        {
          "name": "sort",
          "args": [
            {
              "name": "reverse",
              "type": "boolean",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 299,
          "description": "<p>Sorts the datagrid based on this column</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "reverse",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "deleteFilter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "setFilter",
          "args": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  ContentChild,\n  EventEmitter,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewContainerRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { HostWrapper } from '../../utils/host-wrapping/host-wrapper';\nimport { DatagridPropertyComparator } from './built-in/comparators/datagrid-property-comparator';\nimport { DatagridPropertyStringFilter } from './built-in/filters/datagrid-property-string-filter';\nimport { DatagridPropertyNumericFilter } from './built-in/filters/datagrid-property-numeric-filter';\nimport { DatagridStringFilterImpl } from './built-in/filters/datagrid-string-filter-impl';\nimport { DatagridNumericFilterImpl } from './built-in/filters/datagrid-numeric-filter-impl';\nimport { ClrDatagridSortOrder } from './enums/sort-order.enum';\nimport { ClrDatagridComparatorInterface } from './interfaces/comparator.interface';\nimport { CustomFilter } from './providers/custom-filter';\nimport { FiltersProvider } from './providers/filters';\nimport { Sort } from './providers/sort';\nimport { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';\nimport { ClrDatagridFilterInterface } from './interfaces/filter.interface';\nimport { WrappedColumn } from './wrapped-column';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';\nimport { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { DetailService } from './providers/detail.service';\n\n@Component({\n  selector: 'clr-dg-column',\n  template: `\n      <div class=\"datagrid-column-flex\">\n          <!-- I'm really not happy with that select since it's not very scalable -->\n          <ng-content select=\"clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter\"></ng-content>\n\n          <clr-dg-string-filter\n                  *ngIf=\"field && !customFilter && (colType=='string')\"\n                  [clrDgStringFilter]=\"registered\"\n                  [(clrFilterValue)]=\"filterValue\"></clr-dg-string-filter>\n\n          <clr-dg-numeric-filter\n                  *ngIf=\"field && !customFilter && (colType=='number')\"\n                  [clrDgNumericFilter]=\"registered\"\n                  [(clrFilterValue)]=\"filterValue\"></clr-dg-numeric-filter>\n\n          <ng-template #columnTitle>\n              <ng-content></ng-content>\n          </ng-template>\n\n          <button\n            class=\"datagrid-column-title\"\n            [attr.aria-label]=\"commonStrings.keys.sortColumn\"\n            *ngIf=\"sortable\"\n            (click)=\"sort()\"\n            type=\"button\">\n              <ng-container  *ngTemplateOutlet=\"columnTitle\"></ng-container>\n              <clr-icon\n                      *ngIf=\"sortIcon\"\n                      [attr.shape]=\"sortIcon\"\n                      class=\"sort-icon\"></clr-icon>\n          </button>\n\n          <span class=\"datagrid-column-title\" *ngIf=\"!sortable\">\n              <ng-container *ngTemplateOutlet=\"columnTitle\"></ng-container>\n          </span>\n\n          <clr-dg-column-separator *ngIf=\"showSeparator\"></clr-dg-column-separator>\n      </div>\n    `,\n  providers: [ClrPopoverPositionService, ClrPopoverEventsService, ClrPopoverToggleService],\n  host: {\n    '[class.datagrid-column]': 'true',\n    '[attr.aria-sort]': 'ariaSort',\n    role: 'columnheader',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClrDatagridColumn<T = any> extends DatagridFilterRegistrar<T, ClrDatagridFilterInterface<T>>\n  implements OnDestroy, OnInit {\n  constructor(\n    private _sort: Sort<T>,\n    filters: FiltersProvider<T>,\n    private vcr: ViewContainerRef,\n    private detailService: DetailService,\n    private changeDetectorRef: ChangeDetectorRef,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    super(filters);\n    this.subscriptions.push(this.listenForSortingChanges());\n    this.subscriptions.push(this.listenForDetailPaneChanges());\n  }\n\n  public showSeparator = true;\n\n  /**\n   * Subscription to the sort service changes\n   */\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  private listenForDetailPaneChanges() {\n    return this.detailService.stateChange.subscribe(state => {\n      if (this.showSeparator !== !state) {\n        this.showSeparator = !state;\n        // Have to manually change because of OnPush\n        this.changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  private listenForSortingChanges() {\n    return this._sort.change.subscribe(sort => {\n      // Need to manually mark the component to be checked\n      // for both activating and deactivating sorting\n      this.changeDetectorRef.markForCheck();\n      // We're only listening to make sure we emit an event when the column goes from sorted to unsorted\n      if (this.sortOrder !== ClrDatagridSortOrder.UNSORTED && sort.comparator !== this._sortBy) {\n        this._sortOrder = ClrDatagridSortOrder.UNSORTED;\n        this.sortOrderChange.emit(this._sortOrder);\n        // removes the sortIcon when column becomes unsorted\n        this.sortIcon = null;\n      }\n      // deprecated: to be removed - START\n      if (this.sorted && sort.comparator !== this._sortBy) {\n        this._sorted = false;\n        this.sortedChange.emit(false);\n      }\n      // deprecated: to be removed - END\n    });\n  }\n\n  /*\n     * Simple object property shortcut, activates both sorting and filtering\n     * based on native comparison of the specified property on the items.\n     */\n  private _field: string;\n  public get field() {\n    return this._field;\n  }\n\n  /*\n  * What type is this column?  This defaults to STRING, but can also be\n  * set to NUMBER.  Unsupported types default to STRING. Users can set it\n  * via the [clrDgColType] input by setting it to 'string' or 'number'.\n  */\n\n  // TODO: We might want to make this an enum in the future\n  @Input('clrDgColType') colType: 'string' | 'number' = 'string';\n\n  @Input('clrDgField')\n  public set field(field: string) {\n    if (typeof field === 'string') {\n      this._field = field;\n      if (!this.customFilter) {\n        if (this.colType === 'number') {\n          this.setFilter(new DatagridNumericFilterImpl(new DatagridPropertyNumericFilter(field)));\n        } else {\n          this.setFilter(new DatagridStringFilterImpl(new DatagridPropertyStringFilter(field)));\n        }\n      }\n      if (!this._sortBy) {\n        this._sortBy = new DatagridPropertyComparator(field);\n      }\n    }\n  }\n\n  /**\n   * ClrDatagridComparatorInterface to use when sorting the column\n   */\n\n  private _sortBy: ClrDatagridComparatorInterface<T>;\n\n  public get sortBy() {\n    return this._sortBy;\n  }\n\n  @Input('clrDgSortBy')\n  public set sortBy(comparator: ClrDatagridComparatorInterface<T> | string) {\n    if (typeof comparator === 'string') {\n      this._sortBy = new DatagridPropertyComparator(comparator);\n    } else {\n      if (comparator) {\n        this._sortBy = comparator;\n      } else {\n        if (this._field) {\n          this._sortBy = new DatagridPropertyComparator(this._field);\n        } else {\n          delete this._sortBy;\n        }\n      }\n    }\n  }\n\n  /**\n   * Indicates if the column is sortable\n   */\n  public get sortable(): boolean {\n    return !!this._sortBy;\n  }\n\n  // deprecated: to be removed - START\n  /**\n   * Indicates if the column is currently sorted\n   *\n   * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n   */\n  private _sorted = false;\n  public get sorted() {\n    return this._sorted;\n  }\n\n  /**\n   * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n   */\n  @Input('clrDgSorted')\n  public set sorted(value: boolean) {\n    if (!value && this.sorted) {\n      this._sorted = false;\n      this._sort.clear();\n    } else if (value && !this.sorted) {\n      this.sort();\n    }\n  }\n\n  /**\n   * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n   */\n  @Output('clrDgSortedChange') public sortedChange = new EventEmitter<boolean>();\n\n  // deprecated: to be removed - END\n\n  /**\n   * Indicates how the column is currently sorted\n   */\n  private _sortOrder: ClrDatagridSortOrder = ClrDatagridSortOrder.UNSORTED;\n  public get sortOrder() {\n    return this._sortOrder;\n  }\n\n  @Input('clrDgSortOrder')\n  public set sortOrder(value: ClrDatagridSortOrder) {\n    if (typeof value === 'undefined') {\n      return;\n    }\n\n    // only if the incoming order is different from the current one\n    if (this._sortOrder === value) {\n      return;\n    }\n\n    switch (value) {\n      // the Unsorted case happens when the current state is either Asc or Desc\n      default:\n      case ClrDatagridSortOrder.UNSORTED:\n        this._sort.clear();\n        break;\n      case ClrDatagridSortOrder.ASC:\n        this.sort(false);\n        break;\n      case ClrDatagridSortOrder.DESC:\n        this.sort(true);\n        break;\n    }\n  }\n\n  public get ariaSort() {\n    switch (this._sortOrder) {\n      default:\n      case ClrDatagridSortOrder.UNSORTED:\n        return 'none';\n      case ClrDatagridSortOrder.ASC:\n        return 'ascending';\n      case ClrDatagridSortOrder.DESC:\n        return 'descending';\n    }\n  }\n\n  @Output('clrDgSortOrderChange') public sortOrderChange = new EventEmitter<ClrDatagridSortOrder>();\n\n  public sortIcon: string;\n  /**\n   * Sorts the datagrid based on this column\n   */\n  public sort(reverse?: boolean) {\n    if (!this.sortable) {\n      return;\n    }\n\n    this._sort.toggle(this._sortBy, reverse);\n\n    // setting the private variable to not retrigger the setter logic\n    this._sortOrder = this._sort.reverse ? ClrDatagridSortOrder.DESC : ClrDatagridSortOrder.ASC;\n    // Sets the correct icon for current sort order\n    this.sortIcon = this._sortOrder === ClrDatagridSortOrder.DESC ? 'arrow down' : 'arrow';\n    this.sortOrderChange.emit(this._sortOrder);\n\n    // deprecated: to be removed - START\n    this._sorted = true;\n    this.sortedChange.emit(true);\n    // deprecated: to be removed - END\n  }\n\n  /**\n   * A custom filter for this column that can be provided in the projected content\n   */\n  public customFilter = false;\n\n  @ContentChild(CustomFilter, { static: false })\n  public set projectedFilter(custom: any) {\n    if (custom) {\n      this.deleteFilter();\n      this.customFilter = true;\n    }\n  }\n\n  public get filterValue() {\n    if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {\n      return this.filter.value;\n    }\n  }\n\n  @Input('clrFilterValue')\n  public set updateFilterValue(newValue: string | [number, number]) {\n    if (!this.filter) {\n      return;\n    }\n    if (this.filter instanceof DatagridStringFilterImpl) {\n      if (!newValue || typeof newValue !== 'string') {\n        newValue = '';\n      }\n      if (newValue !== this.filter.value) {\n        this.filter.value = newValue;\n      }\n    } else if (this.filter instanceof DatagridNumericFilterImpl) {\n      if (!newValue || !(newValue instanceof Array)) {\n        newValue = [null, null];\n      }\n      if (newValue.length === 2 && (newValue[0] !== this.filter.value[0] || newValue[1] !== this.filter.value[1])) {\n        this.filter.value = newValue;\n      }\n    }\n  }\n\n  public set filterValue(newValue: string | [number, number]) {\n    if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {\n      this.updateFilterValue = newValue;\n      this.filterValueChange.emit(this.filter.value);\n    }\n  }\n\n  @Output('clrFilterValueChange') filterValueChange = new EventEmitter();\n\n  private wrappedInjector: Injector;\n\n  ngOnInit() {\n    this.wrappedInjector = new HostWrapper(WrappedColumn, this.vcr);\n  }\n\n  public get _view() {\n    return this.wrappedInjector.get(WrappedColumn, this.vcr).columnView;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_sort",
            "type": "Sort<T>"
          },
          {
            "name": "filters",
            "type": "FiltersProvider<T>"
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "detailService",
            "type": "DetailService"
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 91,
        "jsdoctags": [
          {
            "name": "_sort",
            "type": "Sort<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "changeDetectorRef",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "DatagridFilterRegistrar",
      "implements": ["OnDestroy", "OnInit"],
      "accessors": {
        "field": {
          "name": "field",
          "setSignature": {
            "name": "field",
            "type": "void",
            "args": [
              {
                "name": "field",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 166,
            "jsdoctags": [
              {
                "name": "field",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "field",
            "type": "",
            "returnType": "",
            "line": 152
          }
        },
        "sortBy": {
          "name": "sortBy",
          "setSignature": {
            "name": "sortBy",
            "type": "void",
            "args": [
              {
                "name": "comparator",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 193,
            "jsdoctags": [
              {
                "name": "comparator",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "sortBy",
            "type": "",
            "returnType": "",
            "line": 188
          }
        },
        "sortable": {
          "name": "sortable",
          "getSignature": {
            "name": "sortable",
            "type": "boolean",
            "returnType": "boolean",
            "line": 212,
            "description": "<p>Indicates if the column is sortable</p>\n"
          }
        },
        "sorted": {
          "name": "sorted",
          "setSignature": {
            "name": "sorted",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 231,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "sorted",
            "type": "",
            "returnType": "",
            "line": 223
          }
        },
        "sortOrder": {
          "name": "sortOrder",
          "setSignature": {
            "name": "sortOrder",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 256,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "sortOrder",
            "type": "",
            "returnType": "",
            "line": 251
          }
        },
        "ariaSort": {
          "name": "ariaSort",
          "getSignature": {
            "name": "ariaSort",
            "type": "",
            "returnType": "",
            "line": 281
          }
        },
        "projectedFilter": {
          "name": "projectedFilter",
          "setSignature": {
            "name": "projectedFilter",
            "type": "void",
            "args": [
              {
                "name": "custom",
                "type": "any"
              }
            ],
            "returnType": "void",
            "line": 324,
            "jsdoctags": [
              {
                "name": "custom",
                "type": "any",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "filterValue": {
          "name": "filterValue",
          "setSignature": {
            "name": "filterValue",
            "type": "void",
            "args": [
              {
                "name": "newValue",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 359,
            "jsdoctags": [
              {
                "name": "newValue",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "filterValue",
            "type": "",
            "returnType": "",
            "line": 331
          }
        },
        "updateFilterValue": {
          "name": "updateFilterValue",
          "setSignature": {
            "name": "updateFilterValue",
            "type": "void",
            "args": [
              {
                "name": "newValue",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 338,
            "jsdoctags": [
              {
                "name": "newValue",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "_view": {
          "name": "_view",
          "getSignature": {
            "name": "_view",
            "type": "",
            "returnType": "",
            "line": 374
          }
        }
      }
    },
    {
      "name": "ClrDatagridColumnSeparator",
      "id": "component-ClrDatagridColumnSeparator-2d025daecb56e1ba54de1c561a68147e",
      "file": "src/clr-angular/data/datagrid/datagrid-column-separator.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "UNIQUE_ID_PROVIDER"
        }
      ],
      "selector": "clr-dg-column-separator",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div class=\"datagrid-column-handle\" aria-hidden=\"true\"\n  clrDraggable\n  [clrGroup]=\"columnSeparatorId\"\n  (clrDragStart)=\"showTracker(resizeTrackerEl)\"\n  (clrDragMove)=\"moveTracker($event, resizeTrackerEl)\"\n  (clrDragEnd)=\"hideTracker(resizeTrackerEl)\"></div>\n<div class=\"datagrid-column-resize-tracker\" #resizeTrackerEl></div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "columnSeparatorId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 38,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "hideTracker",
          "args": [
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "moveTracker",
          "args": [
            {
              "name": "event",
              "type": "ClrDragEvent<any>"
            },
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "event",
              "type": "ClrDragEvent<any>",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "redFlagTracker",
          "args": [
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "showTracker",
          "args": [
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "resizeTrackerEl",
              "type": "HTMLElement",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, Renderer2 } from '@angular/core';\n\nimport { ClrDragEvent } from '../../utils/drag-and-drop/drag-event';\nimport { ColumnResizerService } from './providers/column-resizer.service';\nimport { TableSizeService } from './providers/table-size.service';\nimport { UNIQUE_ID_PROVIDER, UNIQUE_ID } from '../../utils/id-generator/id-generator.service';\n\n@Component({\n  selector: 'clr-dg-column-separator',\n  template: `\n    <div class=\"datagrid-column-handle\" aria-hidden=\"true\"\n      clrDraggable \n      [clrGroup]=\"columnSeparatorId\" \n      (clrDragStart)=\"showTracker(resizeTrackerEl)\" \n      (clrDragMove)=\"moveTracker($event, resizeTrackerEl)\" \n      (clrDragEnd)=\"hideTracker(resizeTrackerEl)\"></div>\n    <div class=\"datagrid-column-resize-tracker\" #resizeTrackerEl></div>\n    `,\n  host: {\n    '[class.datagrid-column-separator]': 'true',\n  },\n  providers: [UNIQUE_ID_PROVIDER],\n})\nexport class ClrDatagridColumnSeparator {\n  // Every column draggable separator should have its own unique ID\n  // in order to not conflict with other draggables/droppables.\n  constructor(\n    private columnResizerService: ColumnResizerService,\n    private renderer: Renderer2,\n    private tableSizeService: TableSizeService,\n    @Inject(DOCUMENT) private document: any,\n    @Inject(UNIQUE_ID) public columnSeparatorId: string\n  ) {}\n\n  public showTracker(resizeTrackerEl: HTMLElement) {\n    this.columnResizerService.startResize();\n    const tableHeight = this.tableSizeService.getColumnDragHeight();\n    this.renderer.setStyle(resizeTrackerEl, 'height', tableHeight);\n    this.renderer.setStyle(resizeTrackerEl, 'display', 'block');\n  }\n\n  public moveTracker(event: ClrDragEvent<any>, resizeTrackerEl: HTMLElement) {\n    this.columnResizerService.calculateResize(event);\n    this.renderer.setStyle(resizeTrackerEl, 'transform', `translateX(${this.columnResizerService.resizedBy}px)`);\n    this.renderer.setStyle(this.document.body, 'cursor', 'col-resize');\n    this.redFlagTracker(resizeTrackerEl);\n  }\n\n  public hideTracker(resizeTrackerEl: HTMLElement) {\n    this.columnResizerService.endResize();\n    this.renderer.setStyle(resizeTrackerEl, 'display', 'none');\n    this.renderer.setStyle(resizeTrackerEl, 'transform', `translateX(0px)`);\n    this.renderer.setStyle(this.document.body, 'cursor', 'auto');\n  }\n\n  private redFlagTracker(resizeTrackerEl: HTMLElement) {\n    let isWithinMaxResizeRange: boolean;\n    // @TODO(JEREMY) Review this, it will always be true because above is always null\n    if (isWithinMaxResizeRange !== this.columnResizerService.isWithinMaxResizeRange) {\n      isWithinMaxResizeRange = this.columnResizerService.isWithinMaxResizeRange;\n      if (!isWithinMaxResizeRange) {\n        this.renderer.addClass(resizeTrackerEl, 'exceeded-max');\n      } else {\n        this.renderer.removeClass(resizeTrackerEl, 'exceeded-max');\n      }\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "columnResizerService",
            "type": "ColumnResizerService"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "tableSizeService",
            "type": "TableSizeService"
          },
          {
            "name": "document",
            "type": "any"
          },
          {
            "name": "columnSeparatorId",
            "type": "string"
          }
        ],
        "line": 30,
        "jsdoctags": [
          {
            "name": "columnResizerService",
            "type": "ColumnResizerService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tableSizeService",
            "type": "TableSizeService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "document",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnSeparatorId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrDatagridColumnToggle",
      "id": "component-ClrDatagridColumnToggle-acb3025a1dd8b300356ad9b20c35e5b3",
      "file": "src/clr-angular/data/datagrid/datagrid-column-toggle.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "UNIQUE_ID_PROVIDER"
        },
        {
          "name": "ClrPopoverEventsService"
        },
        {
          "name": "ClrPopoverPositionService"
        },
        {
          "name": "ClrPopoverToggleService"
        }
      ],
      "selector": "clr-dg-column-toggle",
      "styleUrls": [],
      "styles": [],
      "template":
        "    <button\n        role=\"button\"\n        type=\"button\"\n        class=\"btn btn-sm btn-link column-toggle--action\"\n        clrPopoverAnchor\n        clrPopoverOpenCloseButton\n        [attr.aria-controls]=\"popoverId\"\n        [attr.aria-owns]=\"popoverId\">\n    <clr-icon shape=\"view-columns\" [attr.title]=\"commonStrings.keys.pickColumns\"></clr-icon>\n</button>\n<div class=\"column-switch\"\n     role=\"dialog\"\n     [id]=\"popoverId\"\n     clrFocusTrap\n     *clrPopoverContent=\"openState at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n    <div class=\"switch-header\">\n        <div class=\"clr-sr-only\" tabindex=\"-1\" #menuDescription>{{commonStrings.keys.showColumnsMenuDescription}}</div>\n        <div class=\"clr-sr-only\" tabindex=\"-1\" #allSelected>{{commonStrings.keys.allColumnsSelected}}</div>\n        <ng-container *ngIf=\"!customToggleTitle\">{{commonStrings.keys.showColumns}}</ng-container>\n        <ng-content select=\"clr-dg-column-toggle-title\"></ng-content>\n        <button class=\"btn btn-sm btn-link toggle-switch-close-button\"\n                clrPopoverCloseButton\n                type=\"button\"\n                [attr.aria-label]=\"commonStrings.keys.close\">\n            <clr-icon shape=\"close\"\n                      [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n        </button>\n    </div>\n    <ul class=\"switch-content list-unstyled\">\n        <li *ngFor=\"let columnState of hideableColumnStates;trackBy: trackByFn\">\n            <clr-checkbox-wrapper>\n                <input clrCheckbox type=\"checkbox\"\n                       [disabled]=\"hasOnlyOneVisibleColumn && !columnState.hidden\"\n                       [ngModel]=\"!columnState.hidden\"\n                       (ngModelChange)=\"toggleColumnState(columnState, !$event)\">\n                <label>\n                    <ng-template [ngTemplateOutlet]=\"columnState.titleTemplateRef\"></ng-template>\n                </label>\n            </clr-checkbox-wrapper>\n        </li>\n    </ul>\n    <div class=\"switch-footer\">\n        <ng-content select=\"clr-dg-column-toggle-button\"></ng-content>\n        <clr-dg-column-toggle-button *ngIf=\"!customToggleButton\" (clrAllSelected)=\"allColumnsSelected()\">\n            {{commonStrings.keys.selectAll}}\n        </clr-dg-column-toggle-button>\n    </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_allColumnsVisible",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [112]
        },
        {
          "name": "allSelectedElement",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 99,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'allSelected', {read: ElementRef, static: false}"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "columnSwitchId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 112,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [114]
        },
        {
          "name": "customToggleButton",
          "type": "ClrDatagridColumnToggleButton",
          "optional": false,
          "description": "",
          "line": 95,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrDatagridColumnToggleButton, {static: false}"
            }
          ]
        },
        {
          "name": "customToggleTitle",
          "type": "ClrDatagridColumnToggleTitle",
          "optional": false,
          "description": "",
          "line": 93,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrDatagridColumnToggleTitle, {static: false}"
            }
          ]
        },
        {
          "name": "menuDescriptionElement",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 97,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'menuDescription', {read: ElementRef, static: false}"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "openState",
          "type": "",
          "optional": false,
          "description": "",
          "line": 90,
          "modifierKind": [114]
        },
        {
          "name": "popoverId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 115,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "smartPosition",
          "defaultValue":
            "{\n    axis: ClrAxis.VERTICAL,\n    side: ClrSide.BEFORE,\n    anchor: ClrAlignment.START,\n    content: ClrAlignment.START,\n  }",
          "type": "ClrPopoverPosition",
          "optional": false,
          "description": "",
          "line": 84,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "allColumnsSelected",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 150
        },
        {
          "name": "toggleColumnState",
          "args": [
            {
              "name": "columnState",
              "type": "ColumnState"
            },
            {
              "name": "event",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "jsdoctags": [
            {
              "name": "columnState",
              "type": "ColumnState",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "event",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleSwitchPanel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 139
        },
        {
          "name": "trackByFn",
          "args": [
            {
              "name": "index",
              "type": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 156,
          "jsdoctags": [
            {
              "name": "index",
              "type": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Inject, ContentChild, ElementRef, NgZone, PLATFORM_ID, ViewChild } from '@angular/core';\n\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\nimport { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';\nimport { ClrAxis } from '../../utils/popover/enums/axis.enum';\nimport { ClrAlignment } from '../../utils/popover/enums/alignment.enum';\nimport { ClrSide } from '../../utils/popover/enums/side.enum';\nimport { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';\nimport { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ColumnsService } from './providers/columns.service';\nimport { ColumnState } from './interfaces/column-state.interface';\nimport { DatagridColumnChanges } from './enums/column-changes.enum';\nimport { isPlatformBrowser } from '@angular/common';\nimport { ClrDatagridColumnToggleTitle } from './datagrid-column-toggle-title';\nimport { ClrDatagridColumnToggleButton } from './datagrid-column-toggle-button';\n\n@Component({\n  selector: 'clr-dg-column-toggle',\n  template: `    \n      <button\n              role=\"button\"\n              type=\"button\"\n              class=\"btn btn-sm btn-link column-toggle--action\"\n              clrPopoverAnchor\n              clrPopoverOpenCloseButton\n              [attr.aria-controls]=\"popoverId\"\n              [attr.aria-owns]=\"popoverId\">\n          <clr-icon shape=\"view-columns\" [attr.title]=\"commonStrings.keys.pickColumns\"></clr-icon>\n      </button>\n      <div class=\"column-switch\"\n           role=\"dialog\"\n           [id]=\"popoverId\"\n           clrFocusTrap\n           *clrPopoverContent=\"openState at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n          <div class=\"switch-header\">\n              <div class=\"clr-sr-only\" tabindex=\"-1\" #menuDescription>{{commonStrings.keys.showColumnsMenuDescription}}</div>\n              <div class=\"clr-sr-only\" tabindex=\"-1\" #allSelected>{{commonStrings.keys.allColumnsSelected}}</div>\n              <ng-container *ngIf=\"!customToggleTitle\">{{commonStrings.keys.showColumns}}</ng-container>\n              <ng-content select=\"clr-dg-column-toggle-title\"></ng-content>\n              <button class=\"btn btn-sm btn-link toggle-switch-close-button\"\n                      clrPopoverCloseButton\n                      type=\"button\"\n                      [attr.aria-label]=\"commonStrings.keys.close\">\n                  <clr-icon shape=\"close\" \n                            [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n              </button>\n          </div>\n          <ul class=\"switch-content list-unstyled\">\n              <li *ngFor=\"let columnState of hideableColumnStates;trackBy: trackByFn\">\n                  <clr-checkbox-wrapper>\n                      <input clrCheckbox type=\"checkbox\"\n                             [disabled]=\"hasOnlyOneVisibleColumn && !columnState.hidden\"\n                             [ngModel]=\"!columnState.hidden\"\n                             (ngModelChange)=\"toggleColumnState(columnState, !$event)\">\n                      <label>\n                          <ng-template [ngTemplateOutlet]=\"columnState.titleTemplateRef\"></ng-template>\n                      </label>\n                  </clr-checkbox-wrapper>\n              </li>\n          </ul>\n          <div class=\"switch-footer\">\n              <ng-content select=\"clr-dg-column-toggle-button\"></ng-content>\n              <clr-dg-column-toggle-button *ngIf=\"!customToggleButton\" (clrAllSelected)=\"allColumnsSelected()\">\n                  {{commonStrings.keys.selectAll}}\n              </clr-dg-column-toggle-button>\n          </div>\n      </div>\n  `,\n  host: { '[class.column-switch-wrapper]': 'true', '[class.active]': 'openState' },\n  providers: [UNIQUE_ID_PROVIDER, ClrPopoverEventsService, ClrPopoverPositionService, ClrPopoverToggleService],\n})\n/** @deprecated since 2.0, remove in 3.0 */\nexport class ClrDatagridColumnToggle {\n  private _allColumnsVisible: boolean;\n\n  // Smart Popover\n  public smartPosition: ClrPopoverPosition = {\n    axis: ClrAxis.VERTICAL,\n    side: ClrSide.BEFORE,\n    anchor: ClrAlignment.START,\n    content: ClrAlignment.START,\n  };\n  public openState;\n\n  @ContentChild(ClrDatagridColumnToggleTitle, { static: false })\n  customToggleTitle: ClrDatagridColumnToggleTitle;\n  @ContentChild(ClrDatagridColumnToggleButton, { static: false })\n  customToggleButton: ClrDatagridColumnToggleButton;\n  @ViewChild('menuDescription', { read: ElementRef, static: false })\n  private menuDescriptionElement: ElementRef<HTMLElement>;\n  @ViewChild('allSelected', { read: ElementRef, static: false })\n  private allSelectedElement: ElementRef<HTMLElement>;\n\n  public get allColumnsVisible(): boolean {\n    return this._allColumnsVisible;\n  }\n\n  public set allColumnsVisible(value: boolean) {\n    this._allColumnsVisible = value;\n  }\n\n  constructor(\n    public commonStrings: ClrCommonStringsService,\n    private columnsService: ColumnsService,\n    @Inject(UNIQUE_ID) public columnSwitchId: string,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private zone: NgZone,\n    @Inject(UNIQUE_ID) public popoverId: string\n  ) {}\n\n  get hideableColumnStates(): ColumnState[] {\n    const hideables = this.columnsService.columns.filter(column => column.value.hideable);\n    return hideables.map(column => column.value);\n  }\n\n  get hasOnlyOneVisibleColumn(): boolean {\n    const nbNonHideableColumns = this.columnsService.columns.length - this.hideableColumnStates.length;\n    // this should only return true when there is no non-hideable columns.\n    return (\n      nbNonHideableColumns === 0 && this.hideableColumnStates.filter(columnState => !columnState.hidden).length === 1\n    );\n  }\n\n  toggleColumnState(columnState: ColumnState, event: boolean) {\n    const columnToToggle = this.columnsService.columns.filter(column => column.value === columnState)[0];\n    this.columnsService.emitStateChange(columnToToggle, {\n      hidden: event,\n      changes: [DatagridColumnChanges.HIDDEN],\n    });\n  }\n\n  toggleSwitchPanel() {\n    this.openState = !this.openState;\n    if (this.openState && isPlatformBrowser(this.platformId) && this.menuDescriptionElement) {\n      this.zone.runOutsideAngular(() => {\n        setTimeout(() => {\n          this.menuDescriptionElement.nativeElement.focus();\n        });\n      });\n    }\n  }\n\n  allColumnsSelected() {\n    this.allSelectedElement.nativeElement.focus();\n  }\n\n  // Without tracking the checkboxes get rerendered on model update, which leads\n  // to loss of focus after checkbox toggle.\n  trackByFn(index) {\n    return index;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "columnsService",
            "type": "ColumnsService"
          },
          {
            "name": "columnSwitchId",
            "type": "string"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "zone",
            "type": "NgZone"
          },
          {
            "name": "popoverId",
            "type": "string"
          }
        ],
        "line": 107,
        "jsdoctags": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnsService",
            "type": "ColumnsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnSwitchId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "zone",
            "type": "NgZone",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "popoverId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "allColumnsVisible": {
          "name": "allColumnsVisible",
          "setSignature": {
            "name": "allColumnsVisible",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 105,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "allColumnsVisible",
            "type": "boolean",
            "returnType": "boolean",
            "line": 101
          }
        },
        "hideableColumnStates": {
          "name": "hideableColumnStates",
          "getSignature": {
            "name": "hideableColumnStates",
            "type": "[]",
            "returnType": "ColumnState[]",
            "line": 118
          }
        },
        "hasOnlyOneVisibleColumn": {
          "name": "hasOnlyOneVisibleColumn",
          "getSignature": {
            "name": "hasOnlyOneVisibleColumn",
            "type": "boolean",
            "returnType": "boolean",
            "line": 123
          }
        }
      }
    },
    {
      "name": "ClrDatagridColumnToggleButton",
      "id": "component-ClrDatagridColumnToggleButton-470bee521ba5fe0a88f7f1929663764d",
      "file": "src/clr-angular/data/datagrid/datagrid-column-toggle-button.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-column-toggle-button",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button class=\"btn btn-sm btn-link switch-button\"\n        (click)=\"selectAll()\"\n        [disabled]=\"allHideablesVisible\"\n        type=\"button\">\n  <ng-content></ng-content>\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "clrAllSelected",
          "line": 30,
          "type": "Observable<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "allSelected",
          "defaultValue": "new EventEmitter()",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "hideableColumns",
          "args": [],
          "optional": false,
          "returnType": "BehaviorSubject[]",
          "typeParameters": [],
          "line": 34,
          "modifierKind": [112]
        },
        {
          "name": "selectAll",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Output } from '@angular/core';\nimport { ColumnsService } from './providers/columns.service';\nimport { ColumnState } from './interfaces/column-state.interface';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { DatagridColumnChanges } from './enums/column-changes.enum';\n\n@Component({\n  selector: 'clr-dg-column-toggle-button',\n  template: `\n    <button class=\"btn btn-sm btn-link switch-button\"\n            (click)=\"selectAll()\"\n            [disabled]=\"allHideablesVisible\"\n            type=\"button\">\n      <ng-content></ng-content>\n    </button>\n  `,\n})\n/** @deprecated since 2.0, remove in 3.0 */\nexport class ClrDatagridColumnToggleButton {\n  constructor(private columnsService: ColumnsService) {}\n\n  private allSelected: Subject<boolean> = new EventEmitter();\n\n  @Output('clrAllSelected')\n  get clrAllSelected(): Observable<boolean> {\n    return this.allSelected.asObservable();\n  }\n\n  private hideableColumns(): BehaviorSubject<ColumnState>[] {\n    return this.columnsService.columns.filter(column => column.value.hideable);\n  }\n\n  get allHideablesVisible() {\n    return this.hideableColumns().filter(column => column.value.hidden).length === 0;\n  }\n\n  selectAll() {\n    this.hideableColumns().forEach(hideableColumn =>\n      this.columnsService.emitStateChange(hideableColumn, {\n        hidden: false,\n        changes: [DatagridColumnChanges.HIDDEN],\n      })\n    );\n    this.allSelected.next(true);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "columnsService",
            "type": "ColumnsService"
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "columnsService",
            "type": "ColumnsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "allHideablesVisible": {
          "name": "allHideablesVisible",
          "getSignature": {
            "name": "allHideablesVisible",
            "type": "",
            "returnType": "",
            "line": 38
          }
        }
      }
    },
    {
      "name": "ClrDatagridColumnToggleTitle",
      "id": "component-ClrDatagridColumnToggleTitle-e8e3a26b6206d82f3e121b564b513a3b",
      "file": "src/clr-angular/data/datagrid/datagrid-column-toggle-title.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-column-toggle-title",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'clr-dg-column-toggle-title',\n  template: `<ng-content></ng-content>`,\n})\n/** @deprecated since 2.0, remove in 3.0 */\nexport class ClrDatagridColumnToggleTitle {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrDatagridDetail",
      "id": "component-ClrDatagridDetail-4568726c126c05635f8aaed9a4e5f3c0",
      "file": "src/clr-angular/data/datagrid/datagrid-detail.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-detail",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div [clrFocusTrap]=\"{strict: false}\" class=\"datagrid-detail-pane-content\" *ngIf=\"detailService.isOpen\" role=\"dialog\"\n     [id]=\"detailService.id\" aria-modal=\"true\" [attr.aria-describedby]=\"header ? header.titleId : ''\">\n<div class=\"clr-sr-only\">{{commonStrings.keys.detailPaneStart}}</div>\n  <ng-content></ng-content>\n  <div class=\"clr-sr-only\">{{commonStrings.keys.detailPaneEnd}}</div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [114]
        },
        {
          "name": "detailService",
          "type": "DetailService",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [114]
        },
        {
          "name": "header",
          "type": "ClrDatagridDetailHeader",
          "optional": false,
          "description": "",
          "line": 29,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrDatagridDetailHeader, {static: false}"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "document:keyup.esc",
          "args": [],
          "argsDecorator": [],
          "line": 34
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, HostListener } from '@angular/core';\nimport { DetailService } from './providers/detail.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ClrDatagridDetailHeader } from './datagrid-detail-header';\n\n@Component({\n  selector: 'clr-dg-detail',\n  host: {\n    '[class.datagrid-detail-pane]': 'true',\n  },\n  // We put the *ngIf on the clrFocusTrap so it doesn't always exist on the page\n  // have to test for presence of header for aria-describedby because it was causing unit tests to crash\n  template: `\n    <div [clrFocusTrap]=\"{strict: false}\" class=\"datagrid-detail-pane-content\" *ngIf=\"detailService.isOpen\" role=\"dialog\"\n         [id]=\"detailService.id\" aria-modal=\"true\" [attr.aria-describedby]=\"header ? header.titleId : ''\">\n    <div class=\"clr-sr-only\">{{commonStrings.keys.detailPaneStart}}</div>\n      <ng-content></ng-content>\n      <div class=\"clr-sr-only\">{{commonStrings.keys.detailPaneEnd}}</div>\n    </div>\n    `,\n})\nexport class ClrDatagridDetail {\n  @ContentChild(ClrDatagridDetailHeader, { static: false })\n  public header: ClrDatagridDetailHeader;\n\n  constructor(public detailService: DetailService, public commonStrings: ClrCommonStringsService) {}\n\n  @HostListener('document:keyup.esc')\n  closeCheck(): void {\n    this.detailService.close();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "detailService",
            "type": "DetailService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrDatagridDetailBody",
      "id": "component-ClrDatagridDetailBody-d2fe70656008e85307a6575ccfac79f7",
      "file": "src/clr-angular/data/datagrid/datagrid-detail-body.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-detail-body",
      "styleUrls": [],
      "styles": [],
      "template": "<div class=\"clr-dg-detail-body-wrapper\">\n  <ng-content></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'clr-dg-detail-body',\n  template: `\n    <div class=\"clr-dg-detail-body-wrapper\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  host: {\n    '[class.datagrid-detail-body]': 'true',\n  },\n})\nexport class ClrDatagridDetailBody {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrDatagridDetailHeader",
      "id": "component-ClrDatagridDetailHeader-181fb72a527ca0c6acd1cf883fdd7872",
      "file": "src/clr-angular/data/datagrid/datagrid-detail-header.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-detail-header",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div class=\"datagrid-detail-header-title\" clrFocusOnViewInit [id]=\"titleId\">\n  <ng-content></ng-content>\n</div>\n<div class=\"datagrid-detail-pane-close\">\n  <button type=\"button\"\n          class=\"btn btn-link\"\n          (click)=\"detailService.close()\"\n          [attr.aria-label]=\"commonStrings.keys.close\">\n    <clr-icon size=\"24\" shape=\"times\"></clr-icon>\n  </button>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [114]
        },
        {
          "name": "detailService",
          "type": "DetailService",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\nimport { DetailService } from './providers/detail.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\n\n@Component({\n  selector: 'clr-dg-detail-header',\n  host: {\n    '[class.datagrid-detail-header]': 'true',\n  },\n  template: `\n    <div class=\"datagrid-detail-header-title\" clrFocusOnViewInit [id]=\"titleId\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"datagrid-detail-pane-close\">\n      <button type=\"button\" \n              class=\"btn btn-link\" \n              (click)=\"detailService.close()\" \n              [attr.aria-label]=\"commonStrings.keys.close\">\n        <clr-icon size=\"24\" shape=\"times\"></clr-icon>\n      </button>\n    </div>\n  `,\n})\nexport class ClrDatagridDetailHeader {\n  get titleId() {\n    return `${this.detailService.id}-title`;\n  }\n\n  constructor(public detailService: DetailService, public commonStrings: ClrCommonStringsService) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "detailService",
            "type": "DetailService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 32,
        "jsdoctags": [
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "titleId": {
          "name": "titleId",
          "getSignature": {
            "name": "titleId",
            "type": "",
            "returnType": "",
            "line": 30
          }
        }
      }
    },
    {
      "name": "ClrDatagridFilter",
      "id": "component-ClrDatagridFilter-2aa864ab58103a14b5670d63f7e5f9f6",
      "file": "src/clr-angular/data/datagrid/datagrid-filter.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: CustomFilter, useExisting: ClrDatagridFilter }"
        },
        {
          "name": "UNIQUE_ID_PROVIDER"
        }
      ],
      "selector": "clr-dg-filter",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button class=\"datagrid-filter-toggle\"\n        type=\"button\"\n        #anchor\n        [attr.aria-label]=\"commonStrings.keys.datagridFilterAriaLabel\"\n        [attr.aria-expanded]=\"ariaExpanded\"\n        [attr.aria-controls]=\"popoverId\"\n        clrPopoverAnchor\n        clrPopoverOpenCloseButton\n        [class.datagrid-filter-open]=\"open\"\n        [class.datagrid-filtered]=\"active\">\n    <clr-icon [attr.shape]=\"active ? 'filter-grid-circle': 'filter-grid'\" class=\"is-solid\"></clr-icon>\n</button>\n\n<div class=\"datagrid-filter\"\n     [id]=\"popoverId\"\n     clrFocusTrap\n     *clrPopoverContent=\"open at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n    <div class=\"datagrid-filter-close-wrapper\">\n        <button type=\"button\" class=\"close\" clrPopoverCloseButton>\n            <clr-icon shape=\"close\" [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n        </button>\n    </div>\n\n    <ng-content></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgFilter",
          "line": 123,
          "type": ""
        },
        {
          "name": "clrDgFilterOpen",
          "line": 107,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrDgFilterOpenChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 120,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_open",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 101,
          "modifierKind": [112]
        },
        {
          "name": "anchor",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 91,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'anchor', {static: false, read: ElementRef}"
            }
          ]
        },
        {
          "name": "ariaExpanded",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 72,
          "modifierKind": [114]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [114]
        },
        {
          "name": "popoverId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 79,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "smartPosition",
          "defaultValue":
            "{\n    axis: ClrAxis.VERTICAL,\n    side: ClrSide.AFTER,\n    anchor: ClrAlignment.END,\n    content: ClrAlignment.END,\n  }",
          "type": "ClrPopoverPosition",
          "optional": false,
          "description": "",
          "line": 94,
          "modifierKind": [114]
        },
        {
          "name": "subs",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 71,
          "modifierKind": [112]
        },
        {
          "name": "registered",
          "type": "RegisteredFilter<T | F>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134
        },
        {
          "name": "deleteFilter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "setFilter",
          "args": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description":
        "<p>Custom filter that can be added in any column to override the default object property string filter.\nThe reason this is not just an input on DatagridColumn is because we need the filter&#39;s template to be projected,\nsince it can be anything (not just a text input).</p>\n",
      "rawdescription":
        "Custom filter that can be added in any column to override the default object property string filter.\nThe reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,\nsince it can be anything (not just a text input).",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  Inject,\n  OnDestroy,\n  PLATFORM_ID,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\n\nimport { ClrDatagridFilterInterface } from './interfaces/filter.interface';\nimport { CustomFilter } from './providers/custom-filter';\nimport { FiltersProvider, RegisteredFilter } from './providers/filters';\nimport { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';\nimport { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';\nimport { ClrAxis } from '../../utils/popover/enums/axis.enum';\nimport { ClrSide } from '../../utils/popover/enums/side.enum';\nimport { ClrAlignment } from '../../utils/popover/enums/alignment.enum';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { Subscription } from 'rxjs';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * Custom filter that can be added in any column to override the default object property string filter.\n * The reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,\n * since it can be anything (not just a text input).\n */\n@Component({\n  selector: 'clr-dg-filter',\n  // We register this component as a CustomFilter, for the parent column to detect it.\n  providers: [{ provide: CustomFilter, useExisting: ClrDatagridFilter }, UNIQUE_ID_PROVIDER],\n  template: `\n      <button class=\"datagrid-filter-toggle\"\n              type=\"button\"\n              #anchor\n              [attr.aria-label]=\"commonStrings.keys.datagridFilterAriaLabel\"\n              [attr.aria-expanded]=\"ariaExpanded\"\n              [attr.aria-controls]=\"popoverId\"\n              clrPopoverAnchor\n              clrPopoverOpenCloseButton\n              [class.datagrid-filter-open]=\"open\"\n              [class.datagrid-filtered]=\"active\">\n          <clr-icon [attr.shape]=\"active ? 'filter-grid-circle': 'filter-grid'\" class=\"is-solid\"></clr-icon>\n      </button>\n\n      <div class=\"datagrid-filter\"\n           [id]=\"popoverId\"\n           clrFocusTrap\n           *clrPopoverContent=\"open at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n          <div class=\"datagrid-filter-close-wrapper\">\n              <button type=\"button\" class=\"close\" clrPopoverCloseButton>\n                  <clr-icon shape=\"close\" [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n              </button>\n          </div>\n\n          <ng-content></ng-content>\n      </div>\n  `,\n})\nexport class ClrDatagridFilter<T = any> extends DatagridFilterRegistrar<T, ClrDatagridFilterInterface<T>>\n  implements CustomFilter, OnDestroy {\n  private subs: Subscription[] = [];\n  public ariaExpanded: boolean = false;\n\n  constructor(\n    _filters: FiltersProvider<T>,\n    public commonStrings: ClrCommonStringsService,\n    private smartToggleService: ClrPopoverToggleService,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject(UNIQUE_ID) public popoverId: string\n  ) {\n    super(_filters);\n    this.subs.push(\n      smartToggleService.openChange.subscribe(change => {\n        this.open = change;\n        this.ariaExpanded = change;\n      })\n    );\n  }\n\n  @ViewChild('anchor', { static: false, read: ElementRef })\n  anchor: ElementRef;\n\n  // Smart Popover\n  public smartPosition: ClrPopoverPosition = {\n    axis: ClrAxis.VERTICAL,\n    side: ClrSide.AFTER,\n    anchor: ClrAlignment.END,\n    content: ClrAlignment.END,\n  };\n\n  private _open: boolean = false;\n  public get open() {\n    return this._open;\n  }\n\n  @Input('clrDgFilterOpen')\n  public set open(open: boolean) {\n    open = !!open;\n    if (this.open !== open) {\n      this.smartToggleService.open = open;\n      this.openChange.emit(open);\n      if (!open && isPlatformBrowser(this.platformId)) {\n        this.anchor.nativeElement.focus();\n      }\n      // keep track of the state\n      this._open = open;\n    }\n  }\n\n  @Output('clrDgFilterOpenChange') public openChange = new EventEmitter<boolean>(false);\n\n  @Input('clrDgFilter')\n  public set customFilter(filter: ClrDatagridFilterInterface<T> | RegisteredFilter<T, ClrDatagridFilterInterface<T>>) {\n    this.setFilter(filter);\n  }\n\n  /**\n   * Indicates if the filter is currently active\n   */\n  public get active() {\n    return !!this.filter && this.filter.isActive();\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.subs.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_filters",
            "type": "FiltersProvider<T>"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "smartToggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "popoverId",
            "type": "string"
          }
        ],
        "line": 72,
        "jsdoctags": [
          {
            "name": "_filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartToggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "popoverId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "DatagridFilterRegistrar",
      "implements": ["CustomFilter", "OnDestroy"],
      "accessors": {
        "open": {
          "name": "open",
          "setSignature": {
            "name": "open",
            "type": "void",
            "args": [
              {
                "name": "open",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 107,
            "jsdoctags": [
              {
                "name": "open",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "open",
            "type": "",
            "returnType": "",
            "line": 102
          }
        },
        "customFilter": {
          "name": "customFilter",
          "setSignature": {
            "name": "customFilter",
            "type": "void",
            "args": [
              {
                "name": "filter",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 123,
            "jsdoctags": [
              {
                "name": "filter",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "active": {
          "name": "active",
          "getSignature": {
            "name": "active",
            "type": "",
            "returnType": "",
            "line": 130,
            "description": "<p>Indicates if the filter is currently active</p>\n"
          }
        }
      }
    },
    {
      "name": "ClrDatagridFooter",
      "id": "component-ClrDatagridFooter-3431183549ab99a185d1fbc5e416f725",
      "file": "src/clr-angular/data/datagrid/datagrid-footer.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-footer",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-container\n    *ngIf=\"(selection.selectionType === SELECTION_TYPE.Multi) && (selection.current.length > 0)\">\n  <div class=\"clr-form-control-disabled\">\n      <clr-checkbox-wrapper class=\"datagrid-footer-select\">\n        <input clrCheckbox type=\"checkbox\" checked=\"checked\" disabled>\n        <label>{{selection.current.length}}</label>\n    </clr-checkbox-wrapper>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"!detailService.isOpen\">\n  <ng-content select=\"clr-dg-column-toggle\"></ng-content>\n  <clr-dg-column-toggle *ngIf=\"hasHideableColumns && !toggle\"></clr-dg-column-toggle>\n  <div class=\"datagrid-footer-description\">\n      <ng-content></ng-content>\n  </div>\n</ng-container>\n<ng-content select=\"clr-dg-pagination\"></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "detailService",
          "type": "DetailService",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [114]
        },
        {
          "name": "selection",
          "type": "Selection<T>",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [114]
        },
        {
          "name": "SELECTION_TYPE",
          "defaultValue": "SelectionType",
          "type": "",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [114]
        },
        {
          "name": "toggle",
          "type": "ClrDatagridColumnToggle",
          "optional": false,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrDatagridColumnToggle, {static: false}"
            }
          ]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild } from '@angular/core';\n\nimport { ClrDatagridColumnToggle } from './datagrid-column-toggle';\nimport { Selection } from './providers/selection';\nimport { SelectionType } from './enums/selection-type';\nimport { ColumnsService } from './providers/columns.service';\nimport { DetailService } from './providers/detail.service';\n\n@Component({\n  selector: 'clr-dg-footer',\n  template: `\n        <ng-container\n            *ngIf=\"(selection.selectionType === SELECTION_TYPE.Multi) && (selection.current.length > 0)\">\n          <div class=\"clr-form-control-disabled\">\n              <clr-checkbox-wrapper class=\"datagrid-footer-select\">\n                <input clrCheckbox type=\"checkbox\" checked=\"checked\" disabled>\n                <label>{{selection.current.length}}</label>\n            </clr-checkbox-wrapper>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"!detailService.isOpen\">\n          <ng-content select=\"clr-dg-column-toggle\"></ng-content>\n          <clr-dg-column-toggle *ngIf=\"hasHideableColumns && !toggle\"></clr-dg-column-toggle>\n          <div class=\"datagrid-footer-description\">\n              <ng-content></ng-content>\n          </div>\n        </ng-container>\n        <ng-content select=\"clr-dg-pagination\"></ng-content>\n    `,\n  host: {\n    '[class.datagrid-footer]': 'true',\n  },\n})\nexport class ClrDatagridFooter<T = any> {\n  constructor(\n    public selection: Selection<T>,\n    public detailService: DetailService,\n    private columnsService: ColumnsService\n  ) {}\n\n  /* reference to the enum so that template can access */\n  public SELECTION_TYPE = SelectionType;\n\n  @ContentChild(ClrDatagridColumnToggle, { static: false })\n  toggle: ClrDatagridColumnToggle;\n\n  get hasHideableColumns(): boolean {\n    return this.columnsService.hasHideableColumns;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "selection",
            "type": "Selection<T>"
          },
          {
            "name": "detailService",
            "type": "DetailService"
          },
          {
            "name": "columnsService",
            "type": "ColumnsService"
          }
        ],
        "line": 39,
        "jsdoctags": [
          {
            "name": "selection",
            "type": "Selection<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "columnsService",
            "type": "ColumnsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "hasHideableColumns": {
          "name": "hasHideableColumns",
          "getSignature": {
            "name": "hasHideableColumns",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        }
      }
    },
    {
      "name": "ClrDatagridPageSize",
      "id": "component-ClrDatagridPageSize-05b25128bcd863b1bf113f975b4c6c8f",
      "file": "src/clr-angular/data/datagrid/datagrid-page-size.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-page-size",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content></ng-content>\n<div class=\"clr-select-wrapper\">\n  <select [class.clr-page-size-select]=\"true\" [(ngModel)]=\"page.size\">\n    <option *ngFor=\"let option of pageSizeOptions\" [ngValue]=\"option\">{{option}}</option>\n  </select>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrPageSizeOptions",
          "line": 21,
          "type": "number[]"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "page",
          "type": "Page",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Input } from '@angular/core';\nimport { Page } from './providers/page';\n\n@Component({\n  selector: 'clr-dg-page-size',\n  template: `\n    <ng-content></ng-content>\n    <div class=\"clr-select-wrapper\">\n      <select [class.clr-page-size-select]=\"true\" [(ngModel)]=\"page.size\">\n        <option *ngFor=\"let option of pageSizeOptions\" [ngValue]=\"option\">{{option}}</option>\n      </select>\n    </div>\n  `,\n})\nexport class ClrDatagridPageSize {\n  @Input('clrPageSizeOptions') pageSizeOptions: number[];\n\n  constructor(public page: Page) {}\n\n  ngOnInit() {\n    if (!this.pageSizeOptions || this.pageSizeOptions.length === 0) {\n      this.pageSizeOptions = [this.page.size];\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "page",
            "type": "Page"
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "page",
            "type": "Page",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrDatagridPagination",
      "id": "component-ClrDatagridPagination-2eac5e3fb5d8926267e4f3565b4ffe45",
      "file": "src/clr-angular/data/datagrid/datagrid-pagination.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-pagination",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-container *ngIf=\"!detailService.isOpen\">\n  <div class=\"pagination-size\" *ngIf=\"_pageSizeComponent\">\n    <ng-content select=\"clr-dg-page-size\"></ng-content>\n  </div>\n  <div class=\"pagination-description\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"pagination-list\" *ngIf=\"page.last > 1\">\n    <button\n      type=\"button\"\n      class=\"pagination-first\"\n      [disabled]=\"page.current <= 1\"\n      (click)=\"page.current = 1\"\n      [attr.aria-label]=\"commonStrings.keys.firstPage\"\n      >\n      <clr-icon shape=\"step-forward-2 down\"></clr-icon>\n    </button>\n    <button\n      type=\"button\"\n      class=\"pagination-previous\"\n      [disabled]=\"page.current <= 1\"\n      (click)=\"page.current = page.current - 1\"\n      [attr.aria-label]=\"commonStrings.keys.previousPage\"\n      >\n      <clr-icon shape=\"angle left\"></clr-icon>\n    </button>\n      <input\n        #currentPageInput\n        type=\"text\"\n        class=\"pagination-current clr-input\"\n        [size]=\"page.last.toString().length\"\n        [value]=\"page.current\"\n        (keydown.enter)=\"updateCurrentPage($event)\"\n        (blur)=\"updateCurrentPage($event)\"\n        [attr.aria-label]=\"commonStrings.keys.currentPage\"\n        />\n        &nbsp;/&nbsp;<span [attr.aria-label]=\"commonStrings.keys.totalPages\">{{page.last}}</span>\n    <button\n      type=\"button\"\n      class=\"pagination-next\"\n      [disabled]=\"page.current >= page.last\"\n      (click)=\"page.current = page.current + 1\"\n      [attr.aria-label]=\"commonStrings.keys.nextPage\"\n      >\n      <clr-icon shape=\"angle right\"></clr-icon>\n    </button>\n    <button\n      type=\"button\"\n      class=\"pagination-last\"\n      [disabled]=\"page.current >= page.last\"\n      (click)=\"page.current = page.last\"\n      [attr.aria-label]=\"commonStrings.keys.lastPage\"\n      >\n      <clr-icon shape=\"step-forward-2 up\"></clr-icon>\n    </button>\n  </div>\n</ng-container>\n<ng-container *ngIf=\"detailService.isOpen\">\n    <div class=\"pagination-description-compact\">\n        {{page.firstItem + 1}}-{{page.lastItem + 1}} / {{page.totalItems}}\n    </div>\n    <div class=\"pagination-list\">\n        <button\n                type=\"button\"\n                class=\"pagination-previous\"\n                [disabled]=\"page.current <= 1\"\n                (click)=\"page.current = page.current - 1\"\n                [attr.aria-label]=\"commonStrings.keys.previousPage\"\n        >\n            <clr-icon shape=\"angle left\"></clr-icon>\n        </button>\n        <span>{{page.current}}</span>\n        <button\n                type=\"button\"\n                class=\"pagination-next\"\n                [disabled]=\"page.current >= page.last\"\n                (click)=\"page.current = page.current + 1\"\n                [attr.aria-label]=\"commonStrings.keys.nextPage\"\n        >\n            <clr-icon shape=\"angle right\"></clr-icon>\n        </button>\n    </div>\n</ng-container>\n\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgLastPage",
          "line": 187,
          "type": "number"
        },
        {
          "name": "clrDgPage",
          "line": 201,
          "type": "number"
        },
        {
          "name": "clrDgPageSize",
          "line": 159,
          "type": "number"
        },
        {
          "name": "clrDgTotalItems",
          "line": 173,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "clrDgPageChange",
          "defaultValue": "new EventEmitter<number>(false)",
          "line": 207,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_pageSizeComponent",
          "type": "ClrDatagridPageSize",
          "optional": false,
          "description": "",
          "line": 115,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrDatagridPageSize, {static: false}"
            }
          ]
        },
        {
          "name": "_pageSubscription",
          "type": "Subscription",
          "optional": false,
          "description": "<p>Subscription to the page service changes</p>\n",
          "line": 142,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 119,
          "modifierKind": [114]
        },
        {
          "name": "currentPageInputRef",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 117,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'currentPageInput', {static: false}"
            }
          ]
        },
        {
          "name": "detailService",
          "type": "DetailService",
          "optional": false,
          "description": "",
          "line": 119,
          "modifierKind": [114]
        },
        {
          "name": "page",
          "type": "Page",
          "optional": false,
          "description": "",
          "line": 119,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "next",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 219,
          "description": "<p>Moves to the next page if it exists</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 144
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "description":
            "<hr>\n<p>Subscription to the Page service for page changes.\nNote: this only emits after the datagrid is initialized/stabalized and the page changes.</p>\n"
        },
        {
          "name": "previous",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 212,
          "description": "<p>Moves to the previous page if it exists</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "updateCurrentPage",
          "args": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 256,
          "description":
            "<p>We only update the pagination&#39;s current page on blur of the input field, or\nwhen they press enter.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Page } from './providers/page';\nimport { ClrDatagridPageSize } from './datagrid-page-size';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { DetailService } from './providers/detail.service';\n\n@Component({\n  selector: 'clr-dg-pagination',\n  template: `\n  <ng-container *ngIf=\"!detailService.isOpen\">\n    <div class=\"pagination-size\" *ngIf=\"_pageSizeComponent\">\n      <ng-content select=\"clr-dg-page-size\"></ng-content>\n    </div>\n    <div class=\"pagination-description\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"pagination-list\" *ngIf=\"page.last > 1\">\n      <button\n        type=\"button\" \n        class=\"pagination-first\" \n        [disabled]=\"page.current <= 1\" \n        (click)=\"page.current = 1\"\n        [attr.aria-label]=\"commonStrings.keys.firstPage\"\n        >\n        <clr-icon shape=\"step-forward-2 down\"></clr-icon>\n      </button>\n      <button \n        type=\"button\"\n        class=\"pagination-previous\" \n        [disabled]=\"page.current <= 1\" \n        (click)=\"page.current = page.current - 1\"\n        [attr.aria-label]=\"commonStrings.keys.previousPage\"\n        >\n        <clr-icon shape=\"angle left\"></clr-icon>\n      </button>\n        <input \n          #currentPageInput \n          type=\"text\" \n          class=\"pagination-current clr-input\" \n          [size]=\"page.last.toString().length\" \n          [value]=\"page.current\"\n          (keydown.enter)=\"updateCurrentPage($event)\" \n          (blur)=\"updateCurrentPage($event)\"\n          [attr.aria-label]=\"commonStrings.keys.currentPage\"\n          />\n          &nbsp;/&nbsp;<span [attr.aria-label]=\"commonStrings.keys.totalPages\">{{page.last}}</span>\n      <button \n        type=\"button\"\n        class=\"pagination-next\" \n        [disabled]=\"page.current >= page.last\" \n        (click)=\"page.current = page.current + 1\"\n        [attr.aria-label]=\"commonStrings.keys.nextPage\"\n        >\n        <clr-icon shape=\"angle right\"></clr-icon>\n      </button>\n      <button \n        type=\"button\" \n        class=\"pagination-last\" \n        [disabled]=\"page.current >= page.last\" \n        (click)=\"page.current = page.last\"\n        [attr.aria-label]=\"commonStrings.keys.lastPage\"\n        >\n        <clr-icon shape=\"step-forward-2 up\"></clr-icon>\n      </button>\n    </div>\n  </ng-container>\n  <ng-container *ngIf=\"detailService.isOpen\">\n      <div class=\"pagination-description-compact\">\n          {{page.firstItem + 1}}-{{page.lastItem + 1}} / {{page.totalItems}}\n      </div>\n      <div class=\"pagination-list\">\n          <button\n                  type=\"button\"\n                  class=\"pagination-previous\"\n                  [disabled]=\"page.current <= 1\"\n                  (click)=\"page.current = page.current - 1\"\n                  [attr.aria-label]=\"commonStrings.keys.previousPage\"\n          >\n              <clr-icon shape=\"angle left\"></clr-icon>\n          </button>\n          <span>{{page.current}}</span>\n          <button\n                  type=\"button\"\n                  class=\"pagination-next\"\n                  [disabled]=\"page.current >= page.last\"\n                  (click)=\"page.current = page.current + 1\"\n                  [attr.aria-label]=\"commonStrings.keys.nextPage\"\n          >\n              <clr-icon shape=\"angle right\"></clr-icon>\n          </button>\n      </div>\n  </ng-container>\n\n  `,\n  host: { '[class.pagination]': 'true' },\n})\nexport class ClrDatagridPagination implements OnDestroy, OnInit {\n  @ContentChild(ClrDatagridPageSize, { static: false })\n  _pageSizeComponent: ClrDatagridPageSize;\n  @ViewChild('currentPageInput', { static: false })\n  currentPageInputRef: ElementRef;\n\n  constructor(public page: Page, public commonStrings: ClrCommonStringsService, public detailService: DetailService) {\n    this.page.activated = true;\n  }\n\n  /**********\n   * Subscription to the Page service for page changes.\n   * Note: this only emits after the datagrid is initialized/stabalized and the page changes.\n   */\n  ngOnInit() {\n    /*\n     * Default page size is 10.\n     * The reason we set it here and not in the provider itself is because\n     * we don't want pagination if this component isn't present in the datagrid.\n     */\n    if (!this.page.size) {\n      this.page.size = 10;\n    }\n    this._pageSubscription = this.page.change.subscribe(current => this.currentChanged.emit(current));\n  }\n\n  /**\n   * Subscription to the page service changes\n   */\n  private _pageSubscription: Subscription;\n\n  ngOnDestroy() {\n    this.page.resetPageSize(true);\n    if (this._pageSubscription) {\n      this._pageSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Page size\n   */\n  public get pageSize(): number {\n    return this.page.size;\n  }\n\n  @Input('clrDgPageSize')\n  public set pageSize(size: number) {\n    if (typeof size === 'number') {\n      this.page.size = size;\n    }\n  }\n\n  /**\n   * Total items (needed to guess the last page)\n   */\n  public get totalItems(): number {\n    return this.page.totalItems;\n  }\n\n  @Input('clrDgTotalItems')\n  public set totalItems(total: number) {\n    if (typeof total === 'number') {\n      this.page.totalItems = total;\n    }\n  }\n\n  /**\n   * Last page\n   */\n  public get lastPage(): number {\n    return this.page.last;\n  }\n\n  @Input('clrDgLastPage')\n  public set lastPage(last: number) {\n    if (typeof last === 'number') {\n      this.page.last = last;\n    }\n  }\n\n  /**\n   * Current page\n   */\n  public get currentPage(): number {\n    return this.page.current;\n  }\n\n  @Input('clrDgPage')\n  public set currentPage(page: number) {\n    if (typeof page === 'number') {\n      this.page.current = page;\n    }\n  }\n\n  @Output('clrDgPageChange') currentChanged = new EventEmitter<number>(false);\n\n  /**\n   * Moves to the previous page if it exists\n   */\n  public previous() {\n    this.page.previous();\n  }\n\n  /**\n   * Moves to the next page if it exists\n   */\n  public next() {\n    this.page.next();\n  }\n\n  /**\n   * Index of the first item displayed on the current page, starting at 0, -1 if none displayed\n   */\n  public get firstItem(): number {\n    return this.page.firstItem;\n  }\n\n  /**\n   * Index of the last item displayed on the current page, starting at 0, -1 if none displayed\n   */\n  public get lastItem(): number {\n    return this.page.lastItem;\n  }\n\n  /**\n   * Conditionally adds page numbers before and after the current page\n   */\n  public get middlePages(): number[] {\n    const middlePages: number[] = [];\n    if (this.page.current > 1) {\n      middlePages.push(this.page.current - 1);\n    }\n    middlePages.push(this.page.current);\n    if (this.page.current < this.page.last) {\n      middlePages.push(this.page.current + 1);\n    }\n    return middlePages;\n  }\n\n  /**\n   * We only update the pagination's current page on blur of the input field, or\n   * when they press enter.\n   */\n  public updateCurrentPage(event: any): void {\n    const parsed = parseInt(event.target.value, 10);\n\n    // if the input value, is not a number, we don't update the page\n    if (!isNaN(parsed)) {\n      if (parsed < 1) {\n        this.page.current = 1;\n      } else if (parsed > this.page.last) {\n        this.page.current = this.page.last;\n      } else {\n        this.page.current = parsed;\n      }\n    }\n\n    /**\n     * Set the input's value to the new current page. This is needed because the code\n     * above may have changed the value from what the user entered in.\n     */\n    this.currentPageInputRef.nativeElement.value = this.page.current;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "page",
            "type": "Page"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "detailService",
            "type": "DetailService"
          }
        ],
        "line": 117,
        "jsdoctags": [
          {
            "name": "page",
            "type": "Page",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy", "OnInit"],
      "accessors": {
        "pageSize": {
          "name": "pageSize",
          "setSignature": {
            "name": "pageSize",
            "type": "void",
            "args": [
              {
                "name": "size",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 159,
            "jsdoctags": [
              {
                "name": "size",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageSize",
            "type": "number",
            "returnType": "number",
            "line": 154,
            "description": "<p>Page size</p>\n"
          }
        },
        "totalItems": {
          "name": "totalItems",
          "setSignature": {
            "name": "totalItems",
            "type": "void",
            "args": [
              {
                "name": "total",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 173,
            "jsdoctags": [
              {
                "name": "total",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "totalItems",
            "type": "number",
            "returnType": "number",
            "line": 168,
            "description": "<p>Total items (needed to guess the last page)</p>\n"
          }
        },
        "lastPage": {
          "name": "lastPage",
          "setSignature": {
            "name": "lastPage",
            "type": "void",
            "args": [
              {
                "name": "last",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 187,
            "jsdoctags": [
              {
                "name": "last",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "lastPage",
            "type": "number",
            "returnType": "number",
            "line": 182,
            "description": "<p>Last page</p>\n"
          }
        },
        "currentPage": {
          "name": "currentPage",
          "setSignature": {
            "name": "currentPage",
            "type": "void",
            "args": [
              {
                "name": "page",
                "type": "number"
              }
            ],
            "returnType": "void",
            "line": 201,
            "jsdoctags": [
              {
                "name": "page",
                "type": "number",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentPage",
            "type": "number",
            "returnType": "number",
            "line": 196,
            "description": "<p>Current page</p>\n"
          }
        },
        "firstItem": {
          "name": "firstItem",
          "getSignature": {
            "name": "firstItem",
            "type": "number",
            "returnType": "number",
            "line": 226,
            "description":
              "<p>Index of the first item displayed on the current page, starting at 0, -1 if none displayed</p>\n"
          }
        },
        "lastItem": {
          "name": "lastItem",
          "getSignature": {
            "name": "lastItem",
            "type": "number",
            "returnType": "number",
            "line": 233,
            "description":
              "<p>Index of the last item displayed on the current page, starting at 0, -1 if none displayed</p>\n"
          }
        },
        "middlePages": {
          "name": "middlePages",
          "getSignature": {
            "name": "middlePages",
            "type": "[]",
            "returnType": "number[]",
            "line": 240,
            "description": "<p>Conditionally adds page numbers before and after the current page</p>\n"
          }
        }
      }
    },
    {
      "name": "ClrDatagridPlaceholder",
      "id": "component-ClrDatagridPlaceholder-4688a8d9e90e0f89125a5fda0c39c576",
      "file": "src/clr-angular/data/datagrid/datagrid-placeholder.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-placeholder",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div\n    class=\"datagrid-placeholder\"\n    [class.datagrid-empty]=\"emptyDatagrid\">\n        <div class=\"datagrid-placeholder-image\" *ngIf=\"emptyDatagrid\"></div>\n        <ng-content *ngIf=\"emptyDatagrid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\nimport { Items } from './providers/items';\n\n@Component({\n  selector: 'clr-dg-placeholder',\n  template: `\n        <div\n            class=\"datagrid-placeholder\"\n            [class.datagrid-empty]=\"emptyDatagrid\">\n                <div class=\"datagrid-placeholder-image\" *ngIf=\"emptyDatagrid\"></div>\n                <ng-content *ngIf=\"emptyDatagrid\"></ng-content>\n        </div>\n    `,\n  host: { '[class.datagrid-placeholder-container]': 'true' },\n})\nexport class ClrDatagridPlaceholder<T = any> {\n  constructor(private items: Items<T>) {}\n\n  /**\n   * Tests if the datagrid is empty, meaning it doesn't contain any items\n   */\n  public get emptyDatagrid() {\n    return !this.items.loading && (!this.items.displayed || this.items.displayed.length === 0);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "items",
            "type": "Items<T>"
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "items",
            "type": "Items<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "emptyDatagrid": {
          "name": "emptyDatagrid",
          "getSignature": {
            "name": "emptyDatagrid",
            "type": "",
            "returnType": "",
            "line": 27,
            "description": "<p>Tests if the datagrid is empty, meaning it doesn&#39;t contain any items</p>\n"
          }
        }
      }
    },
    {
      "name": "ClrDatagridRow",
      "id": "component-ClrDatagridRow-525c6a3969d0755610238c5c66242497",
      "file": "src/clr-angular/data/datagrid/datagrid-row.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "DatagridIfExpandService"
        },
        {
          "name": "{ provide: IfExpandService, useExisting: DatagridIfExpandService }"
        },
        {
          "name": "{ provide: LoadingListener, useExisting: DatagridIfExpandService }"
        }
      ],
      "selector": "clr-dg-row",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./datagrid-row.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgDetailCloseLabel",
          "line": 185,
          "type": "string"
        },
        {
          "name": "clrDgDetailOpenLabel",
          "line": 177,
          "type": "string"
        },
        {
          "name": "clrDgExpanded",
          "line": 158,
          "type": "boolean"
        },
        {
          "name": "clrDgItem",
          "description": "<p>Model of the row, to use for selection</p>\n",
          "line": 72,
          "type": "T"
        },
        {
          "name": "clrDgSelectable",
          "line": 136,
          "type": "boolean"
        },
        {
          "name": "clrDgSelected",
          "line": 126,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrDgExpandedChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 162,
          "type": "EventEmitter"
        },
        {
          "name": "clrDgSelectedChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 144,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_calculatedCells",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 252,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'calculatedCells', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "_detailCloseLabel",
          "defaultValue": "''",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 183,
          "modifierKind": [112]
        },
        {
          "name": "_detailOpenLabel",
          "defaultValue": "''",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 175,
          "modifierKind": [112]
        },
        {
          "name": "_scrollableCells",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 250,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'scrollableCells', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "_selected",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112]
        },
        {
          "name": "_stickyCells",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "",
          "line": 248,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'stickyCells', {static: false, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "checkboxId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [114]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 88,
          "modifierKind": [114]
        },
        {
          "name": "detailButton",
          "type": "",
          "optional": false,
          "description": "",
          "line": 173,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'detailButton', {static: false}"
            }
          ]
        },
        {
          "name": "detailService",
          "type": "DetailService",
          "optional": false,
          "description": "",
          "line": 83,
          "modifierKind": [114]
        },
        {
          "name": "dgCells",
          "type": "QueryList<ClrDatagridCell>",
          "optional": false,
          "description": "<hr>\n<p>property dgCells</p>\n",
          "line": 199,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrDatagridCell"
            }
          ],
          "jsdoctags": [
            {
              "pos": 5858,
              "end": 5874,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 5858,
                "end": 5859,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 5859,
                "end": 5870,
                "flags": 0,
                "escapedText": "description"
              },
              "comment": "<p>A Query List of the ClrDatagrid cells in this row.</p>\n"
            }
          ]
        },
        {
          "name": "displayCells",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 245,
          "modifierKind": [114]
        },
        {
          "name": "expand",
          "type": "DatagridIfExpandService",
          "optional": false,
          "description": "",
          "line": 82,
          "modifierKind": [114]
        },
        {
          "name": "expandAnimation",
          "type": "ClrExpandableAnimation",
          "optional": false,
          "description": "",
          "line": 67,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "ClrExpandableAnimation, {static: false}"
            }
          ]
        },
        {
          "name": "expandAnimationTrigger",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 76,
          "modifierKind": [114]
        },
        {
          "name": "globalExpandable",
          "type": "ExpandableRowsCount",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [114]
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [114]
        },
        {
          "name": "radioId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [114]
        },
        {
          "name": "replaced",
          "type": "",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [114]
        },
        {
          "name": "rowActionService",
          "type": "RowActionService",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [114]
        },
        {
          "name": "selection",
          "type": "Selection<T>",
          "optional": false,
          "description": "",
          "line": 79,
          "modifierKind": [114]
        },
        {
          "name": "SELECTION_TYPE",
          "defaultValue": "SelectionType",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 239,
          "modifierKind": [112]
        },
        {
          "name": "wrappedInjector",
          "type": "Injector",
          "optional": false,
          "description": "",
          "line": 254,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 201
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 209
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 241
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 256
        },
        {
          "name": "toggle",
          "args": [
            {
              "name": "selected",
              "type": "",
              "defaultValue": "!this.selected"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 146,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "selected",
              "type": "",
              "defaultValue": "!this.selected",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "toggleExpand",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 164,
          "modifierKind": [114]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  Input,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { combineLatest, Subscription } from 'rxjs';\n\nimport { IfExpandService } from '../../utils/conditional/if-expanded.service';\nimport { HostWrapper } from '../../utils/host-wrapping/host-wrapper';\nimport { LoadingListener } from '../../utils/loading/loading-listener';\n\nimport { ClrDatagridCell } from './datagrid-cell';\nimport { DatagridDisplayMode } from './enums/display-mode.enum';\nimport { DisplayModeService } from './providers/display-mode.service';\nimport { ExpandableRowsCount } from './providers/global-expandable-rows';\nimport { RowActionService } from './providers/row-action-service';\nimport { Selection } from './providers/selection';\nimport { WrappedRow } from './wrapped-row';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { SelectionType } from './enums/selection-type';\nimport { DatagridIfExpandService } from './datagrid-if-expanded.service';\nimport { ClrExpandableAnimation } from '../../utils/animations/expandable-animation/expandable-animation';\nimport { DetailService } from './providers/detail.service';\n\nlet nbRow: number = 0;\n\n@Component({\n  selector: 'clr-dg-row',\n  templateUrl: './datagrid-row.html',\n  host: {\n    '[class.datagrid-row]': 'true',\n    '[class.datagrid-selected]': 'selected',\n    '[attr.aria-owns]': 'id',\n    role: 'rowgroup',\n  },\n  providers: [\n    DatagridIfExpandService,\n    { provide: IfExpandService, useExisting: DatagridIfExpandService },\n    { provide: LoadingListener, useExisting: DatagridIfExpandService },\n  ],\n})\nexport class ClrDatagridRow<T = any> implements AfterContentInit, AfterViewInit {\n  public id: string;\n  public radioId: string;\n  public checkboxId: string;\n\n  /* reference to the enum so that template can access */\n  public SELECTION_TYPE = SelectionType;\n\n  @ViewChild(ClrExpandableAnimation, { static: false })\n  expandAnimation: ClrExpandableAnimation;\n\n  /**\n   * Model of the row, to use for selection\n   */\n  @Input('clrDgItem') item: T;\n\n  public replaced;\n\n  public expandAnimationTrigger: boolean = false;\n\n  constructor(\n    public selection: Selection<T>,\n    public rowActionService: RowActionService,\n    public globalExpandable: ExpandableRowsCount,\n    public expand: DatagridIfExpandService,\n    public detailService: DetailService,\n    private displayMode: DisplayModeService,\n    private vcr: ViewContainerRef,\n    private renderer: Renderer2,\n    private el: ElementRef,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    nbRow++;\n    this.id = 'clr-dg-row' + nbRow;\n    this.radioId = 'clr-dg-row-rd' + nbRow;\n    this.checkboxId = 'clr-dg-row-cb' + nbRow;\n\n    this.subscriptions.push(\n      combineLatest(this.expand.replace, this.expand.expandChange).subscribe(\n        ([expandReplaceValue, expandChangeValue]) => {\n          if (expandReplaceValue && expandChangeValue) {\n            // replaced and expanding\n            this.replaced = true;\n            this.renderer.addClass(this.el.nativeElement, 'datagrid-row-replaced');\n          } else {\n            this.replaced = false;\n            // Handles these cases: not replaced and collapsing & replaced and\n            // collapsing and not replaced and expanding.\n            this.renderer.removeClass(this.el.nativeElement, 'datagrid-row-replaced');\n          }\n        }\n      )\n    );\n  }\n\n  private _selected = false;\n  /**\n   * Indicates if the row is selected\n   */\n  public get selected() {\n    if (this.selection.selectionType === SelectionType.None) {\n      return this._selected;\n    } else {\n      return this.selection.isSelected(this.item);\n    }\n  }\n\n  @Input('clrDgSelected')\n  public set selected(value: boolean) {\n    if (this.selection.selectionType === SelectionType.None) {\n      this._selected = value;\n    } else {\n      this.selection.setSelected(this.item, value);\n    }\n  }\n\n  // By default every item is selectable\n  @Input('clrDgSelectable')\n  public set clrDgSelectable(value: boolean) {\n    this.selection.lockItem(this.item, value === false);\n  }\n\n  public get clrDgSelectable() {\n    return !this.selection.isLocked(this.item);\n  }\n\n  @Output('clrDgSelectedChange') selectedChanged = new EventEmitter<boolean>(false);\n\n  public toggle(selected = !this.selected) {\n    if (selected !== this.selected) {\n      this.selected = selected;\n      this.selectedChanged.emit(selected);\n    }\n  }\n\n  public get expanded() {\n    return this.expand.expanded;\n  }\n\n  @Input('clrDgExpanded')\n  public set expanded(value: boolean) {\n    this.expand.expanded = value;\n  }\n\n  @Output('clrDgExpandedChange') expandedChange = new EventEmitter<boolean>(false);\n\n  public toggleExpand() {\n    if (this.expand.expandable) {\n      this.expandAnimation.updateStartHeight();\n      this.expanded = !this.expanded;\n      this.expandedChange.emit(this.expanded);\n    }\n  }\n\n  @ViewChild('detailButton', { static: false })\n  detailButton;\n\n  private _detailOpenLabel = '';\n  @Input()\n  set clrDgDetailOpenLabel(label: string) {\n    this._detailOpenLabel = label;\n  }\n  get clrDgDetailOpenLabel(): string {\n    return this._detailOpenLabel ? this._detailOpenLabel : this.commonStrings.keys.open;\n  }\n  private _detailCloseLabel = '';\n  @Input()\n  set clrDgDetailCloseLabel(label: string) {\n    this._detailCloseLabel = label;\n  }\n  get clrDgDetailCloseLabel(): string {\n    return this._detailCloseLabel ? this._detailCloseLabel : this.commonStrings.keys.close;\n  }\n\n  /*****\n   * property dgCells\n   *\n   * @description\n   * A Query List of the ClrDatagrid cells in this row.\n   *\n   */\n  @ContentChildren(ClrDatagridCell) dgCells: QueryList<ClrDatagridCell>;\n\n  ngAfterContentInit() {\n    this.dgCells.changes.subscribe(() => {\n      this.dgCells.forEach(cell => {\n        this._scrollableCells.insert(cell._view);\n      });\n    });\n  }\n\n  ngAfterViewInit() {\n    this.subscriptions.push(\n      this.displayMode.view.subscribe(viewChange => {\n        // Listen for view changes and move cells around depending on the current displayType\n        // remove cell views from display view\n        for (let i = this._scrollableCells.length; i > 0; i--) {\n          this._scrollableCells.detach();\n        }\n        // remove cell views from calculated view\n        for (let i = this._calculatedCells.length; i > 0; i--) {\n          this._calculatedCells.detach();\n        }\n        if (viewChange === DatagridDisplayMode.CALCULATE) {\n          this.displayCells = false;\n          this.dgCells.forEach(cell => {\n            this._calculatedCells.insert(cell._view);\n          });\n        } else {\n          this.displayCells = true;\n          this.dgCells.forEach(cell => {\n            this._scrollableCells.insert(cell._view);\n          });\n        }\n      }),\n      this.expand.animate.subscribe(() => {\n        this.expandAnimationTrigger = !this.expandAnimationTrigger;\n      })\n    );\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n\n  public displayCells = false;\n\n  @ViewChild('stickyCells', { static: false, read: ViewContainerRef })\n  _stickyCells: ViewContainerRef;\n  @ViewChild('scrollableCells', { static: false, read: ViewContainerRef })\n  _scrollableCells: ViewContainerRef;\n  @ViewChild('calculatedCells', { static: false, read: ViewContainerRef })\n  _calculatedCells: ViewContainerRef;\n\n  private wrappedInjector: Injector;\n\n  ngOnInit() {\n    this.wrappedInjector = new HostWrapper(WrappedRow, this.vcr);\n  }\n\n  public get _view() {\n    return this.wrappedInjector.get(WrappedRow, this.vcr).rowView;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "selection",
            "type": "Selection<T>"
          },
          {
            "name": "rowActionService",
            "type": "RowActionService"
          },
          {
            "name": "globalExpandable",
            "type": "ExpandableRowsCount"
          },
          {
            "name": "expand",
            "type": "DatagridIfExpandService"
          },
          {
            "name": "detailService",
            "type": "DetailService"
          },
          {
            "name": "displayMode",
            "type": "DisplayModeService"
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 76,
        "jsdoctags": [
          {
            "name": "selection",
            "type": "Selection<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "rowActionService",
            "type": "RowActionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "globalExpandable",
            "type": "ExpandableRowsCount",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expand",
            "type": "DatagridIfExpandService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "detailService",
            "type": "DetailService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "displayMode",
            "type": "DisplayModeService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "vcr",
            "type": "ViewContainerRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "AfterViewInit"],
      "accessors": {
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 126,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "",
            "returnType": "",
            "line": 117,
            "description": "<p>Indicates if the row is selected</p>\n"
          }
        },
        "clrDgSelectable": {
          "name": "clrDgSelectable",
          "setSignature": {
            "name": "clrDgSelectable",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 136,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "clrDgSelectable",
            "type": "",
            "returnType": "",
            "line": 140
          }
        },
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 158,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "",
            "returnType": "",
            "line": 153
          }
        },
        "clrDgDetailOpenLabel": {
          "name": "clrDgDetailOpenLabel",
          "setSignature": {
            "name": "clrDgDetailOpenLabel",
            "type": "void",
            "args": [
              {
                "name": "label",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 177,
            "jsdoctags": [
              {
                "name": "label",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "clrDgDetailOpenLabel",
            "type": "string",
            "returnType": "string",
            "line": 180
          }
        },
        "clrDgDetailCloseLabel": {
          "name": "clrDgDetailCloseLabel",
          "setSignature": {
            "name": "clrDgDetailCloseLabel",
            "type": "void",
            "args": [
              {
                "name": "label",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 185,
            "jsdoctags": [
              {
                "name": "label",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "clrDgDetailCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 188
          }
        },
        "_view": {
          "name": "_view",
          "getSignature": {
            "name": "_view",
            "type": "",
            "returnType": "",
            "line": 260
          }
        }
      },
      "templateData":
        "<!--\n  We need to wrap the #rowContent in label element if we are in rowSelectionMode.\n  Clicking of that wrapper label will equate to clicking on the whole row, which triggers the checkbox to toggle.\n-->\n<label class=\"datagrid-row-clickable\" *ngIf=\"selection.rowSelectionMode\">\n  <clr-expandable-animation [clrExpandTrigger]=\"expandAnimationTrigger\" *ngIf=\"expand.expandable\">\n    <ng-template [ngTemplateOutlet]=\"rowContent\"></ng-template>\n  </clr-expandable-animation>\n  <ng-template [ngTemplateOutlet]=\"rowContent\" *ngIf=\"!expand.expandable\"></ng-template>\n</label>\n\n<clr-expandable-animation *ngIf=\"!selection.rowSelectionMode && expand.expandable\" [clrExpandTrigger]=\"expandAnimationTrigger\">\n  <ng-template [ngTemplateOutlet]=\"rowContent\"></ng-template>\n</clr-expandable-animation>\n\n<ng-template *ngIf=\"!selection.rowSelectionMode && !expand.expandable\" [ngTemplateOutlet]=\"rowContent\"></ng-template>\n\n<!--\n    We need the \"project into template\" hacks because we need this in 2 different places\n    depending on whether the details replace the row or not.\n-->\n<ng-template #detail>\n  <ng-content select=\"clr-dg-row-detail\"></ng-content>\n</ng-template>\n\n<ng-template #rowContent>\n  <div role=\"row\" [id]=\"id\" class=\"datagrid-row-master datagrid-row-flex\" [class.datagrid-row-detail-open]=\"detailService.isRowOpen(item)\">\n  <div class=\"datagrid-row-sticky\">\n      <!-- Sticky elements here -->\n      <ng-container #stickyCells>\n        <div *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\"\n             class=\"datagrid-select datagrid-fixed-column datagrid-cell\"\n             [ngClass]=\"{ 'clr-form-control-disabled': !clrDgSelectable }\"\n             role=\"gridcell\">\n\n          <input clrCheckbox type=\"checkbox\" [ngModel]=\"selected\" (ngModelChange)=\"toggle($event)\" [id]=\"checkboxId\"\n                 [attr.disabled]=\"clrDgSelectable ? null : true\"\n                 [attr.aria-disabled]=\"clrDgSelectable ? null : true\"\n                 [attr.aria-label]=\"commonStrings.keys.select\">\n        </div>\n        <div *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\"\n             class=\"datagrid-select datagrid-fixed-column datagrid-cell\" role=\"gridcell\"\n             [ngClass]=\"{ 'clr-form-control-disabled': !clrDgSelectable }\"\n        >\n          <!-- TODO: it would be better if in addition to the generic \"Select\" label, we could add aria-labelledby\n          to label the radio by the first cell in the row (typically an id or name).\n          It's pretty easy to label it with the whole row since we already have an id for it, but in most\n          cases the row is far too long to serve as a label, the screenreader reads every single cell content. -->\n          <input type=\"radio\" clrRadio [id]=\"radioId\" [name]=\"selection.id + '-radio'\" [value]=\"item\"\n                 [(ngModel)]=\"selection.currentSingle\" [checked]=\"selection.currentSingle === item\"\n                 [attr.disabled]=\"clrDgSelectable ? null : true\"\n                 [attr.aria-disabled]=\"clrDgSelectable ? null : true\"\n                 [attr.aria-label]=\"commonStrings.keys.select\">\n        </div>\n        <div *ngIf=\"rowActionService.hasActionableRow\"\n             class=\"datagrid-row-actions datagrid-fixed-column datagrid-cell\" role=\"gridcell\">\n          <ng-content select=\"clr-dg-action-overflow\"></ng-content>\n        </div>\n        <div *ngIf=\"globalExpandable.hasExpandableRow\"\n             class=\"datagrid-expandable-caret datagrid-fixed-column datagrid-cell\" role=\"gridcell\">\n          <ng-container *ngIf=\"expand.expandable\">\n            <button\n              *ngIf=\"!expand.loading\"\n              (click)=\"toggleExpand()\"\n              type=\"button\"\n              class=\"datagrid-expandable-caret-button\"\n              [attr.aria-expanded]=\"expand.expanded\"\n              [attr.aria-label]=\"expand.expanded ? clrDgDetailCloseLabel : clrDgDetailOpenLabel\"\n              >\n              <clr-icon shape=\"caret\"\n                        class=\"datagrid-expandable-caret-icon\"\n                        [attr.dir]=\"expand.expanded ? 'down' : 'right'\"\n                        [attr.title]=\"expand.expanded ? commonStrings.keys.collapse : commonStrings.keys.expand\"></clr-icon>\n            </button>\n            <clr-spinner *ngIf=\"expand.loading\" clrSmall>{{ commonStrings.keys.loading }}</clr-spinner>\n          </ng-container>\n        </div>\n        <div *ngIf=\"detailService.enabled\"\n             class=\"datagrid-detail-caret datagrid-fixed-column datagrid-cell\">\n          <button (click)=\"detailService.toggle(item, detailButton)\" type=\"button\" #detailButton class=\"datagrid-detail-caret-button\"\n                  [class.is-open]=\"detailService.isRowOpen(item)\" [attr.aria-label]=\"detailService.isOpen ? clrDgDetailCloseLabel : clrDgDetailOpenLabel\"\n                  [attr.aria-expanded]=\"detailService.isOpen\" [attr.aria-controls]=\"detailService.id\" aria-haspopup=\"dialog\">\n            <clr-icon shape=\"angle-double\"\n                      [attr.dir]=\"detailService.isRowOpen(item) ? 'left' : 'right'\"\n                      class=\"datagrid-detail-caret-icon\"\n                      [attr.title]=\"detailService.isRowOpen(item) ? commonStrings.keys.close: commonStrings.keys.open\"></clr-icon>\n          </button>\n        </div>\n      </ng-container> <!-- placeholder for projecting other sticky cells as pinned-->\n    </div>\n    <div class=\"datagrid-row-scrollable\" [ngClass]=\"{'is-replaced': replaced && expanded}\">\n      <div class=\"datagrid-scrolling-cells\">\n        <ng-container #scrollableCells></ng-container>\n      </div>\n      <!-- details here when replace, re-visit when sticky container is used for pinned cells -->\n      <ng-template *ngIf=\"replaced && !expand.loading\"\n                   [ngTemplateOutlet]=\"detail\"></ng-template>\n      <ng-template *ngIf=\"!replaced && !expand.loading\"\n                   [ngTemplateOutlet]=\"detail\"></ng-template>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container #calculatedCells></ng-container>\n"
    },
    {
      "name": "ClrDatagridRowDetail",
      "id": "component-ClrDatagridRowDetail-04c63256df8256607027f5d1a8ded6e0",
      "file": "src/clr-angular/data/datagrid/datagrid-row-detail.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dg-row-detail",
      "styleUrls": [],
      "styles": [],
      "template": "  <ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgReplace",
          "line": 45,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "cells",
          "type": "QueryList<ClrDatagridCell>",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrDatagridCell"
            }
          ]
        },
        {
          "name": "expand",
          "type": "DatagridIfExpandService",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [114]
        },
        {
          "name": "expandableRows",
          "type": "ExpandableRowsCount",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [114]
        },
        {
          "name": "replacedRow",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [114]
        },
        {
          "name": "rowActionService",
          "type": "RowActionService",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [114]
        },
        {
          "name": "selection",
          "type": "Selection",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [114]
        },
        {
          "name": "SELECTION_TYPE",
          "defaultValue": "SelectionType",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 48,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description":
        "<p>Generic bland container serving various purposes for Datagrid.\nFor instance, it can help span a text over multiple rows in detail view.</p>\n",
      "rawdescription":
        "Generic bland container serving various purposes for Datagrid.\nFor instance, it can help span a text over multiple rows in detail view.",
      "type": "component",
      "sourceCode":
        "import { AfterContentInit, Component, ContentChildren, Input, OnDestroy, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ClrDatagridCell } from './datagrid-cell';\nimport { ExpandableRowsCount } from './providers/global-expandable-rows';\nimport { RowActionService } from './providers/row-action-service';\nimport { Selection } from './providers/selection';\nimport { SelectionType } from './enums/selection-type';\nimport { DatagridIfExpandService } from './datagrid-if-expanded.service';\n\n/**\n * Generic bland container serving various purposes for Datagrid.\n * For instance, it can help span a text over multiple rows in detail view.\n */\n@Component({\n  selector: 'clr-dg-row-detail',\n  template: `  \n        <ng-content></ng-content>\n    `,\n  host: {\n    '[class.datagrid-row-flex]': 'true',\n    '[class.datagrid-row-detail]': 'true',\n    '[class.datagrid-container]': 'cells.length === 0',\n  },\n})\nexport class ClrDatagridRowDetail<T = any> implements AfterContentInit, OnDestroy {\n  /* reference to the enum so that template can access it */\n  public SELECTION_TYPE = SelectionType;\n\n  constructor(\n    public selection: Selection,\n    public rowActionService: RowActionService,\n    public expand: DatagridIfExpandService,\n    public expandableRows: ExpandableRowsCount\n  ) {}\n\n  @ContentChildren(ClrDatagridCell) cells: QueryList<ClrDatagridCell>;\n\n  @Input('clrDgReplace')\n  set replace(value: boolean) {\n    this.expand.setReplace(!!value);\n  }\n  private subscriptions: Subscription[] = [];\n  public replacedRow = false;\n\n  ngAfterContentInit() {\n    this.subscriptions.push(\n      this.expand.replace.subscribe(replaceChange => {\n        this.replacedRow = replaceChange;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "selection",
            "type": "Selection"
          },
          {
            "name": "rowActionService",
            "type": "RowActionService"
          },
          {
            "name": "expand",
            "type": "DatagridIfExpandService"
          },
          {
            "name": "expandableRows",
            "type": "ExpandableRowsCount"
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "selection",
            "type": "Selection",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "rowActionService",
            "type": "RowActionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expand",
            "type": "DatagridIfExpandService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expandableRows",
            "type": "ExpandableRowsCount",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "OnDestroy"],
      "accessors": {
        "replace": {
          "name": "replace",
          "setSignature": {
            "name": "replace",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrDatalistContainer",
      "id": "component-ClrDatalistContainer-a9cafac39d14c0bb9a686fe5b8c842e8",
      "file": "src/clr-angular/forms/datalist/datalist-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ControlClassService"
        },
        {
          "name": "LayoutService"
        },
        {
          "name": "ControlIdService"
        },
        {
          "name": "FocusService"
        },
        {
          "name": "IfErrorService"
        },
        {
          "name": "NgControlService"
        },
        {
          "name": "DatalistIdService"
        }
      ],
      "selector": "clr-datalist-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n  <div class=\"clr-input-wrapper\">\n    <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n      <ng-content select=\"[clrDatalistInput]\"></ng-content>\n      <ng-content select=\"datalist\"></ng-content>\n    </div>\n    <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n  </div>\n  <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n  <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "focus",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 74,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 80
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 76
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild } from '@angular/core';\nimport { ControlClassService } from '../common/providers/control-class.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { FocusService } from '../common/providers/focus.service';\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ClrLabel } from '../common/label';\nimport { DatalistIdService } from './providers/datalist-id.service';\n\n@Component({\n  selector: 'clr-datalist-container',\n  template: `\n    <ng-content select=\"label\"></ng-content>\n    <label *ngIf=\"!label && addGrid()\"></label>\n    <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n      <div class=\"clr-input-wrapper\">\n        <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n          <ng-content select=\"[clrDatalistInput]\"></ng-content>\n          <ng-content select=\"datalist\"></ng-content>\n        </div>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n      </div>\n      <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n      <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n    </div>\n    `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [\n    ControlClassService,\n    LayoutService,\n    ControlIdService,\n    FocusService,\n    IfErrorService,\n    NgControlService,\n    DatalistIdService,\n  ],\n})\nexport class ClrDatalistContainer implements DynamicWrapper {\n  private subscriptions: Subscription[] = [];\n  _dynamic: boolean = false;\n  invalid: boolean = false;\n  focus: boolean = false;\n  control: NgControl;\n\n  constructor(\n    private controlClassService: ControlClassService,\n    private layoutService: LayoutService,\n    private ifErrorService: IfErrorService,\n    private focusService: FocusService,\n    private ngControlService: NgControlService\n  ) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => (this.invalid = invalid)),\n      this.focusService.focusChange.subscribe(state => (this.focus = state)),\n      this.ngControlService.controlChanges.subscribe(control => (this.control = control))\n    );\n  }\n\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid());\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "focusService",
            "type": "FocusService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 57,
        "jsdoctags": [
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusService",
            "type": "FocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper"]
    },
    {
      "name": "ClrDateContainer",
      "id": "component-ClrDateContainer-32e70a34c91feb72bf2d93c3499df952",
      "file": "src/clr-angular/forms/datepicker/date-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ControlIdService"
        },
        {
          "name": "ClrPopoverToggleService"
        },
        {
          "name": "LocaleHelperService"
        },
        {
          "name": "IfErrorService"
        },
        {
          "name": "ControlClassService"
        },
        {
          "name": "FocusService"
        },
        {
          "name": "NgControlService"
        },
        {
          "name": "DateIOService"
        },
        {
          "name": "DateNavigationService"
        },
        {
          "name": "DatepickerEnabledService"
        },
        {
          "name": "DateFormControlService"
        }
      ],
      "selector": "clr-date-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n  <div class=\"clr-input-wrapper\">\n    <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n      <ng-content select=\"[clrDate]\"></ng-content>\n      <button #actionButton\n              type=\"button\"\n              class=\"clr-input-group-icon-action\"\n              [attr.title]=\"commonStrings.keys.datepickerToggle\"\n              [attr.aria-label]=\"commonStrings.keys.datepickerToggle\"\n              [disabled]=\"isInputDateDisabled\"\n              (click)=\"toggleDatepicker($event)\"\n              *ngIf=\"isEnabled\">\n        <clr-icon shape=\"calendar\"></clr-icon>\n      </button>\n      <clr-datepicker-view-manager *clrIfOpen clrFocusTrap [clrPosition]=\"position\"></clr-datepicker-view-manager>\n    </div>\n    <clr-icon class=\"clr-validate-icon\" shape=\"exclamation-circle\"></clr-icon>\n  </div>\n  <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n  <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrPosition",
          "line": 90,
          "type": "PopoverPosition"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 84
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 105,
          "modifierKind": [114]
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "focus",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 86
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 85
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 89,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 98,
          "modifierKind": [112]
        },
        {
          "name": "toggleButton",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 92,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 154,
          "description": "<p>Determines if the control needs to add grid classes</p>\n"
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 147,
          "description": "<p>Returns the classes to apply to the control</p>\n"
        },
        {
          "name": "initializeCalendar",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 178,
          "description":
            "<p>Processes the user input and Initializes the Calendar everytime the datepicker popover is open.</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 193,
          "description": "<p>Unsubscribe from subscriptions.</p>\n"
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124
        },
        {
          "name": "toggleDatepicker",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "description": "<p>Toggles the Datepicker Popover.</p>\n",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  OnDestroy,\n  Optional,\n  ContentChild,\n  AfterViewInit,\n  ViewChild,\n  ElementRef,\n  Input,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { ControlClassService } from '../common/providers/control-class.service';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { FocusService } from '../common/providers/focus.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { ClrLabel } from '../common/label';\n\nimport { DateFormControlService } from './providers/date-form-control.service';\nimport { DateIOService } from './providers/date-io.service';\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { DatepickerEnabledService } from './providers/datepicker-enabled.service';\nimport { LocaleHelperService } from './providers/locale-helper.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { PopoverPosition } from '../../popover/common/popover-positions';\n\n@Component({\n  selector: 'clr-date-container',\n  template: `\n      <ng-content select=\"label\"></ng-content>\n      <label *ngIf=\"!label && addGrid()\"></label>\n      <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n        <div class=\"clr-input-wrapper\">\n          <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n            <ng-content select=\"[clrDate]\"></ng-content>\n            <button #actionButton\n                    type=\"button\"\n                    class=\"clr-input-group-icon-action\"\n                    [attr.title]=\"commonStrings.keys.datepickerToggle\"\n                    [attr.aria-label]=\"commonStrings.keys.datepickerToggle\"\n                    [disabled]=\"isInputDateDisabled\"\n                    (click)=\"toggleDatepicker($event)\"\n                    *ngIf=\"isEnabled\">\n              <clr-icon shape=\"calendar\"></clr-icon>\n            </button>\n            <clr-datepicker-view-manager *clrIfOpen clrFocusTrap [clrPosition]=\"position\"></clr-datepicker-view-manager>\n          </div>\n          <clr-icon class=\"clr-validate-icon\" shape=\"exclamation-circle\"></clr-icon>\n        </div>\n        <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n        <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n      </div>\n    `,\n  providers: [\n    ControlIdService,\n    ClrPopoverToggleService,\n    LocaleHelperService,\n    IfErrorService,\n    ControlClassService,\n    FocusService,\n    NgControlService,\n    DateIOService,\n    DateNavigationService,\n    DatepickerEnabledService,\n    DateFormControlService,\n  ],\n  host: {\n    '[class.clr-form-control-disabled]': 'isInputDateDisabled',\n    '[class.clr-form-control]': 'true',\n    '[class.clr-row]': 'addGrid()',\n  },\n})\nexport class ClrDateContainer implements DynamicWrapper, OnDestroy, AfterViewInit {\n  _dynamic: boolean = false;\n  invalid = false;\n  focus = false;\n  control: NgControl;\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n  @Input('clrPosition') position: PopoverPosition;\n\n  private toggleButton: ElementRef;\n  @ViewChild('actionButton', { static: false })\n  set actionButton(button: ElementRef) {\n    this.toggleButton = button;\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    private _toggleService: ClrPopoverToggleService,\n    private _dateNavigationService: DateNavigationService,\n    private _datepickerEnabledService: DatepickerEnabledService,\n    private dateFormControlService: DateFormControlService,\n    public commonStrings: ClrCommonStringsService,\n    private ifErrorService: IfErrorService,\n    private focusService: FocusService,\n    private controlClassService: ControlClassService,\n    @Optional() private layoutService: LayoutService,\n    private ngControlService: NgControlService\n  ) {\n    this.subscriptions.push(\n      this.focusService.focusChange.subscribe(state => {\n        this.focus = state;\n      })\n    );\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n  }\n\n  ngOnInit() {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n  }\n\n  ngAfterViewInit(): void {\n    this.subscriptions.push(\n      this._toggleService.openChange.subscribe(open => {\n        if (open) {\n          this.initializeCalendar();\n        } else {\n          this.toggleButton.nativeElement.focus();\n        }\n      })\n    );\n  }\n\n  /**\n   * Returns the classes to apply to the control\n   */\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid());\n  }\n\n  /**\n   * Determines if the control needs to add grid classes\n   */\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  /**\n   * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.\n   */\n  get isEnabled(): boolean {\n    return this._datepickerEnabledService.isEnabled;\n  }\n\n  /**\n   * Return if Datepicker is diabled or not as Form Control\n   */\n  get isInputDateDisabled(): boolean {\n    /* clrForm wrapper or without clrForm */\n    return (\n      (this.control && this.control.disabled) || (this.dateFormControlService && this.dateFormControlService.disabled)\n    );\n  }\n\n  /**\n   * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.\n   */\n  private initializeCalendar(): void {\n    this._dateNavigationService.initializeCalendar();\n  }\n\n  /**\n   * Toggles the Datepicker Popover.\n   */\n  toggleDatepicker(event: MouseEvent) {\n    this._toggleService.toggleWithEvent(event);\n    this.dateFormControlService.markAsTouched();\n  }\n\n  /**\n   * Unsubscribe from subscriptions.\n   */\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService"
          },
          {
            "name": "_datepickerEnabledService",
            "type": "DatepickerEnabledService"
          },
          {
            "name": "dateFormControlService",
            "type": "DateFormControlService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "focusService",
            "type": "FocusService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 98,
        "jsdoctags": [
          {
            "name": "_toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_datepickerEnabledService",
            "type": "DatepickerEnabledService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dateFormControlService",
            "type": "DateFormControlService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusService",
            "type": "FocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper", "OnDestroy", "AfterViewInit"],
      "accessors": {
        "actionButton": {
          "name": "actionButton",
          "setSignature": {
            "name": "actionButton",
            "type": "void",
            "args": [
              {
                "name": "button",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 94,
            "jsdoctags": [
              {
                "name": "button",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "isEnabled": {
          "name": "isEnabled",
          "getSignature": {
            "name": "isEnabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 161,
            "description":
              "<p>Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.</p>\n"
          }
        },
        "isInputDateDisabled": {
          "name": "isInputDateDisabled",
          "getSignature": {
            "name": "isInputDateDisabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 168,
            "description": "<p>Return if Datepicker is diabled or not as Form Control</p>\n"
          }
        }
      }
    },
    {
      "name": "ClrDatepickerViewManager",
      "id": "component-ClrDatepickerViewManager-7580c2adbe224a40887432e4c2cdec3e",
      "file": "src/clr-angular/forms/datepicker/datepicker-view-manager.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ViewManagerService"
        },
        {
          "name": "DatepickerFocusService"
        }
      ],
      "selector": "clr-datepicker-view-manager",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./datepicker-view-manager.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrPosition",
          "line": 40,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "anchorElem",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "closeOnOutsideClick",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [114],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentESCListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "hostClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignore",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElementClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverOptions",
          "defaultValue": "{}",
          "type": "PopoverOptions",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "updateAnchor",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "configurePopover",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "description": "<p>Configure Popover Direction and Close indicators</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "anchor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, Injector, SkipSelf, Input } from '@angular/core';\n\nimport { AbstractPopover } from '../../popover/common/abstract-popover';\nimport { Point } from '../../popover/common/popover';\nimport { PopoverPosition } from '../../popover/common/popover-positions';\n\nimport { DatepickerFocusService } from './providers/datepicker-focus.service';\nimport { ViewManagerService } from './providers/view-manager.service';\n\n@Component({\n  selector: 'clr-datepicker-view-manager',\n  templateUrl: './datepicker-view-manager.html',\n  providers: [ViewManagerService, DatepickerFocusService],\n  host: {\n    '[class.datepicker]': 'true',\n    '[attr.aria-modal]': 'true',\n  },\n})\nexport class ClrDatepickerViewManager extends AbstractPopover {\n  constructor(@SkipSelf() parent: ElementRef, _injector: Injector, private _viewManagerService: ViewManagerService) {\n    super(_injector, parent);\n    this.configurePopover();\n  }\n\n  /**\n   * Configure Popover Direction and Close indicators\n   */\n  private configurePopover(): void {\n    this.position = 'bottom-left';\n    this.closeOnOutsideClick = true;\n  }\n\n  @Input('clrPosition')\n  set position(position: PopoverPosition) {\n    switch (position) {\n      case 'top-right':\n        this.anchorPoint = Point.TOP_RIGHT;\n        this.popoverPoint = Point.RIGHT_BOTTOM;\n        break;\n      case 'top-left':\n        this.anchorPoint = Point.TOP_LEFT;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        break;\n      case 'bottom-right':\n        this.anchorPoint = Point.BOTTOM_RIGHT;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      case 'bottom-left':\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'right-top':\n        this.anchorPoint = Point.RIGHT_TOP;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'right-bottom':\n        this.anchorPoint = Point.RIGHT_BOTTOM;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        break;\n      case 'left-top':\n        this.anchorPoint = Point.LEFT_TOP;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      case 'left-bottom':\n        this.anchorPoint = Point.LEFT_BOTTOM;\n        this.popoverPoint = Point.RIGHT_BOTTOM;\n        break;\n      default:\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n    }\n  }\n\n  /**\n   * Returns if the current view is the monthpicker.\n   */\n  get isMonthView(): boolean {\n    return this._viewManagerService.isMonthView;\n  }\n\n  /**\n   * Returns if the current view is the yearpicker.\n   */\n  get isYearView(): boolean {\n    return this._viewManagerService.isYearView;\n  }\n\n  /**\n   * Returns if the current view is the daypicker.\n   */\n  get isDayView(): boolean {\n    return this._viewManagerService.isDayView;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "parent",
            "type": "ElementRef"
          },
          {
            "name": "_injector",
            "type": "Injector"
          },
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService"
          }
        ],
        "line": 25,
        "jsdoctags": [
          {
            "name": "parent",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "AbstractPopover",
      "accessors": {
        "position": {
          "name": "position",
          "setSignature": {
            "name": "position",
            "type": "void",
            "args": [
              {
                "name": "position",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "position",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "isMonthView": {
          "name": "isMonthView",
          "getSignature": {
            "name": "isMonthView",
            "type": "boolean",
            "returnType": "boolean",
            "line": 84,
            "description": "<p>Returns if the current view is the monthpicker.</p>\n"
          }
        },
        "isYearView": {
          "name": "isYearView",
          "getSignature": {
            "name": "isYearView",
            "type": "boolean",
            "returnType": "boolean",
            "line": 91,
            "description": "<p>Returns if the current view is the yearpicker.</p>\n"
          }
        },
        "isDayView": {
          "name": "isDayView",
          "getSignature": {
            "name": "isDayView",
            "type": "boolean",
            "returnType": "boolean",
            "line": 98,
            "description": "<p>Returns if the current view is the daypicker.</p>\n"
          }
        }
      },
      "templateData":
        "<!--\n* Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<clr-monthpicker *ngIf=\"isMonthView\"></clr-monthpicker>\n<clr-yearpicker *ngIf=\"isYearView\"></clr-yearpicker>\n<clr-daypicker *ngIf=\"isDayView\"></clr-daypicker>\n"
    },
    {
      "name": "ClrDay",
      "id": "component-ClrDay-ae96c2138ef386f29c98a2a43844ce3e",
      "file": "src/clr-angular/forms/datepicker/day.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-day",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button\n    class=\"day-btn\"\n    type=\"button\"\n    [class.is-today]=\"dayView.isTodaysDate\"\n    [class.is-excluded]=\"dayView.isExcluded\"\n    [class.is-disabled]=\"dayView.isDisabled\"\n    [class.is-selected]=\"dayView.isSelected\"\n    [attr.tabindex]=\"dayView.tabIndex\"\n    (click)=\"selectDay()\"\n    (focus)=\"onDayViewFocus()\"\n    [attr.aria-label]=\"dayString\">\n    {{dayView.dayModel.date}}\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDayView",
          "description": "<p>DayViewModel input which is used to build the Day View.</p>\n",
          "line": 50,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dayView",
          "type": "DayViewModel",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [112]
        },
        {
          "name": "dayString",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "onDayViewFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "description": "<p>Updates the focusedDay in the DateNavigationService when the ClrDay is focused.</p>\n"
        },
        {
          "name": "selectDay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "description":
            "<p>Updates the selectedDay when the ClrDay is selected and closes the datepicker popover.</p>\n"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Input } from '@angular/core';\n\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\n\nimport { DayViewModel } from './model/day-view.model';\nimport { DayModel } from './model/day.model';\nimport { DateFormControlService } from './providers/date-form-control.service';\nimport { DateNavigationService } from './providers/date-navigation.service';\n\n@Component({\n  selector: 'clr-day',\n  template: `\n        <button\n            class=\"day-btn\"\n            type=\"button\"\n            [class.is-today]=\"dayView.isTodaysDate\"\n            [class.is-excluded]=\"dayView.isExcluded\"\n            [class.is-disabled]=\"dayView.isDisabled\"\n            [class.is-selected]=\"dayView.isSelected\"\n            [attr.tabindex]=\"dayView.tabIndex\"\n            (click)=\"selectDay()\"\n            (focus)=\"onDayViewFocus()\"\n            [attr.aria-label]=\"dayString\">\n            {{dayView.dayModel.date}}\n        </button>\n    `,\n  host: { '[class.day]': 'true' },\n})\nexport class ClrDay {\n  private _dayView: DayViewModel;\n  public dayString: string;\n\n  constructor(\n    private _dateNavigationService: DateNavigationService,\n    private _toggleService: ClrPopoverToggleService,\n    private dateFormControlService: DateFormControlService\n  ) {}\n\n  /**\n   * DayViewModel input which is used to build the Day View.\n   */\n\n  @Input('clrDayView')\n  public set dayView(day: DayViewModel) {\n    this._dayView = day;\n    this.dayString = this._dayView.dayModel.toDateString();\n  }\n\n  public get dayView(): DayViewModel {\n    return this._dayView;\n  }\n\n  /**\n   * Updates the focusedDay in the DateNavigationService when the ClrDay is focused.\n   */\n  onDayViewFocus() {\n    this._dateNavigationService.focusedDay = this.dayView.dayModel;\n  }\n\n  /**\n   * Updates the selectedDay when the ClrDay is selected and closes the datepicker popover.\n   */\n  selectDay(): void {\n    const day: DayModel = this.dayView.dayModel;\n    this._dateNavigationService.notifySelectedDayChanged(day);\n    this.dateFormControlService.markAsDirty();\n    this._toggleService.open = false;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService"
          },
          {
            "name": "_toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "dateFormControlService",
            "type": "DateFormControlService"
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dateFormControlService",
            "type": "DateFormControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "dayView": {
          "name": "dayView",
          "setSignature": {
            "name": "dayView",
            "type": "void",
            "args": [
              {
                "name": "day",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "description": "<p>DayViewModel input which is used to build the Day View.</p>\n",
            "jsdoctags": [
              {
                "name": "day",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "dayView",
            "type": "",
            "returnType": "DayViewModel",
            "line": 55
          }
        }
      }
    },
    {
      "name": "ClrDaypicker",
      "id": "component-ClrDaypicker-b5a8b0d2bd234cea304d929b909ef5f1",
      "file": "src/clr-angular/forms/datepicker/daypicker.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "AriaLiveService"
        }
      ],
      "selector": "clr-daypicker",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./daypicker.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 25,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "changeToMonthView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 60,
          "description": "<p>Calls the ViewManagerService to change to the monthpicker view.</p>\n"
        },
        {
          "name": "changeToYearView",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "description": "<p>Calls the ViewManagerService to change to the yearpicker view.</p>\n"
        },
        {
          "name": "currentMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 102,
          "description": "<p>Calls the DateNavigationService to move to the current month.</p>\n"
        },
        {
          "name": "nextMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88,
          "description": "<p>Calls the DateNavigationService to move to the next month.</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29
        },
        {
          "name": "previousMonth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "description": "<p>Calls the DateNavigationService to move to the previous month.</p>\n"
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, AfterViewInit } from '@angular/core';\n\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { LocaleHelperService } from './providers/locale-helper.service';\nimport { ViewManagerService } from './providers/view-manager.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { AriaLiveService } from '../../utils/a11y/aria-live.service';\n\n@Component({\n  selector: 'clr-daypicker',\n  providers: [AriaLiveService],\n  templateUrl: './daypicker.html',\n  host: { '[class.daypicker]': 'true' },\n})\nexport class ClrDaypicker implements AfterViewInit {\n  constructor(\n    private _viewManagerService: ViewManagerService,\n    private _dateNavigationService: DateNavigationService,\n    private _localeHelperService: LocaleHelperService,\n    public commonStrings: ClrCommonStringsService,\n    private ariaLiveService: AriaLiveService\n  ) {}\n\n  ngAfterViewInit() {\n    this.ariaLiveService.announce(`${this.ariaLiveMonth} ${this.updateAriaLiveYear}`);\n  }\n\n  get monthAttrString(): string {\n    return this.commonStrings.parse(this.commonStrings.keys.datepickerSelectMonthText, {\n      CALENDAR_MONTH: this.calendarMonth,\n    });\n  }\n\n  get yearAttrString(): string {\n    return this.commonStrings.parse(this.commonStrings.keys.datepickerSelectYearText, {\n      CALENDAR_YEAR: this.calendarYear.toString(),\n    });\n  }\n\n  get ariaLiveMonth(): string {\n    return this.commonStrings.parse(this.commonStrings.keys.daypickerSRCurrentMonthPhrase, {\n      CURRENT_MONTH: this.calendarMonth,\n    });\n  }\n\n  get updateAriaLiveYear(): string {\n    return this.commonStrings.parse(this.commonStrings.keys.daypickerSRCurrentYearPhrase, {\n      CURRENT_YEAR: this.calendarYear.toString(),\n    });\n  }\n\n  /**\n   * Calls the ViewManagerService to change to the monthpicker view.\n   */\n  changeToMonthView(): void {\n    this._viewManagerService.changeToMonthView();\n  }\n\n  /**\n   * Calls the ViewManagerService to change to the yearpicker view.\n   */\n  changeToYearView(): void {\n    this._viewManagerService.changeToYearView();\n  }\n\n  /**\n   * Returns the month value of the calendar in the TranslationWidth.Abbreviated format.\n   */\n  get calendarMonth(): string {\n    return this._localeHelperService.localeMonthsAbbreviated[this._dateNavigationService.displayedCalendar.month];\n  }\n\n  /**\n   * Returns the year value of the calendar.\n   */\n  get calendarYear(): number {\n    return this._dateNavigationService.displayedCalendar.year;\n  }\n\n  /**\n   * Calls the DateNavigationService to move to the next month.\n   */\n  nextMonth(): void {\n    this._dateNavigationService.moveToNextMonth();\n  }\n\n  /**\n   * Calls the DateNavigationService to move to the previous month.\n   */\n  previousMonth(): void {\n    this._dateNavigationService.moveToPreviousMonth();\n  }\n\n  /**\n   * Calls the DateNavigationService to move to the current month.\n   */\n  currentMonth(): void {\n    this._dateNavigationService.moveToCurrentMonth();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService"
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService"
          },
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"],
      "accessors": {
        "monthAttrString": {
          "name": "monthAttrString",
          "getSignature": {
            "name": "monthAttrString",
            "type": "string",
            "returnType": "string",
            "line": 33
          }
        },
        "yearAttrString": {
          "name": "yearAttrString",
          "getSignature": {
            "name": "yearAttrString",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "ariaLiveMonth": {
          "name": "ariaLiveMonth",
          "getSignature": {
            "name": "ariaLiveMonth",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "updateAriaLiveYear": {
          "name": "updateAriaLiveYear",
          "getSignature": {
            "name": "updateAriaLiveYear",
            "type": "string",
            "returnType": "string",
            "line": 51
          }
        },
        "calendarMonth": {
          "name": "calendarMonth",
          "getSignature": {
            "name": "calendarMonth",
            "type": "string",
            "returnType": "string",
            "line": 74,
            "description":
              "<p>Returns the month value of the calendar in the TranslationWidth.Abbreviated format.</p>\n"
          }
        },
        "calendarYear": {
          "name": "calendarYear",
          "getSignature": {
            "name": "calendarYear",
            "type": "number",
            "returnType": "number",
            "line": 81,
            "description": "<p>Returns the year value of the calendar.</p>\n"
          }
        }
      },
      "templateData":
        "<div class=\"clr-sr-only\">{{commonStrings.keys.modalContentStart}}</div>\n<div class=\"calendar-header\">\n    <div class=\"calendar-pickers\">\n        <button\n                class=\"calendar-btn monthpicker-trigger\"\n                type=\"button\" (click)=\"changeToMonthView()\"\n                [attr.aria-label]=\"monthAttrString\"\n                [attr.title]=\"monthAttrString\">\n                {{calendarMonth}}\n        </button>\n        <button\n                class=\"calendar-btn yearpicker-trigger\"\n                type=\"button\"\n                (click)=\"changeToYearView()\"\n                [attr.aria-label]=\"yearAttrString\"\n                [attr.title]=\"yearAttrString\">\n            {{calendarYear}}\n        </button>\n    </div>\n    <div class=\"calendar-switchers\">\n        <button\n            class=\"calendar-btn switcher\"\n            type=\"button\"\n            (click)=\"previousMonth()\"\n            [attr.aria-label]=\"commonStrings.keys.datepickerPreviousMonth\">\n            <clr-icon shape=\"angle\" dir=\"left\" [attr.title]=\"commonStrings.keys.datepickerPreviousMonth\"></clr-icon>\n        </button>\n        <button\n            class=\"calendar-btn switcher\"\n            type=\"button\"\n            (click)=\"currentMonth()\"\n            [attr.aria-label]=\"commonStrings.keys.datepickerCurrentMonth\">\n            <clr-icon shape=\"event\" [attr.title]=\"commonStrings.keys.datepickerCurrentMonth\"></clr-icon>\n        </button>\n        <button\n            class=\"calendar-btn switcher\"\n            type=\"button\"\n            (click)=\"nextMonth()\"\n            [attr.aria-label]=\"commonStrings.keys.datepickerNextMonth\">\n            <clr-icon shape=\"angle\" dir=\"right\" [attr.title]=\"commonStrings.keys.datepickerNextMonth\"></clr-icon>\n        </button>\n    </div>\n</div>\n<clr-calendar></clr-calendar>\n<div class=\"clr-sr-only\">{{commonStrings.keys.modalContentEnd}}</div>\n"
    },
    {
      "name": "ClrDraggableGhost",
      "id": "component-ClrDraggableGhost-5fe192b4f87b1a05881357799d4c8081",
      "file": "src/clr-angular/utils/drag-and-drop/draggable-ghost.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-draggable-ghost",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "draggableGhostEl",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "animateToOnLeave",
          "args": [
            {
              "name": "top",
              "type": "string"
            },
            {
              "name": "left",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 104,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "top",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "left",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findDropPointPosition",
          "args": [
            {
              "name": "topLeftPosition",
              "type": "PagePosition"
            }
          ],
          "optional": false,
          "returnType": "PagePosition",
          "typeParameters": [],
          "line": 114,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "topLeftPosition",
              "type": "PagePosition",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findTopLeftPosition",
          "args": [
            {
              "name": "dragPosition",
              "type": "PagePosition"
            },
            {
              "name": "offset",
              "type": "OffsetPosition"
            }
          ],
          "optional": false,
          "returnType": "PagePosition",
          "typeParameters": [],
          "line": 110,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "dragPosition",
              "type": "PagePosition",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "offset",
              "type": "OffsetPosition",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136
        },
        {
          "name": "setDefaultGhostSize",
          "args": [
            {
              "name": "el",
              "type": "Node"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "el",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setPositionStyle",
          "args": [
            {
              "name": "el",
              "type": "Node"
            },
            {
              "name": "left",
              "type": "number"
            },
            {
              "name": "top",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 130,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "el",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "left",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "top",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setSizeStyle",
          "args": [
            {
              "name": "el",
              "type": "Node"
            },
            {
              "name": "width",
              "type": "number"
            },
            {
              "name": "height",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 125,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "el",
              "type": "Node",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "width",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "height",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [
        {
          "name": "@leaveAnimation",
          "defaultValue": "{ value: 0, params: { top: '0px', left: '0px' } }",
          "line": 40
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { animate, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, HostBinding, NgZone, OnDestroy, Optional, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DragEventInterface } from './interfaces/drag-event.interface';\nimport { DragEventListenerService } from './providers/drag-event-listener.service';\nimport { DraggableSnapshotService } from './providers/draggable-snapshot.service';\n\ntype PagePosition = {\n  pageX: number;\n  pageY: number;\n};\ntype OffsetPosition = {\n  top: number;\n  left: number;\n};\n\n@Component({\n  selector: 'clr-draggable-ghost',\n  template: `<ng-content></ng-content>`,\n  animations: [\n    trigger('leaveAnimation', [\n      transition(':leave', [\n        style({ left: '*', top: '*' }),\n        animate('0.2s ease-in-out', style({ top: '{{top}}', left: '{{left}}' })),\n      ]),\n    ]),\n  ],\n})\nexport class ClrDraggableGhost<T> implements OnDestroy {\n  private draggableGhostEl: any;\n\n  private subscriptions: Subscription[] = [];\n\n  @HostBinding('@leaveAnimation') leaveAnimConfig = { value: 0, params: { top: '0px', left: '0px' } };\n\n  constructor(\n    private el: ElementRef,\n    @Optional() private dragEventListener: DragEventListenerService<T>,\n    @Optional() private draggableSnapshot: DraggableSnapshotService<T>,\n    private renderer: Renderer2,\n    private ngZone: NgZone\n  ) {\n    if (!this.dragEventListener || !this.draggableSnapshot) {\n      throw new Error('The clr-draggable-ghost component can only be used inside of a clrDraggable directive.');\n    }\n\n    this.draggableGhostEl = this.el.nativeElement;\n\n    // Need to use Renderer2 as it runs outside of NgZone\n    this.renderer.addClass(this.draggableGhostEl, 'draggable-ghost');\n\n    // Register the ghost element in DragEventListener to pass in a ClrDragEvent.\n    this.dragEventListener.ghostElement = this.draggableGhostEl;\n\n    // Default ghost size gets the size of ClrDraggable element.\n    this.setDefaultGhostSize(this.draggableGhostEl);\n\n    const offset: OffsetPosition = {\n      top: this.draggableSnapshot.hasDraggableState\n        ? this.draggableSnapshot.dragEvent.dragPosition.pageY - this.draggableSnapshot.clientRect.top\n        : 0,\n      left: this.draggableSnapshot.hasDraggableState\n        ? this.draggableSnapshot.dragEvent.dragPosition.pageX - this.draggableSnapshot.clientRect.left\n        : 0,\n    };\n\n    let isAnimationConfigured: boolean = false;\n\n    this.subscriptions.push(\n      this.dragEventListener.dragMoved.subscribe((event: DragEventInterface<T>) => {\n        // On the first drag move event, we configure the animation as it's dependent on the first drag event.\n        if (!isAnimationConfigured) {\n          if (this.draggableSnapshot.hasDraggableState) {\n            this.animateToOnLeave(\n              `${this.draggableSnapshot.clientRect.top}px`,\n              `${this.draggableSnapshot.clientRect.left}px`\n            );\n          } else {\n            this.animateToOnLeave(`${event.dragPosition.pageY}px`, `${event.dragPosition.pageX}px`);\n          }\n          isAnimationConfigured = true;\n        }\n\n        // Position the draggable ghost.\n        const topLeftPosition: PagePosition = this.findTopLeftPosition(event.dragPosition, offset);\n        this.setPositionStyle(this.draggableGhostEl, topLeftPosition.pageX, topLeftPosition.pageY);\n        this.dragEventListener.dropPointPosition = this.findDropPointPosition(topLeftPosition);\n      })\n    );\n  }\n\n  private setDefaultGhostSize(el: Node): void {\n    if (this.draggableSnapshot.hasDraggableState) {\n      this.setSizeStyle(el, this.draggableSnapshot.clientRect.width, this.draggableSnapshot.clientRect.height);\n    }\n  }\n\n  private animateToOnLeave(top: string, left: string): void {\n    this.ngZone.run(() => {\n      this.leaveAnimConfig = { value: 0, params: { top: top, left: left } };\n    });\n  }\n\n  private findTopLeftPosition(dragPosition: PagePosition, offset: OffsetPosition): PagePosition {\n    return { pageX: dragPosition.pageX - offset.left, pageY: dragPosition.pageY - offset.top };\n  }\n\n  private findDropPointPosition(topLeftPosition: PagePosition): PagePosition {\n    if (this.draggableSnapshot.hasDraggableState) {\n      return {\n        pageX: topLeftPosition.pageX + this.draggableSnapshot.clientRect.width / 2,\n        pageY: topLeftPosition.pageY + this.draggableSnapshot.clientRect.height / 2,\n      };\n    } else {\n      return topLeftPosition;\n    }\n  }\n\n  private setSizeStyle(el: Node, width: number, height: number): void {\n    this.renderer.setStyle(el, 'width', `${width}px`);\n    this.renderer.setStyle(el, 'height', `${height}px`);\n  }\n\n  private setPositionStyle(el: Node, left: number, top: number): void {\n    this.renderer.setStyle(el, 'left', `${left}px`);\n    this.renderer.setStyle(el, 'top', `${top}px`);\n    this.renderer.setStyle(el, 'visibility', 'visible');\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>"
          },
          {
            "name": "draggableSnapshot",
            "type": "DraggableSnapshotService<T>"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "ngZone",
            "type": "NgZone"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dragEventListener",
            "type": "DragEventListenerService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "draggableSnapshot",
            "type": "DraggableSnapshotService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngZone",
            "type": "NgZone",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"]
    },
    {
      "name": "ClrDropdown",
      "id": "component-ClrDropdown-e36a1aeaa91f493dc01c9932bf5b1efe",
      "file": "src/clr-angular/popover/dropdown/dropdown.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ROOT_DROPDOWN_PROVIDER"
        },
        {
          "name": "{ provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef }"
        },
        {
          "name": "FOCUS_SERVICE_PROVIDER"
        },
        {
          "name": "ClrPopoverToggleService"
        },
        {
          "name": "DROPDOWN_FOCUS_HANDLER_PROVIDER"
        }
      ],
      "selector": "clr-dropdown",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrCloseMenuOnItemClick",
          "defaultValue": "true",
          "line": 48,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "parent",
          "type": "ClrDropdown",
          "optional": false,
          "description": "",
          "line": 39,
          "decorators": [
            {
              "name": "SkipSelf",
              "stringifiedArguments": ""
            },
            {
              "name": "Optional",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [112]
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';\nimport { DROPDOWN_FOCUS_HANDLER_PROVIDER } from './providers/dropdown-focus-handler.service';\nimport { FOCUS_SERVICE_PROVIDER } from '../../utils/focus/focus.service';\n\nimport { ROOT_DROPDOWN_PROVIDER, RootDropdownService } from './providers/dropdown.service';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\n\n@Component({\n  selector: 'clr-dropdown',\n  template: '<ng-content></ng-content>',\n  host: {\n    '[class.dropdown]': 'true',\n    // the open class, also used in static version, is always present in the Angular version\n    // Angular takes care of hiding it, regardless of whether you use *clrIfOpen or not\n    '[class.open]': 'true',\n  },\n  providers: [\n    ROOT_DROPDOWN_PROVIDER,\n    { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },\n    FOCUS_SERVICE_PROVIDER,\n    ClrPopoverToggleService,\n    DROPDOWN_FOCUS_HANDLER_PROVIDER,\n  ],\n})\nexport class ClrDropdown implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    @SkipSelf()\n    @Optional()\n    public parent: ClrDropdown,\n    public toggleService: ClrPopoverToggleService,\n    private cdr: ChangeDetectorRef,\n    dropdownService: RootDropdownService\n  ) {\n    this.subscriptions.push(dropdownService.changes.subscribe(value => (this.toggleService.open = value)));\n    this.subscriptions.push(toggleService.openChange.subscribe(value => this.cdr.markForCheck()));\n  }\n\n  @Input('clrCloseMenuOnItemClick') isMenuClosable: boolean = true;\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "parent",
            "type": "ClrDropdown"
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef"
          },
          {
            "name": "dropdownService",
            "type": "RootDropdownService"
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "parent",
            "type": "ClrDropdown",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "cdr",
            "type": "ChangeDetectorRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "dropdownService",
            "type": "RootDropdownService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"]
    },
    {
      "name": "ClrDropdownMenu",
      "id": "component-ClrDropdownMenu-6b87101c2234e07e56b2486236d0f734",
      "file": "src/clr-angular/popover/dropdown/dropdown-menu.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-dropdown-menu",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrPosition",
          "line": 66,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "focusHandler",
          "type": "DropdownFocusHandler",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [112]
        },
        {
          "name": "items",
          "type": "QueryList<FocusableItem>",
          "optional": false,
          "description": "",
          "line": 109,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "FocusableItem"
            }
          ]
        },
        {
          "name": "anchorElem",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "closeOnOutsideClick",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [114],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentESCListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "hostClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignore",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElementClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverOptions",
          "defaultValue": "{}",
          "type": "PopoverOptions",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "updateAnchor",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 111
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118
        },
        {
          "name": "anchor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  Optional,\n  QueryList,\n  SkipSelf,\n} from '@angular/core';\nimport { AbstractPopover } from '../common/abstract-popover';\nimport { Point } from '../common/popover';\nimport { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';\nimport { DropdownFocusHandler } from './providers/dropdown-focus-handler.service';\nimport { FocusableItem } from '../../utils/focus/focusable-item/focusable-item';\n\n@Component({\n  selector: 'clr-dropdown-menu',\n  template: `\n        <ng-content></ng-content>\n    `,\n  host: {\n    '[class.dropdown-menu]': 'true',\n    '[attr.role]': '\"menu\"',\n  },\n})\nexport class ClrDropdownMenu extends AbstractPopover implements AfterContentInit, OnDestroy {\n  constructor(\n    injector: Injector,\n    @Optional()\n    @Inject(POPOVER_HOST_ANCHOR)\n    parentHost: ElementRef<HTMLElement>,\n    @Optional()\n    @SkipSelf()\n    nested: ClrDropdownMenu,\n    focusHandler: DropdownFocusHandler\n  ) {\n    if (!parentHost) {\n      throw new Error('clr-dropdown-menu should only be used inside of a clr-dropdown');\n    }\n    super(injector, parentHost);\n    if (!nested) {\n      // Default positioning for normal dropdown is bottom-left\n      this.anchorPoint = Point.BOTTOM_LEFT;\n      this.popoverPoint = Point.LEFT_TOP;\n    } else {\n      // Default positioning for nested dropdown is right-top\n      this.anchorPoint = Point.RIGHT_TOP;\n      this.popoverPoint = Point.LEFT_TOP;\n    }\n    this.popoverOptions.allowMultipleOpen = true;\n    this.popoverOptions.ignoreGlobalESCListener = true;\n    this.closeOnOutsideClick = true;\n    this.focusHandler = focusHandler;\n  }\n\n  @Input('clrPosition')\n  set position(position: string) {\n    // set the popover values based on menu position\n    switch (position) {\n      case 'top-right':\n        this.anchorPoint = Point.TOP_RIGHT;\n        this.popoverPoint = Point.RIGHT_BOTTOM;\n        break;\n      case 'top-left':\n        this.anchorPoint = Point.TOP_LEFT;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        break;\n      case 'bottom-right':\n        this.anchorPoint = Point.BOTTOM_RIGHT;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      case 'bottom-left':\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'right-top':\n        this.anchorPoint = Point.RIGHT_TOP;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'right-bottom':\n        this.anchorPoint = Point.RIGHT_BOTTOM;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        break;\n      case 'left-top':\n        this.anchorPoint = Point.LEFT_TOP;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      case 'left-bottom':\n        this.anchorPoint = Point.LEFT_BOTTOM;\n        this.popoverPoint = Point.RIGHT_BOTTOM;\n        break;\n      default:\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n    }\n  }\n\n  private focusHandler: DropdownFocusHandler;\n  @ContentChildren(FocusableItem) items: QueryList<FocusableItem>;\n\n  ngAfterContentInit() {\n    this.focusHandler.container = this.el.nativeElement;\n    this.items.changes.subscribe(() => this.focusHandler.addChildren(this.items.toArray()));\n    // I saw this on GitHub as a solution to avoid code duplication because of missed QueryList changes\n    this.items.notifyOnChanges();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.focusHandler.resetChildren();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "parentHost",
            "type": "ElementRef<HTMLElement>"
          },
          {
            "name": "nested",
            "type": "ClrDropdownMenu"
          },
          {
            "name": "focusHandler",
            "type": "DropdownFocusHandler"
          }
        ],
        "line": 35,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentHost",
            "type": "ElementRef<HTMLElement>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "nested",
            "type": "ClrDropdownMenu",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusHandler",
            "type": "DropdownFocusHandler",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "AbstractPopover",
      "implements": ["AfterContentInit", "OnDestroy"],
      "accessors": {
        "position": {
          "name": "position",
          "setSignature": {
            "name": "position",
            "type": "void",
            "args": [
              {
                "name": "position",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "position",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrExpandableAnimation",
      "id": "component-ClrExpandableAnimation-1885ee2ddf39ce11a431e6bbdc9d9b70",
      "file": "src/clr-angular/utils/animations/expandable-animation/expandable-animation.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "DomAdapter"
        }
      ],
      "selector": "clr-expandable-animation",
      "styleUrls": [],
      "styles": ["\n    :host {\n      display: block;\n    }\n  "],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrExpandTrigger",
          "line": 35,
          "type": "any"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "startHeight",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 37
        }
      ],
      "methodsClass": [
        {
          "name": "updateStartHeight",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54
        }
      ],
      "hostBindings": [
        {
          "name": "@expandAnimation",
          "line": 42
        }
      ],
      "hostListeners": [
        {
          "name": "@expandAnimation.done",
          "args": [],
          "argsDecorator": [],
          "line": 47
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, HostBinding, HostListener, Input } from '@angular/core';\n\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { DomAdapter } from '../../dom-adapter/dom-adapter';\n\n@Component({\n  selector: 'clr-expandable-animation',\n  template: `\n    <ng-content></ng-content>\n  `,\n  styles: [\n    `\n    :host {\n      display: block;\n    }\n  `,\n  ],\n  animations: [\n    trigger('expandAnimation', [\n      transition('true <=> false', [\n        style({ height: '{{startHeight}}px', overflow: 'hidden' }),\n        animate('0.2s ease-in-out', style({ height: '*' })),\n      ]),\n    ]),\n  ],\n  providers: [DomAdapter],\n})\nexport class ClrExpandableAnimation {\n  @Input() clrExpandTrigger: any;\n\n  startHeight: number = 0;\n\n  constructor(private element: ElementRef, private domAdapter: DomAdapter) {}\n\n  @HostBinding('@expandAnimation')\n  get expandAnimation() {\n    return { value: this.clrExpandTrigger, params: { startHeight: this.startHeight } };\n  }\n\n  @HostListener('@expandAnimation.done')\n  animationDone() {\n    // A \"safe\" auto-update of the height ensuring basic OOTB user experience .\n    // Prone to small jumps in initial animation height if data was changed in the meantime, window was resized, etc.\n    // For optimal behavior call manually updateStartHeight() from the parent component before initiating the update.\n    this.updateStartHeight();\n  }\n\n  updateStartHeight() {\n    this.startHeight = this.domAdapter.computedHeight(this.element.nativeElement) || 0;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n    :host {\n      display: block;\n    }\n  \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "element",
            "type": "ElementRef"
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          }
        ],
        "line": 37,
        "jsdoctags": [
          {
            "name": "element",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrHeader",
      "id": "component-ClrHeader-7c91ba1e43687e016b450f35f87d20f7",
      "file": "src/clr-angular/layout/nav/header.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-header",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button\n    type=\"button\"\n    *ngIf=\"isNavLevel1OnPage\"\n    class=\"header-hamburger-trigger\"\n    [attr.aria-label]=\"(openNavLevel !== responsiveNavCodes.NAV_LEVEL_1) ? commonStrings.keys.open : commonStrings.keys.close\"\n    (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_1)\">\n    <span></span>\n</button>\n<ng-content></ng-content>\n<button\n    type=\"button\"\n    *ngIf=\"isNavLevel2OnPage\"\n    class=\"header-overflow-trigger\"\n    [attr.aria-label]=\"(openNavLevel !== responsiveNavCodes.NAV_LEVEL_2) ? commonStrings.keys.open : commonStrings.keys.close\"\n    (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_2)\">\n    <span></span>\n</button>\n<div class=\"header-backdrop\" (click)=\"closeOpenNav()\"></div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [114]
        },
        {
          "name": "isNavLevel1OnPage",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 38
        },
        {
          "name": "isNavLevel2OnPage",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 39
        },
        {
          "name": "openNavLevel",
          "defaultValue": "null",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "responsiveNavCodes",
          "defaultValue": "ResponsiveNavCodes",
          "type": "",
          "optional": false,
          "description": "",
          "line": 41
        }
      ],
      "methodsClass": [
        {
          "name": "closeOpenNav",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78
        },
        {
          "name": "initializeNavTriggers",
          "args": [
            {
              "name": "navList",
              "type": "number[]"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "jsdoctags": [
            {
              "name": "navList",
              "type": "number[]",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88
        },
        {
          "name": "resetNavTriggers",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56
        },
        {
          "name": "toggleNav",
          "args": [
            {
              "name": "navLevel",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "jsdoctags": [
            {
              "name": "navLevel",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ResponsiveNavigationService } from './providers/responsive-navigation.service';\nimport { ResponsiveNavCodes } from './responsive-nav-codes';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\n\n@Component({\n  selector: 'clr-header',\n  template: `\n        <button\n            type=\"button\"\n            *ngIf=\"isNavLevel1OnPage\"\n            class=\"header-hamburger-trigger\"\n            [attr.aria-label]=\"(openNavLevel !== responsiveNavCodes.NAV_LEVEL_1) ? commonStrings.keys.open : commonStrings.keys.close\"\n            (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_1)\">\n            <span></span>\n        </button>\n        <ng-content></ng-content>\n        <button\n            type=\"button\"\n            *ngIf=\"isNavLevel2OnPage\"\n            class=\"header-overflow-trigger\"\n            [attr.aria-label]=\"(openNavLevel !== responsiveNavCodes.NAV_LEVEL_2) ? commonStrings.keys.open : commonStrings.keys.close\"\n            (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_2)\">\n            <span></span>\n        </button>\n        <div class=\"header-backdrop\" (click)=\"closeOpenNav()\"></div>\n    `,\n  host: { '[class.header]': 'true' },\n})\nexport class ClrHeader implements OnDestroy {\n  isNavLevel1OnPage = false;\n  isNavLevel2OnPage = false;\n  openNavLevel: number = null;\n  responsiveNavCodes = ResponsiveNavCodes;\n  private _subscription: Subscription;\n\n  constructor(\n    private responsiveNavService: ResponsiveNavigationService,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    this._subscription = this.responsiveNavService.registeredNavs.subscribe({\n      next: (navLevelList: number[]) => {\n        this.initializeNavTriggers(navLevelList);\n      },\n    });\n  }\n\n  // reset triggers. handles cases when an application has different nav levels on different pages.\n  resetNavTriggers() {\n    this.isNavLevel1OnPage = false;\n    this.isNavLevel2OnPage = false;\n  }\n\n  // decides which triggers to show on the header\n  initializeNavTriggers(navList: number[]): void {\n    this.resetNavTriggers();\n    if (navList.length > 2) {\n      console.error('More than 2 Nav Levels detected.');\n      return;\n    }\n    navList.forEach(navLevel => {\n      if (navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n        this.isNavLevel1OnPage = true;\n      } else if (navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n        this.isNavLevel2OnPage = true;\n      }\n    });\n  }\n\n  // closes the nav that is open\n  closeOpenNav() {\n    this.responsiveNavService.closeAllNavs();\n  }\n\n  // toggles the nav that is open\n  toggleNav(navLevel: number) {\n    this.openNavLevel = this.openNavLevel === navLevel ? null : navLevel;\n    this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_TOGGLE, navLevel);\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 42,
        "jsdoctags": [
          {
            "name": "responsiveNavService",
            "type": "ResponsiveNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"]
    },
    {
      "name": "ClrInputContainer",
      "id": "component-ClrInputContainer-8b19d42876df488bbd06b2da8818170c",
      "file": "src/clr-angular/forms/input/input-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfErrorService"
        },
        {
          "name": "NgControlService"
        },
        {
          "name": "ControlIdService"
        },
        {
          "name": "ControlClassService"
        }
      ],
      "selector": "clr-input-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n    <div class=\"clr-input-wrapper\">\n        <ng-content select=\"[clrInput]\"></ng-content>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n    </div>\n    <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n    <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 70
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 66
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, OnDestroy, Optional } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { ClrLabel } from '../common/label';\nimport { ControlClassService } from '../common/providers/control-class.service';\n\n@Component({\n  selector: 'clr-input-container',\n  template: `\n        <ng-content select=\"label\"></ng-content>\n        <label *ngIf=\"!label && addGrid()\"></label>\n        <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n            <div class=\"clr-input-wrapper\">\n                <ng-content select=\"[clrInput]\"></ng-content>\n                <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n            </div>\n            <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n            <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n        </div>\n    `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [IfErrorService, NgControlService, ControlIdService, ControlClassService],\n})\nexport class ClrInputContainer implements DynamicWrapper, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  invalid = false;\n  _dynamic = false;\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n  control: NgControl;\n\n  constructor(\n    private ifErrorService: IfErrorService,\n    @Optional() private layoutService: LayoutService,\n    private controlClassService: ControlClassService,\n    private ngControlService: NgControlService\n  ) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n  }\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid());\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 46,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper", "OnDestroy"]
    },
    {
      "name": "ClrKeyFocus",
      "id": "component-ClrKeyFocus-18182568c8d56c9964909b94f12bb28f",
      "file": "src/clr-angular/utils/focus/key-focus/key-focus.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "[clrKeyFocus]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDirection",
          "defaultValue": "ClrFocusDirection.VERTICAL",
          "line": 21
        },
        {
          "name": "clrFocusOnLoad",
          "defaultValue": "false",
          "line": 22
        },
        {
          "name": "clrKeyFocus",
          "line": 29,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "clrFocusChange",
          "defaultValue": "new EventEmitter<void>()",
          "line": 23,
          "type": "EventEmitter<void>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_current",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [112]
        },
        {
          "name": "_focusableItems",
          "type": "Array<FocusableItem>",
          "optional": false,
          "description": "",
          "line": 27,
          "modifierKind": [112]
        },
        {
          "name": "clrKeyFocusItems",
          "type": "QueryList<ClrKeyFocusItem>",
          "optional": false,
          "description": "",
          "line": 25,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrKeyFocusItem, {descendants: true}"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "currentFocusIsNotFirstItem",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 117,
          "modifierKind": [112]
        },
        {
          "name": "currentFocusIsNotLastItem",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 121,
          "modifierKind": [112]
        },
        {
          "name": "initializeFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 125,
          "modifierKind": [112]
        },
        {
          "name": "keyAction",
          "args": [
            {
              "name": "action",
              "type": "Function"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 145,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "action",
              "type": "Function",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "listenForItemUpdates",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 137,
          "modifierKind": [112]
        },
        {
          "name": "moveTo",
          "args": [
            {
              "name": "position",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "jsdoctags": [
            {
              "name": "position",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "nextKeyPressed",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 153,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59
        },
        {
          "name": "positionInRange",
          "args": [
            {
              "name": "position",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 105,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "position",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "prevKeyPressed",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 168,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "resetTabFocus",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 79
        },
        {
          "name": "keydown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 64
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { EventEmitter, HostListener, Input, Output, Component, ContentChildren, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ClrKeyFocusItem } from './key-focus-item';\nimport { ClrFocusDirection } from './enums/focus-direction.enum';\nimport { KeyCodes } from '@clr/core/common';\nimport { FocusableItem } from './interfaces';\nimport { preventArrowKeyScroll, getKeyCodes } from './util';\n\n@Component({\n  selector: '[clrKeyFocus]',\n  template: '<ng-content></ng-content>',\n})\nexport class ClrKeyFocus {\n  @Input('clrDirection') direction = ClrFocusDirection.VERTICAL;\n  @Input('clrFocusOnLoad') focusOnLoad = false;\n  @Output('clrFocusChange') private focusChange: EventEmitter<void> = new EventEmitter<void>();\n  @ContentChildren(ClrKeyFocusItem, { descendants: true })\n  private clrKeyFocusItems: QueryList<ClrKeyFocusItem>;\n\n  private _focusableItems: Array<FocusableItem>;\n  @Input('clrKeyFocus')\n  set focusableItems(elements: Array<FocusableItem>) {\n    // We accept a list of focusable elements (HTMLElements or existing Directives) or auto query for clrKeyFocusItem\n    // We accept a list reference in the cases where we cannot use ContentChildren to query\n    // ContentChildren can be unavailable if content is projected outside the scope of the component (see tabs).\n    if (elements && elements.length) {\n      this._focusableItems = elements;\n      this.initializeFocus();\n    }\n  }\n\n  get focusableItems() {\n    if (this._focusableItems) {\n      return this._focusableItems;\n    } else {\n      return this.clrKeyFocusItems.toArray();\n    }\n  }\n\n  private _current: number = 0;\n  get current() {\n    return this._current;\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngAfterContentInit() {\n    this.subscriptions.push(this.listenForItemUpdates());\n    this.initializeFocus();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  @HostListener('keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {\n      this.keyAction(() => this._current--);\n    } else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {\n      this.keyAction(() => this._current++);\n    } else if (event.code === KeyCodes.Home) {\n      this.keyAction(() => (this._current = 0));\n    } else if (event.code === KeyCodes.End) {\n      this.keyAction(() => (this._current = this.focusableItems.length - 1));\n    }\n\n    preventArrowKeyScroll(event);\n  }\n\n  @HostListener('click', ['$event'])\n  setClickedItemCurrent(event: any) {\n    let position: number;\n\n    if (this.focusableItems[0].nativeElement) {\n      position = this.focusableItems.map(item => item.nativeElement).indexOf(event.target);\n    } else {\n      position = this.focusableItems.indexOf(event.target);\n    }\n\n    if (position > -1) {\n      this._current = position;\n    }\n  }\n\n  resetTabFocus() {\n    this.currentItem.tabIndex = -1;\n    this._current = 0;\n    this.currentItem.tabIndex = 0;\n  }\n\n  moveTo(position: number) {\n    if (this.positionInRange(position) && position !== this._current) {\n      this.keyAction(() => (this._current = position));\n    }\n  }\n\n  private positionInRange(position: number) {\n    return position >= 0 && position < this.focusableItems.length;\n  }\n\n  private get currentItem() {\n    if (this._current >= this.focusableItems.length) {\n      return null;\n    }\n\n    return this.focusableItems[this._current];\n  }\n\n  private currentFocusIsNotFirstItem() {\n    return this._current - 1 >= 0;\n  }\n\n  private currentFocusIsNotLastItem() {\n    return this._current + 1 < this.focusableItems.length;\n  }\n\n  private initializeFocus() {\n    if (this.focusableItems && this.focusableItems.length) {\n      this.focusableItems.forEach(i => (i.tabIndex = -1));\n      this.currentItem.tabIndex = 0;\n    }\n\n    if (this.focusOnLoad) {\n      this.currentItem.focus();\n      this.focusChange.next();\n    }\n  }\n\n  private listenForItemUpdates() {\n    return this.clrKeyFocusItems.changes.subscribe(() => {\n      this.focusableItems.forEach(item => (item.tabIndex = -1));\n      this._current = 0;\n      this.currentItem.tabIndex = 0;\n    });\n  }\n\n  private keyAction(action: Function) {\n    this.currentItem.tabIndex = -1;\n    action.call(this);\n    this.currentItem.tabIndex = 0;\n    this.currentItem.focus();\n    this.focusChange.next();\n  }\n\n  private nextKeyPressed(event: KeyboardEvent) {\n    const keyCodes = getKeyCodes(event);\n\n    switch (this.direction) {\n      case ClrFocusDirection.VERTICAL:\n        return event.key === keyCodes.ArrowDown;\n      case ClrFocusDirection.HORIZONTAL:\n        return event.key === keyCodes.ArrowRight;\n      case ClrFocusDirection.BOTH:\n        return event.key === keyCodes.ArrowDown || event.key === keyCodes.ArrowRight;\n      default:\n        return false;\n    }\n  }\n\n  private prevKeyPressed(event: KeyboardEvent) {\n    const keyCodes = getKeyCodes(event);\n\n    switch (this.direction) {\n      case ClrFocusDirection.VERTICAL:\n        return event.key === keyCodes.ArrowUp;\n      case ClrFocusDirection.HORIZONTAL:\n        return event.key === keyCodes.ArrowLeft;\n      case ClrFocusDirection.BOTH:\n        return event.key === keyCodes.ArrowUp || event.key === keyCodes.ArrowLeft;\n      default:\n        return false;\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "accessors": {
        "focusableItems": {
          "name": "focusableItems",
          "setSignature": {
            "name": "focusableItems",
            "type": "void",
            "args": [
              {
                "name": "elements",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "elements",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "focusableItems",
            "type": "",
            "returnType": "",
            "line": 39
          }
        },
        "current": {
          "name": "current",
          "getSignature": {
            "name": "current",
            "type": "",
            "returnType": "",
            "line": 48
          }
        },
        "currentItem": {
          "name": "currentItem",
          "getSignature": {
            "name": "currentItem",
            "type": "",
            "returnType": "",
            "line": 109
          }
        }
      }
    },
    {
      "name": "ClrLoadingButton",
      "id": "component-ClrLoadingButton-30efb54fa3238cc93e227367f7ad46a8",
      "file": "src/clr-angular/button/button-loading/loading-button.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: LoadingListener, useExisting: ClrLoadingButton }"
        }
      ],
      "selector": "button[clrLoading]",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-container [ngSwitch]=\"state\">\n    <span *ngSwitchCase=\"buttonState.LOADING\">\n        <span @spinner class=\"spinner spinner-inline\"></span>\n    </span>\n    <span *ngSwitchCase=\"buttonState.SUCCESS\">\n        <span @validated (@validated.done)=\"this.loadingStateChange(this.buttonState.DEFAULT)\" class=\"spinner spinner-inline spinner-check\"></span>\n    </span>\n    <span *ngSwitchCase=\"buttonState.DEFAULT\" @defaultButton>\n        <ng-content></ng-content>\n    </span>\n</ng-container>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "disabled",
          "line": 60,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrLoadingChange",
          "defaultValue": "new EventEmitter<ClrLoadingState>(false)",
          "line": 63,
          "type": "EventEmitter<ClrLoadingState>"
        }
      ],
      "propertiesClass": [
        {
          "name": "buttonState",
          "defaultValue": "ClrLoadingState",
          "type": "",
          "optional": false,
          "description": "",
          "line": 57,
          "modifierKind": [114]
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 65,
          "modifierKind": [114]
        },
        {
          "name": "state",
          "defaultValue": "ClrLoadingState.DEFAULT",
          "type": "ClrLoadingState",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "loadingStateChange",
          "args": [
            {
              "name": "state",
              "type": "ClrLoadingState"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "jsdoctags": [
            {
              "name": "state",
              "type": "ClrLoadingState",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setExplicitButtonWidth",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "modifierKind": [112]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { animate, keyframes, style, transition, trigger } from '@angular/animations';\nimport { Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\nimport { ClrLoadingState } from '../../utils/loading/loading';\nimport { LoadingListener } from '../../utils/loading/loading-listener';\n\n@Component({\n  selector: 'button[clrLoading]',\n  template: `\n        <ng-container [ngSwitch]=\"state\">\n            <span *ngSwitchCase=\"buttonState.LOADING\">\n                <span @spinner class=\"spinner spinner-inline\"></span>\n            </span>\n            <span *ngSwitchCase=\"buttonState.SUCCESS\">\n                <span @validated (@validated.done)=\"this.loadingStateChange(this.buttonState.DEFAULT)\" class=\"spinner spinner-inline spinner-check\"></span>\n            </span>\n            <span *ngSwitchCase=\"buttonState.DEFAULT\" @defaultButton>\n                <ng-content></ng-content>\n            </span>\n        </ng-container>\n    `,\n  providers: [{ provide: LoadingListener, useExisting: ClrLoadingButton }],\n  animations: [\n    trigger('defaultButton', [\n      transition(':enter', [style({ opacity: 0 }), animate('200ms 100ms ease-in', style({ opacity: 1 }))]),\n      // TODO: see if we can get leave animation to work before spinner's enter animation\n      transition(':leave', [style({ opacity: 0 })]),\n    ]),\n    trigger('spinner', [\n      transition(':enter', [style({ opacity: 0 }), animate('200ms 100ms ease-in', style({ opacity: 1 }))]),\n      transition(':leave', [style({ opacity: 1 }), animate('100ms ease-out', style({ opacity: 0 }))]),\n    ]),\n    trigger('validated', [\n      transition(':enter', [\n        animate(\n          '600ms',\n          keyframes([\n            style({ transform: 'scale(0,0)', offset: 0 }),\n            style({ opacity: 1, offset: 0.2 }),\n            style({ transform: 'scale(1.2,1.2)', offset: 0.4 }),\n            style({ transform: 'scale(.9,.9)', offset: 0.6 }),\n            style({ transform: 'scale(1,1)', offset: 1 }),\n          ])\n        ),\n      ]),\n      transition(':leave', [style({ opacity: 1 }), animate('100ms ease-out', style({ opacity: 0 }))]),\n    ]),\n  ],\n  host: { '[attr.disabled]': \"disabled? '' : null\" },\n})\nexport class ClrLoadingButton implements LoadingListener {\n  public buttonState = ClrLoadingState;\n  public state: ClrLoadingState = ClrLoadingState.DEFAULT;\n\n  @Input('disabled') public disabled: boolean;\n\n  @Output('clrLoadingChange')\n  public clrLoadingChange: EventEmitter<ClrLoadingState> = new EventEmitter<ClrLoadingState>(false);\n\n  constructor(public el: ElementRef, private renderer: Renderer2) {}\n\n  loadingStateChange(state: ClrLoadingState): void {\n    if (state === this.state) {\n      return;\n    }\n    this.state = state;\n\n    switch (state) {\n      case ClrLoadingState.DEFAULT:\n        this.renderer.removeStyle(this.el.nativeElement, 'width');\n        this.renderer.removeStyle(this.el.nativeElement, 'transform'); // for chromium render bug see issue https://github.com/vmware/clarity/issues/2700\n        if (!this.disabled) {\n          this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n        }\n        break;\n      case ClrLoadingState.LOADING:\n        this.setExplicitButtonWidth();\n        this.renderer.setStyle(this.el.nativeElement, 'transform', 'translatez(0)'); // for chromium render bug see issue https://github.com/vmware/clarity/issues/2700\n        this.renderer.setAttribute(this.el.nativeElement, 'disabled', '');\n        break;\n      case ClrLoadingState.SUCCESS:\n        this.setExplicitButtonWidth();\n        break;\n      case ClrLoadingState.ERROR:\n        this.loadingStateChange(ClrLoadingState.DEFAULT);\n        break;\n      default:\n        break;\n    }\n    this.clrLoadingChange.emit(state);\n  }\n\n  private setExplicitButtonWidth() {\n    if (this.el.nativeElement && this.el.nativeElement.getBoundingClientRect) {\n      const boundingClientRect = this.el.nativeElement.getBoundingClientRect();\n      this.renderer.setStyle(this.el.nativeElement, 'width', `${boundingClientRect.width}px`);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          }
        ],
        "line": 63,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["LoadingListener"]
    },
    {
      "name": "ClrModal",
      "id": "component-ClrModal-a0911ca297dc9493c96b0ed5783ac714",
      "file": "src/clr-angular/modal/modal.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "UNIQUE_ID_PROVIDER"
        }
      ],
      "selector": "clr-modal",
      "styleUrls": [],
      "styles": ["\n        :host { display: none; }\n        :host.open { display: inline; }\n    "],
      "templateUrl": ["./modal.html"],
      "viewProviders": [
        {
          "name": "ScrollingService"
        }
      ],
      "inputsClass": [
        {
          "name": "clrModalClosable",
          "defaultValue": "true",
          "description":
            "<p>If false, the modal will not be closable by clicking on the mask or on the top-right &quot;x&quot;.</p>\n",
          "line": 73,
          "type": "boolean"
        },
        {
          "name": "clrModalOpen",
          "defaultValue": "false",
          "description": "<p>Two-way binding on the state of the modal: opened or closed.</p>\n",
          "line": 65,
          "type": "boolean"
        },
        {
          "name": "clrModalOverrideScrollService",
          "defaultValue": "false",
          "description": "<p>NOTE: presently this is only used by wizards</p>\n",
          "line": 57,
          "type": "boolean"
        },
        {
          "name": "clrModalPreventClose",
          "defaultValue": "false",
          "description": "<p>If true, the modal will not be closable by using keyboard</p>\n",
          "line": 61,
          "type": "boolean"
        },
        {
          "name": "clrModalSize",
          "description": "<p>Sets the size of the modal. If it&#39;s not set, the default size is medium.</p>\n",
          "line": 77,
          "type": "string"
        },
        {
          "name": "clrModalSkipAnimation",
          "defaultValue": "'false'",
          "description": "<p>To skip the fading animation.</p>\n",
          "line": 85,
          "type": "string"
        },
        {
          "name": "clrModalStaticBackdrop",
          "defaultValue": "true",
          "description": "<p>If true, the modal will not close when the user clicks outside of the modal.</p>\n",
          "line": 81,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrModalAlternateClose",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "description": "<p>Emitted when closing of the modal through keyboard is prevented</p>\n",
          "line": 89,
          "type": "EventEmitter<boolean>"
        },
        {
          "name": "clrModalOpenChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "description": "<p>Event emitted whenever the value of &#39;clrModalOpen&#39; changes</p>\n",
          "line": 69,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 93,
          "modifierKind": [114]
        },
        {
          "name": "modalId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 94,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "fadeDone",
          "args": [
            {
              "name": "e",
              "type": "AnimationEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "jsdoctags": [
            {
              "name": "e",
              "type": "AnimationEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "literal type"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "jsdoctags": [
            {
              "name": "changes",
              "type": "literal type",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 108
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112
        }
      ],
      "hostBindings": [
        {
          "name": "class.open",
          "line": 53,
          "type": "FocusTrapDirective"
        }
      ],
      "hostListeners": [
        {
          "name": "body:keyup.escape",
          "args": [],
          "argsDecorator": [],
          "line": 121
        }
      ],
      "description":
        "<p>Modals provide information or help a user complete a task. They require the user to take an action to dismiss them.</p>\n",
      "rawdescription":
        "Modals provide information or help a user complete a task. They require the user to take an action to dismiss them.",
      "type": "component",
      "sourceCode":
        "import { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport {\n  Component,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChange,\n  ViewChild,\n} from '@angular/core';\nimport { FocusTrapDirective } from '../utils/focus-trap/focus-trap.directive';\nimport { ClrCommonStringsService } from '../utils/i18n/common-strings.service';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../utils/id-generator/id-generator.service';\nimport { ScrollingService } from '../utils/scrolling/scrolling-service';\n\n/**\n * Modals provide information or help a user complete a task. They require the user to take an action to dismiss them.\n */\n@Component({\n  selector: 'clr-modal',\n  viewProviders: [ScrollingService],\n  templateUrl: './modal.html',\n  styles: [\n    `\n        :host { display: none; }\n        :host.open { display: inline; }\n    `,\n  ],\n  animations: [\n    trigger('fadeDown', [\n      transition('* => false', [style({ opacity: 0, transform: 'translate(0, -25%)' }), animate('0.2s ease-in-out')]),\n      transition('false => *', [animate('0.2s ease-in-out', style({ opacity: 0, transform: 'translate(0, -25%)' }))]),\n    ]),\n    trigger('fade', [\n      transition('void => *', [style({ opacity: 0 }), animate('0.2s ease-in-out', style({ opacity: 0.85 }))]),\n      transition('* => void', [animate('0.2s ease-in-out', style({ opacity: 0 }))]),\n    ]),\n  ],\n  providers: [UNIQUE_ID_PROVIDER],\n})\nexport class ClrModal implements OnChanges, OnDestroy {\n  @ViewChild(FocusTrapDirective, { static: false })\n  @HostBinding('class.open')\n  focusTrap: FocusTrapDirective;\n  /**\n   * NOTE: presently this is only used by wizards\n   */\n  @Input('clrModalOverrideScrollService') bypassScrollService: boolean = false;\n  /**\n   * If true, the modal will not be closable by using keyboard\n   */\n  @Input('clrModalPreventClose') stopClose: boolean = false;\n  /**\n   * Two-way binding on the state of the modal: opened or closed.\n   */\n  @Input('clrModalOpen') _open: boolean = false;\n  /**\n   * Event emitted whenever the value of 'clrModalOpen' changes\n   */\n  @Output('clrModalOpenChange') _openChanged: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n  /**\n   * If false, the modal will not be closable by clicking on the mask or on the top-right \"x\".\n   */\n  @Input('clrModalClosable') closable: boolean = true;\n  /**\n   * Sets the size of the modal. If it's not set, the default size is medium.\n   */\n  @Input('clrModalSize') size: string;\n  /**\n   * If true, the modal will not close when the user clicks outside of the modal.\n   */\n  @Input('clrModalStaticBackdrop') staticBackdrop: boolean = true;\n  /**\n   * To skip the fading animation.\n   */\n  @Input('clrModalSkipAnimation') skipAnimation: string = 'false';\n  /**\n   * Emitted when closing of the modal through keyboard is prevented\n   */\n  @Output('clrModalAlternateClose') altClose: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  constructor(\n    private _scrollingService: ScrollingService,\n    public commonStrings: ClrCommonStringsService,\n    @Inject(UNIQUE_ID) public modalId: string\n  ) {}\n\n  // Detect when _open is set to true and set no-scrolling to true\n  ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n    if (!this.bypassScrollService && changes && changes.hasOwnProperty('_open')) {\n      if (changes._open.currentValue) {\n        this._scrollingService.stopScrolling();\n      } else {\n        this._scrollingService.resumeScrolling();\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._scrollingService.resumeScrolling();\n  }\n\n  open(): void {\n    if (this._open) {\n      return;\n    }\n    this._open = true;\n    this._openChanged.emit(true);\n  }\n\n  @HostListener('body:keyup.escape')\n  close(): void {\n    if (this.stopClose) {\n      this.altClose.emit(false);\n      return;\n    }\n    if (!this.closable || !this._open) {\n      return;\n    }\n    this._open = false;\n    // SPECME\n    this.focusTrap.setPreviousFocus(); // Handles moving focus back to the element that had it before.\n  }\n\n  fadeDone(e: AnimationEvent) {\n    if (e.toState === 'void') {\n      // TODO: Investigate if we can decouple from animation events\n      this._openChanged.emit(false);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n        :host { display: none; }\n        :host.open { display: inline; }\n    \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_scrollingService",
            "type": "ScrollingService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "modalId",
            "type": "string"
          }
        ],
        "line": 89,
        "jsdoctags": [
          {
            "name": "_scrollingService",
            "type": "ScrollingService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "modalId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnChanges", "OnDestroy"],
      "templateData":
        "\n<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div clrFocusTrap class=\"modal\" *ngIf=\"_open\">\n    <!--fixme: revisit when ngClass works with exit animation-->\n    <div [@fadeDown]=\"skipAnimation\" (@fadeDown.done)=\"fadeDone($event)\"\n         class=\"modal-dialog\"\n         [class.modal-sm]=\"size == 'sm'\"\n         [class.modal-lg]=\"size == 'lg'\"\n         [class.modal-xl]=\"size == 'xl'\"\n         role=\"dialog\"\n         aria-modal=\"true\"\n         [attr.aria-hidden]=\"!_open\"\n         [attr.aria-labelledby]=\"modalId\">\n      <div class=\"clr-sr-only\">{{commonStrings.keys.modalContentStart}}</div>\n      <div class=\"modal-content-wrapper\">\n        <!-- only used in wizards -->\n        <ng-content select=\".modal-nav\"></ng-content>\n\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <button type=\"button\" [attr.aria-label]=\"commonStrings.keys.close\" class=\"close\" *ngIf=\"closable\" (click)=\"close()\">\n              <clr-icon shape=\"close\"></clr-icon>\n            </button>\n            <div class=\"modal-title-wrapper\" id=\"{{modalId}}\" clrFocusOnViewInit>\n              <ng-content select=\".modal-title\"></ng-content>\n            </div>\n          </div>\n          <ng-content select=\".modal-body\"></ng-content>\n          <ng-content select=\".modal-footer\"></ng-content>\n        </div>\n      </div>\n      <div class=\"clr-sr-only\">{{commonStrings.keys.modalContentEnd}}</div>\n    </div>\n\n    <div [@fade] class=\"modal-backdrop\"\n         aria-hidden=\"true\"\n         (click)=\"staticBackdrop || close()\"></div>\n</div>\n\n"
    },
    {
      "name": "ClrMonthpicker",
      "id": "component-ClrMonthpicker-43866031eec040225779ba775455deb6",
      "file": "src/clr-angular/forms/datepicker/monthpicker.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-monthpicker",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button\n    type=\"button\"\n    class=\"calendar-btn month\"\n    *ngFor=\"let month of monthNames; let monthIndex = index\"\n    (click)=\"changeMonth(monthIndex)\"\n    [class.is-selected]=\"monthIndex === calendarMonthIndex\"\n    [attr.tabindex]=\"getTabIndex(monthIndex)\">\n    {{month}}\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_focusedMonthIndex",
          "type": "number",
          "optional": false,
          "description": "<p>Keeps track of the current focused month.</p>\n",
          "line": 46,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "changeMonth",
          "args": [
            {
              "name": "monthIndex",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "description":
            "<p>Calls the DateNavigationService to update the month value of the calendar.\nAlso changes the view to the daypicker.</p>\n",
          "jsdoctags": [
            {
              "name": "monthIndex",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getTabIndex",
          "args": [
            {
              "name": "monthIndex",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 75,
          "description": "<p>Compares the month passed to the focused month and returns the tab index.</p>\n",
          "jsdoctags": [
            {
              "name": "monthIndex",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 112,
          "description": "<p>Focuses on the current calendar month when the View is initialized.</p>\n"
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keydown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "description": "<p>Handles the Keyboard arrow navigation for the monthpicker.</p>\n",
          "line": 83
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { AfterViewInit, Component, ElementRef, HostListener } from '@angular/core';\n\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '../../utils/key-codes/key-codes';\n\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { DatepickerFocusService } from './providers/datepicker-focus.service';\nimport { LocaleHelperService } from './providers/locale-helper.service';\nimport { ViewManagerService } from './providers/view-manager.service';\n\n@Component({\n  selector: 'clr-monthpicker',\n  template: `\n        <button\n            type=\"button\"\n            class=\"calendar-btn month\"\n            *ngFor=\"let month of monthNames; let monthIndex = index\"\n            (click)=\"changeMonth(monthIndex)\"\n            [class.is-selected]=\"monthIndex === calendarMonthIndex\"\n            [attr.tabindex]=\"getTabIndex(monthIndex)\">\n            {{month}}\n        </button>\n    `,\n  host: {\n    '[class.monthpicker]': 'true',\n  },\n})\nexport class ClrMonthpicker implements AfterViewInit {\n  constructor(\n    private _viewManagerService: ViewManagerService,\n    private _localeHelperService: LocaleHelperService,\n    private _dateNavigationService: DateNavigationService,\n    private _datepickerFocusService: DatepickerFocusService,\n    private _elRef: ElementRef\n  ) {\n    this._focusedMonthIndex = this.calendarMonthIndex;\n  }\n\n  /**\n   * Keeps track of the current focused month.\n   */\n  private _focusedMonthIndex: number;\n\n  /**\n   * Gets the months array which is used to rendered the monthpicker view.\n   * Months are in the TranslationWidth.Wide format.\n   */\n  get monthNames(): ReadonlyArray<string> {\n    return this._localeHelperService.localeMonthsWide;\n  }\n\n  /**\n   * Gets the month value of the Calendar.\n   */\n  get calendarMonthIndex(): number {\n    return this._dateNavigationService.displayedCalendar.month;\n  }\n\n  /**\n   * Calls the DateNavigationService to update the month value of the calendar.\n   * Also changes the view to the daypicker.\n   */\n  changeMonth(monthIndex: number) {\n    this._dateNavigationService.changeMonth(monthIndex);\n    this._viewManagerService.changeToDayView();\n  }\n\n  /**\n   * Compares the month passed to the focused month and returns the tab index.\n   */\n  getTabIndex(monthIndex: number): number {\n    return monthIndex === this._focusedMonthIndex ? 0 : -1;\n  }\n\n  /**\n   * Handles the Keyboard arrow navigation for the monthpicker.\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent) {\n    // NOTE: Didn't move this to the date navigation service because\n    // the logic is fairly simple and it didn't make sense for me\n    // to create extra observables just to move this logic to the service.\n    if (event) {\n      const keyCode: number = event.keyCode;\n      if (keyCode === UP_ARROW && this._focusedMonthIndex > 0) {\n        event.preventDefault();\n        this._focusedMonthIndex--;\n        this._datepickerFocusService.focusCell(this._elRef);\n      } else if (keyCode === DOWN_ARROW && this._focusedMonthIndex < 11) {\n        event.preventDefault();\n        this._focusedMonthIndex++;\n        this._datepickerFocusService.focusCell(this._elRef);\n      } else if (keyCode === RIGHT_ARROW && this._focusedMonthIndex < 6) {\n        event.preventDefault();\n        this._focusedMonthIndex = this._focusedMonthIndex + 6;\n        this._datepickerFocusService.focusCell(this._elRef);\n      } else if (keyCode === LEFT_ARROW && this._focusedMonthIndex > 5) {\n        event.preventDefault();\n        this._focusedMonthIndex = this._focusedMonthIndex - 6;\n        this._datepickerFocusService.focusCell(this._elRef);\n      }\n    }\n  }\n\n  /**\n   * Focuses on the current calendar month when the View is initialized.\n   */\n  ngAfterViewInit() {\n    this._datepickerFocusService.focusCell(this._elRef);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService"
          },
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService"
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService"
          },
          {
            "name": "_datepickerFocusService",
            "type": "DatepickerFocusService"
          },
          {
            "name": "_elRef",
            "type": "ElementRef"
          }
        ],
        "line": 32,
        "jsdoctags": [
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_localeHelperService",
            "type": "LocaleHelperService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_datepickerFocusService",
            "type": "DatepickerFocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_elRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"],
      "accessors": {
        "monthNames": {
          "name": "monthNames",
          "getSignature": {
            "name": "monthNames",
            "type": "",
            "returnType": "ReadonlyArray<string>",
            "line": 52,
            "description":
              "<p>Gets the months array which is used to rendered the monthpicker view.\nMonths are in the TranslationWidth.Wide format.</p>\n"
          }
        },
        "calendarMonthIndex": {
          "name": "calendarMonthIndex",
          "getSignature": {
            "name": "calendarMonthIndex",
            "type": "number",
            "returnType": "number",
            "line": 59,
            "description": "<p>Gets the month value of the Calendar.</p>\n"
          }
        }
      }
    },
    {
      "name": "ClrOption",
      "id": "component-ClrOption-3ed3f6d7310e1e8f59e782f650d6fcf3",
      "file": "src/clr-angular/forms/combobox/option.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-option",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./option.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrValue",
          "line": 24,
          "type": "T"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "elRef",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 31,
          "modifierKind": [114]
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "initializeSubscription",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70
        }
      ],
      "hostBindings": [
        {
          "name": "class.active",
          "defaultValue": "false",
          "line": 22,
          "type": "boolean"
        }
      ],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "description":
            "<p>This behavior is only for single select. Multi select will keep the menu open on option click.\nWe will handle that later.</p>\n",
          "line": 60
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, HostBinding, HostListener, Inject, Input, OnDestroy, Optional } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\n\nimport { OptionSelectionService } from './providers/option-selection.service';\n\n@Component({\n  selector: 'clr-option',\n  templateUrl: './option.html',\n  host: { '[class.clr-option]': 'true' },\n})\nexport class ClrOption<T> implements OnDestroy {\n  private subscription: Subscription;\n\n  @HostBinding('class.active') selected: boolean = false;\n\n  @Input('clrValue') value: T;\n\n  constructor(\n    private toggleService: ClrPopoverToggleService,\n    @Optional()\n    @Inject(POPOVER_HOST_ANCHOR)\n    parentHost: ElementRef,\n    public elRef: ElementRef,\n    private optionSelectionService: OptionSelectionService<T>\n  ) {\n    if (!parentHost) {\n      throw new Error('clr-option should only be used inside of a clr-combobox');\n    }\n    this.initializeSubscription();\n  }\n\n  private initializeSubscription(): void {\n    this.subscription = this.optionSelectionService.valueChanged.subscribe((value: T) => {\n      // Check for null and undefined needed because if the user doesnt assign a value to the option,\n      // all options should not be selected as the value would be null or undefined\n      if (value === null || value === undefined) {\n        this.selected = false;\n      } else if (this.value === value) {\n        // TODO: Render option when current selection is set by the user\n        this.selected = true;\n      } else {\n        this.selected = false;\n      }\n    });\n  }\n\n  /**\n   * This behavior is only for single select. Multi select will keep the menu open on option click.\n   * We will handle that later.\n   */\n  @HostListener('click')\n  updateSelectionAndCloseMenu() {\n    // We call render here without checking the value because even if the user hasn't\n    // assigned a value to the option, we should atleast display the selection on the input.\n    // This is what the native select does.\n    this.optionSelectionService.renderSelection(this);\n    this.optionSelectionService.updateSelection(this.value);\n    this.toggleService.open = false;\n  }\n\n  // Lifecycle Methods\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "parentHost",
            "type": "ElementRef"
          },
          {
            "name": "elRef",
            "type": "ElementRef"
          },
          {
            "name": "optionSelectionService",
            "type": "OptionSelectionService<T>"
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentHost",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "optionSelectionService",
            "type": "OptionSelectionService<T>",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "templateData":
        "<!--\n* Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<ng-content></ng-content>\n"
    },
    {
      "name": "ClrOptions",
      "id": "component-ClrOptions-b91ac5239db15fae73a19f51db64fb28",
      "file": "src/clr-angular/forms/combobox/options.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-options",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./options.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "sub",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [112]
        },
        {
          "name": "anchorElem",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "closeOnOutsideClick",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [114],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentESCListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "hostClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignore",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElementClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverOptions",
          "defaultValue": "{}",
          "type": "PopoverOptions",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "updateAnchor",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "configurePopover",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "description": "<p>Configure Popover Direction and Close indicators</p>\n",
          "modifierKind": [112]
        },
        {
          "name": "initializeSubscriptions",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54
        },
        {
          "name": "anchor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, Inject, Injector, OnDestroy, Optional } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { AbstractPopover } from '../../popover/common/abstract-popover';\nimport { Point } from '../../popover/common/popover';\nimport { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';\n\n@Component({ selector: 'clr-options', templateUrl: './options.html', host: { '[class.clr-options]': 'true' } })\nexport class ClrOptions extends AbstractPopover implements OnDestroy {\n  private sub: Subscription;\n\n  constructor(\n    injector: Injector,\n    @Optional()\n    @Inject(POPOVER_HOST_ANCHOR)\n    parentHost: ElementRef\n  ) {\n    if (!parentHost) {\n      throw new Error('clr-options should only be used inside of a clr-combobox');\n    }\n    super(injector, parentHost);\n\n    // Configure Popover\n    this.initializeSubscriptions();\n    this.configurePopover();\n  }\n\n  /**\n   * Configure Popover Direction and Close indicators\n   */\n  private configurePopover(): void {\n    this.anchorPoint = Point.BOTTOM_LEFT;\n    this.popoverPoint = Point.LEFT_TOP;\n    this.closeOnOutsideClick = true;\n  }\n\n  private initializeSubscriptions(): void {\n    // @TODO COMBOBOX: fix on combobox merge\n    // this.sub = this.toggleService.ignoredElementChange.subscribe((el: ElementRef) => {\n    //   if (el) {\n    //     this.ignoredElement = el.nativeElement;\n    //   }\n    //   this.sub.unsubscribe();\n    // });\n  }\n\n  // Lifecycle hooks\n  ngOnDestroy() {\n    if (!this.sub.closed) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "parentHost",
            "type": "ElementRef"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentHost",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "AbstractPopover",
      "implements": ["OnDestroy"],
      "templateData":
        "<!--\n* Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<!--Option Groups and Options will be projected here-->\n<ng-content></ng-content>\n"
    },
    {
      "name": "ClrPasswordContainer",
      "id": "component-ClrPasswordContainer-05c5ff2174db3ea80ab76ee81f2209f5",
      "file": "src/clr-angular/forms/password/password-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfErrorService"
        },
        {
          "name": "NgControlService"
        },
        {
          "name": "ControlIdService"
        },
        {
          "name": "ControlClassService"
        },
        {
          "name": "FocusService"
        },
        {
          "name": "TOGGLE_SERVICE_PROVIDER"
        }
      ],
      "selector": "clr-password-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n  <div class=\"clr-input-wrapper\">\n    <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n      <ng-content select=\"[clrPassword]\"></ng-content>\n      <button\n        *ngIf=\"clrToggle\"\n        (click)=\"toggle()\"\n        [disabled]=\"control?.disabled\"\n        class=\"clr-input-group-icon-action\"\n        type=\"button\">\n        <clr-icon\n        [attr.shape]=\"show ? 'eye-hide' : 'eye'\"\n        [attr.title]=\"show ? commonStrings.keys.hide : commonStrings.keys.show\"></clr-icon>\n      </button>\n    </div>\n    <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n  </div>\n  <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n  <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrToggle",
          "line": 77,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "_toggle",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 96,
          "modifierKind": [114]
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 70
        },
        {
          "name": "focus",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 73
        },
        {
          "name": "focusService",
          "type": "FocusService",
          "optional": false,
          "description": "",
          "line": 93,
          "modifierKind": [114]
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 69
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 87,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "show",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 68,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 124
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 120
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 128
        },
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, Inject, InjectionToken, Input, OnDestroy, Optional } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\n\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { ClrLabel } from '../common/label';\nimport { ControlClassService } from '../common/providers/control-class.service';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { FocusService } from '../common/providers/focus.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\n\nexport const TOGGLE_SERVICE = new InjectionToken<BehaviorSubject<boolean>>(undefined);\nexport function ToggleServiceFactory() {\n  return new BehaviorSubject<boolean>(false);\n}\nexport const TOGGLE_SERVICE_PROVIDER = { provide: TOGGLE_SERVICE, useFactory: ToggleServiceFactory };\n\n@Component({\n  selector: 'clr-password-container',\n  template: `\n    <ng-content select=\"label\"></ng-content>\n    <label *ngIf=\"!label && addGrid()\"></label>\n    <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n      <div class=\"clr-input-wrapper\">\n        <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n          <ng-content select=\"[clrPassword]\"></ng-content>\n          <button\n            *ngIf=\"clrToggle\"\n            (click)=\"toggle()\"\n            [disabled]=\"control?.disabled\"\n            class=\"clr-input-group-icon-action\"\n            type=\"button\">\n            <clr-icon\n            [attr.shape]=\"show ? 'eye-hide' : 'eye'\"\n            [attr.title]=\"show ? commonStrings.keys.hide : commonStrings.keys.show\"></clr-icon>\n          </button>\n        </div>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n      </div>\n      <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n      <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n    </div>\n    `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [\n    IfErrorService,\n    NgControlService,\n    ControlIdService,\n    ControlClassService,\n    FocusService,\n    TOGGLE_SERVICE_PROVIDER,\n  ],\n})\nexport class ClrPasswordContainer implements DynamicWrapper, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  invalid = false;\n  control: NgControl;\n  _dynamic = false;\n  show = false;\n  focus = false;\n  private _toggle = true;\n\n  @Input('clrToggle')\n  set clrToggle(state: boolean) {\n    this._toggle = state;\n    if (!state) {\n      this.show = false;\n    }\n  }\n  get clrToggle() {\n    return this._toggle;\n  }\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n\n  constructor(\n    private ifErrorService: IfErrorService,\n    @Optional() private layoutService: LayoutService,\n    private controlClassService: ControlClassService,\n    public focusService: FocusService,\n    private ngControlService: NgControlService,\n    @Inject(TOGGLE_SERVICE) private toggleService: BehaviorSubject<boolean>,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n    this.subscriptions.push(\n      this.focusService.focusChange.subscribe(state => {\n        this.focus = state;\n      })\n    );\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n  }\n\n  toggle() {\n    this.show = !this.show;\n    this.toggleService.next(this.show);\n  }\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid());\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "focusService",
            "type": "FocusService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          },
          {
            "name": "toggleService",
            "type": "BehaviorSubject<boolean>"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 87,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusService",
            "type": "FocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toggleService",
            "type": "BehaviorSubject<boolean>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper", "OnDestroy"],
      "accessors": {
        "clrToggle": {
          "name": "clrToggle",
          "setSignature": {
            "name": "clrToggle",
            "type": "void",
            "args": [
              {
                "name": "state",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "state",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "clrToggle",
            "type": "",
            "returnType": "",
            "line": 83
          }
        }
      }
    },
    {
      "name": "ClrProgressBar",
      "id": "component-ClrProgressBar-71ceaa899d3e17922adb3a5c9831f780",
      "file": "src/clr-angular/progress/progress-bars/progress-bar.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "AriaLiveService"
        }
      ],
      "selector": "clr-progress-bar",
      "styleUrls": [],
      "styles": [],
      "template":
        "<progress [id]=\"id\" [attr.max]=\"max\" [attr.value]=\"value\" [attr.data-displayval]=\"displayValue\"></progress>\n<span *ngIf=\"displayAriaLive()\">{{ displayValue }}</span>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrAssertive",
          "line": 139,
          "type": "boolean"
        },
        {
          "name": "clrDanger",
          "line": 111,
          "type": ""
        },
        {
          "name": "clrDisplayval",
          "line": 37,
          "type": "string"
        },
        {
          "name": "clrFade",
          "line": 76,
          "type": ""
        },
        {
          "name": "clrFlash",
          "line": 122,
          "type": ""
        },
        {
          "name": "clrFlashDanger",
          "line": 134,
          "type": ""
        },
        {
          "name": "clrLabeled",
          "line": 65,
          "type": ""
        },
        {
          "name": "clrLoop",
          "line": 87,
          "type": ""
        },
        {
          "name": "clrMax",
          "defaultValue": "100",
          "line": 36,
          "type": "number"
        },
        {
          "name": "clrOff",
          "line": 140,
          "type": "boolean"
        },
        {
          "name": "clrSuccess",
          "line": 99,
          "type": ""
        },
        {
          "name": "clrValue",
          "line": 41
        },
        {
          "name": "id",
          "line": 27,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_danger",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [112]
        },
        {
          "name": "_fade",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 69,
          "modifierKind": [112]
        },
        {
          "name": "_flash",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 115,
          "modifierKind": [112]
        },
        {
          "name": "_flashDanger",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 126,
          "modifierKind": [112]
        },
        {
          "name": "_ID",
          "type": "string",
          "optional": false,
          "description": "<p>Handle component ID</p>\n",
          "line": 24,
          "modifierKind": [112]
        },
        {
          "name": "_labeled",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [112]
        },
        {
          "name": "_loop",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [112]
        },
        {
          "name": "_success",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 91,
          "modifierKind": [112]
        },
        {
          "name": "_value",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "displayAriaLive",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 156,
          "description":
            "<p>Display aria-live only when there is value and it&#39;s not 0 or equal to the max value</p>\n"
        }
      ],
      "hostBindings": [
        {
          "name": "attr.id",
          "defaultValue": "''",
          "line": 25,
          "type": "string"
        },
        {
          "name": "class.danger",
          "line": 105
        },
        {
          "name": "class.flash",
          "line": 117
        },
        {
          "name": "class.flash-danger",
          "line": 128
        },
        {
          "name": "class.labeled",
          "line": 60
        },
        {
          "name": "class.loop",
          "line": 82
        },
        {
          "name": "class.progress",
          "line": 54
        },
        {
          "name": "class.progress-fade",
          "line": 71
        },
        {
          "name": "class.success",
          "line": 93
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Input, HostBinding } from '@angular/core';\nimport { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';\nimport { AriaLiveService, AriaLivePoliteness } from '../../utils/a11y/aria-live.service';\n\n@Component({\n  providers: [AriaLiveService],\n  selector: 'clr-progress-bar',\n  template: `\n    <progress [id]=\"id\" [attr.max]=\"max\" [attr.value]=\"value\" [attr.data-displayval]=\"displayValue\"></progress>\n    <span *ngIf=\"displayAriaLive()\">{{ displayValue }}</span>\n  `,\n})\nexport class ClrProgressBar {\n  constructor(private ariaLiveService: AriaLiveService) {}\n\n  /**\n   * Handle component ID\n   */\n  private _ID: string;\n  @HostBinding('attr.id') externalId: string = '';\n  @Input()\n  set id(value: string) {\n    this._ID = value;\n    this.externalId = null;\n  }\n  get id() {\n    return this._ID;\n  }\n\n  // Progress\n  @Input('clrMax') max: number = 100;\n  @Input('clrDisplayval') displayval: string;\n\n  private _value: number = 0;\n  @Input('clrValue')\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n    if (this.displayAriaLive()) {\n      this.ariaLiveService.announce(this.displayValue, this.ariaLive);\n    }\n  }\n\n  // Styles\n  @HostBinding('class.progress')\n  get progressClass() {\n    return true;\n  }\n\n  private _labeled: boolean;\n  @HostBinding('class.labeled')\n  get labeledClass() {\n    return this._labeled;\n  }\n\n  @Input('clrLabeled')\n  set clrLabeled(value: boolean | string) {\n    this._labeled = isBooleanAttributeSet(value);\n  }\n\n  private _fade: boolean;\n  @HostBinding('class.progress-fade')\n  get fadeClass() {\n    return this._fade;\n  }\n\n  @Input('clrFade')\n  set clrFade(value: boolean | string) {\n    this._fade = isBooleanAttributeSet(value);\n  }\n\n  private _loop: boolean;\n  @HostBinding('class.loop')\n  get loopClass() {\n    return this._loop;\n  }\n\n  @Input('clrLoop')\n  set clrLoop(value: boolean | string) {\n    this._loop = isBooleanAttributeSet(value);\n  }\n\n  private _success: boolean;\n  @HostBinding('class.success')\n  get successClass() {\n    return this._success;\n  }\n\n  /** @deprecated since 2.0, remove in 4.0 */\n  @Input('clrSuccess')\n  set clrSuccess(value: boolean | string) {\n    this._success = isBooleanAttributeSet(value);\n  }\n\n  private _danger: boolean;\n  @HostBinding('class.danger')\n  get dangerClass() {\n    return this._danger;\n  }\n\n  /** @deprecated since 2.0, remove in 4.0 */\n  @Input('clrDanger')\n  set clrDanger(value: boolean | string) {\n    this._danger = isBooleanAttributeSet(value);\n  }\n\n  private _flash: boolean;\n  @HostBinding('class.flash')\n  get flashClass() {\n    return this._flash;\n  }\n\n  @Input('clrFlash')\n  set clrFlash(value: boolean | string) {\n    this._flash = isBooleanAttributeSet(value);\n  }\n\n  private _flashDanger: boolean;\n  @HostBinding('class.flash-danger')\n  get flashDangerClass() {\n    return this._flashDanger;\n  }\n\n  /** @deprecated since 2.0, remove in 4.0 */\n  @Input('clrFlashDanger')\n  set clrFlashDanger(value: boolean | string) {\n    this._flashDanger = isBooleanAttributeSet(value);\n  }\n\n  // Aria Live\n  @Input('clrAssertive') assertive: boolean;\n  @Input('clrOff') off: boolean;\n\n  /**\n   * Make sure that we always will have something that is readable\n   * for the screen reader\n   */\n  get displayValue() {\n    if (this.displayval) {\n      return this.displayval;\n    }\n    return `${this.value}%`;\n  }\n\n  /**\n   * Display aria-live only when there is value and it's not 0 or equal to the max value\n   */\n  displayAriaLive() {\n    return (this.value !== undefined || this.value !== 0) && this.value !== this.max;\n  }\n\n  get ariaLive(): AriaLivePoliteness {\n    if (isBooleanAttributeSet(this.assertive)) {\n      return AriaLivePoliteness.assertive;\n    }\n    if (isBooleanAttributeSet(this.off)) {\n      return AriaLivePoliteness.off;\n    }\n    return AriaLivePoliteness.polite;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService"
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "id",
            "type": "",
            "returnType": "",
            "line": 31
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrLabeled": {
          "name": "clrLabeled",
          "setSignature": {
            "name": "clrLabeled",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrFade": {
          "name": "clrFade",
          "setSignature": {
            "name": "clrFade",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrLoop": {
          "name": "clrLoop",
          "setSignature": {
            "name": "clrLoop",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 87,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrSuccess": {
          "name": "clrSuccess",
          "setSignature": {
            "name": "clrSuccess",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 99,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrDanger": {
          "name": "clrDanger",
          "setSignature": {
            "name": "clrDanger",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 111,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrFlash": {
          "name": "clrFlash",
          "setSignature": {
            "name": "clrFlash",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 122,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrFlashDanger": {
          "name": "clrFlashDanger",
          "setSignature": {
            "name": "clrFlashDanger",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 134,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "displayValue": {
          "name": "displayValue",
          "getSignature": {
            "name": "displayValue",
            "type": "",
            "returnType": "",
            "line": 146,
            "description":
              "<p>Make sure that we always will have something that is readable\nfor the screen reader</p>\n"
          }
        },
        "ariaLive": {
          "name": "ariaLive",
          "getSignature": {
            "name": "ariaLive",
            "type": "",
            "returnType": "AriaLivePoliteness",
            "line": 160
          }
        }
      }
    },
    {
      "name": "ClrRadioContainer",
      "id": "component-ClrRadioContainer-be03694435b2e3c95b4e51a90d5355dd",
      "file": "src/clr-angular/forms/radio/radio-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "NgControlService"
        },
        {
          "name": "ControlClassService"
        },
        {
          "name": "IfErrorService"
        }
      ],
      "selector": "clr-radio-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [class.clr-control-inline]=\"clrInline\" [ngClass]=\"controlClass()\">\n  <ng-content select=\"clr-radio-wrapper\"></ng-content>\n  <div class=\"clr-subtext-wrapper\">\n    <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n    <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n    <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n  </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrInline",
          "line": 53,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "inline",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 42,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 86
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 82
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, Input, OnDestroy, Optional } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { ClrLabel } from '../common/label';\nimport { ControlClassService } from '../common/providers/control-class.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\n\n@Component({\n  selector: 'clr-radio-container',\n  template: `\n    <ng-content select=\"label\"></ng-content>\n    <label *ngIf=\"!label && addGrid()\"></label>\n    <div class=\"clr-control-container\" [class.clr-control-inline]=\"clrInline\" [ngClass]=\"controlClass()\">\n      <ng-content select=\"clr-radio-wrapper\"></ng-content>\n      <div class=\"clr-subtext-wrapper\">\n        <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n        <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n      </div>\n    </div>\n    `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [NgControlService, ControlClassService, IfErrorService],\n})\nexport class ClrRadioContainer implements OnDestroy {\n  private subscriptions: Subscription[] = [];\n  invalid = false;\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n  private inline = false;\n  control: NgControl;\n\n  /*\n   * Here we want to support the following cases\n   * clrInline - true by presence\n   * clrInline=\"true|false\" - unless it is explicitly false, strings are considered true\n   * [clrInline]=\"true|false\" - expect a boolean\n   */\n  @Input()\n  set clrInline(value: boolean | string) {\n    if (typeof value === 'string') {\n      this.inline = value === 'false' ? false : true;\n    } else {\n      this.inline = !!value;\n    }\n  }\n  get clrInline() {\n    return this.inline;\n  }\n\n  constructor(\n    private ifErrorService: IfErrorService,\n    @Optional() private layoutService: LayoutService,\n    private controlClassService: ControlClassService,\n    private ngControlService: NgControlService\n  ) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n  }\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid(), this.inline ? 'clr-control-inline' : '');\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 62,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "accessors": {
        "clrInline": {
          "name": "clrInline",
          "setSignature": {
            "name": "clrInline",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "clrInline",
            "type": "",
            "returnType": "",
            "line": 60
          }
        }
      }
    },
    {
      "name": "ClrRadioWrapper",
      "id": "component-ClrRadioWrapper-dfcca488da1fd9504ca4174cb5ec010b",
      "file": "src/clr-angular/forms/radio/radio-wrapper.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ControlIdService"
        }
      ],
      "selector": "clr-radio-wrapper",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"[clrRadio]\"></ng-content>\n<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label\"></label>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 31,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 33
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, OnInit } from '@angular/core';\n\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { ClrLabel } from '../common/label';\n\n@Component({\n  selector: 'clr-radio-wrapper',\n  template: `\n    <ng-content select=\"[clrRadio]\"></ng-content>\n    <ng-content select=\"label\"></ng-content>\n    <label *ngIf=\"!label\"></label>\n  `,\n  host: {\n    '[class.clr-radio-wrapper]': 'true',\n  },\n  providers: [ControlIdService],\n})\nexport class ClrRadioWrapper implements DynamicWrapper, OnInit {\n  // We need both _dynamic for HostWrapper and ContentChild(ClrLabel) in cases where\n  // the user puts a radio inside a wrapper without a label, host wrapping doesn't apply\n  // but we'd still need to insert a label\n  _dynamic = false;\n  @ContentChild(ClrLabel, { static: true })\n  label: ClrLabel;\n\n  ngOnInit() {\n    if (this.label) {\n      this.label.disableGrid();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["DynamicWrapper", "OnInit"]
    },
    {
      "name": "ClrRangeContainer",
      "id": "component-ClrRangeContainer-23bd4c5658f82969401ae1ef49dd5467",
      "file": "src/clr-angular/forms/range/range-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfErrorService"
        },
        {
          "name": "NgControlService"
        },
        {
          "name": "ControlIdService"
        },
        {
          "name": "ControlClassService"
        }
      ],
      "selector": "clr-range-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n    <div class=\"clr-range-wrapper\" [class.progress-fill]=\"hasProgress\">\n        <ng-content select=\"[clrRange]\"></ng-content>\n        <span\n          *ngIf=\"hasProgress\"\n          class=\"fill-input\"\n          [style.width]=\"getRangeProgressFillWidth()\"\n        ></span>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n    </div>\n    <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n    <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrRangeHasProgress",
          "line": 56,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 48
        },
        {
          "name": "_hasProgress",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112]
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 47
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 50,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 46,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 109
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 105
        },
        {
          "name": "getRangeProgressFillWidth",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 87
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, OnDestroy, Optional, Input, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { ClrLabel } from '../common/label';\nimport { ControlClassService } from '../common/providers/control-class.service';\n\n@Component({\n  selector: 'clr-range-container',\n  template: `\n        <ng-content select=\"label\"></ng-content>\n        <label *ngIf=\"!label && addGrid()\"></label>\n        <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n            <div class=\"clr-range-wrapper\" [class.progress-fill]=\"hasProgress\">\n                <ng-content select=\"[clrRange]\"></ng-content>\n                <span\n                  *ngIf=\"hasProgress\"\n                  class=\"fill-input\"\n                  [style.width]=\"getRangeProgressFillWidth()\"\n                ></span>\n                <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n            </div>\n            <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n            <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n        </div>\n    `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [IfErrorService, NgControlService, ControlIdService, ControlClassService],\n})\nexport class ClrRangeContainer implements DynamicWrapper, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  invalid = false;\n  _dynamic = false;\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n  control: NgControl;\n\n  private _hasProgress: boolean = false;\n\n  @Input('clrRangeHasProgress')\n  set hasProgress(val: boolean) {\n    const valBool = !!val;\n    if (valBool !== this._hasProgress) {\n      this._hasProgress = valBool;\n    }\n  }\n\n  get hasProgress() {\n    return this._hasProgress;\n  }\n\n  constructor(\n    private ifErrorService: IfErrorService,\n    @Optional() private layoutService: LayoutService,\n    private controlClassService: ControlClassService,\n    private ngControlService: NgControlService,\n    private renderer: Renderer2,\n    private idService: ControlIdService\n  ) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n  }\n\n  getRangeProgressFillWidth(): string {\n    const input = <HTMLInputElement>this.renderer.selectRootElement('[clrRange]#' + this.idService.id);\n\n    const inputWidth = input.offsetWidth;\n    const inputMinValue = +input.min;\n    let inputMaxValue = +input.max;\n\n    if (inputMinValue === 0 && inputMaxValue === 0) {\n      inputMaxValue = 100;\n    }\n\n    const inputMiddle = (inputMinValue + inputMaxValue) / 2;\n    const inputValue = !!this.control && this.control.value !== undefined ? this.control.value : inputMiddle;\n    const valueAsPercent = (inputValue - inputMinValue) * 100 / (inputMaxValue - inputMinValue);\n\n    return valueAsPercent * inputWidth / 100 + 'px';\n  }\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid());\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          },
          {
            "name": "renderer",
            "type": "Renderer2"
          },
          {
            "name": "idService",
            "type": "ControlIdService"
          }
        ],
        "line": 65,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "type": "Renderer2",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "idService",
            "type": "ControlIdService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper", "OnDestroy"],
      "accessors": {
        "hasProgress": {
          "name": "hasProgress",
          "setSignature": {
            "name": "hasProgress",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "val",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hasProgress",
            "type": "",
            "returnType": "",
            "line": 63
          }
        }
      }
    },
    {
      "name": "ClrSelectContainer",
      "id": "component-ClrSelectContainer-b81ca5907459f402c56d2dc4df19fdf0",
      "file": "src/clr-angular/forms/select/select-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfErrorService"
        },
        {
          "name": "NgControlService"
        },
        {
          "name": "ControlIdService"
        },
        {
          "name": "ControlClassService"
        }
      ],
      "selector": "clr-select-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "    <ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n    <div [ngClass]=\"wrapperClass()\">\n        <ng-content select=\"[clrSelect]\"></ng-content>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n    </div>\n    <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n    <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 50
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 46,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "multi",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [112]
        },
        {
          "name": "multiple",
          "type": "SelectMultipleControlValueAccessor",
          "optional": false,
          "description": "",
          "line": 48,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "SelectMultipleControlValueAccessor, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 81
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 77
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85
        },
        {
          "name": "wrapperClass",
          "args": [],
          "optional": false,
          "returnType": "\"clr-multiselect-wrapper\" | \"clr-select-wrapper\"",
          "typeParameters": [],
          "line": 73
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, OnDestroy, Optional } from '@angular/core';\nimport { SelectMultipleControlValueAccessor, NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { ClrLabel } from '../common/label';\nimport { ControlClassService } from '../common/providers/control-class.service';\n\n@Component({\n  selector: 'clr-select-container',\n  template: `    \n        <ng-content select=\"label\"></ng-content>\n        <label *ngIf=\"!label && addGrid()\"></label>\n        <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n            <div [ngClass]=\"wrapperClass()\">\n                <ng-content select=\"[clrSelect]\"></ng-content>\n                <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n            </div>\n            <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n            <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n        </div>\n    `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [IfErrorService, NgControlService, ControlIdService, ControlClassService],\n})\nexport class ClrSelectContainer implements DynamicWrapper, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  invalid = false;\n  _dynamic = false;\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n  @ContentChild(SelectMultipleControlValueAccessor, { static: false })\n  multiple: SelectMultipleControlValueAccessor;\n  private multi = false;\n  control: NgControl;\n\n  constructor(\n    private ifErrorService: IfErrorService,\n    @Optional() private layoutService: LayoutService,\n    private controlClassService: ControlClassService,\n    private ngControlService: NgControlService\n  ) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        if (control) {\n          this.multi = control.valueAccessor instanceof SelectMultipleControlValueAccessor;\n          this.control = control;\n        }\n      })\n    );\n  }\n\n  wrapperClass() {\n    return this.multi ? 'clr-multiselect-wrapper' : 'clr-select-wrapper';\n  }\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid());\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 50,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper", "OnDestroy"]
    },
    {
      "name": "ClrSignpost",
      "id": "component-ClrSignpost-c7f5322bce36f77662930d0536bc693e",
      "file": "src/clr-angular/popover/signpost/signpost.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ClrPopoverToggleService"
        },
        {
          "name": "SignpostFocusManager"
        },
        {
          "name": "{ provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef }"
        },
        {
          "name": "SignpostIdService"
        }
      ],
      "selector": "clr-signpost",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-container *ngIf=\"!useCustomTrigger\">\n    <button\n        type=\"button\"\n        class=\"signpost-action btn btn-small btn-link\"\n        clrSignpostTrigger>\n        <clr-icon shape=\"info\" [attr.title]=\"commonStrings.keys.info\"></clr-icon>\n    </button>\n</ng-container>\n\n<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [114]
        },
        {
          "name": "useCustomTrigger",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "<hr>\n",
          "line": 58,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 1722,
              "end": 1732,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1722,
                "end": 1723,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1723,
                "end": 1731,
                "flags": 0,
                "escapedText": "property"
              },
              "comment": "<p>useCustomTrigger</p>\n"
            },
            {
              "pos": 1759,
              "end": 1775,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1759,
                "end": 1760,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1760,
                "end": 1771,
                "flags": 0,
                "escapedText": "description"
              },
              "comment":
                "<p>Flag used to determine if we need to use the default trigger or a user supplied trigger element.</p>\n"
            }
          ]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, ElementRef } from '@angular/core';\n\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';\n\nimport { ClrSignpostTrigger } from './signpost-trigger';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { SignpostIdService } from './providers/signpost-id.service';\nimport { SignpostFocusManager } from './providers/signpost-focus-manager.service';\n\n@Component({\n  selector: 'clr-signpost',\n  template: `\n        <ng-container *ngIf=\"!useCustomTrigger\">\n            <button\n                type=\"button\"\n                class=\"signpost-action btn btn-small btn-link\"\n                clrSignpostTrigger>\n                <clr-icon shape=\"info\" [attr.title]=\"commonStrings.keys.info\"></clr-icon>\n            </button>\n        </ng-container>\n\n        <ng-content></ng-content>\n    `,\n  host: { '[class.signpost]': 'true' },\n  providers: [\n    ClrPopoverToggleService,\n    SignpostFocusManager,\n    { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },\n    SignpostIdService,\n  ],\n})\n\n/*********\n *\n * @class ClrSignpost\n *\n * @description\n * Class used to configure and control the state of a ClrSignpost and its associated ClrSignpostContent.\n * It supports the clrPosition with a 'right-middle' default.\n *\n */\nexport class ClrSignpost {\n  constructor(public commonStrings: ClrCommonStringsService) {}\n\n  /**********\n   * @property useCustomTrigger\n   *\n   * @description\n   * Flag used to determine if we need to use the default trigger or a user supplied trigger element.\n   *\n   */\n  public useCustomTrigger: boolean = false;\n\n  /**********\n   * @property signPostTrigger\n   *\n   * @description\n   * Uses ContentChild to check for a user supplied element with the ClrSignpostTrigger on it.\n   *\n   */\n  @ContentChild(ClrSignpostTrigger, { static: false })\n  set customTrigger(trigger: ClrSignpostTrigger) {\n    this.useCustomTrigger = !!trigger;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 48,
        "jsdoctags": [
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "customTrigger": {
          "name": "customTrigger",
          "setSignature": {
            "name": "customTrigger",
            "type": "void",
            "args": [
              {
                "name": "trigger",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "name": "trigger",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrSignpostContent",
      "id": "component-ClrSignpostContent-f7a00751cd0ac5a1b0e314efc5c55444",
      "file": "src/clr-angular/popover/signpost/signpost-content.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "UNIQUE_ID_PROVIDER"
        }
      ],
      "selector": "clr-signpost-content",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div class=\"signpost-wrap\">\n    <div class=\"popover-pointer\"></div>\n    <div class=\"signpost-content-body\">\n        <ng-content></ng-content>\n    </div>\n    <div class=\"signpost-content-header\">\n        <button type=\"button\" [attr.aria-label]=\"commonStrings.keys.signpostClose\" class=\"signpost-action close\"\n                (click)=\"close()\" [attr.aria-controls]=\"signpostContentId\">\n            <clr-icon shape=\"close\" [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n        </button>\n    </div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrPosition",
          "description": "<hr>\n",
          "line": 126,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_position",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 90,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [114]
        },
        {
          "name": "document",
          "type": "Document",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112]
        },
        {
          "name": "signpostContentId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 62,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "anchorElem",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "closeOnOutsideClick",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [114],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentESCListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "hostClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignore",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElementClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverOptions",
          "defaultValue": "{}",
          "type": "PopoverOptions",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "updateAnchor",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "description": "<hr>\n",
          "jsdoctags": []
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 144
        },
        {
          "name": "anchor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, Inject, Injector, Input, Optional, OnDestroy, PLATFORM_ID } from '@angular/core';\n\nimport { AbstractPopover } from '../common/abstract-popover';\nimport { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';\n\nimport { SIGNPOST_POSITIONS } from './signpost-positions';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\nimport { SignpostIdService } from './providers/signpost-id.service';\nimport { SignpostFocusManager } from './providers/signpost-focus-manager.service';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\n// aka where the arrow / pointer is at in relation to the anchor\nconst POSITIONS: string[] = [\n  'top-left',\n  'top-middle',\n  'top-right',\n  'right-top',\n  'right-middle', // default\n  'right-bottom',\n  'bottom-right',\n  'bottom-middle',\n  'bottom-left',\n  'left-bottom',\n  'left-middle',\n  'left-top',\n];\n\n@Component({\n  selector: 'clr-signpost-content',\n  template: `\n      <div class=\"signpost-wrap\">\n          <div class=\"popover-pointer\"></div>\n          <div class=\"signpost-content-body\">\n              <ng-content></ng-content>\n          </div>\n          <div class=\"signpost-content-header\">\n              <button type=\"button\" [attr.aria-label]=\"commonStrings.keys.signpostClose\" class=\"signpost-action close\"\n                      (click)=\"close()\" [attr.aria-controls]=\"signpostContentId\">\n                  <clr-icon shape=\"close\" [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n              </button>\n          </div>\n      </div>\n  `,\n  host: { '[class.signpost-content]': 'true', '[id]': 'signpostContentId' },\n  providers: [UNIQUE_ID_PROVIDER],\n})\nexport class ClrSignpostContent extends AbstractPopover implements OnDestroy {\n  private document: Document;\n\n  constructor(\n    injector: Injector,\n    @Optional()\n    @Inject(POPOVER_HOST_ANCHOR)\n    parentHost: ElementRef,\n    public commonStrings: ClrCommonStringsService,\n    @Inject(UNIQUE_ID) public signpostContentId: string,\n    private signpostIdService: SignpostIdService,\n    private signpostFocusManager: SignpostFocusManager,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject(DOCUMENT) document: any\n  ) {\n    super(injector, parentHost);\n    if (!parentHost) {\n      throw new Error('clr-signpost-content should only be used inside of a clr-signpost');\n    }\n    // Defaults\n    this.position = 'right-middle';\n    this.closeOnOutsideClick = true;\n    this.signpostIdService.setId(signpostContentId);\n\n    this.document = document;\n  }\n\n  /**********\n   *\n   * @description\n   * Close function that uses the signpost instance to toggle the state of the content popover.\n   *\n   */\n  close() {\n    this.toggleService.open = false;\n  }\n\n  private _position: string;\n\n  get position() {\n    return this._position;\n  }\n\n  /*********\n   *\n   * @description\n   * A setter for the position of the ClrSignpostContent popover. This is a combination of the following:\n   * - anchorPoint - where on the trigger to anchor the ClrSignpostContent\n   * - popoverPoint - where on the ClrSignpostContent container to align with the anchorPoint\n   * - offsetY - where on the Y axis to align the ClrSignpostContent so it meets specs\n   * - offsetX - where on the X axis to align the ClrSignpostContent so it meets specs\n   * There are 12 possible positions to place a ClrSignpostContent container:\n   * - top-left\n   * - top-middle\n   * - top-right\n   * - right-top\n   * - right-middle\n   * - right-bottom\n   * - bottom-right\n   * - bottom-middle\n   * - bottom-left\n   * - left-bottom\n   * - left-middle\n   * - left-top\n   *\n   * I think of it as follows for 'top-left' -> CONTAINER_SIDE-SIDE_POSITION. In this case CONTAINER_SIDE is 'top'\n   * meaning the top of the trigger icon (above the icon that hides/shows) the ClrSignpostContent. And, SIDE_POSITION\n   * is 'left' meaning two things: 1) the ClrSignpostContent container extends to the left and 2) the 'arrow/pointer'\n   * linking the SingpostContent to the trigger points down at the horizontal center of the trigger icon.\n   *\n   * @param newPosition\n   */\n  @Input('clrPosition')\n  set position(position: string) {\n    // Ugh\n    this.renderer.removeClass(this.el.nativeElement, this.position);\n    if (position && POSITIONS.indexOf(position) > -1) {\n      this._position = position;\n    } else {\n      this._position = 'right-middle';\n    }\n    // Ugh\n    this.renderer.addClass(this.el.nativeElement, this.position);\n\n    const setPosition = SIGNPOST_POSITIONS[this.position];\n    this.anchorPoint = setPosition.anchorPoint;\n    this.popoverPoint = setPosition.popoverPoint;\n    this.popoverOptions.offsetY = setPosition.offsetY;\n    this.popoverOptions.offsetX = setPosition.offsetX;\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId) && this.el.nativeElement.contains(this.document.activeElement)) {\n      this.signpostFocusManager.focusTrigger();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "parentHost",
            "type": "ElementRef"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "signpostContentId",
            "type": "string"
          },
          {
            "name": "signpostIdService",
            "type": "SignpostIdService"
          },
          {
            "name": "signpostFocusManager",
            "type": "SignpostFocusManager"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "document",
            "type": "any"
          }
        ],
        "line": 54,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentHost",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "signpostContentId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "signpostIdService",
            "type": "SignpostIdService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "signpostFocusManager",
            "type": "SignpostFocusManager",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "document",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "AbstractPopover",
      "implements": ["OnDestroy"],
      "accessors": {
        "position": {
          "name": "position",
          "setSignature": {
            "name": "position",
            "type": "void",
            "args": [
              {
                "name": "position",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 126,
            "description": "<hr>\n",
            "jsdoctags": [
              {
                "name": "position",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "position",
            "type": "",
            "returnType": "",
            "line": 92
          }
        }
      }
    },
    {
      "name": "ClrSpinner",
      "id": "component-ClrSpinner-a48070ba1bb167b678fde884e1956674",
      "file": "src/clr-angular/progress/spinner/spinner.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "AriaLiveService"
        }
      ],
      "selector": "clr-spinner",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrAssertive",
          "description":
            "<p>By default aria-live will be set to <code>polite</code> .\nTo change is it you need to set clrAssertive or clrOff to TRUE</p>\n<p>There is priority:\n   Default: polite\n   Asertive\n   Off</p>\n<p>In case when for some reason you have clrAssertive=TRUE and clrOff=TRUE,\nwe gonna set <code>assertive</code> as value of aria-live.</p>\n",
          "line": 118,
          "type": "boolean"
        },
        {
          "name": "clrInline",
          "line": 43,
          "type": ""
        },
        {
          "name": "clrInverse",
          "line": 54,
          "type": ""
        },
        {
          "name": "clrMedium",
          "line": 99,
          "type": ""
        },
        {
          "name": "clrOff",
          "line": 119,
          "type": "boolean"
        },
        {
          "name": "clrSmall",
          "line": 74,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_inline",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 36,
          "modifierKind": [112]
        },
        {
          "name": "_inverse",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [112]
        },
        {
          "name": "_medium",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>When clrSmall &amp; clrMedium are set both to true.\nThe CSS with high priority will be small - so medium size will be ignored.</p>\n<p>For this reason if clrSmall is set we won&#39;t add clrMedium class.</p>\n<p>NOTE: This is dictated by the CSS rules.\nDON&#39;T USE clrSmall &amp; clrMedium to toggle classes. This could change without notice.</p>\n<p>Also there is no logical need to have both of them set to TRUE or FALSE.</p>\n",
          "line": 89,
          "modifierKind": [112]
        },
        {
          "name": "_small",
          "type": "boolean",
          "optional": false,
          "description":
            "<p>By default all spinners are Large. (spinner-lg)\nTo change the size you need to use set clrSmall or clrMedium to TRUE/</p>\n",
          "line": 67,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23
        }
      ],
      "hostBindings": [
        {
          "name": "class.spinner",
          "description": "<p>Default class for all spinners. This class is always true</p>\n",
          "line": 31
        },
        {
          "name": "class.spinner-inline",
          "line": 38
        },
        {
          "name": "class.spinner-inverse",
          "line": 49
        },
        {
          "name": "class.spinner-md",
          "line": 91
        },
        {
          "name": "class.spinner-sm",
          "line": 69
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Input, HostBinding, ElementRef, AfterViewInit } from '@angular/core';\nimport { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';\nimport { AriaLiveService, AriaLivePoliteness } from '../../utils/a11y/aria-live.service';\n\n@Component({\n  selector: 'clr-spinner',\n  providers: [AriaLiveService],\n  template: `\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[attr.aria-busy]': 'true',\n  },\n})\nexport class ClrSpinner implements AfterViewInit {\n  constructor(private el: ElementRef, private ariaLiveService: AriaLiveService) {}\n\n  ngAfterViewInit() {\n    this.ariaLiveService.announce(this.el.nativeElement, this.ariaLive);\n  }\n\n  /**\n   * Default class for all spinners. This class is always true\n   */\n  @HostBinding('class.spinner')\n  get spinnerClass() {\n    return true;\n  }\n\n  // Style\n  private _inline: boolean;\n  @HostBinding('class.spinner-inline')\n  get inlineClass() {\n    return this._inline;\n  }\n\n  @Input('clrInline')\n  set clrInline(value: boolean | string) {\n    this._inline = isBooleanAttributeSet(value);\n  }\n\n  private _inverse: boolean;\n  @HostBinding('class.spinner-inverse')\n  get inverseClass() {\n    return this._inverse;\n  }\n\n  @Input('clrInverse')\n  set clrInverse(value: boolean | string) {\n    this._inverse = isBooleanAttributeSet(value);\n  }\n\n  // Size\n  /**\n   * By default all spinners are Large. (spinner-lg)\n   * To change the size you need to use set clrSmall or clrMedium to TRUE/\n   */\n\n  /**\n   * Small\n   */\n  private _small: boolean;\n  @HostBinding('class.spinner-sm')\n  get smallClass() {\n    return this._small;\n  }\n\n  @Input('clrSmall')\n  set clrSmall(value: boolean | string) {\n    this._small = isBooleanAttributeSet(value);\n  }\n\n  /**\n   * When clrSmall & clrMedium are set both to true.\n   * The CSS with high priority will be small - so medium size will be ignored.\n   *\n   * For this reason if clrSmall is set we won't add clrMedium class.\n   *\n   * NOTE: This is dictated by the CSS rules.\n   * DON'T USE clrSmall & clrMedium to toggle classes. This could change without notice.\n   *\n   * Also there is no logical need to have both of them set to TRUE or FALSE.\n   */\n  private _medium: boolean;\n  @HostBinding('class.spinner-md')\n  get mediumClass() {\n    if (this._small) {\n      return false;\n    }\n    return this._medium;\n  }\n\n  @Input('clrMedium')\n  set clrMedium(value: boolean | string) {\n    this._medium = isBooleanAttributeSet(value);\n  }\n\n  // Aria Live\n\n  /**\n   * By default aria-live will be set to `polite` .\n   * To change is it you need to set clrAssertive or clrOff to TRUE\n   *\n   * There is priority:\n   *   Default: polite\n   *   Asertive\n   *   Off\n   *\n   * In case when for some reason you have clrAssertive=TRUE and clrOff=TRUE,\n   * we gonna set `assertive` as value of aria-live.\n   *\n   */\n  @Input('clrAssertive') assertive: boolean;\n  @Input('clrOff') off: boolean;\n  get ariaLive(): AriaLivePoliteness {\n    if (isBooleanAttributeSet(this.assertive)) {\n      return AriaLivePoliteness.assertive;\n    }\n    if (isBooleanAttributeSet(this.off)) {\n      return AriaLivePoliteness.off;\n    }\n    return AriaLivePoliteness.polite;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "el",
            "type": "ElementRef"
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"],
      "accessors": {
        "clrInline": {
          "name": "clrInline",
          "setSignature": {
            "name": "clrInline",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrInverse": {
          "name": "clrInverse",
          "setSignature": {
            "name": "clrInverse",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrSmall": {
          "name": "clrSmall",
          "setSignature": {
            "name": "clrSmall",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 74,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "clrMedium": {
          "name": "clrMedium",
          "setSignature": {
            "name": "clrMedium",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 99,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "ariaLive": {
          "name": "ariaLive",
          "getSignature": {
            "name": "ariaLive",
            "type": "",
            "returnType": "AriaLivePoliteness",
            "line": 120
          }
        }
      }
    },
    {
      "name": "ClrStackBlock",
      "id": "component-ClrStackBlock-e9a6b5884c45590414785d77c396d0e2",
      "file": "src/clr-angular/data/stack-view/stack-block.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "UNIQUE_ID_PROVIDER"
        }
      ],
      "selector": "clr-stack-block",
      "styleUrls": [],
      "styles": ["\n      :host {\n        display: block;\n      }\n    "],
      "template":
        "<div class=\"stack-block-label\"\n    (click)=\"toggleExpand()\"\n    (keyup.enter)=\"toggleExpand()\"\n    (keyup.space)=\"toggleExpand()\"\n    (focus)=\"focused = true\"\n    (blur)=\"focused = false\"\n    [id]=\"uniqueId\"\n    [attr.role]=\"role\"\n    [attr.tabindex]=\"tabIndex\"\n    [attr.aria-expanded]=\"ariaExpanded\"\n    [attr.aria-controls]=\"getStackChildrenId()\"\n    [attr.aria-posinset]=\"ariaPosinset\"\n    [attr.aria-level]=\"ariaLevel\"\n    [attr.aria-setsize]=\"ariaSetsize\"\n    >\n  <clr-icon shape=\"caret\"\n            class=\"stack-block-caret\"\n            *ngIf=\"expandable\"\n            [attr.dir]=\"caretDirection\"\n            [attr.title]=\"caretTitle\"></clr-icon>\n  <span class=\"clr-sr-only\" *ngIf=\"getChangedValue\">{{commonStrings.keys.stackViewChanged}}</span>\n  <div class=\"stack-view-key\">\n    <!-- This structure changed to fix #3567 and the a11y request was to move away from dl's -->\n    <!-- I added the key class to update css targets for the original component style -->\n    <ng-content select=\"clr-stack-label\"></ng-content>\n  </div>\n  <div class=\"stack-block-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n\n<clr-expandable-animation [@clrExpandTrigger]=\"expanded\" class=\"stack-children\" [attr.id]=\"getStackChildrenId()\">\n  <div [style.height]=\"expanded ? 'auto' : 0\" role=\"region\">\n    <ng-content select=\"clr-stack-block\"></ng-content>\n  </div>\n</clr-expandable-animation>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrSbExpandable",
          "defaultValue": "false",
          "line": 69,
          "type": "boolean"
        },
        {
          "name": "clrSbExpanded",
          "defaultValue": "false",
          "line": 65,
          "type": "boolean"
        },
        {
          "name": "clrSbNotifyChange",
          "line": 82,
          "type": "boolean"
        },
        {
          "name": "clrStackViewLevel",
          "description": "<p>Depth of the stack view starting from 1 for first level</p>\n",
          "line": 97,
          "type": "number"
        },
        {
          "name": "clrStackViewPosinset",
          "description": "<p>The position of the row inside the grouped by level rows</p>\n",
          "line": 107,
          "type": "number"
        },
        {
          "name": "clrStackViewSetsize",
          "description": "<p>Total number of rows in a given group</p>\n",
          "line": 102,
          "type": "number"
        }
      ],
      "outputsClass": [
        {
          "name": "clrSbExpandedChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "line": 66,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_changed",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [112]
        },
        {
          "name": "_changedChildren",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 72,
          "modifierKind": [112]
        },
        {
          "name": "_fullyInitialized",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 119,
          "modifierKind": [114]
        },
        {
          "name": "focused",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 71
        },
        {
          "name": "uniqueId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 118,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "addChild",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 132
        },
        {
          "name": "getStackChildrenId",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 172
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 126
        },
        {
          "name": "toggleExpand",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136
        }
      ],
      "hostBindings": [
        {
          "name": "class.on-focus",
          "line": 160,
          "type": "boolean"
        },
        {
          "name": "class.stack-block-changed",
          "line": 77,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, HostBinding, Inject, Input, OnInit, Optional, Output, SkipSelf } from '@angular/core';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\n\n@Component({\n  selector: 'clr-stack-block',\n  template: `\n    <div class=\"stack-block-label\"\n        (click)=\"toggleExpand()\"\n        (keyup.enter)=\"toggleExpand()\"\n        (keyup.space)=\"toggleExpand()\"\n        (focus)=\"focused = true\"\n        (blur)=\"focused = false\"\n        [id]=\"uniqueId\"\n        [attr.role]=\"role\"\n        [attr.tabindex]=\"tabIndex\"\n        [attr.aria-expanded]=\"ariaExpanded\"\n        [attr.aria-controls]=\"getStackChildrenId()\"\n        [attr.aria-posinset]=\"ariaPosinset\"\n        [attr.aria-level]=\"ariaLevel\"\n        [attr.aria-setsize]=\"ariaSetsize\"\n        >\n      <clr-icon shape=\"caret\"\n                class=\"stack-block-caret\"\n                *ngIf=\"expandable\"\n                [attr.dir]=\"caretDirection\"\n                [attr.title]=\"caretTitle\"></clr-icon>\n      <span class=\"clr-sr-only\" *ngIf=\"getChangedValue\">{{commonStrings.keys.stackViewChanged}}</span>\n      <div class=\"stack-view-key\">\n        <!-- This structure changed to fix #3567 and the a11y request was to move away from dl's -->\n        <!-- I added the key class to update css targets for the original component style -->\n        <ng-content select=\"clr-stack-label\"></ng-content>\n      </div>\n      <div class=\"stack-block-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n\n    <clr-expandable-animation [@clrExpandTrigger]=\"expanded\" class=\"stack-children\" [attr.id]=\"getStackChildrenId()\">\n      <div [style.height]=\"expanded ? 'auto' : 0\" role=\"region\">\n        <ng-content select=\"clr-stack-block\"></ng-content>\n      </div>\n    </clr-expandable-animation>\n  `,\n  // Custom elements are inline by default\n  styles: [\n    `\n      :host {\n        display: block;\n      }\n    `,\n  ],\n  // Make sure the host has the proper class for styling purposes\n  host: { '[class.stack-block]': 'true' },\n  providers: [UNIQUE_ID_PROVIDER],\n})\nexport class ClrStackBlock implements OnInit {\n  @HostBinding('class.stack-block-expanded')\n  @Input('clrSbExpanded')\n  expanded: boolean = false;\n  @Output('clrSbExpandedChange') expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n  @HostBinding('class.stack-block-expandable')\n  @Input('clrSbExpandable')\n  expandable: boolean = false;\n\n  focused: boolean = false;\n  private _changedChildren: number = 0;\n  private _fullyInitialized: boolean = false;\n  private _changed: boolean = false;\n\n  @HostBinding('class.stack-block-changed')\n  get getChangedValue(): boolean {\n    return this._changed || (this._changedChildren > 0 && !this.expanded);\n  }\n\n  @Input('clrSbNotifyChange')\n  set setChangedValue(value: boolean) {\n    this._changed = value;\n\n    if (this.parent && this._fullyInitialized) {\n      if (value) {\n        this.parent._changedChildren++;\n      } else {\n        this.parent._changedChildren--;\n      }\n    }\n  }\n\n  /**\n   * Depth of the stack view starting from 1 for first level\n   */\n  @Input('clrStackViewLevel') ariaLevel: number;\n\n  /**\n   * Total number of rows in a given group\n   */\n  @Input('clrStackViewSetsize') ariaSetsize: number;\n\n  /**\n   * The position of the row inside the grouped by level rows\n   */\n  @Input('clrStackViewPosinset') ariaPosinset: number;\n\n  /*\n   * This would be more efficient with @ContentChildren, with the parent ClrStackBlock\n   * querying for children StackBlocks, but this feature is not available when downgrading\n   * the component for Angular 1.\n   */\n  constructor(\n    @SkipSelf()\n    @Optional()\n    private parent: ClrStackBlock,\n    @Inject(UNIQUE_ID) public uniqueId: string,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    if (parent) {\n      parent.addChild();\n    }\n  }\n\n  ngOnInit(): void {\n    // in order to access the parent ClrStackBlock's properties,\n    // the child ClrStackBlock has to be fully initialized at first.\n    this._fullyInitialized = true;\n  }\n\n  addChild(): void {\n    this.expandable = true;\n  }\n\n  toggleExpand(): void {\n    if (this.expandable) {\n      this.expanded = !this.expanded;\n      this.expandedChange.emit(this.expanded);\n    }\n  }\n\n  get caretDirection(): string {\n    return this.expanded ? 'down' : 'right';\n  }\n\n  get caretTitle(): string {\n    return this.expanded ? this.commonStrings.keys.collapse : this.commonStrings.keys.expand;\n  }\n\n  get role(): string {\n    return this.expandable ? 'button' : null;\n  }\n\n  get tabIndex(): string {\n    return this.expandable ? '0' : null;\n  }\n\n  @HostBinding('class.on-focus')\n  get onStackLabelFocus(): boolean {\n    return this.expandable && !this.expanded && this.focused;\n  }\n\n  get ariaExpanded(): string {\n    if (!this.expandable) {\n      return null;\n    } else {\n      return this.expanded ? 'true' : 'false';\n    }\n  }\n\n  getStackChildrenId() {\n    return this.expanded ? `clr-stack-children-${this.uniqueId}` : null;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n      :host {\n        display: block;\n      }\n    \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "parent",
            "type": "ClrStackBlock"
          },
          {
            "name": "uniqueId",
            "type": "string"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 107,
        "jsdoctags": [
          {
            "name": "parent",
            "type": "ClrStackBlock",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "uniqueId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "setChangedValue": {
          "name": "setChangedValue",
          "setSignature": {
            "name": "setChangedValue",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 82,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "caretDirection": {
          "name": "caretDirection",
          "getSignature": {
            "name": "caretDirection",
            "type": "string",
            "returnType": "string",
            "line": 143
          }
        },
        "caretTitle": {
          "name": "caretTitle",
          "getSignature": {
            "name": "caretTitle",
            "type": "string",
            "returnType": "string",
            "line": 147
          }
        },
        "role": {
          "name": "role",
          "getSignature": {
            "name": "role",
            "type": "string",
            "returnType": "string",
            "line": 151
          }
        },
        "tabIndex": {
          "name": "tabIndex",
          "getSignature": {
            "name": "tabIndex",
            "type": "string",
            "returnType": "string",
            "line": 155
          }
        },
        "ariaExpanded": {
          "name": "ariaExpanded",
          "getSignature": {
            "name": "ariaExpanded",
            "type": "string",
            "returnType": "string",
            "line": 164
          }
        }
      }
    },
    {
      "name": "ClrStackHeader",
      "id": "component-ClrStackHeader-e2954c3bf2b3e5338d4355fa8b6b3b94",
      "file": "src/clr-angular/data/stack-view/stack-header.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-stack-header",
      "styleUrls": [],
      "styles": ["\n        :host { display: block; }\n    "],
      "template":
        "<h4 class=\"stack-header\">\n    <span class=\"stack-title\"><ng-content></ng-content></span>\n\n    <span class=\"stack-actions\">\n        <ng-content select=\".stack-action\"></ng-content>\n        <!-- Undocumented experimental feature: inline editing. -->\n        <button *ngIf=\"stackView.editable\" class=\"stack-action btn btn-sm btn-link\"\n                (click)=\"stackView.editing = !stackView.editing\" type=\"button\">\n                Edit\n        </button>\n        <!-- End of undocumented experimental feature. -->\n    </span>\n</h4>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "stackView",
          "type": "ClrStackView",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\nimport { ClrStackView } from './stack-view';\n\n@Component({\n  selector: 'clr-stack-header',\n  template: `\n        <h4 class=\"stack-header\">\n            <span class=\"stack-title\"><ng-content></ng-content></span>\n            \n            <span class=\"stack-actions\">\n                <ng-content select=\".stack-action\"></ng-content>\n                <!-- Undocumented experimental feature: inline editing. -->\n                <button *ngIf=\"stackView.editable\" class=\"stack-action btn btn-sm btn-link\" \n                        (click)=\"stackView.editing = !stackView.editing\" type=\"button\">\n                        Edit\n                </button>\n                <!-- End of undocumented experimental feature. -->\n            </span>\n        </h4>\n    `,\n  // Custom elements are inline by default\n  styles: [\n    `\n        :host { display: block; }\n    `,\n  ],\n})\nexport class ClrStackHeader {\n  constructor(public stackView: ClrStackView) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n        :host { display: block; }\n    \n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "stackView",
            "type": "ClrStackView"
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "stackView",
            "type": "ClrStackView",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrStackInput",
      "id": "component-ClrStackInput-f2f5c2cbca76d95bcf80fedf939a39cc",
      "file": "src/clr-angular/data/stack-view/stack-input.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": ["model: clrModel", "type"],
      "outputs": ["modelChange: clrModelChange"],
      "providers": [],
      "selector": "clr-stack-input",
      "styleUrls": [],
      "styles": [],
      "template":
        "<span *ngIf=\"!stackView.editing\">{{model}}</span>\n<input [type]=\"type\" *ngIf=\"stackView.editing\" [(ngModel)]=\"model\"/>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "stackView",
          "type": "ClrStackView",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [114]
        },
        {
          "name": "type",
          "defaultValue": "'text'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 27
        },
        {
          "name": "model",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14,
          "inheritance": {
            "file": "StackControl"
          }
        },
        {
          "name": "modelChange",
          "defaultValue": "new EventEmitter<any>(false)",
          "type": "EventEmitter<any>",
          "optional": false,
          "description": "",
          "line": 15,
          "inheritance": {
            "file": "StackControl"
          }
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\nimport { StackControl } from './stack-control';\nimport { ClrStackView } from './stack-view';\n\n@Component({\n  selector: 'clr-stack-input',\n  inputs: ['model: clrModel', 'type'],\n  outputs: ['modelChange: clrModelChange'],\n  template: `\n        <span *ngIf=\"!stackView.editing\">{{model}}</span>\n        <input [type]=\"type\" *ngIf=\"stackView.editing\" [(ngModel)]=\"model\"/>\n    `,\n})\nexport class ClrStackInput extends StackControl {\n  type: string = 'text';\n\n  constructor(public stackView: ClrStackView) {\n    super(stackView);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "stackView",
            "type": "ClrStackView"
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "stackView",
            "type": "ClrStackView",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "StackControl"
    },
    {
      "name": "ClrStackSelect",
      "id": "component-ClrStackSelect-8d5bcce7b79a5e78fc15574b95917925",
      "file": "src/clr-angular/data/stack-view/stack-select.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": ["model: clrModel"],
      "outputs": ["modelChange: clrModelChange"],
      "providers": [],
      "selector": "clr-stack-select",
      "styleUrls": [],
      "styles": [],
      "template":
        "<span *ngIf=\"!stackView.editing\">{{model}}</span>\n<div class=\"select\" *ngIf=\"stackView.editing\" >\n    <select [(ngModel)]=\"model\">\n        <ng-content></ng-content>\n    </select>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "stackView",
          "type": "ClrStackView",
          "optional": false,
          "description": "",
          "line": 30,
          "modifierKind": [114]
        },
        {
          "name": "model",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14,
          "inheritance": {
            "file": "StackControl"
          }
        },
        {
          "name": "modelChange",
          "defaultValue": "new EventEmitter<any>(false)",
          "type": "EventEmitter<any>",
          "optional": false,
          "description": "",
          "line": 15,
          "inheritance": {
            "file": "StackControl"
          }
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\nimport { StackControl } from './stack-control';\nimport { ClrStackView } from './stack-view';\n\n@Component({\n  selector: 'clr-stack-select',\n  inputs: ['model: clrModel'],\n  outputs: ['modelChange: clrModelChange'],\n  template: `\n        <span *ngIf=\"!stackView.editing\">{{model}}</span>\n        <div class=\"select\" *ngIf=\"stackView.editing\" >\n            <select [(ngModel)]=\"model\">\n                <ng-content></ng-content>\n            </select>\n        </div>\n    `,\n})\nexport class ClrStackSelect extends StackControl {\n  constructor(public stackView: ClrStackView) {\n    super(stackView);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "stackView",
            "type": "ClrStackView"
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "stackView",
            "type": "ClrStackView",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "StackControl"
    },
    {
      "name": "ClrStackView",
      "id": "component-ClrStackView-fd0e47c22b217051d4223e246e1e4a7b",
      "file": "src/clr-angular/data/stack-view/stack-view.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-stack-view",
      "styleUrls": [],
      "styles": ["\n        :host { display: block; }\n    "],
      "template":
        "<ng-content select=\"clr-stack-header\"></ng-content>\n<div class=\"stack-view\"><ng-content></ng-content></div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "clrStackSave",
          "defaultValue": "new EventEmitter<void>(false)",
          "line": 27,
          "type": "EventEmitter<void>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_editMode",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [112]
        },
        {
          "name": "editable",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "<p>Undocumented experimental feature: inline editing.</p>\n",
          "line": 25
        },
        {
          "name": "editingChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "type": "EventEmitter<boolean>",
          "optional": false,
          "description": "",
          "line": 31
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'clr-stack-view',\n  template: `\n        <ng-content select=\"clr-stack-header\"></ng-content>\n        <div class=\"stack-view\"><ng-content></ng-content></div>\n    `,\n  // Custom elements are inline by default.\n  styles: [\n    `\n        :host { display: block; }\n    `,\n  ],\n})\nexport class ClrStackView {\n  /**\n   * Undocumented experimental feature: inline editing.\n   */\n  editable: boolean = false;\n\n  @Output('clrStackSave') save: EventEmitter<void> = new EventEmitter<void>(false);\n\n  private _editMode: boolean = false;\n\n  editingChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  get editing(): boolean {\n    return this.editable && this._editMode;\n  }\n\n  set editing(value: boolean) {\n    if (this.editable) {\n      this._editMode = value;\n      this.editingChange.emit(value);\n      if (!value) {\n        this.save.emit(null);\n      }\n    }\n  }\n  /**\n   * End of undocumented experimental feature.\n   */\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "\n        :host { display: block; }\n    \n",
      "accessors": {
        "editing": {
          "name": "editing",
          "setSignature": {
            "name": "editing",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "editing",
            "type": "boolean",
            "returnType": "boolean",
            "line": 33
          }
        }
      }
    },
    {
      "name": "ClrStepper",
      "id": "component-ClrStepper-c50d384654257ecb4241acd56b92613c",
      "file": "src/clr-angular/accordion/stepper/stepper.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "StepperService"
        },
        {
          "name": "{ provide: AccordionService, useExisting: StepperService }"
        }
      ],
      "selector": "form[clrStepper]",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrInitialStep",
          "line": 39,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "form",
          "type": "FormGroupDirective | NgForm",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "panels",
          "type": "QueryList<ClrStepperPanel>",
          "optional": false,
          "description": "",
          "line": 41,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrStepperPanel, {descendants: true}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 42
        }
      ],
      "methodsClass": [
        {
          "name": "listenForDOMChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 96,
          "modifierKind": [112]
        },
        {
          "name": "listenForFormResetChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 75,
          "modifierKind": [112]
        },
        {
          "name": "listenForPanelsCompleted",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 81,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 61,
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 51
        },
        {
          "name": "setPanelsWithFormErrors",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "modifierKind": [112]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  ContentChildren,\n  QueryList,\n  Optional,\n  ChangeDetectionStrategy,\n  Input,\n  SimpleChanges,\n  OnInit,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n} from '@angular/core';\nimport { FormGroupDirective, NgForm } from '@angular/forms';\nimport { startWith, filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\nimport { StepperService } from './providers/stepper.service';\nimport { AccordionService } from '../providers/accordion.service';\nimport { ClrStepperPanel } from './stepper-panel';\n\n@Component({\n  selector: 'form[clrStepper]',\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[class.clr-accordion]': 'true',\n    '[class.clr-stepper-forms]': 'true',\n  },\n  providers: [StepperService, { provide: AccordionService, useExisting: StepperService }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClrStepper implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n  @Input('clrInitialStep') initialPanel: string;\n  @ContentChildren(ClrStepperPanel, { descendants: true })\n  panels: QueryList<ClrStepperPanel>;\n  subscriptions: Subscription[] = [];\n  form: FormGroupDirective | NgForm;\n\n  constructor(\n    @Optional() private formGroup: FormGroupDirective,\n    @Optional() private ngForm: NgForm,\n    private stepperService: StepperService\n  ) {}\n\n  ngOnInit() {\n    if (!this.formGroup && !this.ngForm) {\n      throw new Error('To use stepper a Reactive or Template Form is required.');\n    }\n\n    this.form = this.formGroup ? this.formGroup : this.ngForm;\n    this.subscriptions.push(this.listenForPanelsCompleted());\n    this.subscriptions.push(this.listenForFormResetChanges());\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.initialPanel.currentValue !== changes.initialPanel.previousValue) {\n      this.stepperService.overrideInitialPanel(this.initialPanel);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.subscriptions.push(this.listenForDOMChanges());\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  private listenForFormResetChanges() {\n    return this.form.statusChanges\n      .pipe(filter(() => this.form.pristine)) // https://github.com/angular/angular/issues/10887\n      .subscribe(() => this.stepperService.resetPanels());\n  }\n\n  private listenForPanelsCompleted() {\n    return this.stepperService.panelsCompleted.subscribe(panelsCompleted => {\n      if (panelsCompleted && this.form.valid) {\n        this.form.ngSubmit.emit();\n      } else if (!this.form.valid && this.form.touched) {\n        this.setPanelsWithFormErrors();\n      }\n    });\n  }\n\n  private setPanelsWithFormErrors() {\n    const panelsWithErrors = this.panels.reduce((panels, p) => (p.formGroup.invalid ? [...panels, p.id] : panels), []);\n    this.stepperService.setPanelsWithErrors(panelsWithErrors);\n  }\n\n  private listenForDOMChanges() {\n    return this.panels.changes.pipe(startWith(this.panels)).subscribe(panels => {\n      this.stepperService.updatePanelOrder(panels.toArray().map(p => p.id));\n\n      if (this.initialPanel) {\n        this.stepperService.overrideInitialPanel(this.initialPanel);\n      }\n    });\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "formGroup",
            "type": "FormGroupDirective"
          },
          {
            "name": "ngForm",
            "type": "NgForm"
          },
          {
            "name": "stepperService",
            "type": "StepperService"
          }
        ],
        "line": 43,
        "jsdoctags": [
          {
            "name": "formGroup",
            "type": "FormGroupDirective",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngForm",
            "type": "NgForm",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stepperService",
            "type": "StepperService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnChanges", "AfterViewInit", "OnDestroy"]
    },
    {
      "name": "ClrStepperPanel",
      "id": "component-ClrStepperPanel-cb7060059920a7144779bb6dac2d34f5",
      "file": "src/clr-angular/accordion/stepper/stepper-panel.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfExpandService"
        },
        {
          "name": "UNIQUE_ID_PROVIDER"
        }
      ],
      "selector": "clr-stepper-panel",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./../accordion-panel.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrAccordionPanelDisabled",
          "defaultValue": "false",
          "line": 41,
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "clrAccordionPanelOpen",
          "defaultValue": "false",
          "line": 42,
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        }
      ],
      "outputsClass": [
        {
          "name": "clrAccordionPanelOpenChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "line": 43,
          "type": "EventEmitter",
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        }
      ],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [114]
        },
        {
          "name": "headerButton",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 44,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'headerButton', {static: false}"
            }
          ]
        },
        {
          "name": "isAccordion",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 45,
          "modifierKind": [112]
        },
        {
          "name": "accordionDescription",
          "type": "QueryList<ClrAccordionDescription>",
          "optional": false,
          "description": "",
          "line": 44,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrAccordionDescription"
            }
          ],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "AccordionStatus",
          "defaultValue": "AccordionStatus",
          "type": "",
          "optional": false,
          "description": "",
          "line": 47,
          "modifierKind": [132],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [114],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "isAccordion",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 48,
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "panel",
          "type": "Observable<AccordionPanelModel>",
          "optional": false,
          "description": "",
          "line": 46,
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "listenToFocusChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "modifierKind": [112]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69
        },
        {
          "name": "triggerAllFormControlValidationIfError",
          "args": [
            {
              "name": "panel",
              "type": "AccordionPanelModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "panel",
              "type": "AccordionPanelModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "collapsePanelOnAnimationDone",
          "args": [
            {
              "name": "panel",
              "type": "AccordionPanelModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 78,
          "jsdoctags": [
            {
              "name": "panel",
              "type": "AccordionPanelModel",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "emitPanelChange",
          "args": [
            {
              "name": "panel",
              "type": "AccordionPanelModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "panel",
              "type": "AccordionPanelModel",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "getAccordionContentId",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 88,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "getAccordionHeaderId",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 92,
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "getPanelStateClasses",
          "args": [
            {
              "name": "panel",
              "type": "AccordionPanelModel"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 84,
          "jsdoctags": [
            {
              "name": "panel",
              "type": "AccordionPanelModel",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 64,
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        },
        {
          "name": "togglePanel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "inheritance": {
            "file": "ClrAccordionPanel"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  Component,\n  ChangeDetectionStrategy,\n  Optional,\n  Inject,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  PLATFORM_ID,\n} from '@angular/core';\nimport { FormGroupName, NgModelGroup } from '@angular/forms';\nimport { tap, filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\n\nimport { UNIQUE_ID_PROVIDER, UNIQUE_ID } from '../../utils/id-generator/id-generator.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { StepperService } from './providers/stepper.service';\nimport { stepAnimation } from '../utils/animation';\nimport { triggerAllFormControlValidation } from '../../utils/forms/validation';\nimport { IfExpandService } from '../../utils/conditional/if-expanded.service';\nimport { AccordionPanelModel } from '../models/accordion.model';\nimport { AccordionStatus } from '../enums/accordion-status.enum';\nimport { ClrAccordionPanel } from '../accordion-panel';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'clr-stepper-panel',\n  templateUrl: './../accordion-panel.html',\n  host: { '[class.clr-accordion-panel]': 'true' },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: stepAnimation,\n  providers: [IfExpandService, UNIQUE_ID_PROVIDER],\n})\nexport class ClrStepperPanel extends ClrAccordionPanel implements OnInit {\n  isAccordion = false;\n\n  @ViewChild('headerButton', { static: false })\n  headerButton: ElementRef;\n  private subscriptions: Subscription[] = [];\n\n  get formGroup() {\n    return this.formGroupName ? this.formGroupName.control : this.ngModelGroup.control;\n  }\n\n  get id() {\n    return this.formGroupName ? this.formGroupName.name : this.ngModelGroup.name;\n  }\n\n  set id(_value) {} // overriding parent id required empty setter\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    public commonStrings: ClrCommonStringsService,\n    @Optional() private formGroupName: FormGroupName,\n    @Optional() private ngModelGroup: NgModelGroup,\n    private stepperService: StepperService,\n    ifExpandService: IfExpandService,\n    @Inject(UNIQUE_ID) id: string\n  ) {\n    super(commonStrings, stepperService, ifExpandService, id);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.panel = this.panel.pipe(tap(panel => this.triggerAllFormControlValidationIfError(panel)));\n    this.stepperService.disablePanel(this.id, true);\n    this.listenToFocusChanges();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  private listenToFocusChanges() {\n    this.subscriptions.push(\n      this.stepperService.activeStep\n        .pipe(filter(panelId => isPlatformBrowser(this.platformId) && panelId === this.id))\n        .subscribe(() => this.headerButton.nativeElement.focus())\n    );\n  }\n\n  private triggerAllFormControlValidationIfError(panel: AccordionPanelModel) {\n    if (panel.status === AccordionStatus.Error) {\n      triggerAllFormControlValidation(this.formGroup);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "formGroupName",
            "type": "FormGroupName"
          },
          {
            "name": "ngModelGroup",
            "type": "NgModelGroup"
          },
          {
            "name": "stepperService",
            "type": "StepperService"
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService"
          },
          {
            "name": "id",
            "type": "string"
          }
        ],
        "line": 55,
        "jsdoctags": [
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "formGroupName",
            "type": "FormGroupName",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngModelGroup",
            "type": "NgModelGroup",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stepperService",
            "type": "StepperService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ifExpandService",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "ClrAccordionPanel",
      "implements": ["OnInit"],
      "accessors": {
        "formGroup": {
          "name": "formGroup",
          "getSignature": {
            "name": "formGroup",
            "type": "",
            "returnType": "",
            "line": 47
          }
        },
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "_value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "_value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "id",
            "type": "",
            "returnType": "",
            "line": 51
          }
        }
      },
      "templateData":
        "<ng-container *ngIf=\"panel | async; let panel\">\n  <div *ngIf=\"panel.status !== AccordionStatus.Inactive\" aria-live=\"assertive\" class=\"clr-sr-only\">\n    <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n  </div>\n\n  <div role=\"group\" [ngClass]=\"getPanelStateClasses(panel)\">\n    <div class=\"clr-accordion-header\">\n      <button\n        type=\"button\"\n        class=\"clr-accordion-header-button\"\n        (click)=\"togglePanel()\"\n        [id]=\"getAccordionHeaderId(panel.templateId)\"\n        [disabled]=\"isAccordion && panel.disabled\"\n        [attr.aria-disabled]=\"!isAccordion && panel.disabled\"\n        [attr.aria-controls]=\"getAccordionContentId(panel.templateId)\"\n        [attr.aria-expanded]=\"panel.open\"\n        [class.clr-accordion-header-has-description]=\"(accordionDescription.changes | async)?.length || accordionDescription.length\"\n        #headerButton\n      >\n        <span class=\"clr-sr-only\">\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Complete\">{{commonStrings.keys.success}}</ng-container>\n        </span>\n        <span class=\"clr-accordion-status\">\n          <clr-icon shape=\"angle\" dir=\"right\" class=\"clr-accordion-angle\"></clr-icon>\n          <span class=\"clr-accordion-number\"></span>\n          <clr-icon shape=\"exclamation-circle\" class=\"clr-accordion-error-icon\"></clr-icon>\n          <clr-icon shape=\"check-circle\" class=\"clr-accordion-complete-icon\"></clr-icon>\n        </span>\n        <ng-content select=\"clr-accordion-title, clr-step-title\"></ng-content>\n        <ng-content select=\"clr-accordion-description, clr-step-description\"></ng-content>\n      </button>\n    </div>\n    <div\n      @skipInitialRender\n      role=\"region\"\n      [id]=\"getAccordionContentId(panel.templateId)\"\n      [attr.aria-hidden]=\"!panel.open\"\n      [attr.aria-labelledby]=\"getAccordionHeaderId(panel.templateId)\"\n    >\n      <div\n        *ngIf=\"panel.open\"\n        @toggle\n        (@toggle.done)=\"collapsePanelOnAnimationDone(panel)\"\n        class=\"clr-accordion-content\">\n        <div class=\"clr-accordion-inner-content\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n"
    },
    {
      "name": "ClrTab",
      "id": "component-ClrTab-9afb844a62bde6adfc0920713e3279a7",
      "file": "src/clr-angular/layout/tabs/tab.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IF_ACTIVE_ID_PROVIDER"
        },
        {
          "name": "AriaService"
        }
      ],
      "selector": "clr-tab",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "id",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "IF_ACTIVE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "ifActiveService",
          "type": "IfActiveService",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [114]
        },
        {
          "name": "tabContent",
          "type": "ClrTabContent",
          "optional": false,
          "description": "",
          "line": 26,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrTabContent, {static: true}"
            }
          ]
        },
        {
          "name": "tabLink",
          "type": "ClrTabLink",
          "optional": false,
          "description": "",
          "line": 24,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrTabLink, {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, Inject } from '@angular/core';\n\nimport { IF_ACTIVE_ID, IF_ACTIVE_ID_PROVIDER, IfActiveService } from '../../utils/conditional/if-active.service';\n\nimport { AriaService } from './providers/aria.service';\nimport { TabsService } from './providers/tabs.service';\nimport { ClrTabContent } from './tab-content';\nimport { ClrTabLink } from './tab-link.directive';\n\n@Component({\n  selector: 'clr-tab',\n  template: `\n        <ng-content></ng-content>\n    `,\n  providers: [IF_ACTIVE_ID_PROVIDER, AriaService],\n})\nexport class ClrTab {\n  @ContentChild(ClrTabLink, { static: true })\n  tabLink: ClrTabLink;\n  @ContentChild(ClrTabContent, { static: true })\n  tabContent: ClrTabContent;\n\n  constructor(\n    public ifActiveService: IfActiveService,\n    @Inject(IF_ACTIVE_ID) public id: number,\n    private tabsService: TabsService\n  ) {\n    tabsService.register(this);\n  }\n\n  ngOnDestroy() {\n    this.tabsService.unregister(this);\n  }\n\n  get active() {\n    return this.ifActiveService.current === this.id;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService"
          },
          {
            "name": "id",
            "type": "number"
          },
          {
            "name": "tabsService",
            "type": "TabsService"
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tabsService",
            "type": "TabsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "active": {
          "name": "active",
          "getSignature": {
            "name": "active",
            "type": "",
            "returnType": "",
            "line": 40
          }
        }
      }
    },
    {
      "name": "ClrTabContent",
      "id": "component-ClrTabContent-70968670958fd589dfaa7ab750bb841e",
      "file": "src/clr-angular/layout/tabs/tab-content.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-tab-content",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-template #tabContentProjectedRef>\n  <section [id]=\"tabContentId\" role=\"tabpanel\" class=\"tab-content\" [class.active]=\"active\"\n           [hidden]=\"!active\"\n           [attr.aria-labelledby]=\"ariaLabelledBy\"\n           [attr.aria-expanded]=\"active\"\n           [attr.aria-hidden]=\"!active\">\n    <ng-content></ng-content>\n  </section>\n</ng-template>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "id",
          "line": 60,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "id",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "IF_ACTIVE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "ifActiveService",
          "type": "IfActiveService",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [114]
        },
        {
          "name": "viewRef",
          "type": "EmbeddedViewRef<ClrTabContent>",
          "optional": false,
          "description": "",
          "line": 39,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EmbeddedViewRef, Inject, Input, OnDestroy, TemplateRef, ViewChild } from '@angular/core';\nimport { IF_ACTIVE_ID, IfActiveService } from '../../utils/conditional/if-active.service';\nimport { AriaService } from './providers/aria.service';\nimport { TabsService } from './providers/tabs.service';\n\nlet nbTabContentComponents: number = 0;\n\n@Component({\n  selector: 'clr-tab-content',\n  template: `\n    <ng-template #tabContentProjectedRef>\n      <section [id]=\"tabContentId\" role=\"tabpanel\" class=\"tab-content\" [class.active]=\"active\"\n               [hidden]=\"!active\"\n               [attr.aria-labelledby]=\"ariaLabelledBy\"\n               [attr.aria-expanded]=\"active\"\n               [attr.aria-hidden]=\"!active\">\n        <ng-content></ng-content>\n      </section>\n    </ng-template>\n    `,\n})\nexport class ClrTabContent implements OnDestroy {\n  constructor(\n    public ifActiveService: IfActiveService,\n    @Inject(IF_ACTIVE_ID) public id: number,\n    private ariaService: AriaService,\n    private tabsService: TabsService\n  ) {\n    if (!this.tabContentId) {\n      this.tabContentId = 'clr-tab-content-' + nbTabContentComponents++;\n    }\n  }\n\n  private viewRef: EmbeddedViewRef<ClrTabContent>;\n\n  // The template must be applied on the top-down phase of view-child initialization to prevent\n  // components in the content from initializing before a content container exists.\n  // Some child components need their container for sizing calculations.\n  /* tslint:disable:no-unused-variable */\n  @ViewChild('tabContentProjectedRef', { static: true })\n  private set templateRef(value: TemplateRef<ClrTabContent>) {\n    this.viewRef = this.tabsService.tabContentViewContainer.createEmbeddedView(value);\n  }\n  /* tslint:enable:no-unused-variable */\n\n  get ariaLabelledBy(): string {\n    return this.ariaService.ariaLabelledBy;\n  }\n\n  get tabContentId(): string {\n    return this.ariaService.ariaControls;\n  }\n\n  @Input('id')\n  set tabContentId(id: string) {\n    this.ariaService.ariaControls = id;\n  }\n\n  get active() {\n    return this.ifActiveService.current === this.id;\n  }\n\n  ngOnDestroy(): void {\n    const index = this.tabsService.tabContentViewContainer.indexOf(this.viewRef);\n    if (index > -1) {\n      this.tabsService.tabContentViewContainer.remove(index);\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService"
          },
          {
            "name": "id",
            "type": "number"
          },
          {
            "name": "ariaService",
            "type": "AriaService"
          },
          {
            "name": "tabsService",
            "type": "TabsService"
          }
        ],
        "line": 27,
        "jsdoctags": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "id",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaService",
            "type": "AriaService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tabsService",
            "type": "TabsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "accessors": {
        "templateRef": {
          "name": "templateRef",
          "setSignature": {
            "name": "templateRef",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "ariaLabelledBy": {
          "name": "ariaLabelledBy",
          "getSignature": {
            "name": "ariaLabelledBy",
            "type": "string",
            "returnType": "string",
            "line": 51
          }
        },
        "tabContentId": {
          "name": "tabContentId",
          "setSignature": {
            "name": "tabContentId",
            "type": "void",
            "args": [
              {
                "name": "id",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "id",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "tabContentId",
            "type": "string",
            "returnType": "string",
            "line": 55
          }
        },
        "active": {
          "name": "active",
          "getSignature": {
            "name": "active",
            "type": "",
            "returnType": "",
            "line": 64
          }
        }
      }
    },
    {
      "name": "ClrTabOverflowContent",
      "id": "component-ClrTabOverflowContent-dee7ad5f94edf5d2ab089eda3a7c16ed",
      "file": "src/clr-angular/layout/tabs/tab-overflow-content.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-tab-overflow-content",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "anchorElem",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "closeOnOutsideClick",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [114],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentESCListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "hostClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignore",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElementClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverOptions",
          "defaultValue": "{}",
          "type": "PopoverOptions",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "updateAnchor",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "anchor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, Injector, SkipSelf } from '@angular/core';\n\nimport { AbstractPopover } from '../../popover/common/abstract-popover';\nimport { Point } from '../../popover/common/popover';\n\n@Component({\n  selector: 'clr-tab-overflow-content',\n  template: `\n        <ng-content></ng-content>\n    `,\n  host: {\n    '[class.dropdown-menu]': 'true',\n  },\n})\nexport class ClrTabOverflowContent extends AbstractPopover {\n  constructor(injector: Injector, @SkipSelf() parentHost: ElementRef) {\n    super(injector, parentHost);\n    this.anchorPoint = Point.BOTTOM_RIGHT;\n    this.popoverPoint = Point.RIGHT_TOP;\n    this.closeOnOutsideClick = true;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "parentHost",
            "type": "ElementRef"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentHost",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "AbstractPopover"
    },
    {
      "name": "ClrTabs",
      "id": "component-ClrTabs-05ba8241d61cf160d04c7485de719ab3",
      "file": "src/clr-angular/layout/tabs/tabs.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfActiveService"
        },
        {
          "name": "ClrPopoverToggleService"
        },
        {
          "name": "TabsService"
        },
        {
          "name": "TABS_ID_PROVIDER"
        }
      ],
      "selector": "clr-tabs",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ul class=\"nav\" role=\"tablist\" [attr.aria-owns]=\"tabIds\" [clrKeyFocus]=\"tabLinkElements\" clrDirection=\"both\"\n    (clrFocusChange)=\"checkFocusVisible()\">\n    <!--tab links-->\n    <ng-container *ngFor=\"let link of tabLinkDirectives\">\n        <ng-container *ngIf=\"link.tabsId === tabsId && !link.inOverflow\">\n            <li role=\"presentation\" class=\"nav-item\">\n                <ng-container [ngTemplateOutlet]=\"link.templateRefContainer.template\"></ng-container>\n            </li>\n        </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"tabsService.overflowTabs.length > 0\">\n        <div class=\"tabs-overflow bottom-right\" [class.open]=\"toggleService.open\" role=\"presentation\">\n            <li role=\"application\" class=\"nav-item\" (click)=\"toggleOverflow($event)\">\n                <button class=\"btn btn-link nav-link dropdown-toggle\" type=\"button\" aria-hidden=\"true\"\n                        [class.active]=\"activeTabInOverflow\" [class.open]=\"inOverflow()\" tabIndex=\"-1\">\n                    <clr-icon shape=\"ellipsis-horizontal\"\n                      [class.is-info]=\"toggleService.open\"\n                      [attr.title]=\"commonStrings.keys.more\"></clr-icon>\n                </button>\n            </li>\n            <!--tab links in overflow menu-->\n            <clr-tab-overflow-content>\n                <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                    <ng-container *ngIf=\"link.tabsId === tabsId && link.inOverflow\"\n                                  [ngTemplateOutlet]=\"link.templateRefContainer.template\">\n                    </ng-container>\n                </ng-container>\n            </clr-tab-overflow-content>\n        </div>\n    </ng-container>\n</ul>\n<ng-container #tabContentViewContainer></ng-container>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrLayout",
          "line": 86,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_tabLinkDirectives",
          "defaultValue": "[]",
          "type": "ClrTabLink[]",
          "optional": false,
          "description": "",
          "line": 103,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 118,
          "modifierKind": [114]
        },
        {
          "name": "ifActiveService",
          "type": "IfActiveService",
          "optional": false,
          "description": "",
          "line": 114,
          "modifierKind": [114]
        },
        {
          "name": "keyFocus",
          "type": "ClrKeyFocus",
          "optional": false,
          "description": "",
          "line": 111,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "ClrKeyFocus, {static: true}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [112]
        },
        {
          "name": "tabLinkElements",
          "defaultValue": "[]",
          "type": "HTMLElement[]",
          "optional": false,
          "description": "",
          "line": 108
        },
        {
          "name": "tabs",
          "type": "QueryList<ClrTab>",
          "optional": false,
          "description": "",
          "line": 101,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrTab"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "tabsId",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 117,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "TABS_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "tabsService",
          "type": "TabsService",
          "optional": false,
          "description": "",
          "line": 116,
          "modifierKind": [114]
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 115,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "checkFocusVisible",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142
        },
        {
          "name": "focusToFirstItemInOverflow",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "modifierKind": [112]
        },
        {
          "name": "inOverflow",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 150
        },
        {
          "name": "listenForOverflowMenuFocusChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 175,
          "modifierKind": [112]
        },
        {
          "name": "listenForTabLinkChanges",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 168,
          "modifierKind": [112]
        },
        {
          "name": "nextFocusedItemIsNotInOverflow",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 189,
          "modifierKind": [112]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 130
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 162
        },
        {
          "name": "toggleOverflow",
          "args": [
            {
              "name": "event",
              "type": "any"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [
        {
          "name": "class.tabs-vertical",
          "line": 158
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  Inject,\n  QueryList,\n  Input,\n  OnDestroy,\n  HostBinding,\n  ViewContainerRef,\n  ViewChild,\n  PLATFORM_ID,\n} from '@angular/core';\n\nimport { IfActiveService } from '../../utils/conditional/if-active.service';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\n\nimport { TabsService } from './providers/tabs.service';\nimport { ClrTab } from './tab';\nimport { ClrTabLink } from './tab-link.directive';\nimport { TABS_ID, TABS_ID_PROVIDER } from './tabs-id.provider';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { TabsLayout } from './enums/tabs-layout.enum';\nimport { Subscription } from 'rxjs';\nimport { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';\nimport { startWith, filter } from 'rxjs/operators';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'clr-tabs',\n  template: `\n        <ul class=\"nav\" role=\"tablist\" [attr.aria-owns]=\"tabIds\" [clrKeyFocus]=\"tabLinkElements\" clrDirection=\"both\"\n            (clrFocusChange)=\"checkFocusVisible()\">\n            <!--tab links-->\n            <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                <ng-container *ngIf=\"link.tabsId === tabsId && !link.inOverflow\">\n                    <li role=\"presentation\" class=\"nav-item\">\n                        <ng-container [ngTemplateOutlet]=\"link.templateRefContainer.template\"></ng-container>\n                    </li>\n                </ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"tabsService.overflowTabs.length > 0\">\n                <div class=\"tabs-overflow bottom-right\" [class.open]=\"toggleService.open\" role=\"presentation\">\n                    <li role=\"application\" class=\"nav-item\" (click)=\"toggleOverflow($event)\">\n                        <button class=\"btn btn-link nav-link dropdown-toggle\" type=\"button\" aria-hidden=\"true\"\n                                [class.active]=\"activeTabInOverflow\" [class.open]=\"inOverflow()\" tabIndex=\"-1\">\n                            <clr-icon shape=\"ellipsis-horizontal\"\n                              [class.is-info]=\"toggleService.open\"\n                              [attr.title]=\"commonStrings.keys.more\"></clr-icon>\n                        </button>\n                    </li>\n                    <!--tab links in overflow menu-->\n                    <clr-tab-overflow-content>\n                        <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                            <ng-container *ngIf=\"link.tabsId === tabsId && link.inOverflow\"\n                                          [ngTemplateOutlet]=\"link.templateRefContainer.template\">\n                            </ng-container>\n                        </ng-container>\n                    </clr-tab-overflow-content>\n                </div>\n            </ng-container>\n        </ul>\n        <ng-container #tabContentViewContainer></ng-container>\n    `,\n  providers: [IfActiveService, ClrPopoverToggleService, TabsService, TABS_ID_PROVIDER],\n})\nexport class ClrTabs implements AfterContentInit, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  private get overflowPosition() {\n    return this._tabLinkDirectives.filter(link => !link.inOverflow).length;\n  }\n\n  /* tslint:disable:no-unused-variable */\n  @ViewChild('tabContentViewContainer', { static: true, read: ViewContainerRef })\n  private set tabContentViewContainer(value: ViewContainerRef) {\n    this.tabsService.tabContentViewContainer = value;\n  }\n  /* tslint:enable:no-unused-variable */\n\n  @Input('clrLayout')\n  set layout(layout: TabsLayout) {\n    if (\n      Object.keys(TabsLayout)\n        .map(key => {\n          return TabsLayout[key];\n        })\n        .indexOf(layout) >= 0\n    ) {\n      this.tabsService.layout = layout;\n    }\n  }\n  get layout(): TabsLayout {\n    return this.tabsService.layout;\n  }\n\n  @ContentChildren(ClrTab) private tabs: QueryList<ClrTab>;\n\n  private _tabLinkDirectives: ClrTabLink[] = [];\n  get tabLinkDirectives(): ClrTabLink[] {\n    return this._tabLinkDirectives;\n  }\n\n  tabLinkElements: HTMLElement[] = [];\n\n  @ViewChild(ClrKeyFocus, { static: true })\n  keyFocus: ClrKeyFocus;\n\n  constructor(\n    public ifActiveService: IfActiveService,\n    public toggleService: ClrPopoverToggleService,\n    public tabsService: TabsService,\n    @Inject(TABS_ID) public tabsId: number,\n    public commonStrings: ClrCommonStringsService,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  get activeTabInOverflow() {\n    return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;\n  }\n\n  get tabIds() {\n    return this.tabsService.children.map(tab => tab.tabLink.tabLinkId).join(' ');\n  }\n\n  ngAfterContentInit() {\n    this.subscriptions.push(this.listenForTabLinkChanges(), this.listenForOverflowMenuFocusChanges());\n\n    if (typeof this.ifActiveService.current === 'undefined' && this.tabLinkDirectives[0]) {\n      this.tabLinkDirectives[0].activate();\n    }\n  }\n\n  toggleOverflow(event: any) {\n    this.toggleService.toggleWithEvent(event);\n  }\n\n  checkFocusVisible() {\n    if (!this.toggleService.open && this.inOverflow()) {\n      this.toggleService.open = true;\n    } else if (this.toggleService.open && !this.inOverflow()) {\n      this.toggleService.open = false;\n    }\n  }\n\n  inOverflow() {\n    return (\n      this.tabLinkElements.indexOf(document.activeElement as HTMLElement) > -1 &&\n      this.keyFocus.current >= this.overflowPosition\n    );\n  }\n\n  @HostBinding('class.tabs-vertical')\n  get isVertical() {\n    return this.layout === TabsLayout.VERTICAL;\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => {\n      sub.unsubscribe();\n    });\n  }\n\n  private listenForTabLinkChanges() {\n    return this.tabs.changes.pipe(startWith(this.tabs.map(tab => tab.tabLink))).subscribe(() => {\n      this._tabLinkDirectives = this.tabs.map(tab => tab.tabLink);\n      this.tabLinkElements = this._tabLinkDirectives.map(tab => tab.el.nativeElement);\n    });\n  }\n\n  private listenForOverflowMenuFocusChanges() {\n    return this.toggleService.openChange.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(open => {\n      if (open && !this.inOverflow()) {\n        this.focusToFirstItemInOverflow();\n      } else if (!open && this.nextFocusedItemIsNotInOverflow()) {\n        this.keyFocus.resetTabFocus();\n      }\n    });\n  }\n\n  private focusToFirstItemInOverflow() {\n    this.keyFocus.moveTo(this.overflowPosition);\n  }\n\n  private nextFocusedItemIsNotInOverflow() {\n    return this.tabLinkElements.find(e => e === document.activeElement) === undefined;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService"
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService"
          },
          {
            "name": "tabsService",
            "type": "TabsService"
          },
          {
            "name": "tabsId",
            "type": "number"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "platformId",
            "type": "Object"
          }
        ],
        "line": 111,
        "jsdoctags": [
          {
            "name": "ifActiveService",
            "type": "IfActiveService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "toggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tabsService",
            "type": "TabsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tabsId",
            "type": "number",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "OnDestroy"],
      "accessors": {
        "overflowPosition": {
          "name": "overflowPosition",
          "getSignature": {
            "name": "overflowPosition",
            "type": "",
            "returnType": "",
            "line": 74
          }
        },
        "tabContentViewContainer": {
          "name": "tabContentViewContainer",
          "setSignature": {
            "name": "tabContentViewContainer",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 80,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "layout": {
          "name": "layout",
          "setSignature": {
            "name": "layout",
            "type": "void",
            "args": [
              {
                "name": "layout",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "layout",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "layout",
            "type": "",
            "returnType": "TabsLayout",
            "line": 97
          }
        },
        "tabLinkDirectives": {
          "name": "tabLinkDirectives",
          "getSignature": {
            "name": "tabLinkDirectives",
            "type": "[]",
            "returnType": "ClrTabLink[]",
            "line": 104
          }
        },
        "activeTabInOverflow": {
          "name": "activeTabInOverflow",
          "getSignature": {
            "name": "activeTabInOverflow",
            "type": "",
            "returnType": "",
            "line": 122
          }
        },
        "tabIds": {
          "name": "tabIds",
          "getSignature": {
            "name": "tabIds",
            "type": "",
            "returnType": "",
            "line": 126
          }
        }
      }
    },
    {
      "name": "ClrTextareaContainer",
      "id": "component-ClrTextareaContainer-f0607a82d634ff0e7163c8ee32ad06cc",
      "file": "src/clr-angular/forms/textarea/textarea-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfErrorService"
        },
        {
          "name": "NgControlService"
        },
        {
          "name": "ControlIdService"
        },
        {
          "name": "ControlClassService"
        }
      ],
      "selector": "clr-textarea-container",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"label\"></ng-content>\n<label *ngIf=\"!label && addGrid()\"></label>\n<div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n    <div class=\"clr-textarea-wrapper\">\n        <ng-content select=\"[clrTextarea]\"></ng-content>\n        <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n    </div>\n    <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n    <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 43
        },
        {
          "name": "control",
          "type": "NgControl",
          "optional": false,
          "description": "",
          "line": 46
        },
        {
          "name": "invalid",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "label",
          "type": "ClrLabel",
          "optional": false,
          "description": "",
          "line": 45,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrLabel, {static: false}"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 41,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "addGrid",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 70
        },
        {
          "name": "controlClass",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 66
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, OnDestroy, Optional } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n\nimport { IfErrorService } from '../common/if-error/if-error.service';\nimport { NgControlService } from '../common/providers/ng-control.service';\nimport { LayoutService } from '../common/providers/layout.service';\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\nimport { ControlIdService } from '../common/providers/control-id.service';\nimport { ClrLabel } from '../common/label';\nimport { ControlClassService } from '../common/providers/control-class.service';\n\n@Component({\n  selector: 'clr-textarea-container',\n  template: `\n        <ng-content select=\"label\"></ng-content>\n        <label *ngIf=\"!label && addGrid()\"></label>\n        <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n            <div class=\"clr-textarea-wrapper\">\n                <ng-content select=\"[clrTextarea]\"></ng-content>\n                <clr-icon *ngIf=\"invalid\" class=\"clr-validate-icon\" shape=\"exclamation-circle\" aria-hidden=\"true\"></clr-icon>\n            </div>\n            <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n            <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n        </div>\n    `,\n  host: {\n    '[class.clr-form-control]': 'true',\n    '[class.clr-form-control-disabled]': 'control?.disabled',\n    '[class.clr-row]': 'addGrid()',\n  },\n  providers: [IfErrorService, NgControlService, ControlIdService, ControlClassService],\n})\nexport class ClrTextareaContainer implements DynamicWrapper, OnDestroy {\n  private subscriptions: Subscription[] = [];\n  invalid = false;\n  _dynamic = false;\n  @ContentChild(ClrLabel, { static: false })\n  label: ClrLabel;\n  control: NgControl;\n\n  constructor(\n    private ifErrorService: IfErrorService,\n    @Optional() private layoutService: LayoutService,\n    private controlClassService: ControlClassService,\n    private ngControlService: NgControlService\n  ) {\n    this.subscriptions.push(\n      this.ifErrorService.statusChanges.subscribe(invalid => {\n        this.invalid = invalid;\n      })\n    );\n    this.subscriptions.push(\n      this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      })\n    );\n  }\n\n  controlClass() {\n    return this.controlClassService.controlClass(this.invalid, this.addGrid());\n  }\n\n  addGrid() {\n    return this.layoutService && !this.layoutService.isVertical();\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.map(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService"
          },
          {
            "name": "layoutService",
            "type": "LayoutService"
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService"
          },
          {
            "name": "ngControlService",
            "type": "NgControlService"
          }
        ],
        "line": 46,
        "jsdoctags": [
          {
            "name": "ifErrorService",
            "type": "IfErrorService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "layoutService",
            "type": "LayoutService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "controlClassService",
            "type": "ControlClassService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ngControlService",
            "type": "NgControlService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["DynamicWrapper", "OnDestroy"]
    },
    {
      "name": "ClrTooltip",
      "id": "component-ClrTooltip-8bf88bd25c887c43386547c60d52e103",
      "file": "src/clr-angular/popover/tooltip/tooltip.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "ClrPopoverToggleService"
        },
        {
          "name": "{ provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef }"
        },
        {
          "name": "UNIQUE_ID_PROVIDER"
        },
        {
          "name": "TooltipIdService"
        }
      ],
      "selector": "clr-tooltip",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef } from '@angular/core';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';\nimport { UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\nimport { TooltipIdService } from './providers/tooltip-id.service';\n\n@Component({\n  selector: 'clr-tooltip',\n  template: `\n        <ng-content></ng-content>\n    `,\n  host: {\n    '[class.tooltip]': 'true',\n  },\n  providers: [\n    ClrPopoverToggleService,\n    { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },\n    // TODO: consider centralizing the unique id string on a service that provides ariaAttributes that need it\n    // AriaService in layout/tabs/providers might be a good starting point.\n    UNIQUE_ID_PROVIDER,\n    TooltipIdService,\n  ],\n})\nexport class ClrTooltip {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrTooltipContent",
      "id": "component-ClrTooltipContent-453e3ab7386bf7245d66dd2f5b0219bf",
      "file": "src/clr-angular/popover/tooltip/tooltip-content.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-tooltip-content",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrPosition",
          "line": 74,
          "type": "string"
        },
        {
          "name": "clrSize",
          "line": 125,
          "type": "string"
        },
        {
          "name": "id",
          "line": 63,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_id",
          "type": "",
          "optional": false,
          "description": "",
          "line": 66,
          "modifierKind": [112]
        },
        {
          "name": "_position",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 52,
          "modifierKind": [112]
        },
        {
          "name": "_size",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 118,
          "modifierKind": [112]
        },
        {
          "name": "uniqueId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 35,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "anchorElem",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 58,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "anchorPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 59,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "closeOnOutsideClick",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 108,
          "modifierKind": [114],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 110,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "documentESCListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 111,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "el",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "hostClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 109,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignore",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 113,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElement",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ignoredElementClickListener",
          "type": "function",
          "optional": false,
          "description": "",
          "line": 112,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverInstance",
          "type": "Popover",
          "optional": false,
          "description": "",
          "line": 53,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverOptions",
          "defaultValue": "{}",
          "type": "PopoverOptions",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "popoverPoint",
          "type": "Point",
          "optional": false,
          "description": "",
          "line": 60,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "renderer",
          "type": "Renderer2",
          "optional": false,
          "description": "",
          "line": 51,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 54,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "toggleService",
          "type": "ClrPopoverToggleService",
          "optional": false,
          "description": "",
          "line": 50,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "updateAnchor",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 56,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "updateId",
          "args": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "anchor",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "attachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachESCListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "detachOutsideClickListener",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 154,
          "modifierKind": [112],
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngAfterViewChecked",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "inheritance": {
            "file": "AbstractPopover"
          }
        },
        {
          "name": "release",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "modifierKind": [113],
          "inheritance": {
            "file": "AbstractPopover"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ElementRef, Inject, Injector, Input, Optional } from '@angular/core';\nimport { AbstractPopover } from '../common/abstract-popover';\nimport { Point } from '../common/popover';\nimport { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';\nimport { UNIQUE_ID } from '../../utils/id-generator/id-generator.service';\nimport { TooltipIdService } from './providers/tooltip-id.service';\n\nconst POSITIONS: string[] = ['bottom-left', 'bottom-right', 'top-left', 'top-right', 'right', 'left'];\n\nconst SIZES: string[] = ['xs', 'sm', 'md', 'lg'];\n\n@Component({\n  selector: 'clr-tooltip-content',\n  template: `\n        <ng-content></ng-content>\n    `,\n  host: {\n    '[class.tooltip-content]': 'true',\n    '[style.opacity]': '1',\n    '[attr.role]': '\"tooltip\"',\n    '[id]': 'id',\n  },\n})\nexport class ClrTooltipContent extends AbstractPopover {\n  constructor(\n    injector: Injector,\n    @Optional()\n    @Inject(POPOVER_HOST_ANCHOR)\n    parentHost: ElementRef,\n    @Inject(UNIQUE_ID) public uniqueId: string,\n    private tooltipIdService: TooltipIdService\n  ) {\n    super(injector, parentHost);\n\n    if (!parentHost) {\n      throw new Error('clr-tooltip-content should only be used inside of a clr-tooltip');\n    }\n\n    // Defaults\n    this.position = 'right';\n    this.size = 'sm';\n\n    // Set the default id in case consumer does not supply a custom id.\n    this.updateId(uniqueId);\n  }\n\n  private _position: string;\n\n  get position() {\n    return this._position;\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  @Input()\n  set id(value: string) {\n    value ? this.updateId(value) : this.updateId('');\n  }\n  private _id;\n\n  private updateId(id: string) {\n    this._id = id;\n    this.tooltipIdService.updateId(id);\n  }\n\n  @Input('clrPosition')\n  set position(position: string) {\n    // Ugh\n    this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.position);\n    if (position && POSITIONS.indexOf(position) > -1) {\n      this._position = position;\n    } else {\n      this._position = 'right';\n    }\n    // Ugh\n    this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.position);\n\n    // set the popover values based on direction\n    switch (position) {\n      case 'top-right':\n        this.anchorPoint = Point.TOP_CENTER;\n        this.popoverPoint = Point.LEFT_BOTTOM;\n        break;\n      case 'top-left':\n        this.anchorPoint = Point.TOP_CENTER;\n        this.popoverPoint = Point.RIGHT_BOTTOM;\n        break;\n      case 'bottom-right':\n        this.anchorPoint = Point.BOTTOM_CENTER;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'bottom-left':\n        this.anchorPoint = Point.BOTTOM_CENTER;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      case 'right':\n        this.anchorPoint = Point.RIGHT_CENTER;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n      case 'left':\n        this.anchorPoint = Point.LEFT_CENTER;\n        this.popoverPoint = Point.RIGHT_TOP;\n        break;\n      default:\n        this.anchorPoint = Point.RIGHT_CENTER;\n        this.popoverPoint = Point.LEFT_TOP;\n        break;\n    }\n  }\n\n  private _size: string;\n\n  get size() {\n    return this._size;\n  }\n\n  @Input('clrSize')\n  set size(size: string) {\n    // Ugh\n    this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.size);\n    if (size && SIZES.indexOf(size) > -1) {\n      this._size = size;\n    } else {\n      this._size = 'sm';\n    }\n    // Ugh\n    this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.size);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "injector",
            "type": "Injector"
          },
          {
            "name": "parentHost",
            "type": "ElementRef"
          },
          {
            "name": "uniqueId",
            "type": "string"
          },
          {
            "name": "tooltipIdService",
            "type": "TooltipIdService"
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parentHost",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "uniqueId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "tooltipIdService",
            "type": "TooltipIdService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "AbstractPopover",
      "accessors": {
        "position": {
          "name": "position",
          "setSignature": {
            "name": "position",
            "type": "void",
            "args": [
              {
                "name": "position",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 74,
            "jsdoctags": [
              {
                "name": "position",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "position",
            "type": "",
            "returnType": "",
            "line": 54
          }
        },
        "id": {
          "name": "id",
          "setSignature": {
            "name": "id",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "id",
            "type": "string",
            "returnType": "string",
            "line": 58
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "args": [
              {
                "name": "size",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 125,
            "jsdoctags": [
              {
                "name": "size",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "",
            "line": 120
          }
        }
      }
    },
    {
      "name": "ClrTree",
      "id": "component-ClrTree-bb8c2dd57d86fcdcd43be6d6d32b113c",
      "file": "src/clr-angular/data/tree-view/tree.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "TREE_FEATURES_PROVIDER"
        },
        {
          "name": "TreeFocusManagerService"
        }
      ],
      "selector": "clr-tree",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content></ng-content>\n<clr-recursive-children *ngIf=\"featuresService.recursion\"\n                        [children]=\"featuresService.recursion.root\"></clr-recursive-children>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrLazy",
          "line": 46,
          "type": "boolean"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "featuresService",
          "type": "TreeFeaturesService<T>",
          "optional": false,
          "description": "",
          "line": 38,
          "modifierKind": [114]
        },
        {
          "name": "rootNodes",
          "type": "QueryList<ClrTreeNode<T>>",
          "optional": false,
          "description": "",
          "line": 69,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrTreeNode"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "tabindex",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 50
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87
        },
        {
          "name": "setRootNodes",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80,
          "modifierKind": [112]
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "focusin",
          "args": [
            {
              "name": "event",
              "type": "FocusEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "line": 57
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  HostListener,\n  Input,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { TreeFocusManagerService } from './tree-focus-manager.service';\nimport { TreeFeaturesService, TREE_FEATURES_PROVIDER } from './tree-features.service';\nimport { ClrTreeNode } from './tree-node';\n\n@Component({\n  selector: 'clr-tree',\n  template: `\n    <ng-content></ng-content>\n    <clr-recursive-children *ngIf=\"featuresService.recursion\"\n                            [children]=\"featuresService.recursion.root\"></clr-recursive-children>\n  `,\n  providers: [TREE_FEATURES_PROVIDER, TreeFocusManagerService],\n  host: {\n    '[attr.tabindex]': 'tabindex',\n    '[attr.role]': '\"tree\"',\n    '[attr.aria-multiselectable]': 'isMultiSelectable',\n  },\n})\nexport class ClrTree<T> implements AfterContentInit, OnDestroy {\n  constructor(\n    public featuresService: TreeFeaturesService<T>,\n    private focusManagerService: TreeFocusManagerService<T>,\n    private el: ElementRef\n  ) {}\n\n  private subscriptions: Subscription[] = [];\n\n  @Input('clrLazy')\n  set lazy(value: boolean) {\n    this.featuresService.eager = !value;\n  }\n\n  tabindex = 0;\n\n  get isMultiSelectable() {\n    return this.featuresService.selectable && this.rootNodes.length > 0;\n  }\n\n  @HostListener('focusin', ['$event'])\n  onFocusIn(event: FocusEvent) {\n    if (event.target === this.el.nativeElement) {\n      // After discussing with the team, I've made it so that when the tree receives focus, the first visible node will be focused.\n      // This will prevent from the page scrolling abruptly to the first selected node if it exist in a deeply nested tree.\n      this.focusManagerService.focusFirstVisibleNode();\n\n      // when the first child gets focus,\n      // tree should no longer have tabindex of 0;\n      delete this.tabindex;\n    }\n  }\n\n  @ContentChildren(ClrTreeNode) private rootNodes: QueryList<ClrTreeNode<T>>;\n\n  ngAfterContentInit() {\n    this.setRootNodes();\n    this.subscriptions.push(\n      this.rootNodes.changes.subscribe(() => {\n        this.setRootNodes();\n      })\n    );\n  }\n\n  private setRootNodes(): void {\n    // if node has no parent, it's a root node\n    // for recursive tree, this.rootNodes registers also nested children\n    // so we have to use filter to extract the ones that are truly root nodes\n    this.focusManagerService.rootNodeModels = this.rootNodes.map(node => node._model).filter(node => !node.parent);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>"
          },
          {
            "name": "focusManagerService",
            "type": "TreeFocusManagerService<T>"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 36,
        "jsdoctags": [
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusManagerService",
            "type": "TreeFocusManagerService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "OnDestroy"],
      "accessors": {
        "lazy": {
          "name": "lazy",
          "setSignature": {
            "name": "lazy",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "isMultiSelectable": {
          "name": "isMultiSelectable",
          "getSignature": {
            "name": "isMultiSelectable",
            "type": "",
            "returnType": "",
            "line": 52
          }
        }
      }
    },
    {
      "name": "ClrTreeNode",
      "id": "component-ClrTreeNode-d89de6c11e3250c03b3c9a618c54041c",
      "file": "src/clr-angular/data/tree-view/tree-node.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "UNIQUE_ID_PROVIDER"
        },
        {
          "name": "TREE_FEATURES_PROVIDER"
        },
        {
          "name": "IfExpandService"
        },
        {
          "name": "{ provide: LoadingListener, useExisting: IfExpandService }"
        }
      ],
      "selector": "clr-tree-node",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./tree-node.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrExpandable",
          "line": 130,
          "type": "boolean | undefined"
        },
        {
          "name": "clrExpanded",
          "line": 136,
          "type": "boolean"
        },
        {
          "name": "clrSelected",
          "line": 101,
          "type": "ClrSelectedState | boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrExpandedChange",
          "defaultValue": "new EventEmitter<boolean>()",
          "line": 143,
          "type": "EventEmitter"
        },
        {
          "name": "clrSelectedChange",
          "defaultValue": "new EventEmitter<ClrSelectedState>(false)",
          "line": 122,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "_model",
          "type": "TreeNodeModel<T>",
          "optional": false,
          "description": "",
          "line": 91
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 75,
          "modifierKind": [114]
        },
        {
          "name": "contentContainer",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 149,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'contentContainer', {read: ElementRef, static: true}"
            }
          ],
          "modifierKind": [112]
        },
        {
          "name": "contentContainerTabindex",
          "defaultValue": "-1",
          "type": "",
          "optional": false,
          "description": "",
          "line": 147
        },
        {
          "name": "expandService",
          "type": "IfExpandService",
          "optional": false,
          "description": "",
          "line": 74,
          "modifierKind": [114]
        },
        {
          "name": "featuresService",
          "type": "TreeFeaturesService<T>",
          "optional": false,
          "description": "",
          "line": 73,
          "modifierKind": [114]
        },
        {
          "name": "nodeId",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 68,
          "decorators": [
            {
              "name": "Inject",
              "stringifiedArguments": "UNIQUE_ID"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "skipEmitChange",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 65,
          "modifierKind": [112]
        },
        {
          "name": "STATES",
          "defaultValue": "ClrSelectedState",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 145,
          "modifierKind": [112]
        },
        {
          "name": "treeNodeLinkList",
          "type": "QueryList<ClrTreeNodeLink>",
          "optional": false,
          "description": "",
          "line": 184,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrTreeNodeLink, {descendants: false}"
            }
          ],
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "broadcastFocusOnContainer",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 208
        },
        {
          "name": "checkTabIndex",
          "args": [
            {
              "name": "nodeId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 195,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "nodeId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "collapseOrFocusParent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 267,
          "modifierKind": [112]
        },
        {
          "name": "expandOrFocusFirstChild",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 252,
          "modifierKind": [112]
        },
        {
          "name": "focusTreeNode",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 201
        },
        {
          "name": "isExpandable",
          "args": [],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 93
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 176
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 151
        },
        {
          "name": "onKeyDown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 212,
          "jsdoctags": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setTabIndex",
          "args": [
            {
              "name": "value",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 190,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "triggerDefaultAction",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 275,
          "modifierKind": [112]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { animate, style, transition, trigger, state } from '@angular/animations';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  PLATFORM_ID,\n  QueryList,\n  SkipSelf,\n  ViewChild,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { KeyCodes } from '@clr/core/common';\nimport { IfExpandService } from '../../utils/conditional/if-expanded.service';\nimport { keyValidator, preventArrowKeyScroll } from '../../utils/focus/key-focus/util';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';\nimport { LoadingListener } from '../../utils/loading/loading-listener';\nimport { DeclarativeTreeNodeModel } from './models/declarative-tree-node.model';\nimport { ClrSelectedState } from './models/selected-state.enum';\nimport { TreeNodeModel } from './models/tree-node.model';\nimport { TreeFeaturesService, TREE_FEATURES_PROVIDER } from './tree-features.service';\nimport { TreeFocusManagerService } from './tree-focus-manager.service';\nimport { ClrTreeNodeLink } from './tree-node-link';\n\n@Component({\n  selector: 'clr-tree-node',\n  templateUrl: './tree-node.html',\n  providers: [\n    UNIQUE_ID_PROVIDER,\n    TREE_FEATURES_PROVIDER,\n    IfExpandService,\n    { provide: LoadingListener, useExisting: IfExpandService },\n  ],\n  animations: [\n    trigger('toggleChildrenAnim', [\n      transition('collapsed => expanded', [style({ height: 0 }), animate(200, style({ height: '*' }))]),\n      transition('expanded => collapsed', [style({ height: '*' }), animate(200, style({ height: 0 }))]),\n      state('expanded', style({ height: '*', 'overflow-y': 'visible' })),\n      state('collapsed', style({ height: 0 })),\n    ]),\n  ],\n  host: {\n    '[attr.role]': '\"treeitem\"',\n    '[class.clr-tree-node]': 'true',\n  },\n})\nexport class ClrTreeNode<T> implements OnInit, OnDestroy {\n  STATES = ClrSelectedState;\n  private skipEmitChange = false;\n\n  constructor(\n    @Inject(UNIQUE_ID) public nodeId: string,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional()\n    @SkipSelf()\n    parent: ClrTreeNode<T>,\n    public featuresService: TreeFeaturesService<T>,\n    public expandService: IfExpandService,\n    public commonStrings: ClrCommonStringsService,\n    private focusManager: TreeFocusManagerService<T>,\n    injector: Injector\n  ) {\n    if (this.featuresService.recursion) {\n      // I'm completely stuck, we have to hack into private properties until either\n      // https://github.com/angular/angular/issues/14935 or https://github.com/angular/angular/issues/15998\n      // are fixed\n      this._model = (<any>injector).view.context.clrModel;\n    } else {\n      // Force cast for now, not sure how to tie the correct type here to featuresService.recursion\n      this._model = new DeclarativeTreeNodeModel(parent ? <DeclarativeTreeNodeModel<T>>parent._model : null);\n    }\n    this._model.nodeId = this.nodeId;\n  }\n\n  _model: TreeNodeModel<T>;\n\n  isExpandable() {\n    if (typeof this.expandable !== 'undefined') {\n      return this.expandable;\n    }\n    return !!this.expandService.expandable || (this._model.children && this._model.children.length > 0);\n  }\n\n  @Input('clrSelected')\n  get selected(): ClrSelectedState | boolean {\n    return this._model.selected.value;\n  }\n  set selected(value: ClrSelectedState | boolean) {\n    this.featuresService.selectable = true;\n    // Gracefully handle falsy states like null or undefined because it's just easier than answering questions.\n    // This shouldn't happen with strict typing on the app's side, but it's not up to us.\n    if (value === null || typeof value === 'undefined') {\n      value = ClrSelectedState.UNSELECTED;\n    }\n    // We match booleans to the corresponding ClrSelectedState\n    if (typeof value === 'boolean') {\n      value = value ? ClrSelectedState.SELECTED : ClrSelectedState.UNSELECTED;\n    }\n    // We propagate only if the tree is in smart mode, and skip emitting the output when we set the input\n    // See https://github.com/vmware/clarity/issues/3073\n    this.skipEmitChange = true;\n    this._model.setSelected(value, this.featuresService.eager, this.featuresService.eager);\n    this.skipEmitChange = false;\n  }\n\n  @Output('clrSelectedChange') selectedChange = new EventEmitter<ClrSelectedState>(false);\n\n  get ariaSelected(): boolean {\n    return this.featuresService.selectable ? this._model.selected.value === ClrSelectedState.SELECTED : null;\n  }\n\n  // Allows the consumer to override our logic deciding if a node is expandable.\n  // Useful for recursive trees that don't want to pre-load one level ahead just to know which nodes are expandable.\n  @Input('clrExpandable') expandable: boolean | undefined;\n\n  // I'm caving on this, for tree nodes I think we can tolerate having a two-way binding on the component\n  // rather than enforce the clrIfExpanded structural directive for dynamic cases. Mostly because for the smart\n  // case, you can't use a structural directive, it would need to go on an ng-container.\n  @Input('clrExpanded')\n  get expanded(): boolean {\n    return this.expandService.expanded;\n  }\n  set expanded(value: boolean) {\n    this.expandService.expanded = value;\n  }\n\n  @Output('clrExpandedChange') expandedChange = new EventEmitter<boolean>();\n\n  private subscriptions: Subscription[] = [];\n\n  contentContainerTabindex = -1;\n  @ViewChild('contentContainer', { read: ElementRef, static: true })\n  private contentContainer: ElementRef;\n\n  ngOnInit() {\n    this._model.expanded = this.expanded;\n    this.subscriptions.push(\n      this._model.selected.pipe(filter(() => !this.skipEmitChange)).subscribe(value => {\n        this.selectedChange.emit(value);\n      })\n    );\n    this.subscriptions.push(\n      this.expandService.expandChange.subscribe(value => {\n        this.expandedChange.emit(value);\n        this._model.expanded = value;\n      })\n    );\n    this.subscriptions.push(\n      this.focusManager.focusRequest.subscribe(nodeId => {\n        if (this.nodeId === nodeId) {\n          this.focusTreeNode();\n        }\n      }),\n      this.focusManager.focusChange.subscribe(nodeId => {\n        this.checkTabIndex(nodeId);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this._model.destroy();\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n  // @ContentChild would have been more succinct\n  // but it doesn't offer a way to query only an immediate child\n  @ContentChildren(ClrTreeNodeLink, { descendants: false })\n  private treeNodeLinkList: QueryList<ClrTreeNodeLink>;\n\n  get treeNodeLink() {\n    return this.treeNodeLinkList && this.treeNodeLinkList.first;\n  }\n\n  private setTabIndex(value: number) {\n    this.contentContainerTabindex = value;\n    this.contentContainer.nativeElement.setAttribute('tabindex', value);\n  }\n\n  private checkTabIndex(nodeId: string): void {\n    if (isPlatformBrowser(this.platformId) && this.nodeId !== nodeId && this.contentContainerTabindex !== -1) {\n      this.setTabIndex(-1);\n    }\n  }\n\n  focusTreeNode(): void {\n    if (isPlatformBrowser(this.platformId) && document.activeElement !== this.contentContainer.nativeElement) {\n      this.setTabIndex(0);\n      this.contentContainer.nativeElement.focus();\n    }\n  }\n\n  broadcastFocusOnContainer() {\n    this.focusManager.broadcastFocusedNode(this.nodeId);\n  }\n\n  onKeyDown(event: KeyboardEvent) {\n    // Two reasons to prevent default behavior:\n    // 1. to prevent scrolling on arrow keys\n    // 2. Assistive Technology focus differs from Keyboard focus behavior.\n    //    By default, pressing arrow key makes AT focus go into the nested content of the item.\n    preventArrowKeyScroll(event);\n\n    // https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-22\n    switch (keyValidator(event.key)) {\n      case KeyCodes.ArrowUp:\n        this.focusManager.focusNodeAbove(this._model);\n        break;\n      case KeyCodes.ArrowDown:\n        this.focusManager.focusNodeBelow(this._model);\n        break;\n      case KeyCodes.ArrowRight:\n        this.expandOrFocusFirstChild();\n        break;\n      case KeyCodes.ArrowLeft:\n        this.collapseOrFocusParent();\n        break;\n      case KeyCodes.Home:\n        this.focusManager.focusFirstVisibleNode();\n        break;\n      case KeyCodes.End:\n        this.focusManager.focusLastVisibleNode();\n        break;\n      case KeyCodes.Enter:\n        this.triggerDefaultAction();\n        break;\n      case KeyCodes.Space:\n        // to prevent scrolling on space key in this specific case\n        event.preventDefault();\n        this.triggerDefaultAction();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private expandOrFocusFirstChild() {\n    if (this.expanded) {\n      // if the node is already expanded and has children, focus its very first child\n      if (this._model.children.length > 0) {\n        this.focusManager.focusNodeBelow(this._model);\n      }\n    } else {\n      // we must check if the node is expandable, in order to set .expanded to true from false\n      // because we shouldn't set .expanded to true if it's not expandable node\n      if (this.isExpandable()) {\n        this.expandService.expanded = true;\n      }\n    }\n  }\n\n  private collapseOrFocusParent() {\n    if (this.expanded) {\n      this.expandService.expanded = false;\n    } else {\n      this.focusManager.focusParent(this._model);\n    }\n  }\n\n  private triggerDefaultAction() {\n    if (this.treeNodeLink) {\n      this.treeNodeLink.activate();\n    } else {\n      if (this.featuresService.selectable) {\n        this._model.toggleSelection(this.featuresService.eager);\n      }\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "nodeId",
            "type": "string"
          },
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "parent",
            "type": "ClrTreeNode<T>"
          },
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>"
          },
          {
            "name": "expandService",
            "type": "IfExpandService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "focusManager",
            "type": "TreeFocusManagerService<T>"
          },
          {
            "name": "injector",
            "type": "Injector"
          }
        ],
        "line": 65,
        "jsdoctags": [
          {
            "name": "nodeId",
            "type": "string",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parent",
            "type": "ClrTreeNode<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expandService",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "focusManager",
            "type": "TreeFocusManagerService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "injector",
            "type": "Injector",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "accessors": {
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 104,
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "ariaSelected": {
          "name": "ariaSelected",
          "getSignature": {
            "name": "ariaSelected",
            "type": "boolean",
            "returnType": "boolean",
            "line": 124
          }
        },
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 139,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "treeNodeLink": {
          "name": "treeNodeLink",
          "getSignature": {
            "name": "treeNodeLink",
            "type": "",
            "returnType": "",
            "line": 186
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div #contentContainer role=\"treeitem\" \n  class=\"clr-tree-node-content-container\"\n  tabindex=\"-1\"\n  [attr.aria-expanded]=\"isExpandable() ? expanded : null\"\n  [attr.aria-selected]=\"ariaSelected\" \n  (keydown)=\"onKeyDown($event)\" \n  (focus)=\"broadcastFocusOnContainer()\">\n  <button\n    *ngIf=\"isExpandable() && !_model.loading && !expandService.loading\"\n    aria-hidden=\"true\"\n    type=\"button\"\n    tabindex=\"-1\"\n    class=\"clr-treenode-caret\"\n    (click)=\"expandService.toggle();\" (focus)=\"focusTreeNode()\">\n    <clr-icon\n      class=\"clr-treenode-caret-icon\" shape=\"caret\"\n      [attr.dir]=\"expandService.expanded ? 'down' : 'right'\"></clr-icon>\n  </button>\n  <div class=\"clr-treenode-spinner-container\" *ngIf=\"expandService.loading || _model.loading\">\n        <span class=\"clr-treenode-spinner spinner\"></span>\n  </div>\n  <div class=\"clr-checkbox-wrapper clr-treenode-checkbox\" *ngIf=\"featuresService.selectable\">\n    <input aria-hidden=\"true\" type=\"checkbox\" id=\"{{nodeId}}-check\" class=\"clr-checkbox\" \n           [checked]=\"_model.selected.value === STATES.SELECTED\"\n           [indeterminate]=\"_model.selected.value === STATES.INDETERMINATE\"\n           (change)=\"_model.toggleSelection(featuresService.eager)\" \n           (focus)=\"focusTreeNode()\"\n           tabindex=\"-1\">\n    <label for=\"{{nodeId}}-check\" class=\"clr-control-label\"></label>\n  </div>\n  <div class=\"clr-treenode-content\" (mousedown)=\"focusTreeNode()\">\n    <ng-content></ng-content>\n    <div class=\"clr-sr-only\" *ngIf=\"featuresService.selectable\">\n        <span *ngIf=\"ariaSelected\">\n          selected \n        </span>\n        <span *ngIf=\"!ariaSelected\">\n          unselected \n        </span>\n    </div>\n  </div>\n</div>\n<div class=\"clr-treenode-children\" \n    [@toggleChildrenAnim]=\"expandService.expanded ? 'expanded' : 'collapsed'\" \n    [attr.role]=\"isExpandable() && !featuresService.recursion ? 'group' : null\">\n  <ng-content select=\"clr-tree-node\"></ng-content>\n  <ng-content select=\"[clrIfExpanded]\"></ng-content>\n  <clr-recursive-children [parent]=\"_model\"></clr-recursive-children>\n</div>\n"
    },
    {
      "name": "ClrVerticalNav",
      "id": "component-ClrVerticalNav-531f3991657f0b6a45310267279d58dc",
      "file": "src/clr-angular/layout/vertical-nav/vertical-nav.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "VerticalNavService"
        },
        {
          "name": "VerticalNavIconService"
        },
        {
          "name": "VerticalNavGroupRegistrationService"
        }
      ],
      "selector": "clr-vertical-nav",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./vertical-nav.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrVerticalNavCollapsed",
          "line": 41,
          "type": "boolean"
        },
        {
          "name": "clrVerticalNavCollapsible",
          "line": 32,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrVerticalNavCollapsedChange",
          "defaultValue": "new EventEmitter<boolean>(true)",
          "line": 46,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_sub",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 63,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 69,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80
        },
        {
          "name": "toggleByButton",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { VerticalNavGroupRegistrationService } from './providers/vertical-nav-group-registration.service';\nimport { VerticalNavIconService } from './providers/vertical-nav-icon.service';\nimport { VerticalNavService } from './providers/vertical-nav.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\n\n@Component({\n  selector: 'clr-vertical-nav',\n  templateUrl: './vertical-nav.html',\n  providers: [VerticalNavService, VerticalNavIconService, VerticalNavGroupRegistrationService],\n  host: {\n    class: 'clr-vertical-nav',\n    '[class.is-collapsed]': 'collapsed',\n    '[class.has-nav-groups]': 'hasNavGroups',\n    '[class.has-icons]': 'hasIcons',\n  },\n})\nexport class ClrVerticalNav implements OnDestroy {\n  get collapsible(): boolean {\n    return this._navService.collapsible;\n  }\n\n  @Input('clrVerticalNavCollapsible')\n  set collapsible(value: boolean) {\n    this._navService.collapsible = value;\n  }\n\n  get collapsed(): boolean {\n    return this._navService.collapsed;\n  }\n\n  @Input('clrVerticalNavCollapsed')\n  set collapsed(value: boolean) {\n    this._navService.collapsed = value;\n  }\n\n  @Output('clrVerticalNavCollapsedChange')\n  private _collapsedChanged: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  get hasNavGroups(): boolean {\n    return this._navGroupRegistrationService.navGroupCount > 0;\n  }\n\n  get hasIcons(): boolean {\n    return this._navIconService.hasIcons;\n  }\n\n  get ariaExpanded(): string {\n    if (!this.collapsible) {\n      return null;\n    }\n    return !this.collapsed ? 'true' : 'false';\n  }\n\n  private _sub: Subscription;\n\n  constructor(\n    private _navService: VerticalNavService,\n    private _navIconService: VerticalNavIconService,\n    private _navGroupRegistrationService: VerticalNavGroupRegistrationService,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    this._sub = this._navService.collapsedChanged.subscribe(value => {\n      this._collapsedChanged.emit(value);\n    });\n  }\n\n  toggleByButton() {\n    this.collapsed = !this.collapsed;\n  }\n\n  ngOnDestroy() {\n    this._sub.unsubscribe();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_navService",
            "type": "VerticalNavService"
          },
          {
            "name": "_navIconService",
            "type": "VerticalNavIconService"
          },
          {
            "name": "_navGroupRegistrationService",
            "type": "VerticalNavGroupRegistrationService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 63,
        "jsdoctags": [
          {
            "name": "_navService",
            "type": "VerticalNavService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_navIconService",
            "type": "VerticalNavIconService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_navGroupRegistrationService",
            "type": "VerticalNavGroupRegistrationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy"],
      "accessors": {
        "collapsible": {
          "name": "collapsible",
          "setSignature": {
            "name": "collapsible",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "collapsible",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "collapsed": {
          "name": "collapsed",
          "setSignature": {
            "name": "collapsed",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "collapsed",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        },
        "hasNavGroups": {
          "name": "hasNavGroups",
          "getSignature": {
            "name": "hasNavGroups",
            "type": "boolean",
            "returnType": "boolean",
            "line": 48
          }
        },
        "hasIcons": {
          "name": "hasIcons",
          "getSignature": {
            "name": "hasIcons",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "ariaExpanded": {
          "name": "ariaExpanded",
          "getSignature": {
            "name": "ariaExpanded",
            "type": "string",
            "returnType": "string",
            "line": 56
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<button type=\"button\" class=\"nav-trigger\"\n        [class.on-collapse]=\"collapsed\"\n        [attr.aria-expanded]=\"ariaExpanded\"\n        [attr.aria-label]=\"commonStrings.keys.verticalNavToggle\"\n        (click)=\"toggleByButton()\"\n        *ngIf=\"collapsible\">\n    <clr-icon shape=\"angle-double\"\n              class=\"nav-trigger-icon\"\n              [attr.dir]=\"(this.collapsed) ? 'right' : 'left'\"\n              [attr.title]=\"(this.collapsed) ? commonStrings.keys.expand : commonStrings.keys.collapse\"></clr-icon>\n</button>\n<!-- Click handler on .nav-content is bad but required :-( -->\n<div class=\"nav-content\">\n    <ng-content></ng-content>\n    <button (click)=\"collapsed = false\" class=\"nav-btn\" *ngIf=\"collapsible && collapsed\"></button>\n</div>\n"
    },
    {
      "name": "ClrVerticalNavGroup",
      "id": "component-ClrVerticalNavGroup-4f6a326809fd83fc80e0b97686ae2573",
      "file": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "IfExpandService"
        },
        {
          "name": "VerticalNavGroupService"
        }
      ],
      "selector": "clr-vertical-nav-group",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./vertical-nav-group.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrVerticalNavGroupExpanded",
          "line": 102,
          "type": "boolean"
        }
      ],
      "outputsClass": [
        {
          "name": "clrVerticalNavGroupExpandedChange",
          "defaultValue": "new EventEmitter<boolean>(true)",
          "line": 112,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_expandAnimationState",
          "defaultValue": "COLLAPSED_STATE",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 116,
          "modifierKind": [112]
        },
        {
          "name": "_subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 114,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 40,
          "modifierKind": [114]
        },
        {
          "name": "wasExpanded",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 87,
          "modifierKind": [112]
        }
      ],
      "methodsClass": [
        {
          "name": "collapseGroup",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124
        },
        {
          "name": "expandAnimationDone",
          "args": [
            {
              "name": "$event",
              "type": "AnimationEvent"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "jsdoctags": [
            {
              "name": "$event",
              "type": "AnimationEvent",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "expandGroup",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 118
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 160
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 169
        },
        {
          "name": "toggleExpand",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 147
        }
      ],
      "hostBindings": [
        {
          "name": "class.is-expanded",
          "line": 90,
          "type": "boolean"
        }
      ],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { AfterContentInit, Component, EventEmitter, HostBinding, Input, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IfExpandService } from '../../utils/conditional/if-expanded.service';\n\nimport { VerticalNavGroupRegistrationService } from './providers/vertical-nav-group-registration.service';\nimport { VerticalNavGroupService } from './providers/vertical-nav-group.service';\nimport { VerticalNavService } from './providers/vertical-nav.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\n\nconst EXPANDED_STATE: string = 'expanded';\nconst COLLAPSED_STATE: string = 'collapsed';\n\n@Component({\n  selector: 'clr-vertical-nav-group',\n  templateUrl: './vertical-nav-group.html',\n  providers: [IfExpandService, VerticalNavGroupService],\n  animations: [\n    trigger('clrExpand', [\n      state(EXPANDED_STATE, style({ height: '*' })),\n      state(COLLAPSED_STATE, style({ height: 0, 'overflow-y': 'hidden', visibility: 'hidden' })),\n      transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, animate('0.2s ease-in-out')),\n    ]),\n  ],\n  host: { class: 'nav-group' },\n})\nexport class ClrVerticalNavGroup implements AfterContentInit, OnDestroy {\n  constructor(\n    private _itemExpand: IfExpandService,\n    private _navGroupRegistrationService: VerticalNavGroupRegistrationService,\n    private _navGroupService: VerticalNavGroupService,\n    private _navService: VerticalNavService,\n    public commonStrings: ClrCommonStringsService\n  ) {\n    this._navGroupRegistrationService.registerNavGroup();\n\n    // FIXME: This subscription handles a corner case\n    // Vertical Nav collapse requires the animation to run first and then\n    // remove the nodes from the DOM. If the user directly sets the input\n    // on the clrIfExpanded directive, we have no chance to run the animation\n    // and wait for it to complete. This subscription makes sure that the\n    // animation states are correct for that edge case.\n    this._subscriptions.push(\n      this._itemExpand.expandChange.subscribe(value => {\n        if (value && this.expandAnimationState === COLLAPSED_STATE) {\n          if (this._navService.collapsed) {\n            this._navService.collapsed = false;\n          }\n          this.expandAnimationState = EXPANDED_STATE;\n        } else if (!value && this.expandAnimationState === EXPANDED_STATE) {\n          this.expandAnimationState = COLLAPSED_STATE;\n        }\n      })\n    );\n\n    // 1. If the nav is collapsing, close the open nav group + save its state\n    // 2. If the nav is expanding, expand the nav group if the previous state was expanded\n    this._subscriptions.push(\n      this._navService.animateOnCollapsed.subscribe((goingToCollapse: boolean) => {\n        if (goingToCollapse && this.expanded) {\n          this.wasExpanded = true;\n          this.expandAnimationState = COLLAPSED_STATE;\n        } else if (!goingToCollapse && this.wasExpanded) {\n          this.expandGroup();\n          this.wasExpanded = false;\n        }\n      })\n    );\n\n    // If a link is clicked, expand the nav group\n    this._subscriptions.push(\n      this._navGroupService.expandChange.subscribe((expand: boolean) => {\n        if (expand && !this.expanded) {\n          this.expandGroup();\n        }\n      })\n    );\n  }\n\n  private wasExpanded: boolean = false;\n\n  @HostBinding('class.is-expanded')\n  get expanded(): boolean {\n    return this._itemExpand.expanded;\n  }\n\n  set expanded(value: boolean) {\n    if (this._itemExpand.expanded !== value) {\n      this._itemExpand.expanded = value;\n      this.expandedChange.emit(value);\n    }\n  }\n\n  @Input('clrVerticalNavGroupExpanded')\n  set userExpandedInput(value: boolean) {\n    value = !!value;\n    if (this.expanded !== value) {\n      // We have to call toggleExpand because some cases require animations to occur first\n      // Directly setting the Expand service value skips the animation and can result in\n      // nodes in the DOM but the nav group still being collapsed\n      this.toggleExpand();\n    }\n  }\n\n  @Output('clrVerticalNavGroupExpandedChange') expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _subscriptions: Subscription[] = [];\n\n  private _expandAnimationState: string = COLLAPSED_STATE;\n\n  expandGroup(): void {\n    this.expanded = true;\n    // Expanded animation occurs after Expand.expand is set to true\n    this.expandAnimationState = EXPANDED_STATE;\n  }\n\n  collapseGroup(): void {\n    // If a Vertical Nav Group toggle button is clicked while the Vertical Nav is in Collapsed state,\n    // the Vertical Nav should be expanded first.\n    this.expandAnimationState = COLLAPSED_STATE;\n  }\n\n  // closes a group after the collapse animation\n  expandAnimationDone($event: AnimationEvent) {\n    if ($event.toState === COLLAPSED_STATE) {\n      this.expanded = false;\n    }\n  }\n\n  get expandAnimationState(): string {\n    return this._expandAnimationState;\n  }\n\n  set expandAnimationState(value: string) {\n    if (value !== this._expandAnimationState) {\n      this._expandAnimationState = value;\n    }\n  }\n\n  toggleExpand(): void {\n    if (this.expanded) {\n      this.collapseGroup();\n    } else {\n      // If nav is collasped, first open the nav\n      if (this._navService.collapsed) {\n        this._navService.collapsed = false;\n      }\n      // then expand the nav group\n      this.expandGroup();\n    }\n  }\n\n  ngAfterContentInit() {\n    // This makes sure that if someone marks a nav group expanded in a collapsed nav\n    // the expanded property is switched back to collapsed state.\n    if (this._navService.collapsed && this.expanded) {\n      this.wasExpanded = true;\n      this.expandAnimationState = COLLAPSED_STATE;\n    }\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    this._navGroupRegistrationService.unregisterNavGroup();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_itemExpand",
            "type": "IfExpandService"
          },
          {
            "name": "_navGroupRegistrationService",
            "type": "VerticalNavGroupRegistrationService"
          },
          {
            "name": "_navGroupService",
            "type": "VerticalNavGroupService"
          },
          {
            "name": "_navService",
            "type": "VerticalNavService"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          }
        ],
        "line": 34,
        "jsdoctags": [
          {
            "name": "_itemExpand",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_navGroupRegistrationService",
            "type": "VerticalNavGroupRegistrationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_navGroupService",
            "type": "VerticalNavGroupService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_navService",
            "type": "VerticalNavService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterContentInit", "OnDestroy"],
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 94,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "userExpandedInput": {
          "name": "userExpandedInput",
          "setSignature": {
            "name": "userExpandedInput",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 102,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "expandAnimationState": {
          "name": "expandAnimationState",
          "setSignature": {
            "name": "expandAnimationState",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 141,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expandAnimationState",
            "type": "string",
            "returnType": "string",
            "line": 137
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class=\"nav-group-content\">\n    <ng-content select=\"[clrVerticalNavLink]\"></ng-content>\n    <button\n        class=\"nav-group-trigger\"\n        type=\"button\"\n        [attr.aria-expanded]=\"expanded\"\n        [attr.aria-label]=\"commonStrings.keys.verticalNavGroupToggle\"\n        (click)=\"toggleExpand()\">\n        <ng-content select=\"[clrVerticalNavIcon]\"></ng-content>\n        <div class=\"nav-group-text\">\n            <ng-content></ng-content>\n        </div>\n        <clr-icon shape=\"caret\"\n                  class=\"nav-group-trigger-icon\"\n                  [attr.dir]=\"(this.expanded) ? 'down' : 'right'\"\n                  [attr.title]=\"(this.expanded) ? commonStrings.keys.collapse : commonStrings.keys.expand\">\n        </clr-icon>\n    </button>\n</div>\n<!--TODO: This animation needs to be added to the clr-vertical-nav-group-children component-->\n<div class=\"nav-group-children\"\n     [@clrExpand]=\"expandAnimationState\"\n     (@clrExpand.done)=\"expandAnimationDone($event)\">\n    <ng-content select=\"[clrIfExpanded], clr-vertical-nav-group-children\"></ng-content>\n</div>\n"
    },
    {
      "name": "ClrVerticalNavGroupChildren",
      "id": "component-ClrVerticalNavGroupChildren-eeafaea0c8a7536e5d0f024b043bc669",
      "file": "src/clr-angular/layout/vertical-nav/vertical-nav-group-children.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-vertical-nav-group-children",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'clr-vertical-nav-group-children',\n  template: `\n        <ng-content></ng-content>\n    `,\n})\nexport class ClrVerticalNavGroupChildren {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "ClrVerticalNavLink",
      "id": "component-ClrVerticalNavLink-5caceccb37c9503e7d05528a026cd982",
      "file": "src/clr-angular/layout/vertical-nav/vertical-nav-link.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "[clrVerticalNavLink]",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-content select=\"[clrVerticalNavIcon]\"></ng-content>\n<span class=\"nav-text\">\n    <ng-content></ng-content>\n</span>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "click",
          "args": [],
          "argsDecorator": [],
          "line": 23
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, HostListener, Optional } from '@angular/core';\nimport { VerticalNavGroupService } from './providers/vertical-nav-group.service';\n\n@Component({\n  selector: '[clrVerticalNavLink]',\n  template: `\n        <ng-content select=\"[clrVerticalNavIcon]\"></ng-content>\n        <span class=\"nav-text\">\n            <ng-content></ng-content>    \n        </span>\n    `,\n  host: { class: 'nav-link' },\n})\nexport class ClrVerticalNavLink {\n  constructor(@Optional() private _navGroupService: VerticalNavGroupService) {}\n\n  @HostListener('click')\n  public expandParentNavGroup(): void {\n    if (this._navGroupService) {\n      this._navGroupService.expand();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_navGroupService",
            "type": "VerticalNavGroupService"
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "_navGroupService",
            "type": "VerticalNavGroupService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrWizard",
      "id": "component-ClrWizard-c42d73632f04069ed2d23d055932267c",
      "file": "src/clr-angular/wizard/wizard.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "WizardNavigationService"
        },
        {
          "name": "PageCollectionService"
        },
        {
          "name": "ButtonHubService"
        },
        {
          "name": "HeaderActionService"
        }
      ],
      "selector": "clr-wizard",
      "styleUrls": [],
      "styles": [],
      "templateUrl": ["./wizard.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrWizardClosable",
          "defaultValue": "true",
          "description":
            "<p>Tells the modal part of the wizard whether it should have a close &quot;X&quot;\nin the top right corner. Set using <code>[clrWizardClosable]</code> input.</p>\n",
          "line": 56
        },
        {
          "name": "clrWizardDisableStepnav",
          "description":
            "<p>Prevents clicks on the links in the stepnav from working.\nSet using <code>[clrWizardDisableStepnav]</code> input.\nA more granular bypassing of navigation which can be useful when your\nClrWizard is in a state of completion and you don&#39;t want users to be\nable to jump backwards and change things.</p>\n",
          "line": 145,
          "type": "boolean"
        },
        {
          "name": "clrWizardForceForwardNavigation",
          "description":
            "<p>Resets page completed states when navigating backwards.\nSet using <code>[clrWizardForceForwardNavigation]</code> input.</p>\n",
          "line": 63,
          "type": "boolean"
        },
        {
          "name": "clrWizardOpen",
          "description":
            "<p>Toggles open/close of the wizard component.\nSet using the <code>[clrWizardOpen]</code> input.</p>\n",
          "line": 78,
          "type": "boolean"
        },
        {
          "name": "clrWizardPreventDefaultCancel",
          "description":
            "<p>Prevents ClrWizard from closing when the cancel button or close &quot;X&quot; is clicked.\nSet using the <code>[clrWizardPreventDefaultCancel]</code> input.</p>\n<p>Note that using stopCancel will require you to create your own calls to <code>close()</code> in your host compone`nt</p>\n<ul>\n<li>to make the ClrWizard work as expected. Useful for doing checks or prompts</li>\n<li>before closing a ClrWizard.</li>\n<li></li>\n</ul>\n",
          "line": 110,
          "type": "boolean"
        },
        {
          "name": "clrWizardPreventDefaultNext",
          "description":
            "<p>Prevents ClrWizard from moving to the next page or closing itself on finishing.\nSet using the <code>[clrWizardPreventDefaultNext]</code> input. Note that using stopNext\nwill require you to create your own calls to .next() and .finish() in your\nhost component to make the ClrWizard work as expected.</p>\n",
          "line": 92,
          "type": "boolean"
        },
        {
          "name": "clrWizardPreventModalAnimation",
          "defaultValue": "false",
          "description":
            "<p>Used to communicate to the underlying modal that animations are not\nwanted. Primary use is for the display of static/inline wizards.\nSet using <code>[clrWizardPreventModalAnimation]</code> input.</p>\n",
          "line": 160,
          "type": "boolean"
        },
        {
          "name": "clrWizardPreventNavigation",
          "description":
            "<p>Prevents ClrWizard from performing any form of navigation away from the current\npage. Set using the <code>[clrWizardPreventNavigation]</code> input.\nNote that stopNavigation is meant to freeze the wizard in place, typically\nduring a long validation or background action where you want the wizard to\ndisplay loading content but not allow the user to execute navigation in\nthe stepnav, close X, or the  back, finish, or next buttons.</p>\n",
          "line": 128,
          "type": "boolean"
        },
        {
          "name": "clrWizardSize",
          "defaultValue": "'xl'",
          "description": "<p>Set the modal size of the wizard. Set using <code>[clrWizardSize]</code> input.</p>\n",
          "line": 50
        }
      ],
      "outputsClass": [
        {
          "name": "clrWizardCurrentPageChanged",
          "defaultValue": "new EventEmitter<any>(false)",
          "description":
            "<p>Emits when the current page has changed. Listen via <code>(clrWizardCurrentPageChanged)</code> event.\noutput. Useful for non-blocking validation.</p>\n",
          "line": 194,
          "type": "EventEmitter<any>"
        },
        {
          "name": "clrWizardOnCancel",
          "defaultValue": "new EventEmitter<any>(false)",
          "description":
            "<p>Emits when the wizard is canceled. Listen via <code>(clrWizardOnCancel)</code> event.\nCan be combined with the <code>[clrWizardPreventDefaultCancel]</code> input to create\nwizard-level custom cancel routines.</p>\n",
          "line": 176,
          "type": "EventEmitter<any>"
        },
        {
          "name": "clrWizardOnFinish",
          "defaultValue": "new EventEmitter<any>(false)",
          "description":
            "<p>Emits when the wizard is completed. Listen via <code>(clrWizardOnFinish)</code> event.\nCan be combined with the <code>[clrWizardPreventDefaultNext]</code> input to create\nwizard-level custom completion routines.</p>\n",
          "line": 183,
          "type": "EventEmitter<any>"
        },
        {
          "name": "clrWizardOnNext",
          "defaultValue": "new EventEmitter<any>(false)",
          "description":
            "<p>Emits when the wizard moves to the next page. Listen via <code>(clrWizardOnNext)</code> event.\nCan be combined with the <code>[clrWizardPreventDefaultNext]</code> input to create\nwizard-level custom navigation routines, which are useful for validation.</p>\n",
          "line": 201,
          "type": "EventEmitter<any>"
        },
        {
          "name": "clrWizardOnPrevious",
          "defaultValue": "new EventEmitter<any>(false)",
          "description":
            "<p>Emits when the wizard moves to the previous page. Can be useful for validation.\nListen via <code>(clrWizardOnPrevious)</code> event.</p>\n",
          "line": 208,
          "type": "EventEmitter<any>"
        },
        {
          "name": "clrWizardOnReset",
          "defaultValue": "new EventEmitter<any>(false)",
          "description": "<p>Emits when the wizard is reset. Listen via <code>(clrWizardOnReset)</code> event.</p>\n",
          "line": 188,
          "type": "EventEmitter<any>"
        },
        {
          "name": "clrWizardOpenChange",
          "defaultValue": "new EventEmitter<boolean>(false)",
          "description":
            "<p>Emits when the wizard is opened or closed.\nListen via <code>(clrWizardOpenChange)</code> event.</p>\n",
          "line": 169,
          "type": "EventEmitter<boolean>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_disableStepnav",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 149,
          "modifierKind": [112]
        },
        {
          "name": "_forceForward",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 67,
          "modifierKind": [112]
        },
        {
          "name": "_open",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 72
        },
        {
          "name": "_stopCancel",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 114,
          "modifierKind": [112]
        },
        {
          "name": "_stopNavigation",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 132,
          "modifierKind": [112]
        },
        {
          "name": "_stopNext",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 96,
          "modifierKind": [112]
        },
        {
          "name": "buttonService",
          "type": "ButtonHubService",
          "optional": false,
          "description": "",
          "line": 242,
          "modifierKind": [114]
        },
        {
          "name": "differ",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 235,
          "modifierKind": [112]
        },
        {
          "name": "headerActions",
          "type": "QueryList<ClrWizardHeaderAction>",
          "optional": false,
          "description": "",
          "line": 211,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrWizardHeaderAction"
            }
          ]
        },
        {
          "name": "headerActionService",
          "type": "HeaderActionService",
          "optional": false,
          "description": "",
          "line": 243,
          "modifierKind": [114]
        },
        {
          "name": "navService",
          "type": "WizardNavigationService",
          "optional": false,
          "description": "",
          "line": 240,
          "modifierKind": [114]
        },
        {
          "name": "pageCollection",
          "type": "PageCollectionService",
          "optional": false,
          "description": "",
          "line": 241,
          "modifierKind": [114]
        },
        {
          "name": "pages",
          "type": "QueryList<ClrWizardPage>",
          "optional": false,
          "description": "",
          "line": 210,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "ClrWizardPage"
            }
          ]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 236,
          "modifierKind": [112]
        },
        {
          "name": "wizardTitle",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 213,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'wizardTitle', {static: false}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "cancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 388,
          "description":
            "<p>Cancels and closes the wizard. Do not use this for an override of the cancel\nthe functionality with <code>[clrWizardPreventDefaultCancel]</code>, <code>[clrWizardPreventPageDefaultCancel]</code>,\nor <code>[clrWizardPagePreventDefault]</code> because it will initiate the same checks\nand event emissions that invoked your event handler. Use <code>ClrWizard.close()</code> instead.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "checkAndCancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 407,
          "description":
            "<p>Checks for alternative cancel flows defined at the current page or\nwizard level. Performs a canceled if not. Emits events that initiate\nthe alternative cancel outputs <code>(clrWizardPageOnCancel)</code> and <code>(clrWizardOnCancel)</code>.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 322,
          "description":
            "<p>Closes the wizard. Call this directly instead of <code>cancel()</code> to implement alternative cancel functionality.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "emitWizardFinished",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 492,
          "modifierKind": [112]
        },
        {
          "name": "finish",
          "args": [
            {
              "name": "skipChecksAndEmits",
              "type": "",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 282,
          "description":
            "<p>Marks Wizard as finished. By default it does not execute event\nemissions or checks before completing and closing. This method is commonly\nused as part of an alternative navigation with <code>[clrWizardPreventDefaultNext]</code>.</p>\n<p>If <code>skipChecksAndEmits</code> is true, the wizard will complete and close\nregardless of the state of its current page. This is useful for alternative\nnavigation where event emissions have already been done and firing them again\nmay cause an event loop.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "skipChecksAndEmits",
              "type": "",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "forceFinish",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 295,
          "description":
            "<p>Marks the wizard as finished but does run checks and emissions.\nGood for a last step in an alternate workflow. Does the same thing as\ncalling <code>ClrWizard.finish(true)</code> or <code>ClrWizard.finish()</code> without a parameter.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "forceNext",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 378,
          "description":
            "<p>Moves the wizard to the next page without the checks and emissions.\nGood for a last step in an alternate workflow.\nAlias for <code>ClrWizard.next(true)</code> or <code>ClrWizard.next()</code></p>\n",
          "modifierKind": [114]
        },
        {
          "name": "goTo",
          "args": [
            {
              "name": "pageId",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 433,
          "description":
            "<p>Navigates to a given page in the Wizard. Navigation will invoke the wizard’s default\nchecks and event emissions.</p>\n<p>The format of the expected ID parameter can be found in the return of the\nClrWizardPage.id getter, usually prefixed with <code>clr-wizard-page-</code> and then either a\nnumeric ID or the ID specified for the <code>ClrWizardPage</code> component’s <code>id</code> input.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "pageId",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "initializeButtons",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 485,
          "modifierKind": [112]
        },
        {
          "name": "listenForCancelChanges",
          "args": [],
          "optional": false,
          "returnType": "Subscription",
          "typeParameters": [],
          "line": 465,
          "modifierKind": [112]
        },
        {
          "name": "listenForFinishedChanges",
          "args": [],
          "optional": false,
          "returnType": "Subscription",
          "typeParameters": [],
          "line": 469,
          "modifierKind": [112]
        },
        {
          "name": "listenForNextPageChanges",
          "args": [],
          "optional": false,
          "returnType": "Subscription",
          "typeParameters": [],
          "line": 451,
          "modifierKind": [112]
        },
        {
          "name": "listenForPageChanges",
          "args": [],
          "optional": false,
          "returnType": "Subscription",
          "typeParameters": [],
          "line": 473,
          "modifierKind": [112]
        },
        {
          "name": "listenForPreviousPageChanges",
          "args": [],
          "optional": false,
          "returnType": "Subscription",
          "typeParameters": [],
          "line": 458,
          "modifierKind": [112]
        },
        {
          "name": "modalCancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 396,
          "description":
            "<p>Overrides behavior of the underlying modal to avoid collisions with\nalternative cancel functionality. In most cases, use <code>ClrWizard.cancel()</code> instead.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "next",
          "args": [
            {
              "name": "skipChecksAndEmits",
              "type": "boolean",
              "defaultValue": "true"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 365,
          "description":
            "<p>By default, <code>next()</code> does not execute event emissions.\nThis method is commonly called as part of an alternative navigation\nwith <code>[clrWizardPreventDefaultNext]</code>. The wizard will move to the next page\nregardless of the state of its current page. This is useful for alternative\nnavigation where event emissions have already been done and firing them again\nmay cause an event loop.</p>\n<p>If <code>skipChecksAndEmits</code> is false, the wizard will execute default checks\nand emit events as normal. This is useful for custom buttons or programmatic\nworkflows that are not executing the wizards default checks and emissions.\nIt is another way to navigate without having to rewrite the wizard’s default\nfunctionality from scratch.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "skipChecksAndEmits",
              "type": "boolean",
              "defaultValue": "true",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngAfterContentInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 258,
          "modifierKind": [114]
        },
        {
          "name": "ngDoCheck",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 264,
          "modifierKind": [114]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 268,
          "modifierKind": [114]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 306,
          "description":
            "<p>Opens the wizard. If there is no current page defined, sets the first page in the wizard to be current.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "previous",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 347,
          "description": "<p>Moves the wizard to the previous page.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 446,
          "description":
            "<p>Reset sets all WizardPages to incomplete and sets the first page in the <code>ClrWizard</code> to\nbe the current page, resetting the wizard navigation.\nUse <code>(clrWizardOnReset)</code> event to reset the data or model of your wizard.</p>\n",
          "modifierKind": [114]
        },
        {
          "name": "toggle",
          "args": [
            {
              "name": "open",
              "type": "boolean"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 336,
          "description":
            "<p>Used to open and close the wizard. By default the wizard will\nclose if invoked with no parameter. If parameter is true wizard will open\nelse if false will close.</p>\n",
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "open",
              "type": "boolean",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateNavOnPageChanges",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 477,
          "modifierKind": [112]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  PLATFORM_ID,\n  Inject,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ButtonHubService } from './providers/button-hub.service';\nimport { HeaderActionService } from './providers/header-actions.service';\nimport { PageCollectionService } from './providers/page-collection.service';\nimport { WizardNavigationService } from './providers/wizard-navigation.service';\nimport { ClrWizardHeaderAction } from './wizard-header-action';\nimport { ClrWizardPage } from './wizard-page';\n\n@Component({\n  selector: 'clr-wizard',\n  providers: [WizardNavigationService, PageCollectionService, ButtonHubService, HeaderActionService],\n  templateUrl: './wizard.html',\n  host: {\n    '[class.clr-wizard]': 'true',\n    '[class.wizard-md]': \"size == 'md'\",\n    '[class.wizard-lg]': \"size == 'lg'\",\n    '[class.wizard-xl]': \"size == 'xl'\",\n    '[class.lastPage]': 'navService.currentPageIsLast',\n  },\n})\nexport class ClrWizard implements OnDestroy, AfterContentInit, DoCheck {\n  /**\n   * Set the modal size of the wizard. Set using `[clrWizardSize]` input.\n   */\n  @Input('clrWizardSize') size = 'xl';\n\n  /**\n   * Tells the modal part of the wizard whether it should have a close \"X\"\n   * in the top right corner. Set using `[clrWizardClosable]` input.\n   */\n  @Input('clrWizardClosable') closable = true;\n\n  /**\n   * Resets page completed states when navigating backwards.\n   * Set using `[clrWizardForceForwardNavigation]` input.\n   */\n  @Input('clrWizardForceForwardNavigation')\n  set forceForward(value: boolean) {\n    this._forceForward = !!value;\n    this.navService.forceForwardNavigation = value;\n  }\n  private _forceForward: boolean = false;\n  get forceForward(): boolean {\n    return this._forceForward;\n  }\n\n  _open = false;\n  /**\n   * Toggles open/close of the wizard component.\n   * Set using the `[clrWizardOpen]` input.\n   */\n  @Input('clrWizardOpen')\n  set clrWizardOpen(open: boolean) {\n    if (open) {\n      this.buttonService.buttonsReady = true;\n    }\n    this._open = open;\n  }\n\n  /**\n   * Prevents ClrWizard from moving to the next page or closing itself on finishing.\n   * Set using the `[clrWizardPreventDefaultNext]` input. Note that using stopNext\n   * will require you to create your own calls to .next() and .finish() in your\n   * host component to make the ClrWizard work as expected.\n   */\n  @Input('clrWizardPreventDefaultNext')\n  set stopNext(value: boolean) {\n    this._stopNext = !!value;\n    this.navService.wizardHasAltNext = value;\n  }\n  private _stopNext: boolean = false;\n  get stopNext() {\n    return this._stopNext;\n  }\n\n  /**\n   * Prevents ClrWizard from closing when the cancel button or close \"X\" is clicked.\n   * Set using the `[clrWizardPreventDefaultCancel]` input.\n   *\n   * Note that using stopCancel will require you to create your own calls to `close()` in your host compone`nt\n   * to make the ClrWizard work as expected. Useful for doing checks or prompts\n   * before closing a ClrWizard.\n   */\n  @Input('clrWizardPreventDefaultCancel')\n  set stopCancel(value: boolean) {\n    this._stopCancel = !!value;\n    this.navService.wizardHasAltCancel = value;\n  }\n  private _stopCancel: boolean = false;\n  get stopCancel(): boolean {\n    return this._stopCancel;\n  }\n\n  /**\n   * Prevents ClrWizard from performing any form of navigation away from the current\n   * page. Set using the `[clrWizardPreventNavigation]` input.\n   * Note that stopNavigation is meant to freeze the wizard in place, typically\n   * during a long validation or background action where you want the wizard to\n   * display loading content but not allow the user to execute navigation in\n   * the stepnav, close X, or the  back, finish, or next buttons.\n   */\n  @Input('clrWizardPreventNavigation')\n  set stopNavigation(value: boolean) {\n    this._stopNavigation = !!value;\n    this.navService.wizardStopNavigation = value;\n  }\n  private _stopNavigation = false;\n  get stopNavigation() {\n    return this._stopNavigation;\n  }\n\n  /**\n   * Prevents clicks on the links in the stepnav from working.\n   * Set using `[clrWizardDisableStepnav]` input.\n   * A more granular bypassing of navigation which can be useful when your\n   * ClrWizard is in a state of completion and you don't want users to be\n   * able to jump backwards and change things.\n   */\n  @Input('clrWizardDisableStepnav')\n  set disableStepnav(value: boolean) {\n    this._disableStepnav = !!value;\n    this.navService.wizardDisableStepnav = value;\n  }\n  private _disableStepnav: boolean = false;\n  get disableStepnav(): boolean {\n    return this._disableStepnav;\n  }\n\n  /**\n   * Used to communicate to the underlying modal that animations are not\n   * wanted. Primary use is for the display of static/inline wizards.\n   * Set using `[clrWizardPreventModalAnimation]` input.\n   */\n  /** @deprecated since 3.0, input should be removed in 4.0 because is only related to inline wizards */\n  @Input('clrWizardPreventModalAnimation') _stopModalAnimations: boolean = false;\n  get stopModalAnimations(): string {\n    return this._stopModalAnimations ? 'true' : 'false';\n  }\n\n  /**\n   * Emits when the wizard is opened or closed.\n   * Listen via `(clrWizardOpenChange)` event.\n   */\n  @Output('clrWizardOpenChange') _openChanged: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n  /**\n   * Emits when the wizard is canceled. Listen via `(clrWizardOnCancel)` event.\n   * Can be combined with the `[clrWizardPreventDefaultCancel]` input to create\n   * wizard-level custom cancel routines.\n   */\n  @Output('clrWizardOnCancel') onCancel: EventEmitter<any> = new EventEmitter<any>(false);\n\n  /**\n   * Emits when the wizard is completed. Listen via `(clrWizardOnFinish)` event.\n   * Can be combined with the `[clrWizardPreventDefaultNext]` input to create\n   * wizard-level custom completion routines.\n   */\n  @Output('clrWizardOnFinish') wizardFinished: EventEmitter<any> = new EventEmitter<any>(false);\n\n  /**\n   * Emits when the wizard is reset. Listen via `(clrWizardOnReset)` event.\n   */\n  @Output('clrWizardOnReset') onReset: EventEmitter<any> = new EventEmitter<any>(false);\n\n  /**\n   * Emits when the current page has changed. Listen via `(clrWizardCurrentPageChanged)` event.\n   * output. Useful for non-blocking validation.\n   */\n  @Output('clrWizardCurrentPageChanged') currentPageChanged: EventEmitter<any> = new EventEmitter<any>(false);\n\n  /**\n   * Emits when the wizard moves to the next page. Listen via `(clrWizardOnNext)` event.\n   * Can be combined with the `[clrWizardPreventDefaultNext]` input to create\n   * wizard-level custom navigation routines, which are useful for validation.\n   */\n  @Output('clrWizardOnNext') onMoveNext: EventEmitter<any> = new EventEmitter<any>(false);\n\n  /**\n   * Emits when the wizard moves to the previous page. Can be useful for validation.\n   * Listen via `(clrWizardOnPrevious)` event.\n   */\n\n  @Output('clrWizardOnPrevious') onMovePrevious: EventEmitter<any> = new EventEmitter<any>(false);\n\n  @ContentChildren(ClrWizardPage) pages: QueryList<ClrWizardPage>;\n  @ContentChildren(ClrWizardHeaderAction) headerActions: QueryList<ClrWizardHeaderAction>;\n  @ViewChild('wizardTitle', { static: false })\n  wizardTitle: ElementRef;\n\n  public get currentPage() {\n    return this.navService.currentPage;\n  }\n\n  public set currentPage(page: ClrWizardPage) {\n    this.navService.goTo(page, true);\n  }\n\n  public get isLast() {\n    return this.navService.currentPageIsLast;\n  }\n\n  public get isFirst() {\n    return this.navService.currentPageIsFirst;\n  }\n\n  public get isStatic() {\n    return (this.elementRef.nativeElement as HTMLElement).classList.contains('clr-wizard--inline');\n  }\n\n  private differ: any; // for marking when the collection of wizard pages has been added to or deleted from\n  private subscriptions: Subscription[] = [];\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    public navService: WizardNavigationService,\n    public pageCollection: PageCollectionService,\n    public buttonService: ButtonHubService,\n    public headerActionService: HeaderActionService,\n    private elementRef: ElementRef,\n    differs: IterableDiffers\n  ) {\n    this.subscriptions.push(\n      this.listenForNextPageChanges(),\n      this.listenForPreviousPageChanges(),\n      this.listenForCancelChanges(),\n      this.listenForFinishedChanges(),\n      this.listenForPageChanges()\n    );\n\n    this.differ = differs.find([]).create(null);\n  }\n\n  public ngAfterContentInit() {\n    this.pageCollection.pages = this.pages;\n    this.headerActionService.wizardHeaderActions = this.headerActions;\n    this.initializeButtons();\n  }\n\n  public ngDoCheck() {\n    this.updateNavOnPageChanges();\n  }\n\n  public ngOnDestroy() {\n    this.subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  /**\n   * Marks Wizard as finished. By default it does not execute event\n   * emissions or checks before completing and closing. This method is commonly\n   * used as part of an alternative navigation with `[clrWizardPreventDefaultNext]`.\n   *\n   * If `skipChecksAndEmits` is true, the wizard will complete and close\n   * regardless of the state of its current page. This is useful for alternative\n   * navigation where event emissions have already been done and firing them again\n   * may cause an event loop.\n   */\n  public finish(skipChecksAndEmits = true) {\n    if (skipChecksAndEmits) {\n      this.forceFinish();\n    } else {\n      this.navService.finish();\n    }\n  }\n\n  /**\n   * Marks the wizard as finished but does run checks and emissions.\n   * Good for a last step in an alternate workflow. Does the same thing as\n   * calling `ClrWizard.finish(true)` or `ClrWizard.finish()` without a parameter.\n   */\n  public forceFinish() {\n    if (this.stopNavigation) {\n      return;\n    }\n\n    this.close();\n  }\n\n  /**\n   * Opens the wizard. If there is no current page defined, sets the first page in the wizard to be current.\n   */\n  public open(): void {\n    this._open = true;\n\n    if (!this.currentPage) {\n      this.navService.setFirstPageCurrent();\n    }\n\n    // Only render buttons when wizard is opened, to avoid chocolate errors\n    this.buttonService.buttonsReady = true;\n\n    this._openChanged.emit(true);\n  }\n\n  /**\n   * Closes the wizard. Call this directly instead of `cancel()` to implement alternative cancel functionality.\n   */\n  public close(): void {\n    if (this.stopNavigation) {\n      return;\n    }\n\n    this._open = false;\n    this._openChanged.emit(false);\n  }\n\n  /**\n   * Used to open and close the wizard. By default the wizard will\n   * close if invoked with no parameter. If parameter is true wizard will open\n   * else if false will close.\n   */\n  public toggle(open: boolean): void {\n    if (open) {\n      this.open();\n    } else {\n      this.close();\n    }\n  }\n\n  /**\n   * Moves the wizard to the previous page.\n   */\n  public previous(): void {\n    this.navService.previous();\n  }\n\n  /**\n   * By default, `next()` does not execute event emissions.\n   * This method is commonly called as part of an alternative navigation\n   * with `[clrWizardPreventDefaultNext]`. The wizard will move to the next page\n   * regardless of the state of its current page. This is useful for alternative\n   * navigation where event emissions have already been done and firing them again\n   * may cause an event loop.\n   *\n   * If `skipChecksAndEmits` is false, the wizard will execute default checks\n   * and emit events as normal. This is useful for custom buttons or programmatic\n   * workflows that are not executing the wizards default checks and emissions.\n   * It is another way to navigate without having to rewrite the wizard’s default\n   * functionality from scratch.\n   */\n  public next(skipChecksAndEmits: boolean = true): void {\n    if (skipChecksAndEmits) {\n      this.forceNext();\n    } else {\n      this.navService.next();\n    }\n  }\n\n  /**\n   * Moves the wizard to the next page without the checks and emissions.\n   * Good for a last step in an alternate workflow.\n   * Alias for `ClrWizard.next(true)` or `ClrWizard.next()`\n   */\n  public forceNext(): void {\n    this.navService.forceNext();\n  }\n\n  /**\n   * Cancels and closes the wizard. Do not use this for an override of the cancel\n   * the functionality with `[clrWizardPreventDefaultCancel]`, `[clrWizardPreventPageDefaultCancel]`,\n   * or `[clrWizardPagePreventDefault]` because it will initiate the same checks\n   * and event emissions that invoked your event handler. Use `ClrWizard.close()` instead.\n   */\n  public cancel(): void {\n    this.navService.cancel();\n  }\n\n  /**\n   * Overrides behavior of the underlying modal to avoid collisions with\n   * alternative cancel functionality. In most cases, use `ClrWizard.cancel()` instead.\n   */\n  public modalCancel(): void {\n    if (this.closable) {\n      this.checkAndCancel();\n    }\n  }\n\n  /**\n   * Checks for alternative cancel flows defined at the current page or\n   * wizard level. Performs a canceled if not. Emits events that initiate\n   * the alternative cancel outputs `(clrWizardPageOnCancel)` and `(clrWizardOnCancel)`.\n   */\n  public checkAndCancel(): void {\n    const currentPage = this.currentPage;\n    const currentPageHasOverrides = currentPage.stopCancel || currentPage.preventDefault;\n\n    if (this.stopNavigation) {\n      return;\n    }\n\n    currentPage.pageOnCancel.emit();\n    if (!currentPageHasOverrides) {\n      this.onCancel.emit();\n    }\n\n    if (!this.stopCancel && !currentPageHasOverrides) {\n      this.close();\n    }\n  }\n\n  /**\n   * Navigates to a given page in the Wizard. Navigation will invoke the wizard’s default\n   * checks and event emissions.\n   *\n   * The format of the expected ID parameter can be found in the return of the\n   * ClrWizardPage.id getter, usually prefixed with `clr-wizard-page-` and then either a\n   * numeric ID or the ID specified for the `ClrWizardPage` component’s `id` input.\n   */\n  public goTo(pageId: string): void {\n    if (!pageId) {\n      return;\n    }\n\n    this.navService.goTo(pageId);\n  }\n\n  /**\n   * Reset sets all WizardPages to incomplete and sets the first page in the `ClrWizard` to\n   * be the current page, resetting the wizard navigation.\n   * Use `(clrWizardOnReset)` event to reset the data or model of your wizard.\n   */\n  public reset(): void {\n    this.pageCollection.reset();\n    this.onReset.next();\n  }\n\n  private listenForNextPageChanges(): Subscription {\n    return this.navService.movedToNextPage.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(() => {\n      this.onMoveNext.emit();\n      this.wizardTitle.nativeElement.focus();\n    });\n  }\n\n  private listenForPreviousPageChanges(): Subscription {\n    return this.navService.movedToPreviousPage.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(() => {\n      this.onMovePrevious.emit();\n      this.wizardTitle.nativeElement.focus();\n    });\n  }\n\n  private listenForCancelChanges(): Subscription {\n    return this.navService.notifyWizardCancel.subscribe(() => this.checkAndCancel());\n  }\n\n  private listenForFinishedChanges(): Subscription {\n    return this.navService.wizardFinished.subscribe(() => this.emitWizardFinished());\n  }\n\n  private listenForPageChanges(): Subscription {\n    return this.navService.currentPageChanged.subscribe(() => this.currentPageChanged.emit());\n  }\n\n  private updateNavOnPageChanges(): void {\n    const changes = this.differ.diff(this.pages);\n    if (changes) {\n      changes.forEachAddedItem(() => this.navService.updateNavigation());\n      changes.forEachRemovedItem(() => this.navService.updateNavigation());\n    }\n  }\n\n  private initializeButtons(): void {\n    // Only trigger buttons ready if default is open (inlined)\n    if (this._open) {\n      this.buttonService.buttonsReady = true;\n    }\n  }\n\n  private emitWizardFinished(): void {\n    if (!this.stopNext) {\n      this.forceFinish();\n    }\n    this.wizardFinished.emit();\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "platformId",
            "type": "Object"
          },
          {
            "name": "navService",
            "type": "WizardNavigationService"
          },
          {
            "name": "pageCollection",
            "type": "PageCollectionService"
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService"
          },
          {
            "name": "headerActionService",
            "type": "HeaderActionService"
          },
          {
            "name": "elementRef",
            "type": "ElementRef"
          },
          {
            "name": "differs",
            "type": "IterableDiffers"
          }
        ],
        "line": 236,
        "jsdoctags": [
          {
            "name": "platformId",
            "type": "Object",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "navService",
            "type": "WizardNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "pageCollection",
            "type": "PageCollectionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "headerActionService",
            "type": "HeaderActionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "elementRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "differs",
            "type": "IterableDiffers",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnDestroy", "AfterContentInit", "DoCheck"],
      "accessors": {
        "forceForward": {
          "name": "forceForward",
          "setSignature": {
            "name": "forceForward",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 63,
            "description":
              "<p>Resets page completed states when navigating backwards.\nSet using <code>[clrWizardForceForwardNavigation]</code> input.</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "forceForward",
            "type": "boolean",
            "returnType": "boolean",
            "line": 68
          }
        },
        "clrWizardOpen": {
          "name": "clrWizardOpen",
          "setSignature": {
            "name": "clrWizardOpen",
            "type": "void",
            "args": [
              {
                "name": "open",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 78,
            "description":
              "<p>Toggles open/close of the wizard component.\nSet using the <code>[clrWizardOpen]</code> input.</p>\n",
            "jsdoctags": [
              {
                "name": "open",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "stopNext": {
          "name": "stopNext",
          "setSignature": {
            "name": "stopNext",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 92,
            "description":
              "<p>Prevents ClrWizard from moving to the next page or closing itself on finishing.\nSet using the <code>[clrWizardPreventDefaultNext]</code> input. Note that using stopNext\nwill require you to create your own calls to .next() and .finish() in your\nhost component to make the ClrWizard work as expected.</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "stopNext",
            "type": "",
            "returnType": "",
            "line": 97
          }
        },
        "stopCancel": {
          "name": "stopCancel",
          "setSignature": {
            "name": "stopCancel",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 110,
            "description":
              "<p>Prevents ClrWizard from closing when the cancel button or close &quot;X&quot; is clicked.\nSet using the <code>[clrWizardPreventDefaultCancel]</code> input.</p>\n<p>Note that using stopCancel will require you to create your own calls to <code>close()</code> in your host compone`nt</p>\n<ul>\n<li>to make the ClrWizard work as expected. Useful for doing checks or prompts</li>\n<li>before closing a ClrWizard.</li>\n<li></li>\n</ul>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "stopCancel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 115
          }
        },
        "stopNavigation": {
          "name": "stopNavigation",
          "setSignature": {
            "name": "stopNavigation",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 128,
            "description":
              "<p>Prevents ClrWizard from performing any form of navigation away from the current\npage. Set using the <code>[clrWizardPreventNavigation]</code> input.\nNote that stopNavigation is meant to freeze the wizard in place, typically\nduring a long validation or background action where you want the wizard to\ndisplay loading content but not allow the user to execute navigation in\nthe stepnav, close X, or the  back, finish, or next buttons.</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "stopNavigation",
            "type": "",
            "returnType": "",
            "line": 133
          }
        },
        "disableStepnav": {
          "name": "disableStepnav",
          "setSignature": {
            "name": "disableStepnav",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 145,
            "description":
              "<p>Prevents clicks on the links in the stepnav from working.\nSet using <code>[clrWizardDisableStepnav]</code> input.\nA more granular bypassing of navigation which can be useful when your\nClrWizard is in a state of completion and you don&#39;t want users to be\nable to jump backwards and change things.</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disableStepnav",
            "type": "boolean",
            "returnType": "boolean",
            "line": 150
          }
        },
        "stopModalAnimations": {
          "name": "stopModalAnimations",
          "getSignature": {
            "name": "stopModalAnimations",
            "type": "string",
            "returnType": "string",
            "line": 161
          }
        },
        "currentPage": {
          "name": "currentPage",
          "setSignature": {
            "name": "currentPage",
            "type": "void",
            "args": [
              {
                "name": "page",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 219,
            "jsdoctags": [
              {
                "name": "page",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "currentPage",
            "type": "",
            "returnType": "",
            "line": 215
          }
        },
        "isLast": {
          "name": "isLast",
          "getSignature": {
            "name": "isLast",
            "type": "",
            "returnType": "",
            "line": 223
          }
        },
        "isFirst": {
          "name": "isFirst",
          "getSignature": {
            "name": "isFirst",
            "type": "",
            "returnType": "",
            "line": 227
          }
        },
        "isStatic": {
          "name": "isStatic",
          "getSignature": {
            "name": "isStatic",
            "type": "",
            "returnType": "",
            "line": 231
          }
        }
      },
      "templateData":
        "<!--\n  ~ Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<clr-modal\n    [clrModalOpen]=\"_open\"\n    [clrModalSize]=\"size\"\n    [clrModalClosable]=\"closable\"\n    [clrModalStaticBackdrop]=\"true\"\n    [clrModalSkipAnimation]=\"stopModalAnimations\"\n    [clrModalOverrideScrollService]=\"isStatic\"\n    [clrModalPreventClose]=\"true\"\n    (clrModalAlternateClose)=\"modalCancel()\">\n\n    <nav class=\"modal-nav clr-wizard-stepnav-wrapper\">\n        <h3 class=\"clr-wizard-title\"><ng-content select=\"clr-wizard-title\"></ng-content></h3>\n        <clr-wizard-stepnav></clr-wizard-stepnav>\n    </nav>\n\n    <h3 class=\"modal-title\">\n        <span tabindex=\"-1\" #wizardTitle class=\"modal-title-text\">\n            <ng-template [ngTemplateOutlet]=\"navService.currentPageTitle\"></ng-template>\n        </span>\n\n        <div class=\"modal-header-actions-wrapper\" *ngIf=\"headerActionService.displayHeaderActionsWrapper\">\n            <div *ngIf=\"headerActionService.showWizardHeaderActions\">\n                <ng-content select=\"clr-wizard-header-action\"></ng-content>\n            </div>\n            <div *ngIf=\"headerActionService.currentPageHasHeaderActions\">\n                <ng-template [ngTemplateOutlet]=\"navService.currentPage.headerActions\"></ng-template>\n            </div>\n        </div>\n    </h3>\n\n    <div class=\"modal-body\">\n        <main clr-wizard-pages-wrapper class=\"clr-wizard-content\">\n            <ng-content></ng-content>\n        </main>\n    </div>\n    <div class=\"modal-footer clr-wizard-footer\">\n        <div class=\"clr-wizard-footer-buttons\">\n            <div *ngIf=\"navService.currentPage && !navService.currentPage.hasButtons\"\n                class=\"clr-wizard-footer-buttons-wrapper\">\n                <ng-content select=\"clr-wizard-button\"></ng-content>\n            </div>\n            <div *ngIf=\"navService.currentPage && navService.currentPage.hasButtons\"\n                class=\"clr-wizard-footer-buttons-wrapper\">\n                <ng-template [ngTemplateOutlet]=\"navService.currentPage.buttons\"></ng-template>\n            </div>\n        </div>\n    </div>\n</clr-modal>\n"
    },
    {
      "name": "ClrWizardButton",
      "id": "component-ClrWizardButton-bc10d5824404422258e6fdaddcc8a301",
      "file": "src/clr-angular/wizard/wizard-button.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-wizard-button",
      "styleUrls": [],
      "styles": ["[aria-hidden=\"true\"] { display: none; }"],
      "template":
        "<button\n    type=\"button\"\n    class=\"btn clr-wizard-btn\"\n    [class.btn-link]=\"isCancel\"\n    [class.clr-wizard-btn--tertiary]=\"isCancel\"\n    [class.btn-outline]=\"isPrevious\"\n    [class.clr-wizard-btn--secondary]=\"isPrevious\"\n    [class.btn-primary]=\"isPrimaryAction\"\n    [class.clr-wizard-btn--primary]=\"isPrimaryAction\"\n    [class.btn-success]=\"isFinish\"\n    [class.btn-danger]=\"isDanger\"\n    [class.disabled]=\"isDisabled\"\n    [attr.disabled]=\"_disabledAttribute\"\n    (click)=\"click()\">\n    <ng-content></ng-content>\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrWizardButtonDisabled",
          "defaultValue": "false",
          "line": 54,
          "type": "boolean"
        },
        {
          "name": "clrWizardButtonHidden",
          "defaultValue": "false",
          "line": 56,
          "type": "boolean"
        },
        {
          "name": "type",
          "defaultValue": "''",
          "line": 52,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "clrWizardButtonClicked",
          "defaultValue": "new EventEmitter<string>(false)",
          "line": 59,
          "type": "EventEmitter<string>"
        }
      ],
      "propertiesClass": [
        {
          "name": "buttonService",
          "type": "ButtonHubService",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [114]
        },
        {
          "name": "navService",
          "type": "WizardNavigationService",
          "optional": false,
          "description": "",
          "line": 61,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "checkDefaultAndCustomType",
          "args": [
            {
              "name": "valueToCheck",
              "type": "string",
              "defaultValue": "''"
            },
            {
              "name": "typeToLookUp",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 63,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "valueToCheck",
              "type": "string",
              "defaultValue": "''",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "typeToLookUp",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "click",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 175
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { ButtonHubService } from './providers/button-hub.service';\nimport { WizardNavigationService } from './providers/wizard-navigation.service';\n\nexport const DEFAULT_BUTTON_TYPES: any = {\n  cancel: 'cancel',\n  previous: 'previous',\n  next: 'next',\n  finish: 'finish',\n  danger: 'danger',\n};\n\nexport const CUSTOM_BUTTON_TYPES: any = {\n  cancel: 'custom-cancel',\n  previous: 'custom-previous',\n  next: 'custom-next',\n  finish: 'custom-finish',\n  danger: 'custom-danger',\n};\n\n@Component({\n  selector: 'clr-wizard-button',\n  template: `\n        <button\n            type=\"button\"\n            class=\"btn clr-wizard-btn\"\n            [class.btn-link]=\"isCancel\"\n            [class.clr-wizard-btn--tertiary]=\"isCancel\"\n            [class.btn-outline]=\"isPrevious\"\n            [class.clr-wizard-btn--secondary]=\"isPrevious\"\n            [class.btn-primary]=\"isPrimaryAction\"\n            [class.clr-wizard-btn--primary]=\"isPrimaryAction\"\n            [class.btn-success]=\"isFinish\"\n            [class.btn-danger]=\"isDanger\"\n            [class.disabled]=\"isDisabled\"\n            [attr.disabled]=\"_disabledAttribute\"\n            (click)=\"click()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n  host: { class: 'clr-wizard-btn-wrapper', '[attr.aria-hidden]': 'isHidden' },\n  styles: ['[aria-hidden=\"true\"] { display: none; }'],\n})\nexport class ClrWizardButton {\n  @Input('type') public type: string = '';\n\n  @Input('clrWizardButtonDisabled') public disabled: boolean = false;\n\n  @Input('clrWizardButtonHidden') public hidden: boolean = false;\n\n  // EventEmitter which is emitted when a button is clicked.\n  @Output('clrWizardButtonClicked') wasClicked: EventEmitter<string> = new EventEmitter<string>(false);\n\n  constructor(public navService: WizardNavigationService, public buttonService: ButtonHubService) {}\n\n  private checkDefaultAndCustomType(valueToCheck: string = '', typeToLookUp: string) {\n    if (DEFAULT_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n      return true;\n    }\n    if (CUSTOM_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n      return true;\n    }\n    return false;\n  }\n\n  public get isCancel(): boolean {\n    return this.checkDefaultAndCustomType(this.type, 'cancel');\n  }\n\n  public get isNext(): boolean {\n    return this.checkDefaultAndCustomType(this.type, 'next');\n  }\n\n  public get isPrevious(): boolean {\n    return this.checkDefaultAndCustomType(this.type, 'previous');\n  }\n\n  public get isFinish(): boolean {\n    return this.checkDefaultAndCustomType(this.type, 'finish');\n  }\n\n  public get isDanger(): boolean {\n    return this.checkDefaultAndCustomType(this.type, 'danger');\n  }\n\n  public get isPrimaryAction(): boolean {\n    return this.isNext || this.isDanger || this.isFinish;\n  }\n\n  public get _disabledAttribute(): string | null {\n    if (this.isDisabled) {\n      return '';\n    }\n    return null;\n  }\n\n  public get isDisabled(): boolean {\n    // dealing with negatives here. cognitively easier to think of it like this...\n    const disabled = true;\n    const nav = this.navService;\n    const page = this.navService.currentPage;\n\n    // Ensure we don't change the response until buttons are ready to avoid chocolate\n    if (!this.buttonService.buttonsReady) {\n      return !disabled;\n    }\n\n    if (this.disabled || nav.wizardStopNavigation || !page) {\n      return true;\n    }\n\n    if (this.isCancel) {\n      return !disabled;\n    }\n\n    if (this.isPrevious && (nav.currentPageIsFirst || page.previousStepDisabled)) {\n      return disabled;\n    }\n\n    if (this.isDanger && !page.readyToComplete) {\n      return disabled;\n    }\n\n    if (this.isNext && (nav.currentPageIsLast || !page.readyToComplete)) {\n      return disabled;\n    }\n\n    if (this.isFinish && (!nav.currentPageIsLast || !page.readyToComplete)) {\n      return disabled;\n    }\n\n    return !disabled;\n  }\n\n  public get isHidden(): boolean {\n    // dealing with negatives here. cognitively easier to think of it like this...\n    const hidden = true;\n    const nav = this.navService;\n\n    // Ensure we don't change the response until buttons are ready to avoid chocolate\n    if (!this.buttonService.buttonsReady) {\n      return !hidden;\n    }\n\n    if (this.hidden) {\n      return true;\n    }\n\n    if (this.isCancel) {\n      return !hidden;\n    }\n\n    if (this.isPrevious && nav.currentPageIsFirst) {\n      return hidden;\n    }\n\n    if (this.isNext && nav.currentPageIsLast) {\n      return hidden;\n    }\n\n    if (this.isFinish && !nav.currentPageIsLast) {\n      return hidden;\n    }\n\n    return !hidden;\n  }\n\n  click(): void {\n    if (this.isDisabled) {\n      return;\n    }\n\n    this.wasClicked.emit(this.type);\n    this.buttonService.buttonClicked(this.type);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "[aria-hidden=\"true\"] { display: none; }\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "navService",
            "type": "WizardNavigationService"
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService"
          }
        ],
        "line": 59,
        "jsdoctags": [
          {
            "name": "navService",
            "type": "WizardNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "isCancel": {
          "name": "isCancel",
          "getSignature": {
            "name": "isCancel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 73
          }
        },
        "isNext": {
          "name": "isNext",
          "getSignature": {
            "name": "isNext",
            "type": "boolean",
            "returnType": "boolean",
            "line": 77
          }
        },
        "isPrevious": {
          "name": "isPrevious",
          "getSignature": {
            "name": "isPrevious",
            "type": "boolean",
            "returnType": "boolean",
            "line": 81
          }
        },
        "isFinish": {
          "name": "isFinish",
          "getSignature": {
            "name": "isFinish",
            "type": "boolean",
            "returnType": "boolean",
            "line": 85
          }
        },
        "isDanger": {
          "name": "isDanger",
          "getSignature": {
            "name": "isDanger",
            "type": "boolean",
            "returnType": "boolean",
            "line": 89
          }
        },
        "isPrimaryAction": {
          "name": "isPrimaryAction",
          "getSignature": {
            "name": "isPrimaryAction",
            "type": "boolean",
            "returnType": "boolean",
            "line": 93
          }
        },
        "_disabledAttribute": {
          "name": "_disabledAttribute",
          "getSignature": {
            "name": "_disabledAttribute",
            "type": "",
            "returnType": "string | null",
            "line": 97
          }
        },
        "isDisabled": {
          "name": "isDisabled",
          "getSignature": {
            "name": "isDisabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 104
          }
        },
        "isHidden": {
          "name": "isHidden",
          "getSignature": {
            "name": "isHidden",
            "type": "boolean",
            "returnType": "boolean",
            "line": 142
          }
        }
      }
    },
    {
      "name": "ClrWizardHeaderAction",
      "id": "component-ClrWizardHeaderAction-70956becddaf06e2f15559f54332f995",
      "file": "src/clr-angular/wizard/wizard-header-action.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-wizard-header-action",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button\n    type=\"button\"\n    class=\"btn clr-wizard-header-action btn-link\"\n    [id]=\"id\"\n    [class.disabled]=\"disabled\"\n    (click)=\"click()\"\n    [title]=\"title\">\n    <ng-content></ng-content>\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrWizardHeaderActionDisabled",
          "defaultValue": "false",
          "line": 37,
          "type": "boolean"
        },
        {
          "name": "id",
          "defaultValue": "(wizardHeaderActionIndex++).toString()",
          "line": 31,
          "type": "string"
        },
        {
          "name": "title",
          "defaultValue": "''",
          "line": 28,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "actionClicked",
          "defaultValue": "new EventEmitter(false)",
          "line": 39,
          "type": "EventEmitter<string>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "click",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nlet wizardHeaderActionIndex = 0;\n\n@Component({\n  selector: 'clr-wizard-header-action',\n  template: `\n        <button \n            type=\"button\"\n            class=\"btn clr-wizard-header-action btn-link\"\n            [id]=\"id\"\n            [class.disabled]=\"disabled\"\n            (click)=\"click()\"\n            [title]=\"title\">\n            <ng-content></ng-content>\n        </button>\n    `,\n  host: { class: 'clr-wizard-header-action-wrapper' },\n})\nexport class ClrWizardHeaderAction {\n  // title is explanatory text added to the header action\n  @Input('title') title: string = '';\n\n  // If our host has an ID attribute, we use this instead of our index.\n  @Input('id') _id: string = (wizardHeaderActionIndex++).toString();\n\n  public get id(): string {\n    return `clr-wizard-header-action-${this._id}`;\n  }\n\n  @Input('clrWizardHeaderActionDisabled') public disabled: boolean = false;\n\n  @Output('actionClicked') headerActionClicked: EventEmitter<string> = new EventEmitter(false);\n\n  click(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // passing the header action id allows users to have one method that\n    // routes to many different actions based on the type of header action\n    // clicked. this is further aided by users being able to specify ids\n    // for their header actions.\n    this.headerActionClicked.emit(this._id);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "accessors": {
        "id": {
          "name": "id",
          "getSignature": {
            "name": "id",
            "type": "string",
            "returnType": "string",
            "line": 33
          }
        }
      }
    },
    {
      "name": "ClrWizardPage",
      "id": "component-ClrWizardPage-c8aa396ac96cfa9898ada0bbdbf9c142",
      "file": "src/clr-angular/wizard/wizard-page.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-wizard-page",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-content></ng-content>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrWizardPageHasError",
          "description":
            "<p>Sets whether the page has an error and also resolve the &quot;falsy&quot; value. The\ncurrent logic treat a &quot;0&quot; or an empty string as false and likewise will treat any\n&quot;truthy&quot; value as true.</p>\n",
          "line": 222,
          "type": "boolean"
        },
        {
          "name": "clrWizardPageNextDisabled",
          "description": "<p>Sets whether the page should allow forward navigation.</p>\n",
          "line": 129,
          "type": "boolean"
        },
        {
          "name": "clrWizardPagePreventDefault",
          "defaultValue": "false",
          "description":
            "<p>Overrides all actions from the page level, so you can use an alternate function for\nvalidation or data-munging with a ClrWizardPage.onCommit (clrWizardPageOnCommit output),\nClrWizardPage.onCancel (clrWizardPageOnCancel output), or one\nof the granular page-level button click event emitters.</p>\n",
          "line": 238,
          "type": "boolean"
        },
        {
          "name": "clrWizardPagePreventDefaultCancel",
          "description":
            "<p>Overrides the cancel action from the page level. Allows you to use an\nalternate function for validation or data-munging before cancelling the\nwizard when combined with the ClrWizardPage.onCancel\n(the clrWizardPageOnCancel output).</p>\n<p>Requires that you manually close the wizard from your host component,\nusually with a call to Wizard.forceNext() or wizard.next();</p>\n",
          "line": 269,
          "type": "boolean"
        },
        {
          "name": "clrWizardPagePreventDefaultNext",
          "description":
            "<p>Overrides forward navigation from the page level. Allows you to use an\nalternate function for validation or data-munging before moving the\nwizard to the next pagewhen combined with the ClrWizardPage.onCommit\n(clrWizardPageOnCommit) or ClrWizardPage.nextButtonClicked\n(clrWizardPageNext) outputs.</p>\n<p>Requires that you manually tell the wizard to navigate forward from\nthe hostComponent, usually with a call to Wizard.forceNext() or\nwizard.next();</p>\n",
          "line": 315,
          "type": "boolean"
        },
        {
          "name": "clrWizardPagePreviousDisabled",
          "description": "<p>Sets whether the page should allow backward navigation.</p>\n",
          "line": 178,
          "type": "boolean"
        },
        {
          "name": "id",
          "defaultValue": "(wizardPageIndex++).toString()",
          "description":
            "<p>An input value that is used internally to generate the ClrWizardPage ID as\nwell as the step nav item ID.</p>\n<p>Typed as any because it should be able to accept numbers as well as\nstrings. Passing an index for wizard whose pages are created with an\nngFor loop is a common use case.</p>\n",
          "line": 477,
          "type": "any"
        }
      ],
      "outputsClass": [
        {
          "name": "clrWizardPageCustomButton",
          "defaultValue": "new EventEmitter()",
          "line": 464,
          "type": "EventEmitter<string>"
        },
        {
          "name": "clrWizardPageDanger",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits an event when a danger button is clicked and the ClrWizardPage is\nthe wizard&#39;s current page. By default, a danger button will act as\neither a &quot;next&quot; or &quot;finish&quot; button depending on if the ClrWizardPage is the\nlast page or not.</p>\n<p>Can be used in conjunction with the ClrWizardPage.preventDefault\n(clrWizardPagePagePreventDefault) input to implement custom forwards\nor finish navigation at the page level when the danger button is clicked.\nThis is useful if you would like to do validation, save data, or warn\nusers before allowing them to go to the next page in the wizard or\nfinish the wizard.</p>\n<p>Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\nWizard.forceNext() or Wizard.next() from the host component. This\ncombination creates a full replacement of the forward navigation and\nfinish functionality.</p>\n",
          "line": 439,
          "type": "EventEmitter<ClrWizardPage>"
        },
        {
          "name": "clrWizardPageFinish",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits an event when the finish button is clicked and the ClrWizardPage is\nthe wizard&#39;s current page.</p>\n<p>Can be used in conjunction with the ClrWizardPage.preventDefault\n(clrWizardPagePagePreventDefault) input to implement custom finish\nfunctionality at the page level. This is useful if you would like to do\nvalidation, save data, or warn users before allowing them to complete\nthe wizard.</p>\n<p>Note that this requires you to call Wizard.finish() or Wizard.forceFinish()\nfrom the host component. This combination creates a full replacement of\nthe finish functionality.</p>\n",
          "line": 378,
          "type": "EventEmitter<ClrWizardPage>"
        },
        {
          "name": "clrWizardPageNext",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits an event when the next button is clicked and the ClrWizardPage is\nthe wizard&#39;s current page.</p>\n<p>Can be used in conjunction with the ClrWizardPage.preventDefault\n(clrWizardPagePagePreventDefault) input to implement custom forwards\nnavigation at the page level. This is useful if you would like to do\nvalidation, save data, or warn users before allowing them to go\nto the next page in the wizard.</p>\n<p>Note that this requires you to call Wizard.forceNext() or Wizard.next()\nfrom the host component. This combination creates a full replacement of\nthe forward navigation functionality.</p>\n",
          "line": 416,
          "type": "EventEmitter<ClrWizardPage>"
        },
        {
          "name": "clrWizardPageNextDisabledChange",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits when the value of ClrWizardPage.nextStepDisabled changes.\nShould emit the new value of nextStepDisabled.</p>\n",
          "line": 144,
          "type": "EventEmitter<boolean>"
        },
        {
          "name": "clrWizardPageOnCancel",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits an event when the ClrWizardPage invokes the cancel routine for the wizard.</p>\n<p>Can be used in conjunction with the ClrWizardPage.stopCancel\n(clrWizardPagePreventDefaultCancel) or ClrWizardPage.preventDefault\n(clrWizardPagePagePreventDefault) inputs to implement custom cancel\nfunctionality at the page level. This is useful if you would like to do\nvalidation, save data, or warn users before cancelling the wizard.</p>\n<p>Note that this requires you to call Wizard.close() from the host component.\nThis constitues a full replacement of the cancel functionality.</p>\n",
          "line": 359,
          "type": "EventEmitter<ClrWizardPage>"
        },
        {
          "name": "clrWizardPageOnCommit",
          "defaultValue": "new EventEmitter<string>(false)",
          "description":
            "<p>An event emitter carried over from a legacy version of ClrWizardPage.\nFires an event on ClrWizardPage whenever the next or finish buttons\nare clicked and the page is the current page of the Wizard.</p>\n<p>Note that this does not automatically emit an event when a custom\nbutton is used in place of a next or finish button.</p>\n",
          "line": 333,
          "type": "EventEmitter<string>"
        },
        {
          "name": "clrWizardPageOnLoad",
          "defaultValue": "new EventEmitter()",
          "description": "<p>Emits an event when ClrWizardPage becomes the current page of the\nWizard.</p>\n",
          "line": 342,
          "type": "EventEmitter<string>"
        },
        {
          "name": "clrWizardPagePreventDefaultCancelChange",
          "defaultValue": "new EventEmitter()",
          "description": "",
          "line": 282,
          "type": "EventEmitter<boolean>"
        },
        {
          "name": "clrWizardPagePrevious",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits an event when the previous button is clicked and the ClrWizardPage is\nthe wizard&#39;s current page.</p>\n<p>Can be used in conjunction with the ClrWizardPage.preventDefault\n(clrWizardPagePagePreventDefault) input to implement custom backwards\nnavigation at the page level. This is useful if you would like to do\nvalidation, save data, or warn users before allowing them to go\nbackwards in the wizard.</p>\n<p>Note that this requires you to call Wizard.previous()\nfrom the host component. This combination creates a full replacement of\nthe backwards navigation functionality.</p>\n",
          "line": 397,
          "type": "EventEmitter<ClrWizardPage>"
        },
        {
          "name": "clrWizardPagePreviousDisabledChange",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits when the value of ClrWizardPage.previousStepDisabled changes.\nShould emit the new value of previousStepDisabled.</p>\n",
          "line": 194,
          "type": "EventEmitter<boolean>"
        },
        {
          "name": "clrWizardPagePrimary",
          "defaultValue": "new EventEmitter()",
          "description":
            "<p>Emits an event when a next, finish, or danger button is clicked and the\nClrWizardPage is the wizard&#39;s current page.</p>\n<p>Can be used in conjunction with the ClrWizardPage.preventDefault\n(clrWizardPagePagePreventDefault) input to implement custom forwards\nor finish navigation at the page level, regardless of the type of\nprimary button.</p>\n<p>This is useful if you would like to do validation, save data, or warn\nusers before allowing them to go to the next page in the wizard or\nfinish the wizard.</p>\n<p>Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\nWizard.forceNext() or Wizard.next() from the host component. This\ncombination creates a full replacement of the forward navigation and\nfinish functionality.</p>\n",
          "line": 462,
          "type": "EventEmitter<string>"
        }
      ],
      "propertiesClass": [
        {
          "name": "_buttons",
          "type": "ClrWizardPageButtons",
          "optional": false,
          "description":
            "<p>Contains a reference to the buttons defined within the page. If not defined,\nthe wizard defaults to the set of buttons defined as a direct child of the\nwizard.</p>\n",
          "line": 84,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrWizardPageButtons, {static: true}"
            }
          ],
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 2699,
              "end": 2709,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 2699,
                "end": 2700,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 2700,
                "end": 2708,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "_complete",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 522,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 16597,
              "end": 16607,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 16597,
                "end": 16598,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 16598,
                "end": 16606,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "_hasError",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 201,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 5773,
              "end": 5783,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 5773,
                "end": 5774,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 5774,
                "end": 5782,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "_headerActions",
          "type": "ClrWizardPageHeaderActions",
          "optional": false,
          "description":
            "<p>Contains a reference to the header actions defined within the page. If not defined,\nthe wizard defaults to the set of header actions defined as a direct child of the\nwizard.</p>\n",
          "line": 95,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrWizardPageHeaderActions, {static: true}"
            }
          ],
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 3034,
              "end": 3044,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 3034,
                "end": 3035,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 3035,
                "end": 3043,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "_nextStepDisabled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 102,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 3198,
              "end": 3208,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 3198,
                "end": 3199,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 3199,
                "end": 3207,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "_previousStepDisabled",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 151,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 4452,
              "end": 4462,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 4452,
                "end": 4453,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 4453,
                "end": 4461,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "_stopCancel",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 245,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 6884,
              "end": 6894,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 6884,
                "end": 6885,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 6885,
                "end": 6893,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "_stopNext",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 289,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "pos": 8009,
              "end": 8019,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 8009,
                "end": 8010,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 8010,
                "end": 8018,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "buttonService",
          "type": "ButtonHubService",
          "optional": false,
          "description": "",
          "line": 49,
          "modifierKind": [114]
        },
        {
          "name": "pageCollection",
          "type": "PageCollectionService",
          "optional": false,
          "description": "",
          "line": 48,
          "modifierKind": [114]
        },
        {
          "name": "pageNavTitle",
          "type": "ClrWizardPageNavTitle",
          "optional": false,
          "description":
            "<p>Contains a reference to the desired title for the page&#39;s step in the\nnavigation on the left side of the wizard. Can be projected to change the\nnavigation link&#39;s text.</p>\n<p>If not defined, then ClrWizardPage.pageTitle will be displayed in the stepnav.</p>\n",
          "line": 73,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrWizardPageNavTitle, {static: true}"
            }
          ],
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 2372,
              "end": 2382,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 2372,
                "end": 2373,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 2373,
                "end": 2381,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        },
        {
          "name": "pageTitle",
          "type": "ClrWizardPageTitle",
          "optional": false,
          "description":
            "<p>Contains a reference to the page title which is used for a number\nof different tasks for display in the wizard.</p>\n",
          "line": 60,
          "decorators": [
            {
              "name": "ContentChild",
              "stringifiedArguments": "ClrWizardPageTitle, {static: true}"
            }
          ],
          "modifierKind": [114],
          "jsdoctags": [
            {
              "pos": 1958,
              "end": 1968,
              "flags": 0,
              "kind": 288,
              "atToken": {
                "pos": 1958,
                "end": 1959,
                "flags": 0,
                "kind": 57
              },
              "tagName": {
                "pos": 1959,
                "end": 1967,
                "flags": 0,
                "escapedText": "memberof"
              },
              "comment": "<p>WizardPage</p>\n"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "makeCurrent",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 682,
          "description":
            "<p>Uses the nav service to make the ClrWizardPage the current page in the\nwizard. Bypasses all checks but still emits the ClrWizardPage.onLoad\n(clrWizardPageOnLoad) output.</p>\n<p>In most cases, it is better to use the default navigation functions\nin Wizard.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 692,
          "description": "<p>Links the nav service and establishes the current page if one is not defined.</p>\n",
          "modifierKind": [114],
          "jsdoctags": []
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description":
        "<p>The ClrWizardPage component is responsible for displaying the content of each step\nin the wizard workflow.</p>\n<p>ClrWizardPage component has hooks into the navigation service (ClrWizardPage.navService),\npage collection (ClrWizardPage.pageCollection), and button service\n(ClrWizardPage.buttonService). These three providers are shared across the components\nwithin each instance of a Wizard.</p>\n",
      "rawdescription":
        "The ClrWizardPage component is responsible for displaying the content of each step\nin the wizard workflow.\n\nClrWizardPage component has hooks into the navigation service (ClrWizardPage.navService),\npage collection (ClrWizardPage.pageCollection), and button service\n(ClrWizardPage.buttonService). These three providers are shared across the components\nwithin each instance of a Wizard.",
      "type": "component",
      "sourceCode":
        "import { Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\n\nimport { ButtonHubService } from './providers/button-hub.service';\nimport { PageCollectionService } from './providers/page-collection.service';\nimport { WizardNavigationService } from './providers/wizard-navigation.service';\nimport { ClrWizardPageButtons } from './wizard-page-buttons';\nimport { ClrWizardPageHeaderActions } from './wizard-page-header-actions';\nimport { ClrWizardPageNavTitle } from './wizard-page-navtitle';\nimport { ClrWizardPageTitle } from './wizard-page-title';\n\nlet wizardPageIndex = 0;\n\n/**\n * The ClrWizardPage component is responsible for displaying the content of each step\n * in the wizard workflow.\n *\n * ClrWizardPage component has hooks into the navigation service (ClrWizardPage.navService),\n * page collection (ClrWizardPage.pageCollection), and button service\n * (ClrWizardPage.buttonService). These three providers are shared across the components\n * within each instance of a Wizard.\n *\n */\n@Component({\n  selector: 'clr-wizard-page',\n  template: '<ng-content></ng-content>',\n  host: {\n    '[id]': 'id',\n    '[attr.aria-hidden]': '!current',\n    '[attr.aria-labelledby]': 'stepItemId',\n    '[class.active]': 'current',\n    '[class.clr-wizard-page]': 'true',\n  },\n})\nexport class ClrWizardPage implements OnInit {\n  /**\n   * Creates an instance of ClrWizardPage.\n   *\n   * @memberof WizardPage\n   */\n  constructor(\n    private navService: WizardNavigationService,\n    public pageCollection: PageCollectionService,\n    public buttonService: ButtonHubService\n  ) {}\n\n  /**\n   * Contains a reference to the page title which is used for a number\n   * of different tasks for display in the wizard.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @ContentChild(ClrWizardPageTitle, { static: true })\n  public pageTitle: ClrWizardPageTitle;\n\n  /**\n   * Contains a reference to the desired title for the page's step in the\n   * navigation on the left side of the wizard. Can be projected to change the\n   * navigation link's text.\n   *\n   * If not defined, then ClrWizardPage.pageTitle will be displayed in the stepnav.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @ContentChild(ClrWizardPageNavTitle, { static: true })\n  public pageNavTitle: ClrWizardPageNavTitle;\n\n  /**\n   * Contains a reference to the buttons defined within the page. If not defined,\n   * the wizard defaults to the set of buttons defined as a direct child of the\n   * wizard.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @ContentChild(ClrWizardPageButtons, { static: true })\n  public _buttons: ClrWizardPageButtons;\n\n  /**\n   * Contains a reference to the header actions defined within the page. If not defined,\n   * the wizard defaults to the set of header actions defined as a direct child of the\n   * wizard.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @ContentChild(ClrWizardPageHeaderActions, { static: true })\n  public _headerActions: ClrWizardPageHeaderActions;\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  private _nextStepDisabled = false;\n\n  /**\n   * A getter that tells whether or not the wizard should be allowed\n   * to move to the next page.\n   *\n   * Useful for in-page validation because it prevents forward navigation\n   * and visibly disables the next button.\n   *\n   * Does not require that you re-implement navigation routines like you\n   * would if you were using ClrWizardPage.preventDefault or\n   * Wizard.preventDefault.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get nextStepDisabled(): boolean {\n    return this._nextStepDisabled;\n  }\n\n  /**\n   * Sets whether the page should allow forward navigation.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Input('clrWizardPageNextDisabled')\n  public set nextStepDisabled(val: boolean) {\n    const valBool = !!val;\n    if (valBool !== this._nextStepDisabled) {\n      this._nextStepDisabled = valBool;\n      this.nextStepDisabledChange.emit(valBool);\n    }\n  }\n\n  /**\n   * Emits when the value of ClrWizardPage.nextStepDisabled changes.\n   * Should emit the new value of nextStepDisabled.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPageNextDisabledChange') nextStepDisabledChange: EventEmitter<boolean> = new EventEmitter();\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  private _previousStepDisabled = false;\n\n  /**\n   * A getter that tells whether or not the wizard should be allowed\n   * to move to the previous page.\n   *\n   * Useful for in-page validation because it prevents backward navigation\n   * and visibly disables the previous button.\n   *\n   * Does not require that you re-implement navigation routines like you\n   * would if you were using ClrWizardPage.preventDefault or\n   * Wizard.preventDefault.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get previousStepDisabled(): boolean {\n    return this._previousStepDisabled;\n  }\n\n  /**\n   * Sets whether the page should allow backward navigation.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Input('clrWizardPagePreviousDisabled')\n  public set previousStepDisabled(val: boolean) {\n    const valBool = !!val;\n    if (valBool !== this._previousStepDisabled) {\n      this._previousStepDisabled = valBool;\n      this.previousStepDisabledChange.emit(valBool);\n    }\n  }\n\n  /**\n   * Emits when the value of ClrWizardPage.previousStepDisabled changes.\n   * Should emit the new value of previousStepDisabled.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPagePreviousDisabledChange')\n  public previousStepDisabledChange: EventEmitter<boolean> = new EventEmitter();\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  private _hasError = false;\n\n  /**\n   * A getter that tells whether or not the page has an error.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get hasError() {\n    return this._hasError;\n  }\n\n  /**\n   * Sets whether the page has an error and also resolve the \"falsy\" value. The\n   * current logic treat a \"0\" or an empty string as false and likewise will treat any\n   * \"truthy\" value as true.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Input('clrWizardPageHasError')\n  public set hasError(val: boolean) {\n    const valBool = !!val;\n    if (valBool !== this._hasError) {\n      this._hasError = valBool;\n    }\n  }\n\n  /**\n   * Overrides all actions from the page level, so you can use an alternate function for\n   * validation or data-munging with a ClrWizardPage.onCommit (clrWizardPageOnCommit output),\n   * ClrWizardPage.onCancel (clrWizardPageOnCancel output), or one\n   * of the granular page-level button click event emitters.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Input('clrWizardPagePreventDefault') public preventDefault: boolean = false;\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  private _stopCancel = false;\n\n  /**\n   * A getter that retrieves whether the page is preventing the cancel action.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get stopCancel(): boolean {\n    return this._stopCancel;\n  }\n\n  /**\n   * Overrides the cancel action from the page level. Allows you to use an\n   * alternate function for validation or data-munging before cancelling the\n   * wizard when combined with the ClrWizardPage.onCancel\n   * (the clrWizardPageOnCancel output).\n   *\n   * Requires that you manually close the wizard from your host component,\n   * usually with a call to Wizard.forceNext() or wizard.next();\n   *\n   * @memberof ClrWizardPage\n   */\n  @Input('clrWizardPagePreventDefaultCancel')\n  public set stopCancel(val: boolean) {\n    const valBool = !!val;\n    if (valBool !== this._stopCancel) {\n      this._stopCancel = valBool;\n      this.stopCancelChange.emit(valBool);\n    }\n  }\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPagePreventDefaultCancelChange') stopCancelChange: EventEmitter<boolean> = new EventEmitter();\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  private _stopNext = false;\n\n  /**\n   * A getter that tells you whether the page is preventing the next action.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get stopNext(): boolean {\n    return this._stopNext;\n  }\n\n  /**\n   * Overrides forward navigation from the page level. Allows you to use an\n   * alternate function for validation or data-munging before moving the\n   * wizard to the next pagewhen combined with the ClrWizardPage.onCommit\n   * (clrWizardPageOnCommit) or ClrWizardPage.nextButtonClicked\n   * (clrWizardPageNext) outputs.\n   *\n   * Requires that you manually tell the wizard to navigate forward from\n   * the hostComponent, usually with a call to Wizard.forceNext() or\n   * wizard.next();\n   *\n   * @memberof ClrWizardPage\n   */\n  @Input('clrWizardPagePreventDefaultNext')\n  public set stopNext(val: boolean) {\n    const valBool = !!val;\n    if (valBool !== this._stopNext) {\n      this._stopNext = valBool;\n    }\n  }\n\n  /**\n   * An event emitter carried over from a legacy version of ClrWizardPage.\n   * Fires an event on ClrWizardPage whenever the next or finish buttons\n   * are clicked and the page is the current page of the Wizard.\n   *\n   * Note that this does not automatically emit an event when a custom\n   * button is used in place of a next or finish button.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPageOnCommit') onCommit: EventEmitter<string> = new EventEmitter<string>(false);\n\n  /**\n   * Emits an event when ClrWizardPage becomes the current page of the\n   * Wizard.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPageOnLoad') onLoad: EventEmitter<string> = new EventEmitter();\n\n  /**\n   * Emits an event when the ClrWizardPage invokes the cancel routine for the wizard.\n   *\n   * Can be used in conjunction with the ClrWizardPage.stopCancel\n   * (clrWizardPagePreventDefaultCancel) or ClrWizardPage.preventDefault\n   * (clrWizardPagePagePreventDefault) inputs to implement custom cancel\n   * functionality at the page level. This is useful if you would like to do\n   * validation, save data, or warn users before cancelling the wizard.\n   *\n   * Note that this requires you to call Wizard.close() from the host component.\n   * This constitues a full replacement of the cancel functionality.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPageOnCancel') pageOnCancel: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n  /**\n   * Emits an event when the finish button is clicked and the ClrWizardPage is\n   * the wizard's current page.\n   *\n   * Can be used in conjunction with the ClrWizardPage.preventDefault\n   * (clrWizardPagePagePreventDefault) input to implement custom finish\n   * functionality at the page level. This is useful if you would like to do\n   * validation, save data, or warn users before allowing them to complete\n   * the wizard.\n   *\n   * Note that this requires you to call Wizard.finish() or Wizard.forceFinish()\n   * from the host component. This combination creates a full replacement of\n   * the finish functionality.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPageFinish') finishButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n  /**\n   * Emits an event when the previous button is clicked and the ClrWizardPage is\n   * the wizard's current page.\n   *\n   * Can be used in conjunction with the ClrWizardPage.preventDefault\n   * (clrWizardPagePagePreventDefault) input to implement custom backwards\n   * navigation at the page level. This is useful if you would like to do\n   * validation, save data, or warn users before allowing them to go\n   * backwards in the wizard.\n   *\n   * Note that this requires you to call Wizard.previous()\n   * from the host component. This combination creates a full replacement of\n   * the backwards navigation functionality.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPagePrevious') previousButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n  /**\n   * Emits an event when the next button is clicked and the ClrWizardPage is\n   * the wizard's current page.\n   *\n   * Can be used in conjunction with the ClrWizardPage.preventDefault\n   * (clrWizardPagePagePreventDefault) input to implement custom forwards\n   * navigation at the page level. This is useful if you would like to do\n   * validation, save data, or warn users before allowing them to go\n   * to the next page in the wizard.\n   *\n   * Note that this requires you to call Wizard.forceNext() or Wizard.next()\n   * from the host component. This combination creates a full replacement of\n   * the forward navigation functionality.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPageNext') nextButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n  /**\n   * Emits an event when a danger button is clicked and the ClrWizardPage is\n   * the wizard's current page. By default, a danger button will act as\n   * either a \"next\" or \"finish\" button depending on if the ClrWizardPage is the\n   * last page or not.\n   *\n   * Can be used in conjunction with the ClrWizardPage.preventDefault\n   * (clrWizardPagePagePreventDefault) input to implement custom forwards\n   * or finish navigation at the page level when the danger button is clicked.\n   * This is useful if you would like to do validation, save data, or warn\n   * users before allowing them to go to the next page in the wizard or\n   * finish the wizard.\n   *\n   * Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\n   * Wizard.forceNext() or Wizard.next() from the host component. This\n   * combination creates a full replacement of the forward navigation and\n   * finish functionality.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPageDanger') dangerButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n  /**\n   * Emits an event when a next, finish, or danger button is clicked and the\n   * ClrWizardPage is the wizard's current page.\n   *\n   * Can be used in conjunction with the ClrWizardPage.preventDefault\n   * (clrWizardPagePagePreventDefault) input to implement custom forwards\n   * or finish navigation at the page level, regardless of the type of\n   * primary button.\n   *\n   * This is useful if you would like to do validation, save data, or warn\n   * users before allowing them to go to the next page in the wizard or\n   * finish the wizard.\n   *\n   * Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\n   * Wizard.forceNext() or Wizard.next() from the host component. This\n   * combination creates a full replacement of the forward navigation and\n   * finish functionality.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Output('clrWizardPagePrimary') primaryButtonClicked: EventEmitter<string> = new EventEmitter();\n\n  @Output('clrWizardPageCustomButton') customButtonClicked: EventEmitter<string> = new EventEmitter();\n\n  /**\n   * An input value that is used internally to generate the ClrWizardPage ID as\n   * well as the step nav item ID.\n   *\n   * Typed as any because it should be able to accept numbers as well as\n   * strings. Passing an index for wizard whose pages are created with an\n   * ngFor loop is a common use case.\n   *\n   * @memberof WizardPage\n   *\n   */\n  @Input('id') _id: any = (wizardPageIndex++).toString();\n\n  /**\n   * A read-only getter that generates an ID string for the wizard page from\n   * either the value passed to the ClrWizardPage \"id\" input or a wizard page\n   * counter shared across all wizard pages in the application.\n   *\n   * Note that the value passed into the ID input Will be prefixed with\n   * \"clr-wizard-page-\".\n   *\n   * @readonly\n   *\n   * @memberof ClrWizardPage\n   */\n  public get id() {\n    // covers things like null, undefined, false, and empty string\n    // while allowing zero to pass\n    const idIsNonZeroFalsy = !this._id && this._id !== 0;\n\n    // in addition to non-zero falsy we also want to make sure _id is not a negative\n    // number.\n    if (idIsNonZeroFalsy || this._id < 0) {\n      // guard here in the event that input becomes undefined or null by accident\n      this._id = (wizardPageIndex++).toString();\n    }\n    return `clr-wizard-page-${this._id}`;\n  }\n\n  /**\n   * A read-only getter that serves as a convenience for those who would rather\n   * not think in the terms of !ClrWizardPage.nextStepDisabled. For some use cases,\n   * ClrWizardPage.readyToComplete is more logical and declarative.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get readyToComplete(): boolean {\n    return !this.nextStepDisabled;\n  }\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  private _complete: boolean = false;\n\n  /**\n   * A page is marked as completed if it is both readyToComplete and completed,\n   * as in the next or finish action has been executed while this page was current.\n   *\n   * Note there is and open question about how to handle pages that are marked\n   * complete but who are no longer readyToComplete. This might indicate an error\n   * state for the ClrWizardPage. Currently, the wizard does not acknowledge this state\n   * and only returns that the page is incomplete.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get completed(): boolean {\n    return this._complete && this.readyToComplete;\n\n    // FOR V2: UNWIND COMPLETED, READYTOCOMPLETE, AND ERRORS\n    // SUCH THAT ERRORS IS ITS OWN INPUT. IF A STEP IS\n    // INCOMPLETE AND ERRORED, ERRORED WILL NOT SHOW.\n    // FIRST QUESTION: AM I GREY OR COLORED?\n    // SECOND QUESTION: AM I GREEN OR RED?\n  }\n\n  /**\n   * A ClrWizardPage can be manually set to completed using this boolean setter.\n   * It is recommended that users rely on the convenience functions in the wizard\n   * and navigation service instead of manually setting pages’ completion state.\n   *\n   * @memberof ClrWizardPage\n   */\n  public set completed(value: boolean) {\n    this._complete = value;\n  }\n\n  /**\n   * Checks with the navigation service to see if it is the current page.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get current(): boolean {\n    return this.navService.currentPage === this;\n  }\n\n  public get disabled(): boolean {\n    return !this.enabled;\n  }\n\n  /**\n   * A read-only getter that returns whether or not the page is navigable\n   * in the wizard. A wizard page can be navigated to if it is completed\n   * or the page before it is completed.\n   *\n   * This getter handles the logic for enabling or disabling the links in\n   * the step nav on the left Side of the wizard.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get enabled(): boolean {\n    return this.current || this.completed || this.previousCompleted;\n  }\n\n  /**\n   * A read-only getter that returns whether or not the page before this\n   * ClrWizardPage is completed. This is useful for determining whether or not\n   * a page is navigable if it is not current or already completed.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get previousCompleted(): boolean {\n    const previousPage = this.pageCollection.getPreviousPage(this);\n\n    if (!previousPage) {\n      return true;\n    }\n\n    return previousPage.completed;\n  }\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get title(): TemplateRef<any> {\n    return this.pageTitle.pageTitleTemplateRef;\n  }\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get navTitle(): TemplateRef<any> {\n    if (this.pageNavTitle) {\n      return this.pageNavTitle.pageNavTitleTemplateRef;\n    }\n    return this.pageTitle.pageTitleTemplateRef;\n  }\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get headerActions(): TemplateRef<any> {\n    if (!this._headerActions) {\n      return;\n    }\n    return this._headerActions.pageHeaderActionsTemplateRef;\n  }\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get hasHeaderActions(): boolean {\n    return !!this._headerActions;\n  }\n\n  /**\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get buttons(): TemplateRef<any> {\n    if (!this._buttons) {\n      return;\n    }\n    return this._buttons.pageButtonsTemplateRef;\n  }\n\n  /**\n   * A read-only getter that returns a boolean that says whether or\n   * not the ClrWizardPage includes buttons. Used to determine if the\n   * Wizard should override the default button set defined as\n   * its direct children.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get hasButtons(): boolean {\n    return !!this._buttons;\n  }\n\n  /**\n   * Uses the nav service to make the ClrWizardPage the current page in the\n   * wizard. Bypasses all checks but still emits the ClrWizardPage.onLoad\n   * (clrWizardPageOnLoad) output.\n   *\n   * In most cases, it is better to use the default navigation functions\n   * in Wizard.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public makeCurrent(): void {\n    this.navService.currentPage = this;\n  }\n\n  /**\n   * Links the nav service and establishes the current page if one is not defined.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public ngOnInit(): void {\n    const navService = this.navService;\n    if (!navService.currentPage && !navService.navServiceLoaded) {\n      this.makeCurrent();\n      this.navService.navServiceLoaded = true;\n    }\n  }\n\n  /**\n   * A read-only getter that returns the id used by the step nav item associated with the page.\n   *\n   * ClrWizardPage needs this ID string for aria information.\n   *\n   * @memberof WizardPage\n   *\n   */\n  public get stepItemId(): string {\n    return this.pageCollection.getStepItemIdForPage(this);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "<p>Creates an instance of ClrWizardPage.</p>\n",
        "args": [
          {
            "name": "navService",
            "type": "WizardNavigationService"
          },
          {
            "name": "pageCollection",
            "type": "PageCollectionService"
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "navService",
            "type": "WizardNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "pageCollection",
            "type": "PageCollectionService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "buttonService",
            "type": "ButtonHubService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "nextStepDisabled": {
          "name": "nextStepDisabled",
          "setSignature": {
            "name": "nextStepDisabled",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 129,
            "description": "<p>Sets whether the page should allow forward navigation.</p>\n",
            "jsdoctags": [
              {
                "name": "val",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "nextStepDisabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 118,
            "description":
              "<p>A getter that tells whether or not the wizard should be allowed\nto move to the next page.</p>\n<p>Useful for in-page validation because it prevents forward navigation\nand visibly disables the next button.</p>\n<p>Does not require that you re-implement navigation routines like you\nwould if you were using ClrWizardPage.preventDefault or\nWizard.preventDefault.</p>\n",
            "jsdoctags": [
              {
                "pos": 3673,
                "end": 3683,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 3673,
                  "end": 3674,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 3674,
                  "end": 3682,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "previousStepDisabled": {
          "name": "previousStepDisabled",
          "setSignature": {
            "name": "previousStepDisabled",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 178,
            "description": "<p>Sets whether the page should allow backward navigation.</p>\n",
            "jsdoctags": [
              {
                "name": "val",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "previousStepDisabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 167,
            "description":
              "<p>A getter that tells whether or not the wizard should be allowed\nto move to the previous page.</p>\n<p>Useful for in-page validation because it prevents backward navigation\nand visibly disables the previous button.</p>\n<p>Does not require that you re-implement navigation routines like you\nwould if you were using ClrWizardPage.preventDefault or\nWizard.preventDefault.</p>\n",
            "jsdoctags": [
              {
                "pos": 4940,
                "end": 4950,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 4940,
                  "end": 4941,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 4941,
                  "end": 4949,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "hasError": {
          "name": "hasError",
          "setSignature": {
            "name": "hasError",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 222,
            "description":
              "<p>Sets whether the page has an error and also resolve the &quot;falsy&quot; value. The\ncurrent logic treat a &quot;0&quot; or an empty string as false and likewise will treat any\n&quot;truthy&quot; value as true.</p>\n",
            "jsdoctags": [
              {
                "name": "val",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hasError",
            "type": "",
            "returnType": "",
            "line": 209,
            "description": "<p>A getter that tells whether or not the page has an error.</p>\n",
            "jsdoctags": [
              {
                "pos": 5914,
                "end": 5924,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 5914,
                  "end": 5915,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 5915,
                  "end": 5923,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "stopCancel": {
          "name": "stopCancel",
          "setSignature": {
            "name": "stopCancel",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 269,
            "description":
              "<p>Overrides the cancel action from the page level. Allows you to use an\nalternate function for validation or data-munging before cancelling the\nwizard when combined with the ClrWizardPage.onCancel\n(the clrWizardPageOnCancel output).</p>\n<p>Requires that you manually close the wizard from your host component,\nusually with a call to Wizard.forceNext() or wizard.next();</p>\n",
            "jsdoctags": [
              {
                "name": "val",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "stopCancel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 253,
            "description": "<p>A getter that retrieves whether the page is preventing the cancel action.</p>\n",
            "jsdoctags": [
              {
                "pos": 7043,
                "end": 7053,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 7043,
                  "end": 7044,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 7044,
                  "end": 7052,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "stopNext": {
          "name": "stopNext",
          "setSignature": {
            "name": "stopNext",
            "type": "void",
            "args": [
              {
                "name": "val",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 315,
            "description":
              "<p>Overrides forward navigation from the page level. Allows you to use an\nalternate function for validation or data-munging before moving the\nwizard to the next pagewhen combined with the ClrWizardPage.onCommit\n(clrWizardPageOnCommit) or ClrWizardPage.nextButtonClicked\n(clrWizardPageNext) outputs.</p>\n<p>Requires that you manually tell the wizard to navigate forward from\nthe hostComponent, usually with a call to Wizard.forceNext() or\nwizard.next();</p>\n",
            "jsdoctags": [
              {
                "name": "val",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "stopNext",
            "type": "boolean",
            "returnType": "boolean",
            "line": 297,
            "description": "<p>A getter that tells you whether the page is preventing the next action.</p>\n",
            "jsdoctags": [
              {
                "pos": 8164,
                "end": 8174,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 8164,
                  "end": 8165,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 8165,
                  "end": 8173,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "id": {
          "name": "id",
          "getSignature": {
            "name": "id",
            "type": "",
            "returnType": "",
            "line": 491,
            "description":
              "<p>A read-only getter that generates an ID string for the wizard page from\neither the value passed to the ClrWizardPage &quot;id&quot; input or a wizard page\ncounter shared across all wizard pages in the application.</p>\n<p>Note that the value passed into the ID input Will be prefixed with\n&quot;clr-wizard-page-&quot;.</p>\n",
            "jsdoctags": [
              {
                "pos": 15660,
                "end": 15673,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 15660,
                  "end": 15661,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 15661,
                  "end": 15669,
                  "flags": 0,
                  "escapedText": "readonly"
                },
                "comment": ""
              },
              {
                "pos": 15680,
                "end": 15690,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 15680,
                  "end": 15681,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 15681,
                  "end": 15689,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>ClrWizardPage</p>\n"
              }
            ]
          }
        },
        "readyToComplete": {
          "name": "readyToComplete",
          "getSignature": {
            "name": "readyToComplete",
            "type": "boolean",
            "returnType": "boolean",
            "line": 513,
            "description":
              "<p>A read-only getter that serves as a convenience for those who would rather\nnot think in the terms of !ClrWizardPage.nextStepDisabled. For some use cases,\nClrWizardPage.readyToComplete is more logical and declarative.</p>\n",
            "jsdoctags": [
              {
                "pos": 16467,
                "end": 16477,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 16467,
                  "end": 16468,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 16468,
                  "end": 16476,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "completed": {
          "name": "completed",
          "setSignature": {
            "name": "completed",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "boolean"
              }
            ],
            "returnType": "void",
            "line": 553,
            "description":
              "<p>A ClrWizardPage can be manually set to completed using this boolean setter.\nIt is recommended that users rely on the convenience functions in the wizard\nand navigation service instead of manually setting pages’ completion state.</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "completed",
            "type": "boolean",
            "returnType": "boolean",
            "line": 536,
            "description":
              "<p>A page is marked as completed if it is both readyToComplete and completed,\nas in the next or finish action has been executed while this page was current.</p>\n<p>Note there is and open question about how to handle pages that are marked\ncomplete but who are no longer readyToComplete. This might indicate an error\nstate for the ClrWizardPage. Currently, the wizard does not acknowledge this state\nand only returns that the page is incomplete.</p>\n",
            "jsdoctags": [
              {
                "pos": 17153,
                "end": 17163,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 17153,
                  "end": 17154,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 17154,
                  "end": 17162,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "current": {
          "name": "current",
          "getSignature": {
            "name": "current",
            "type": "boolean",
            "returnType": "boolean",
            "line": 563,
            "description": "<p>Checks with the navigation service to see if it is the current page.</p>\n",
            "jsdoctags": [
              {
                "pos": 17990,
                "end": 18000,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 17990,
                  "end": 17991,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 17991,
                  "end": 17999,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "disabled": {
          "name": "disabled",
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 567
          }
        },
        "enabled": {
          "name": "enabled",
          "getSignature": {
            "name": "enabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 582,
            "description":
              "<p>A read-only getter that returns whether or not the page is navigable\nin the wizard. A wizard page can be navigated to if it is completed\nor the page before it is completed.</p>\n<p>This getter handles the logic for enabling or disabling the links in\nthe step nav on the left Side of the wizard.</p>\n",
            "jsdoctags": [
              {
                "pos": 18509,
                "end": 18519,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 18509,
                  "end": 18510,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 18510,
                  "end": 18518,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "previousCompleted": {
          "name": "previousCompleted",
          "getSignature": {
            "name": "previousCompleted",
            "type": "boolean",
            "returnType": "boolean",
            "line": 594,
            "description":
              "<p>A read-only getter that returns whether or not the page before this\nClrWizardPage is completed. This is useful for determining whether or not\na page is navigable if it is not current or already completed.</p>\n",
            "jsdoctags": [
              {
                "pos": 18885,
                "end": 18895,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 18885,
                  "end": 18886,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 18886,
                  "end": 18894,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "title": {
          "name": "title",
          "getSignature": {
            "name": "title",
            "type": "",
            "returnType": "TemplateRef<any>",
            "line": 609,
            "jsdoctags": [
              {
                "pos": 19137,
                "end": 19147,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 19137,
                  "end": 19138,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 19138,
                  "end": 19146,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "navTitle": {
          "name": "navTitle",
          "getSignature": {
            "name": "navTitle",
            "type": "",
            "returnType": "TemplateRef<any>",
            "line": 618,
            "jsdoctags": [
              {
                "pos": 19279,
                "end": 19289,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 19279,
                  "end": 19280,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 19280,
                  "end": 19288,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "headerActions": {
          "name": "headerActions",
          "getSignature": {
            "name": "headerActions",
            "type": "",
            "returnType": "TemplateRef<any>",
            "line": 630,
            "jsdoctags": [
              {
                "pos": 19515,
                "end": 19525,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 19515,
                  "end": 19516,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 19516,
                  "end": 19524,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "hasHeaderActions": {
          "name": "hasHeaderActions",
          "getSignature": {
            "name": "hasHeaderActions",
            "type": "boolean",
            "returnType": "boolean",
            "line": 642,
            "jsdoctags": [
              {
                "pos": 19730,
                "end": 19740,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 19730,
                  "end": 19731,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 19731,
                  "end": 19739,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "buttons": {
          "name": "buttons",
          "getSignature": {
            "name": "buttons",
            "type": "",
            "returnType": "TemplateRef<any>",
            "line": 651,
            "jsdoctags": [
              {
                "pos": 19860,
                "end": 19870,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 19860,
                  "end": 19861,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 19861,
                  "end": 19869,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "hasButtons": {
          "name": "hasButtons",
          "getSignature": {
            "name": "hasButtons",
            "type": "boolean",
            "returnType": "boolean",
            "line": 667,
            "description":
              "<p>A read-only getter that returns a boolean that says whether or\nnot the ClrWizardPage includes buttons. Used to determine if the\nWizard should override the default button set defined as\nits direct children.</p>\n",
            "jsdoctags": [
              {
                "pos": 20277,
                "end": 20287,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 20277,
                  "end": 20278,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 20278,
                  "end": 20286,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        },
        "stepItemId": {
          "name": "stepItemId",
          "getSignature": {
            "name": "stepItemId",
            "type": "string",
            "returnType": "string",
            "line": 708,
            "description":
              "<p>A read-only getter that returns the id used by the step nav item associated with the page.</p>\n<p>ClrWizardPage needs this ID string for aria information.</p>\n",
            "jsdoctags": [
              {
                "pos": 21311,
                "end": 21321,
                "flags": 0,
                "kind": 288,
                "atToken": {
                  "pos": 21311,
                  "end": 21312,
                  "flags": 0,
                  "kind": 57
                },
                "tagName": {
                  "pos": 21312,
                  "end": 21320,
                  "flags": 0,
                  "escapedText": "memberof"
                },
                "comment": "<p>WizardPage</p>\n"
              }
            ]
          }
        }
      }
    },
    {
      "name": "ClrWizardStepnav",
      "id": "component-ClrWizardStepnav-2ff969690e8aced9894aadda0b59eb24",
      "file": "src/clr-angular/wizard/wizard-stepnav.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-wizard-stepnav",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div class=\"clr-wizard-stepnav-list\">\n  <div *ngFor=\"let page of pageService.pages; let i = index\" clr-wizard-stepnav-item [page]=\"page\" class=\"clr-wizard-stepnav-item\">{{i + 1}}</div>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "pageService",
          "type": "PageCollectionService",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\nimport { PageCollectionService } from './providers/page-collection.service';\n\n@Component({\n  selector: 'clr-wizard-stepnav',\n  template: `\n    <div class=\"clr-wizard-stepnav-list\">\n      <div *ngFor=\"let page of pageService.pages; let i = index\" clr-wizard-stepnav-item [page]=\"page\" class=\"clr-wizard-stepnav-item\">{{i + 1}}</div>\n    </div>\n  `,\n  host: { class: 'clr-wizard-stepnav' },\n})\nexport class ClrWizardStepnav {\n  constructor(public pageService: PageCollectionService) {}\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "pageService",
            "type": "PageCollectionService"
          }
        ],
        "line": 19,
        "jsdoctags": [
          {
            "name": "pageService",
            "type": "PageCollectionService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "ClrWizardStepnavItem",
      "id": "component-ClrWizardStepnavItem-f0f52608c34b6ddac74af61c1ef51b28",
      "file": "src/clr-angular/wizard/wizard-stepnav-item.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "[clr-wizard-stepnav-item]",
      "styleUrls": [],
      "styles": [],
      "template":
        "<button type=\"button\" class=\"btn btn-link clr-wizard-stepnav-link\" (click)=\"click()\" [attr.disabled]=\"isDisabled ? '' : null\">\n    <span class=\"clr-wizard-stepnav-link-suffix\">\n      <clr-icon shape=\"error-standard\" class=\"is-error clr-wizard-stepnav-item-error-icon\" *ngIf=\"hasError\"></clr-icon>\n      <ng-content *ngIf=\"!hasError\"></ng-content>\n    </span>\n    <span class=\"clr-wizard-stepnav-link-title\">\n      <ng-template [ngTemplateOutlet]=\"page.navTitle\"></ng-template>\n    </span>\n</button>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "page",
          "line": 40,
          "type": "ClrWizardPage"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "navService",
          "type": "WizardNavigationService",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [114]
        },
        {
          "name": "pageCollection",
          "type": "PageCollectionService",
          "optional": false,
          "description": "",
          "line": 42,
          "modifierKind": [114]
        }
      ],
      "methodsClass": [
        {
          "name": "click",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80
        },
        {
          "name": "pageGuard",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "modifierKind": [112]
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Input } from '@angular/core';\n\nimport { PageCollectionService } from './providers/page-collection.service';\nimport { WizardNavigationService } from './providers/wizard-navigation.service';\nimport { ClrWizardPage } from './wizard-page';\n\n@Component({\n  selector: '[clr-wizard-stepnav-item]',\n  template: `\n        <button type=\"button\" class=\"btn btn-link clr-wizard-stepnav-link\" (click)=\"click()\" [attr.disabled]=\"isDisabled ? '' : null\">\n            <span class=\"clr-wizard-stepnav-link-suffix\">\n              <clr-icon shape=\"error-standard\" class=\"is-error clr-wizard-stepnav-item-error-icon\" *ngIf=\"hasError\"></clr-icon>\n              <ng-content *ngIf=\"!hasError\"></ng-content>              \n            </span>\n            <span class=\"clr-wizard-stepnav-link-title\">\n              <ng-template [ngTemplateOutlet]=\"page.navTitle\"></ng-template> \n            </span>\n        </button>\n    `,\n  host: {\n    '[id]': 'id',\n    '[attr.aria-selected]': 'isCurrent',\n    '[attr.aria-controls]': 'id',\n    '[class.clr-nav-link]': 'true',\n    '[class.nav-item]': 'true',\n    '[class.active]': 'isCurrent',\n    '[class.disabled]': 'isDisabled',\n    '[class.no-click]': '!canNavigate',\n    '[class.complete]': 'isComplete',\n    '[class.error]': 'hasError',\n  },\n})\nexport class ClrWizardStepnavItem {\n  @Input('page') public page: ClrWizardPage;\n\n  constructor(public navService: WizardNavigationService, public pageCollection: PageCollectionService) {}\n\n  private pageGuard(): void {\n    if (!this.page) {\n      throw new Error('Wizard stepnav item is not associated with a wizard page.');\n    }\n  }\n\n  public get id(): string {\n    this.pageGuard();\n    return this.pageCollection.getStepItemIdForPage(this.page);\n  }\n\n  public get isDisabled(): boolean {\n    this.pageGuard();\n    return this.page.disabled || this.navService.wizardStopNavigation || this.navService.wizardDisableStepnav;\n  }\n\n  public get isCurrent(): boolean {\n    this.pageGuard();\n    return this.page.current;\n  }\n\n  public get isComplete(): boolean {\n    this.pageGuard();\n    return this.page.completed;\n  }\n\n  public get hasError(): boolean {\n    this.pageGuard();\n    return this.page.hasError && this.isComplete;\n  }\n\n  public get canNavigate(): boolean {\n    this.pageGuard();\n    return this.pageCollection.previousPageIsCompleted(this.page);\n  }\n\n  click(): void {\n    this.pageGuard();\n\n    // if we click on our own stepnav or a disabled stepnav, we don't want to do anything\n    if (this.isDisabled || this.isCurrent) {\n      return;\n    }\n\n    this.navService.goTo(this.page);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "navService",
            "type": "WizardNavigationService"
          },
          {
            "name": "pageCollection",
            "type": "PageCollectionService"
          }
        ],
        "line": 40,
        "jsdoctags": [
          {
            "name": "navService",
            "type": "WizardNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "pageCollection",
            "type": "PageCollectionService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "id": {
          "name": "id",
          "getSignature": {
            "name": "id",
            "type": "string",
            "returnType": "string",
            "line": 50
          }
        },
        "isDisabled": {
          "name": "isDisabled",
          "getSignature": {
            "name": "isDisabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "isCurrent": {
          "name": "isCurrent",
          "getSignature": {
            "name": "isCurrent",
            "type": "boolean",
            "returnType": "boolean",
            "line": 60
          }
        },
        "isComplete": {
          "name": "isComplete",
          "getSignature": {
            "name": "isComplete",
            "type": "boolean",
            "returnType": "boolean",
            "line": 65
          }
        },
        "hasError": {
          "name": "hasError",
          "getSignature": {
            "name": "hasError",
            "type": "boolean",
            "returnType": "boolean",
            "line": 70
          }
        },
        "canNavigate": {
          "name": "canNavigate",
          "getSignature": {
            "name": "canNavigate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 75
          }
        }
      }
    },
    {
      "name": "ClrYearpicker",
      "id": "component-ClrYearpicker-5b685b1265ff10701e675aa484cd5e27",
      "file": "src/clr-angular/forms/datepicker/yearpicker.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "AriaLiveService"
        }
      ],
      "selector": "clr-yearpicker",
      "styleUrls": [],
      "styles": [],
      "template":
        "<div class=\"year-switchers\">\n  <button\n      class=\"calendar-btn switcher\"\n      type=\"button\"\n      (click)=\"previousDecade()\"\n      [attr.aria-label]=\"commonStrings.keys.datepickerPreviousDecade\">\n      <clr-icon shape=\"angle\" dir=\"left\" [attr.title]=\"commonStrings.keys.datepickerPreviousDecade\"></clr-icon>\n  </button>\n  <button\n      class=\"calendar-btn switcher\"\n      type=\"button\"\n      (click)=\"currentDecade()\"\n      [attr.aria-label]=\"commonStrings.keys.datepickerCurrentDecade\">\n      <clr-icon shape=\"event\" [attr.title]=\"commonStrings.keys.datepickerCurrentDecade\"></clr-icon>\n  </button>\n  <button\n      class=\"calendar-btn switcher\"\n      type=\"button\"\n      (click)=\"nextDecade()\"\n      [attr.aria-label]=\"commonStrings.keys.datepickerNextDecade\">\n      <clr-icon shape=\"angle\" dir=\"right\" [attr.title]=\"commonStrings.keys.datepickerNextDecade\"></clr-icon>\n  </button>\n</div>\n<div class=\"years\">\n    <button\n        *ngFor=\"let year of yearRangeModel.yearRange\"\n        type=\"button\"\n        class=\"calendar-btn year\"\n        [attr.tabindex]=\"getTabIndex(year)\"\n        [class.is-selected]=\"year === calendarYear\"\n        (click)=\"changeYear(year)\">\n        {{year}}\n    </button>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_focusedYear",
          "type": "number",
          "optional": false,
          "description": "<p>Keeps track of the current focused year.</p>\n",
          "line": 90,
          "modifierKind": [112]
        },
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 66,
          "modifierKind": [114]
        },
        {
          "name": "decadeRange",
          "type": "",
          "optional": false,
          "description": "",
          "line": 80,
          "modifierKind": [112]
        },
        {
          "name": "yearRangeModel",
          "type": "YearRangeModel",
          "optional": false,
          "description": "<p>YearRangeModel which is used to build the YearPicker view.</p>\n",
          "line": 85
        }
      ],
      "methodsClass": [
        {
          "name": "changeYear",
          "args": [
            {
              "name": "year",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 119,
          "description":
            "<p>Calls the DateNavigationService to update the year value of the calendar.\nAlso changes the view to the daypicker.</p>\n",
          "jsdoctags": [
            {
              "name": "year",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "currentDecade",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 137,
          "description": "<p>Updates the YearRangeModel to the current decade.</p>\n"
        },
        {
          "name": "getTabIndex",
          "args": [
            {
              "name": "year",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 158,
          "description": "<p>Compares the year passed to the focused year and returns the tab index.</p>\n",
          "jsdoctags": [
            {
              "name": "year",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "incrementFocusYearBy",
          "args": [
            {
              "name": "value",
              "type": "number"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 103,
          "description":
            "<p>Increments the focus year by the value passed. Updates the YearRangeModel if the\nnew value is not in the current decade.</p>\n",
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "value",
              "type": "number",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "nextDecade",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 148,
          "description": "<p>Updates the YearRangeModel to the next decade.</p>\n"
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 205,
          "description": "<p>Focuses on the current calendar year when the View is initialized.</p>\n"
        },
        {
          "name": "previousDecade",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "description": "<p>Updates the YearRangeModel to the previous decade.</p>\n"
        },
        {
          "name": "updateRange",
          "args": [
            {
              "name": "yrm",
              "type": "YearRangeModel"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 195,
          "modifierKind": [112],
          "jsdoctags": [
            {
              "name": "yrm",
              "type": "YearRangeModel",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "keydown",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            }
          ],
          "argsDecorator": ["$event"],
          "description": "<p>Handles the Keyboard arrow navigation for the yearpicker.</p>\n",
          "line": 173
        }
      ],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { AfterViewInit, Component, ElementRef, HostListener } from '@angular/core';\n\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '../../utils/key-codes/key-codes';\n\nimport { YearRangeModel } from './model/year-range.model';\nimport { DateNavigationService } from './providers/date-navigation.service';\nimport { DatepickerFocusService } from './providers/datepicker-focus.service';\nimport { ViewManagerService } from './providers/view-manager.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { AriaLiveService } from '../../utils/a11y/aria-live.service';\n\n@Component({\n  selector: 'clr-yearpicker',\n  providers: [AriaLiveService],\n  template: `\n        <div class=\"year-switchers\">\n          <button\n              class=\"calendar-btn switcher\"\n              type=\"button\"\n              (click)=\"previousDecade()\"\n              [attr.aria-label]=\"commonStrings.keys.datepickerPreviousDecade\">\n              <clr-icon shape=\"angle\" dir=\"left\" [attr.title]=\"commonStrings.keys.datepickerPreviousDecade\"></clr-icon>\n          </button>\n          <button\n              class=\"calendar-btn switcher\"\n              type=\"button\"\n              (click)=\"currentDecade()\"\n              [attr.aria-label]=\"commonStrings.keys.datepickerCurrentDecade\">\n              <clr-icon shape=\"event\" [attr.title]=\"commonStrings.keys.datepickerCurrentDecade\"></clr-icon>\n          </button>\n          <button\n              class=\"calendar-btn switcher\"\n              type=\"button\"\n              (click)=\"nextDecade()\"\n              [attr.aria-label]=\"commonStrings.keys.datepickerNextDecade\">\n              <clr-icon shape=\"angle\" dir=\"right\" [attr.title]=\"commonStrings.keys.datepickerNextDecade\"></clr-icon>\n          </button>\n        </div>\n        <div class=\"years\">\n            <button\n                *ngFor=\"let year of yearRangeModel.yearRange\"\n                type=\"button\"\n                class=\"calendar-btn year\"\n                [attr.tabindex]=\"getTabIndex(year)\"\n                [class.is-selected]=\"year === calendarYear\"\n                (click)=\"changeYear(year)\">\n                {{year}}\n            </button>\n        </div>\n    `,\n  host: {\n    '[class.yearpicker]': 'true',\n  },\n})\nexport class ClrYearpicker implements AfterViewInit {\n  constructor(\n    private _dateNavigationService: DateNavigationService,\n    private _viewManagerService: ViewManagerService,\n    private _datepickerFocusService: DatepickerFocusService,\n    private _elRef: ElementRef,\n    public commonStrings: ClrCommonStringsService,\n    private ariaLiveService: AriaLiveService\n  ) {\n    this.yearRangeModel = new YearRangeModel(this.calendarYear);\n    this._focusedYear = this.calendarYear;\n    this.updateRange(this.yearRangeModel);\n  }\n\n  get ariaLiveDecadeText(): string {\n    return this.commonStrings.parse(this.commonStrings.keys.daypickerSRCurrentDecadePhrase, {\n      DECADE_RANGE: this.decadeRange,\n    });\n  }\n\n  private decadeRange;\n\n  /**\n   * YearRangeModel which is used to build the YearPicker view.\n   */\n  yearRangeModel: YearRangeModel;\n\n  /**\n   * Keeps track of the current focused year.\n   */\n  private _focusedYear: number;\n\n  /**\n   * Gets the year which the user is currently on.\n   */\n  get calendarYear(): number {\n    return this._dateNavigationService.displayedCalendar.year;\n  }\n\n  /**\n   * Increments the focus year by the value passed. Updates the YearRangeModel if the\n   * new value is not in the current decade.\n   */\n  private incrementFocusYearBy(value: number): void {\n    this._focusedYear = this._focusedYear + value;\n    if (!this.yearRangeModel.inRange(this._focusedYear)) {\n      if (value > 0) {\n        this.yearRangeModel = this.yearRangeModel.nextDecade();\n      } else {\n        this.yearRangeModel = this.yearRangeModel.previousDecade();\n      }\n    }\n    this._datepickerFocusService.focusCell(this._elRef);\n  }\n\n  /**\n   * Calls the DateNavigationService to update the year value of the calendar.\n   * Also changes the view to the daypicker.\n   */\n  changeYear(year: number): void {\n    this._dateNavigationService.changeYear(year);\n    this._viewManagerService.changeToDayView();\n  }\n\n  /**\n   * Updates the YearRangeModel to the previous decade.\n   */\n  previousDecade(): void {\n    this.yearRangeModel = this.yearRangeModel.previousDecade();\n    this.updateRange(this.yearRangeModel);\n    // Year in the yearpicker is not focused because while navigating to a different decade,\n    // you want the focus to remain on the decade switcher arrows.\n  }\n\n  /**\n   * Updates the YearRangeModel to the current decade.\n   */\n  currentDecade(): void {\n    if (!this.yearRangeModel.inRange(this._dateNavigationService.today.year)) {\n      this.yearRangeModel = this.yearRangeModel.currentDecade();\n    }\n    this._datepickerFocusService.focusCell(this._elRef);\n    this.updateRange(this.yearRangeModel);\n  }\n\n  /**\n   * Updates the YearRangeModel to the next decade.\n   */\n  nextDecade(): void {\n    this.yearRangeModel = this.yearRangeModel.nextDecade();\n    this.updateRange(this.yearRangeModel);\n    // Year in the yearpicker is not focused because while navigating to a different decade,\n    // you want the focus to remain on the decade switcher arrows.\n  }\n\n  /**\n   * Compares the year passed to the focused year and returns the tab index.\n   */\n  getTabIndex(year: number): number {\n    if (!this.yearRangeModel.inRange(this._focusedYear)) {\n      if (this.yearRangeModel.inRange(this.calendarYear)) {\n        this._focusedYear = this.calendarYear;\n      } else {\n        this._focusedYear = this.yearRangeModel.middleYear;\n      }\n    }\n    return this._focusedYear === year ? 0 : -1;\n  }\n\n  /**\n   * Handles the Keyboard arrow navigation for the yearpicker.\n   */\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent) {\n    // NOTE: Didn't move this to the date navigation service because\n    // the logic is fairly simple and it didn't make sense for me\n    // to create extra observables just to move this logic to the service.\n    if (event) {\n      const keyCode: number = event.keyCode;\n      if (keyCode === UP_ARROW) {\n        event.preventDefault();\n        this.incrementFocusYearBy(-1);\n      } else if (keyCode === DOWN_ARROW) {\n        event.preventDefault();\n        this.incrementFocusYearBy(1);\n      } else if (keyCode === RIGHT_ARROW) {\n        event.preventDefault();\n        this.incrementFocusYearBy(5);\n      } else if (keyCode === LEFT_ARROW) {\n        event.preventDefault();\n        this.incrementFocusYearBy(-5);\n      }\n    }\n  }\n\n  private updateRange(yrm: YearRangeModel): void {\n    const floor = yrm.yearRange[0];\n    const ceil = yrm.yearRange[yrm.yearRange.length - 1];\n    this.decadeRange = `${floor} to ${ceil}`;\n    this.ariaLiveService.announce(this.ariaLiveDecadeText);\n  }\n\n  /**\n   * Focuses on the current calendar year when the View is initialized.\n   */\n  ngAfterViewInit() {\n    this._datepickerFocusService.focusCell(this._elRef);\n    this.ariaLiveService.announce(this.ariaLiveDecadeText);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService"
          },
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService"
          },
          {
            "name": "_datepickerFocusService",
            "type": "DatepickerFocusService"
          },
          {
            "name": "_elRef",
            "type": "ElementRef"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService"
          }
        ],
        "line": 60,
        "jsdoctags": [
          {
            "name": "_dateNavigationService",
            "type": "DateNavigationService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_viewManagerService",
            "type": "ViewManagerService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_datepickerFocusService",
            "type": "DatepickerFocusService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_elRef",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ariaLiveService",
            "type": "AriaLiveService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["AfterViewInit"],
      "accessors": {
        "ariaLiveDecadeText": {
          "name": "ariaLiveDecadeText",
          "getSignature": {
            "name": "ariaLiveDecadeText",
            "type": "string",
            "returnType": "string",
            "line": 74
          }
        },
        "calendarYear": {
          "name": "calendarYear",
          "getSignature": {
            "name": "calendarYear",
            "type": "number",
            "returnType": "number",
            "line": 95,
            "description": "<p>Gets the year which the user is currently on.</p>\n"
          }
        }
      }
    },
    {
      "name": "DatagridNumericFilter",
      "id": "component-DatagridNumericFilter-35484c5a14bb0da98deae5f40730b4b6",
      "file": "src/clr-angular/data/datagrid/built-in/filters/datagrid-numeric-filter.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: CustomFilter, useExisting: DatagridNumericFilter }"
        }
      ],
      "selector": "clr-dg-numeric-filter",
      "styleUrls": [],
      "styles": [],
      "template":
        "<clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n    <input class=\"datagrid-numeric-filter-input\" #input_low type=\"number\" name=\"low\" [(ngModel)]=\"low\"\n           [placeholder]=\"commonStrings.keys.minValue\" [attr.aria-label]=\"commonStrings.keys.minValue\" />\n        <span class=\"datagrid-filter-input-spacer\"></span>\n    <input class=\"datagrid-numeric-filter-input\" #input_high type=\"number\" name=\"high\" [(ngModel)]=\"high\"\n           [placeholder]=\"commonStrings.keys.maxValue\" [attr.aria-label]=\"commonStrings.keys.maxValue\" />\n</clr-dg-filter>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgNumericFilter",
          "description": "<p>Customizable filter logic based on high and low values</p>\n",
          "line": 55,
          "type": ""
        },
        {
          "name": "clrFilterValue",
          "line": 101,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "clrFilterValueChange",
          "defaultValue": "new EventEmitter()",
          "line": 158,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "commonStrings",
          "type": "ClrCommonStringsService",
          "optional": false,
          "description": "",
          "line": 37,
          "modifierKind": [114]
        },
        {
          "name": "filterContainer",
          "type": "ClrDatagridFilter<T>",
          "optional": false,
          "description": "<p>We grab the ClrDatagridFilter we wrap to register this StringFilter to it.</p>\n",
          "line": 80,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "ClrDatagridFilter, {static: false}"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "input",
          "type": "ElementRef",
          "optional": false,
          "description": "<p>We need the actual input element to automatically focus on it</p>\n",
          "line": 74,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'input_low', {static: false}"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "open",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "<p>Indicates if the filter dropdown is open</p>\n",
          "line": 68,
          "modifierKind": [114]
        },
        {
          "name": "subscriptions",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 43,
          "modifierKind": [112]
        },
        {
          "name": "registered",
          "type": "RegisteredFilter<T | F>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 45
        },
        {
          "name": "deleteFilter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "setFilter",
          "args": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { ClrDatagridFilter } from '../../datagrid-filter';\nimport { ClrDatagridNumericFilterInterface } from '../../interfaces/numeric-filter.interface';\nimport { CustomFilter } from '../../providers/custom-filter';\nimport { FiltersProvider, RegisteredFilter } from '../../providers/filters';\nimport { DomAdapter } from '../../../../utils/dom-adapter/dom-adapter';\nimport { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';\nimport { DatagridNumericFilterImpl } from './datagrid-numeric-filter-impl';\nimport { ClrCommonStringsService } from '../../../../utils/i18n/common-strings.service';\nimport { ClrPopoverToggleService } from '../../../../utils/popover/providers/popover-toggle.service';\n\n@Component({\n  selector: 'clr-dg-numeric-filter',\n  providers: [{ provide: CustomFilter, useExisting: DatagridNumericFilter }],\n  template: `\n        <clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n            <input class=\"datagrid-numeric-filter-input\" #input_low type=\"number\" name=\"low\" [(ngModel)]=\"low\" \n                   [placeholder]=\"commonStrings.keys.minValue\" [attr.aria-label]=\"commonStrings.keys.minValue\" />\n                <span class=\"datagrid-filter-input-spacer\"></span>\n            <input class=\"datagrid-numeric-filter-input\" #input_high type=\"number\" name=\"high\" [(ngModel)]=\"high\" \n                   [placeholder]=\"commonStrings.keys.maxValue\" [attr.aria-label]=\"commonStrings.keys.maxValue\" />\n        </clr-dg-filter>\n    `,\n})\nexport class DatagridNumericFilter<T = any> extends DatagridFilterRegistrar<T, DatagridNumericFilterImpl<T>>\n  implements CustomFilter, AfterViewInit {\n  constructor(\n    filters: FiltersProvider<T>,\n    private domAdapter: DomAdapter,\n    public commonStrings: ClrCommonStringsService,\n    private popoverToggleService: ClrPopoverToggleService\n  ) {\n    super(filters);\n  }\n\n  private subscriptions: Subscription[] = [];\n\n  ngOnDestroy() {\n    this.subscriptions.forEach(sub => {\n      sub.unsubscribe();\n    });\n  }\n\n  /**\n   * Customizable filter logic based on high and low values\n   */\n  @Input('clrDgNumericFilter')\n  set customNumericFilter(\n    value: ClrDatagridNumericFilterInterface<T> | RegisteredFilter<T, DatagridNumericFilterImpl<T>>\n  ) {\n    if (value instanceof RegisteredFilter) {\n      this.setFilter(value);\n    } else {\n      this.setFilter(new DatagridNumericFilterImpl(value));\n    }\n  }\n\n  /**\n   * Indicates if the filter dropdown is open\n   */\n  public open: boolean = false;\n\n  /**\n   * We need the actual input element to automatically focus on it\n   */\n  @ViewChild('input_low', { static: false })\n  public input: ElementRef;\n\n  /**\n   * We grab the ClrDatagridFilter we wrap to register this StringFilter to it.\n   */\n  @ViewChild(ClrDatagridFilter, { static: false })\n  public filterContainer: ClrDatagridFilter<T>;\n  ngAfterViewInit() {\n    this.subscriptions.push(\n      this.popoverToggleService.openChange.subscribe(openChange => {\n        this.open = openChange;\n        // The timeout in used because when this executes, the input isn't displayed.\n        setTimeout(() => {\n          this.domAdapter.focus(this.input.nativeElement);\n        });\n      })\n    );\n  }\n\n  /**\n   * Common setter for the input values\n   */\n  public get value() {\n    return [this.filter.low, this.filter.high];\n  }\n\n  @Input('clrFilterValue')\n  public set value(values: [number, number]) {\n    if (!this.filter) {\n      return;\n    }\n    if (values && (values[0] !== this.filter.low || values[1] !== this.filter.high)) {\n      if (typeof values[0] === 'number') {\n        this.filter.low = values[0];\n      } else {\n        this.filter.low = null;\n      }\n      if (typeof values[1] === 'number') {\n        this.filter.high = values[1];\n      } else {\n        this.filter.high = null;\n      }\n      this.filterValueChange.emit(values);\n    }\n  }\n\n  public get low() {\n    if (typeof this.filter.low === 'number' && isFinite(this.filter.low)) {\n      return this.filter.low;\n    } else {\n      // There's not a low limit\n      return null;\n    }\n  }\n\n  public get high() {\n    if (typeof this.filter.high === 'number' && isFinite(this.filter.high)) {\n      return this.filter.high;\n    } else {\n      // There's not a high limit\n      return null;\n    }\n  }\n\n  public set low(low: number | string) {\n    if (typeof low === 'number' && low !== this.filter.low) {\n      this.filter.low = low;\n      this.filterValueChange.emit([this.filter.low, this.filter.high]);\n    } else if (typeof low !== 'number') {\n      this.filter.low = null;\n      this.filterValueChange.emit([this.filter.low, this.filter.high]);\n    }\n  }\n\n  public set high(high: number | string) {\n    if (typeof high === 'number' && high !== this.filter.high) {\n      this.filter.high = high;\n      this.filterValueChange.emit([this.filter.low, this.filter.high]);\n    } else if (typeof high !== 'number') {\n      this.filter.high = null;\n      this.filterValueChange.emit([this.filter.low, this.filter.high]);\n    }\n  }\n\n  @Output('clrFilterValueChange') filterValueChange = new EventEmitter();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>"
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService"
          },
          {
            "name": "popoverToggleService",
            "type": "ClrPopoverToggleService"
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "commonStrings",
            "type": "ClrCommonStringsService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "popoverToggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "DatagridFilterRegistrar",
      "implements": ["CustomFilter", "AfterViewInit"],
      "accessors": {
        "customNumericFilter": {
          "name": "customNumericFilter",
          "setSignature": {
            "name": "customNumericFilter",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "description": "<p>Customizable filter logic based on high and low values</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "args": [
              {
                "name": "values",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 101,
            "jsdoctags": [
              {
                "name": "values",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "",
            "line": 96,
            "description": "<p>Common setter for the input values</p>\n"
          }
        },
        "low": {
          "name": "low",
          "setSignature": {
            "name": "low",
            "type": "void",
            "args": [
              {
                "name": "low",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 138,
            "jsdoctags": [
              {
                "name": "low",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "low",
            "type": "",
            "returnType": "",
            "line": 120
          }
        },
        "high": {
          "name": "high",
          "setSignature": {
            "name": "high",
            "type": "void",
            "args": [
              {
                "name": "high",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 148,
            "jsdoctags": [
              {
                "name": "high",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "high",
            "type": "",
            "returnType": "",
            "line": 129
          }
        }
      }
    },
    {
      "name": "DatagridStringFilter",
      "id": "component-DatagridStringFilter-8bac65674c1f7e0127c7e8423156c361",
      "file": "src/clr-angular/data/datagrid/built-in/filters/datagrid-string-filter.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [
        {
          "name": "{ provide: CustomFilter, useExisting: DatagridStringFilter }"
        }
      ],
      "selector": "clr-dg-string-filter",
      "styleUrls": [],
      "styles": [],
      "template":
        "<clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n    <input #input type=\"text\" name=\"search\" [(ngModel)]=\"value\" class=\"clr-input\" />\n</clr-dg-filter>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "clrDgStringFilter",
          "description": "<p>Customizable filter logic based on a search text</p>\n",
          "line": 42,
          "type": ""
        },
        {
          "name": "clrFilterValue",
          "line": 92,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "clrFilterValueChange",
          "defaultValue": "new EventEmitter()",
          "line": 105,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "filterContainer",
          "type": "ClrDatagridFilter<T>",
          "optional": false,
          "description": "<p>We grab the ClrDatagridFilter we wrap to register this StringFilter to it.</p>\n",
          "line": 67,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "ClrDatagridFilter, {static: false}"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "input",
          "type": "ElementRef",
          "optional": false,
          "description": "<p>We need the actual input element to automatically focus on it</p>\n",
          "line": 61,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'input', {static: false}"
            }
          ],
          "modifierKind": [114]
        },
        {
          "name": "open",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "<p>Indicates if the filter dropdown is open</p>\n",
          "line": 55,
          "modifierKind": [114]
        },
        {
          "name": "subs",
          "defaultValue": "[]",
          "type": "Subscription[]",
          "optional": false,
          "description": "",
          "line": 29,
          "modifierKind": [112]
        },
        {
          "name": "registered",
          "type": "RegisteredFilter<T | F>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 68
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 80
        },
        {
          "name": "deleteFilter",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "modifierKind": [114],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        },
        {
          "name": "setFilter",
          "args": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>"
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "modifierKind": [114],
          "jsdoctags": [
            {
              "name": "filter",
              "type": "F | RegisteredFilter<T | F>",
              "tagName": {
                "text": "param"
              }
            }
          ],
          "inheritance": {
            "file": "DatagridFilterRegistrar"
          }
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ClrDatagridFilter } from '../../datagrid-filter';\nimport { ClrDatagridStringFilterInterface } from '../../interfaces/string-filter.interface';\nimport { CustomFilter } from '../../providers/custom-filter';\nimport { FiltersProvider, RegisteredFilter } from '../../providers/filters';\nimport { DomAdapter } from '../../../../utils/dom-adapter/dom-adapter';\nimport { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';\n\nimport { DatagridStringFilterImpl } from './datagrid-string-filter-impl';\nimport { ClrPopoverToggleService } from '../../../../utils/popover/providers/popover-toggle.service';\n\n@Component({\n  selector: 'clr-dg-string-filter',\n  providers: [{ provide: CustomFilter, useExisting: DatagridStringFilter }],\n  template: `\n        <clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n            <input #input type=\"text\" name=\"search\" [(ngModel)]=\"value\" class=\"clr-input\" />\n        </clr-dg-filter>\n    `,\n})\nexport class DatagridStringFilter<T = any> extends DatagridFilterRegistrar<T, DatagridStringFilterImpl<T>>\n  implements CustomFilter, AfterViewInit, OnDestroy {\n  private subs: Subscription[] = [];\n  constructor(\n    filters: FiltersProvider<T>,\n    private domAdapter: DomAdapter,\n    private smartToggleService: ClrPopoverToggleService\n  ) {\n    super(filters);\n  }\n\n  /**\n   * Customizable filter logic based on a search text\n   */\n  @Input('clrDgStringFilter')\n  set customStringFilter(\n    value: ClrDatagridStringFilterInterface<T> | RegisteredFilter<T, DatagridStringFilterImpl<T>>\n  ) {\n    if (value instanceof RegisteredFilter) {\n      this.setFilter(value);\n    } else {\n      this.setFilter(new DatagridStringFilterImpl(value));\n    }\n  }\n\n  /**\n   * Indicates if the filter dropdown is open\n   */\n  public open: boolean = false;\n\n  /**\n   * We need the actual input element to automatically focus on it\n   */\n  @ViewChild('input', { static: false })\n  public input: ElementRef;\n\n  /**\n   * We grab the ClrDatagridFilter we wrap to register this StringFilter to it.\n   */\n  @ViewChild(ClrDatagridFilter, { static: false })\n  public filterContainer: ClrDatagridFilter<T>;\n  ngAfterViewInit() {\n    this.subs.push(\n      this.smartToggleService.openChange.subscribe(openChange => {\n        this.open = openChange;\n        // The timeout in used because when this executes, the input isn't displayed.\n        setTimeout(() => {\n          this.domAdapter.focus(this.input.nativeElement);\n        });\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this.subs.forEach(sub => sub.unsubscribe());\n  }\n\n  /**\n   * Common setter for the input value\n   */\n  public get value() {\n    return this.filter.value;\n  }\n  @Input('clrFilterValue')\n  public set value(value: string) {\n    if (!this.filter) {\n      return;\n    }\n    if (!value) {\n      value = '';\n    }\n    if (value !== this.filter.value) {\n      this.filter.value = value;\n      this.filterValueChange.emit(value);\n    }\n  }\n\n  @Output('clrFilterValueChange') filterValueChange = new EventEmitter();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>"
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter"
          },
          {
            "name": "smartToggleService",
            "type": "ClrPopoverToggleService"
          }
        ],
        "line": 29,
        "jsdoctags": [
          {
            "name": "filters",
            "type": "FiltersProvider<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "domAdapter",
            "type": "DomAdapter",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "smartToggleService",
            "type": "ClrPopoverToggleService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": "DatagridFilterRegistrar",
      "implements": ["CustomFilter", "AfterViewInit", "OnDestroy"],
      "accessors": {
        "customStringFilter": {
          "name": "customStringFilter",
          "setSignature": {
            "name": "customStringFilter",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "description": "<p>Customizable filter logic based on a search text</p>\n",
            "jsdoctags": [
              {
                "name": "value",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "args": [
              {
                "name": "value",
                "type": "string"
              }
            ],
            "returnType": "void",
            "line": 92,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "",
            "line": 88,
            "description": "<p>Common setter for the input value</p>\n"
          }
        }
      }
    },
    {
      "name": "DynamicWizardTestComponent",
      "id": "component-DynamicWizardTestComponent-489c511c1b4d3a3dfc144b43014d8aba",
      "file": "src/clr-angular/wizard/test-components/dynamic-wizard.mock.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template":
        "<clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n    <clr-wizard-title>My Wizard Title</clr-wizard-title>\n    <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n    <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n    <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n    <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n    <ng-container *ngFor=\"let page of pages\">\n        <clr-wizard-page *ngIf=\"!(page === 2) || showSecondPage\" [id]=\"page\">\n            <ng-template clrPageTitle>Page {{ page }}</ng-template>\n            <p>Content for page {{ page }}</p>\n        </clr-wizard-page>\n    </ng-container>\n</clr-wizard>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "open",
          "defaultValue": "true",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "pages",
          "defaultValue": "[1, 2, 4]",
          "type": "[]",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "showSecondPage",
          "defaultValue": "true",
          "type": "",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "wizard",
          "type": "ClrWizard",
          "optional": false,
          "description": "",
          "line": 30,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'wizard', {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ViewChild } from '@angular/core';\nimport { ClrWizard } from '../wizard';\n\n@Component({\n  template: `\n        <clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n            <clr-wizard-title>My Wizard Title</clr-wizard-title>\n            <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n            <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n            <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n            <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n            <ng-container *ngFor=\"let page of pages\">\n                <clr-wizard-page *ngIf=\"!(page === 2) || showSecondPage\" [id]=\"page\">\n                    <ng-template clrPageTitle>Page {{ page }}</ng-template>\n                    <p>Content for page {{ page }}</p>\n                </clr-wizard-page>\n            </ng-container>\n        </clr-wizard>\n    `,\n})\nexport class DynamicWizardTestComponent {\n  @ViewChild('wizard', { static: true })\n  wizard: ClrWizard;\n  open: boolean = true;\n  pages = [1, 2, 4];\n  showSecondPage = true;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "EmptyAnchor",
      "id": "component-EmptyAnchor-e4e6b0f96d818629ff6ba25497af1fc8",
      "file": "src/clr-angular/utils/host-wrapping/empty-anchor.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\n\n@Component({\n  template: '',\n})\nexport class EmptyAnchor {}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "HeaderActionsTestComponent",
      "id": "component-HeaderActionsTestComponent-c5d2e9fd7e26feab882995005ac92946",
      "file": "src/clr-angular/wizard/test-components/header-action-wizard.mock.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template":
        "<clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n    <clr-wizard-title>My Wizard Title</clr-wizard-title>\n    <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n    <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n    <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n    <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n    <clr-wizard-header-action (actionClicked)=\"headerActionClicked($event)\">\n        <clr-icon shape=\"cloud\" class=\"is-solid\"></clr-icon>\n    </clr-wizard-header-action>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n        <p>Content for step 1</p>\n        <ng-template clrPageHeaderActions>\n            <clr-wizard-header-action (actionClicked)=\"headerActionClicked($event)\" id=\"bell\">\n                <clr-icon shape=\"bell\" class=\"has-badge\"></clr-icon>\n            </clr-wizard-header-action>\n            <clr-wizard-header-action (actionClicked)=\"headerActionClicked($event)\" id=\"warning\">\n                <clr-icon shape=\"warning\"></clr-icon>\n            </clr-wizard-header-action>\n        </ng-template>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 2</ng-template>\n        <p>Content for step 2</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 3</ng-template>\n        <p>Content for step 3</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 4</ng-template>\n        <p>Content for step 4</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 5</ng-template>\n        <p>Content for step 5</p>\n    </clr-wizard-page>\n</clr-wizard>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_headerActionWasClicked",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "headerActionClicked",
          "defaultValue": "function() {\n    this._headerActionWasClicked = true;\n  }",
          "type": "",
          "optional": false,
          "description": "",
          "line": 54
        },
        {
          "name": "open",
          "defaultValue": "true",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 52
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component } from '@angular/core';\n\n@Component({\n  template: `\n        <clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n            <clr-wizard-title>My Wizard Title</clr-wizard-title>\n            <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n            <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n            <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n            <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n            <clr-wizard-header-action (actionClicked)=\"headerActionClicked($event)\">\n                <clr-icon shape=\"cloud\" class=\"is-solid\"></clr-icon>\n            </clr-wizard-header-action>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n                <p>Content for step 1</p>\n                <ng-template clrPageHeaderActions>\n                    <clr-wizard-header-action (actionClicked)=\"headerActionClicked($event)\" id=\"bell\">\n                        <clr-icon shape=\"bell\" class=\"has-badge\"></clr-icon>\n                    </clr-wizard-header-action>\n                    <clr-wizard-header-action (actionClicked)=\"headerActionClicked($event)\" id=\"warning\">\n                        <clr-icon shape=\"warning\"></clr-icon>\n                    </clr-wizard-header-action>\n                </ng-template>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 2</ng-template>\n                <p>Content for step 2</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 3</ng-template>\n                <p>Content for step 3</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 4</ng-template>\n                <p>Content for step 4</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 5</ng-template>\n                <p>Content for step 5</p>\n            </clr-wizard-page>\n        </clr-wizard>\n    `,\n})\nexport class HeaderActionsTestComponent {\n  open: boolean = true;\n  _headerActionWasClicked = false;\n  headerActionClicked = function() {\n    this._headerActionWasClicked = true;\n  };\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "RecursiveChildren",
      "id": "component-RecursiveChildren-0dcd4015e54100538d03dcd23fcb7806",
      "file": "src/clr-angular/data/tree-view/recursive-children.ts",
      "encapsulation": [],
      "entryComponents": [],
      "host": {},
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "clr-recursive-children",
      "styleUrls": [],
      "styles": [],
      "template":
        "<ng-container *ngIf=\"shouldRender()\">\n  <ng-container *ngFor=\"let child of parent?.children || children\">\n    <ng-container *ngTemplateOutlet=\"featuresService.recursion.template; context: getContext(child)\"></ng-container>\n  </ng-container>\n</ng-container>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "children",
          "line": 60,
          "type": "TreeNodeModel<T>[]"
        },
        {
          "name": "parent",
          "line": 59,
          "type": "TreeNodeModel<T>"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "featuresService",
          "type": "TreeFeaturesService<T>",
          "optional": false,
          "description": "",
          "line": 34,
          "modifierKind": [114]
        },
        {
          "name": "subscription",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 69
        }
      ],
      "methodsClass": [
        {
          "name": "getContext",
          "args": [
            {
              "name": "node",
              "type": "TreeNodeModel<T>"
            }
          ],
          "optional": false,
          "returnType": "ClrRecursiveForOfContext<T>",
          "typeParameters": [],
          "line": 62,
          "jsdoctags": [
            {
              "name": "node",
              "type": "TreeNodeModel<T>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71
        },
        {
          "name": "shouldRender",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 47
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, Input, Optional } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { IfExpandService } from '../../utils/conditional/if-expanded.service';\nimport { TreeFeaturesService } from './tree-features.service';\nimport { TreeNodeModel } from './models/tree-node.model';\nimport { ClrRecursiveForOfContext } from './recursive-for-of';\nimport { RecursiveTreeNodeModel } from './models/recursive-tree-node.model';\n\n@Component({\n  selector: 'clr-recursive-children',\n  template: `\n    <ng-container *ngIf=\"shouldRender()\">\n      <ng-container *ngFor=\"let child of parent?.children || children\">\n        <ng-container *ngTemplateOutlet=\"featuresService.recursion.template; context: getContext(child)\"></ng-container>\n      </ng-container>\n    </ng-container>\n  `,\n  host: {\n    '[attr.role]': '\"group\"', // Safari + VO needs direct relationship between treeitem and group; no element should exist between them\n  },\n})\n/**\n * Internal component, do not export!\n * This is part of the hack to get around https://github.com/angular/angular/issues/15998\n */\nexport class RecursiveChildren<T> {\n  constructor(public featuresService: TreeFeaturesService<T>, @Optional() private expandService: IfExpandService) {\n    if (expandService) {\n      this.subscription = this.expandService.expandChange.subscribe(value => {\n        if (!value && this.parent && !this.featuresService.eager && this.featuresService.recursion) {\n          // In the case of lazy-loading recursive trees, we clear the children on collapse.\n          // This is better in case they change between two user interaction, and that way\n          // the app itself can decide whether to cache them or not.\n          (<RecursiveTreeNodeModel<T>>this.parent).clearChildren();\n        }\n      });\n    }\n  }\n\n  shouldRender() {\n    return (\n      this.featuresService.recursion &&\n      // In the smart case, we eagerly render all the recursive children\n      // to make sure two-way bindings for selection are available.\n      // They will be hidden with CSS by the parent.\n      (this.featuresService.eager || !this.expandService || this.expandService.expanded)\n    );\n  }\n\n  // Offering the option to either give the parent node to recurse potentially lazily,\n  // or directly the list of children to display.\n  @Input('parent') parent: TreeNodeModel<T>;\n  @Input('children') children: TreeNodeModel<T>[];\n\n  getContext(node: TreeNodeModel<T>): ClrRecursiveForOfContext<T> {\n    return {\n      $implicit: node.model,\n      clrModel: node,\n    };\n  }\n\n  subscription: Subscription;\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>"
          },
          {
            "name": "expandService",
            "type": "IfExpandService"
          }
        ],
        "line": 33,
        "jsdoctags": [
          {
            "name": "featuresService",
            "type": "TreeFeaturesService<T>",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "expandService",
            "type": "IfExpandService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "TemplateApiWizardTestComponent",
      "id": "component-TemplateApiWizardTestComponent-f0f962f50f2a16a92db274091619fbfd",
      "file": "src/clr-angular/wizard/test-components/api-wizard.mock.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template":
        "<clr-wizard #wizard\n    [clrWizardOpen]=\"open\"\n    (clrWizardOpenChange)=\"onOpenChange()\"\n    [clrWizardSize]=\"mySize\"\n    (clrWizardCurrentPageChanged)=\"handleCurrentChange()\"\n    (clrWizardOnNext)=\"handleOnNext()\"\n    (clrWizardOnPrevious)=\"handleOnPrevious()\"\n    (clrWizardOnCancel)=\"handleOnCancel()\"\n    (clrWizardOnFinish)=\"handleOnFinish()\"\n    [clrWizardPreventDefaultCancel]=\"stopCancel\">\n\n    <clr-wizard-title>{{ projectedTitle }}</clr-wizard-title>\n\n    <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n    <clr-wizard-button [type]=\"'previous'\">{{ projectedButton }}</clr-wizard-button>\n    <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n    <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n    <clr-wizard-page (clrWizardPageOnLoad)=\"firstPageLoad()\">\n        <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n        <p>Content for step 1</p>\n    </clr-wizard-page>\n    <clr-wizard-page (clrWizardPageOnLoad)=\"handleOnLoad()\">\n        <ng-template clrPageTitle>{{ projectedPageTitle }}</ng-template>\n        <p class=\"lazy-content\">{{lazyLoadContent}}</p>\n    </clr-wizard-page>\n    <clr-wizard-page *ngIf=\"showExtraPage\">\n        <ng-template clrPageTitle>Sneaksy Extra Pages!</ng-template>\n        <p>Extra page!</p>\n    </clr-wizard-page>\n    <clr-wizard-page (clrWizardPageCustomButton)=\"customFinish()\">\n        <ng-template clrPageTitle>Title for Page 3</ng-template>\n        <p>{{ projectedContent }}</p>\n        <ng-template clrPageButtons>\n            <clr-wizard-button [type]=\"'custom-finish'\">{{ projectedCustomButton }}</clr-wizard-button>\n        </ng-template>\n    </clr-wizard-page>\n</clr-wizard>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_cancelled",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 107
        },
        {
          "name": "_currentPageChanged",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 92
        },
        {
          "name": "_finished",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 112
        },
        {
          "name": "_firstPageLoaded",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 87
        },
        {
          "name": "_movedBackward",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 102
        },
        {
          "name": "_movedForward",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 97
        },
        {
          "name": "_openChange",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 76
        },
        {
          "name": "_pagesLoaded",
          "defaultValue": "0",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 82
        },
        {
          "name": "lazyLoadContent",
          "defaultValue": "'Loading'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 59
        },
        {
          "name": "mySize",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 55
        },
        {
          "name": "open",
          "defaultValue": "true",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 58
        },
        {
          "name": "projectedButton",
          "defaultValue": "'Click Me'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 61
        },
        {
          "name": "projectedContent",
          "defaultValue": "'Projection Projection'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 60
        },
        {
          "name": "projectedCustomButton",
          "defaultValue": "'Custom'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 62
        },
        {
          "name": "projectedPageTitle",
          "defaultValue": "'Title for Page 2'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 57
        },
        {
          "name": "projectedTitle",
          "defaultValue": "'My Great Title'",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 56
        },
        {
          "name": "showExtraPage",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 63
        },
        {
          "name": "stopCancel",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 64
        },
        {
          "name": "wizard",
          "type": "ClrWizard",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'wizard', {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "customFinish",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66
        },
        {
          "name": "doLazyLoad",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70
        },
        {
          "name": "firstPageLoad",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88
        },
        {
          "name": "handleCurrentChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93
        },
        {
          "name": "handleOnCancel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 108
        },
        {
          "name": "handleOnFinish",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 113
        },
        {
          "name": "handleOnLoad",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83
        },
        {
          "name": "handleOnNext",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98
        },
        {
          "name": "handleOnPrevious",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 103
        },
        {
          "name": "onOpenChange",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ViewChild } from '@angular/core';\nimport { ClrWizard } from '../wizard';\n\n@Component({\n  template: `\n        <clr-wizard #wizard\n            [clrWizardOpen]=\"open\"\n            (clrWizardOpenChange)=\"onOpenChange()\"\n            [clrWizardSize]=\"mySize\"\n            (clrWizardCurrentPageChanged)=\"handleCurrentChange()\"\n            (clrWizardOnNext)=\"handleOnNext()\"\n            (clrWizardOnPrevious)=\"handleOnPrevious()\"\n            (clrWizardOnCancel)=\"handleOnCancel()\"\n            (clrWizardOnFinish)=\"handleOnFinish()\"\n            [clrWizardPreventDefaultCancel]=\"stopCancel\">\n\n            <clr-wizard-title>{{ projectedTitle }}</clr-wizard-title>\n\n            <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n            <clr-wizard-button [type]=\"'previous'\">{{ projectedButton }}</clr-wizard-button>\n            <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n            <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n            <clr-wizard-page (clrWizardPageOnLoad)=\"firstPageLoad()\">\n                <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n                <p>Content for step 1</p>\n            </clr-wizard-page>\n            <clr-wizard-page (clrWizardPageOnLoad)=\"handleOnLoad()\">\n                <ng-template clrPageTitle>{{ projectedPageTitle }}</ng-template>\n                <p class=\"lazy-content\">{{lazyLoadContent}}</p>\n            </clr-wizard-page>\n            <clr-wizard-page *ngIf=\"showExtraPage\">\n                <ng-template clrPageTitle>Sneaksy Extra Pages!</ng-template>\n                <p>Extra page!</p>\n            </clr-wizard-page>\n            <clr-wizard-page (clrWizardPageCustomButton)=\"customFinish()\">\n                <ng-template clrPageTitle>Title for Page 3</ng-template>\n                <p>{{ projectedContent }}</p>\n                <ng-template clrPageButtons>\n                    <clr-wizard-button [type]=\"'custom-finish'\">{{ projectedCustomButton }}</clr-wizard-button>\n                </ng-template>\n            </clr-wizard-page>\n        </clr-wizard>\n    `,\n})\nexport class TemplateApiWizardTestComponent {\n  @ViewChild('wizard', { static: true })\n  wizard: ClrWizard;\n  mySize: string;\n  projectedTitle = 'My Great Title';\n  projectedPageTitle = 'Title for Page 2';\n  open: boolean = true;\n  lazyLoadContent: string = 'Loading';\n  projectedContent = 'Projection Projection';\n  projectedButton = 'Click Me';\n  projectedCustomButton = 'Custom';\n  showExtraPage = false;\n  stopCancel = false;\n\n  customFinish(): void {\n    this.wizard.finish(false);\n  }\n\n  doLazyLoad(): void {\n    setTimeout(() => {\n      this.lazyLoadContent = 'Content loaded!';\n    });\n  }\n\n  _openChange = 0;\n  onOpenChange(): void {\n    this.open = this.wizard._open;\n    this._openChange++;\n  }\n\n  _pagesLoaded = 0;\n  handleOnLoad(): void {\n    this._pagesLoaded++;\n  }\n\n  _firstPageLoaded = 0;\n  firstPageLoad(): void {\n    this._firstPageLoaded++;\n  }\n\n  _currentPageChanged = 0;\n  handleCurrentChange(): void {\n    this._currentPageChanged++;\n  }\n\n  _movedForward = 0;\n  handleOnNext(): void {\n    this._movedForward++;\n  }\n\n  _movedBackward = 0;\n  handleOnPrevious(): void {\n    this._movedBackward++;\n  }\n\n  _cancelled = 0;\n  handleOnCancel(): void {\n    this._cancelled++;\n  }\n\n  _finished = 0;\n  handleOnFinish(): void {\n    this._finished++;\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "TemplateRefContainer",
      "id": "component-TemplateRefContainer-d8e404a15675dfae2bc10a7a83272f23",
      "file": "src/clr-angular/utils/template-ref/template-ref-container.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template": "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "template",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 17,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "TemplateRef, {static: false}"
            }
          ]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, TemplateRef, ViewChild } from '@angular/core';\n\n@Component({\n  template: `\n      <ng-template>\n        <ng-content></ng-content>\n      </ng-template>\n    `,\n})\nexport class TemplateRefContainer {\n  @ViewChild(TemplateRef, { static: false })\n  template: TemplateRef<any>;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "UnopenedWizardTestComponent",
      "id": "component-UnopenedWizardTestComponent-ab3320230aac983c2cc52265e7ca2448",
      "file": "src/clr-angular/wizard/test-components/unopened-wizard.mock.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "styleUrls": [],
      "styles": [],
      "template":
        "<clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n    <clr-wizard-title>My Wizard Title</clr-wizard-title>\n    <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n    <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n    <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n    <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n        <p>Content for step 1</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 2</ng-template>\n        <p>Content for step 2</p>\n    </clr-wizard-page>\n    <clr-wizard-page>\n        <ng-template clrPageTitle>Title for Page 3</ng-template>\n        <p>Content for step 3</p>\n    </clr-wizard-page>\n</clr-wizard>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "open",
          "defaultValue": "false",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 37
        },
        {
          "name": "wizard",
          "type": "ClrWizard",
          "optional": false,
          "description": "",
          "line": 36,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'wizard', {static: true}"
            }
          ]
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { Component, ViewChild } from '@angular/core';\nimport { ClrWizard } from '../wizard';\n\n@Component({\n  template: `\n        <clr-wizard #wizard [(clrWizardOpen)]=\"open\" [clrWizardSize]=\"'lg'\">\n            <clr-wizard-title>My Wizard Title</clr-wizard-title>\n            <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\n            <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\n            <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\n            <clr-wizard-button [type]=\"'finish'\">Fait Accompli</clr-wizard-button>\n\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Longer Title for Page 1</ng-template>\n                <p>Content for step 1</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 2</ng-template>\n                <p>Content for step 2</p>\n            </clr-wizard-page>\n            <clr-wizard-page>\n                <ng-template clrPageTitle>Title for Page 3</ng-template>\n                <p>Content for step 3</p>\n            </clr-wizard-page>\n        </clr-wizard>\n    `,\n})\nexport class UnopenedWizardTestComponent {\n  @ViewChild('wizard', { static: true })\n  wizard: ClrWizard;\n  open: boolean = false;\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": ""
    },
    {
      "name": "WrappedCell",
      "id": "component-WrappedCell-ac6e092d7eb780db2f550403b7beb3bd",
      "file": "src/clr-angular/data/datagrid/wrapped-cell.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dg-wrapped-cell",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-template #cellPortal>\n    <ng-content></ng-content>\n</ng-template>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "cellView",
          "type": "EmbeddedViewRef<void>",
          "optional": false,
          "description": "",
          "line": 22
        },
        {
          "name": "templateRef",
          "type": "TemplateRef<void>",
          "optional": false,
          "description": "",
          "line": 21,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'cellPortal', {static: false}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { AfterViewInit, Component, EmbeddedViewRef, TemplateRef, ViewChild } from '@angular/core';\n\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\n\n@Component({\n  selector: 'dg-wrapped-cell',\n  template: `        \n        <ng-template #cellPortal>\n            <ng-content></ng-content>\n        </ng-template>\n    `,\n})\nexport class WrappedCell implements DynamicWrapper, AfterViewInit {\n  _dynamic = false;\n  @ViewChild('cellPortal', { static: false })\n  templateRef: TemplateRef<void>;\n  cellView: EmbeddedViewRef<void>; // the cells projected view\n\n  ngAfterViewInit() {\n    this.cellView = this.templateRef.createEmbeddedView(null);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["DynamicWrapper", "AfterViewInit"]
    },
    {
      "name": "WrappedColumn",
      "id": "component-WrappedColumn-896780016324102841504c5822d37220",
      "file": "src/clr-angular/data/datagrid/wrapped-column.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dg-wrapped-column",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-template #columnPortal>\n    <ng-content></ng-content>\n</ng-template>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "columnView",
          "type": "EmbeddedViewRef<void>",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "templateRef",
          "type": "TemplateRef<void>",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'columnPortal', {static: false}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { AfterViewInit, Component, EmbeddedViewRef, TemplateRef, ViewChild } from '@angular/core';\n\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\n\n@Component({\n  selector: 'dg-wrapped-column',\n  template: `        \n        <ng-template #columnPortal>\n            <ng-content></ng-content>\n        </ng-template>\n    `,\n})\nexport class WrappedColumn implements DynamicWrapper, AfterViewInit {\n  _dynamic = false;\n\n  @ViewChild('columnPortal', { static: false })\n  templateRef: TemplateRef<void>;\n  columnView: EmbeddedViewRef<void>; // the columns projected view (in memory)\n\n  ngAfterViewInit() {\n    // Create the cells view in memory, not the DOM.\n    this.columnView = this.templateRef.createEmbeddedView(null);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["DynamicWrapper", "AfterViewInit"]
    },
    {
      "name": "WrappedRow",
      "id": "component-WrappedRow-c151783e191c80fa3532aa6a7d9653c9",
      "file": "src/clr-angular/data/datagrid/wrapped-row.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "dg-wrapped-row",
      "styleUrls": [],
      "styles": [],
      "template": "<ng-template #rowPortal>\n    <ng-content></ng-content>\n</ng-template>\n",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_dynamic",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "rowView",
          "type": "EmbeddedViewRef<void>",
          "optional": false,
          "description": "",
          "line": 23
        },
        {
          "name": "templateRef",
          "type": "TemplateRef<void>",
          "optional": false,
          "description": "",
          "line": 22,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'rowPortal', {static: false}"
            }
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode":
        "import { AfterViewInit, Component, EmbeddedViewRef, TemplateRef, ViewChild } from '@angular/core';\n\nimport { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';\n\n@Component({\n  selector: 'dg-wrapped-row',\n  template: `        \n        <ng-template #rowPortal>\n            <ng-content></ng-content>\n        </ng-template>\n    `,\n})\nexport class WrappedRow implements DynamicWrapper, AfterViewInit {\n  _dynamic = false;\n\n  @ViewChild('rowPortal', { static: false })\n  templateRef: TemplateRef<void>;\n  rowView: EmbeddedViewRef<void>; // the rows projected view (in memory)\n\n  ngAfterViewInit() {\n    // Create the cells view in memory, not the DOM.\n    this.rowView = this.templateRef.createEmbeddedView(null);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "implements": ["DynamicWrapper", "AfterViewInit"]
    }
  ],
  "modules": [
    {
      "name": "ClarityModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrButtonModule"
            },
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrDataModule"
            },
            {
              "name": "ClrDragAndDropModule"
            },
            {
              "name": "ClrEmphasisModule"
            },
            {
              "name": "ClrFocusOnViewInitModule"
            },
            {
              "name": "ClrFocusTrapModule"
            },
            {
              "name": "ClrFormsModule"
            },
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrLayoutModule"
            },
            {
              "name": "ClrLoadingModule"
            },
            {
              "name": "ClrModalModule"
            },
            {
              "name": "ClrPopoverModule"
            },
            {
              "name": "ClrPopoverModuleNext"
            },
            {
              "name": "ClrProgressBarModule"
            },
            {
              "name": "ClrSpinnerModule"
            },
            {
              "name": "ClrStepperModule"
            },
            {
              "name": "ClrWizardModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrAccordionModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AccordionOompaLoompa"
            },
            {
              "name": "AccordionWillyWonka"
            },
            {
              "name": "ClrAccordion"
            },
            {
              "name": "ClrAccordionContent"
            },
            {
              "name": "ClrAccordionDescription"
            },
            {
              "name": "ClrAccordionPanel"
            },
            {
              "name": "ClrAccordionTitle"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "AccordionOompaLoompa"
            },
            {
              "name": "AccordionWillyWonka"
            },
            {
              "name": "ClrAccordion"
            },
            {
              "name": "ClrAccordionContent"
            },
            {
              "name": "ClrAccordionDescription"
            },
            {
              "name": "ClrAccordionPanel"
            },
            {
              "name": "ClrAccordionTitle"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrAlertModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrAlert"
            },
            {
              "name": "ClrAlertItem"
            },
            {
              "name": "ClrAlertText"
            },
            {
              "name": "ClrAlerts"
            },
            {
              "name": "ClrAlertsPager"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrDropdownModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrAlert"
            },
            {
              "name": "ClrAlertItem"
            },
            {
              "name": "ClrAlertText"
            },
            {
              "name": "ClrAlerts"
            },
            {
              "name": "ClrAlertsPager"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrButtonGroupModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrButton"
            },
            {
              "name": "ClrButtonGroup"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonPopoverModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrButton"
            },
            {
              "name": "ClrButtonGroup"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrButtonModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrButtonGroupModule"
            },
            {
              "name": "ClrLoadingButtonModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrCheckboxModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrCheckbox"
            },
            {
              "name": "ClrCheckboxContainer"
            },
            {
              "name": "ClrCheckboxWrapper"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrHostWrappingModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCheckbox"
            },
            {
              "name": "ClrCheckboxContainer"
            },
            {
              "name": "ClrCheckboxWrapper"
            },
            {
              "name": "ClrCommonFormsModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrComboboxModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrCombobox"
            },
            {
              "name": "ClrOption"
            },
            {
              "name": "ClrOptions"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCombobox"
            },
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrOption"
            },
            {
              "name": "ClrOptions"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrCommonFormsModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrControlError"
            },
            {
              "name": "ClrControlHelper"
            },
            {
              "name": "ClrForm"
            },
            {
              "name": "ClrIfError"
            },
            {
              "name": "ClrLabel"
            },
            {
              "name": "ClrLayout"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrControlError"
            },
            {
              "name": "ClrControlHelper"
            },
            {
              "name": "ClrForm"
            },
            {
              "name": "ClrIfError"
            },
            {
              "name": "ClrLabel"
            },
            {
              "name": "ClrLayout"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrCommonPopoverModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PopoverDirectiveOld"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "PopoverDirectiveOld"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrConditionalModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrIfActive"
            },
            {
              "name": "ClrIfExpanded"
            },
            {
              "name": "ClrIfOpen"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrIfActive"
            },
            {
              "name": "ClrIfExpanded"
            },
            {
              "name": "ClrIfOpen"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrDatagridModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ActionableOompaLoompa"
            },
            {
              "name": "ClrDatagrid"
            },
            {
              "name": "ClrDatagridActionBar"
            },
            {
              "name": "ClrDatagridActionOverflow"
            },
            {
              "name": "ClrDatagridCell"
            },
            {
              "name": "ClrDatagridColumn"
            },
            {
              "name": "ClrDatagridColumnSeparator"
            },
            {
              "name": "ClrDatagridColumnToggle"
            },
            {
              "name": "ClrDatagridColumnToggleButton"
            },
            {
              "name": "ClrDatagridColumnToggleTitle"
            },
            {
              "name": "ClrDatagridDetail"
            },
            {
              "name": "ClrDatagridDetailBody"
            },
            {
              "name": "ClrDatagridDetailHeader"
            },
            {
              "name": "ClrDatagridFilter"
            },
            {
              "name": "ClrDatagridFooter"
            },
            {
              "name": "ClrDatagridHideableColumn"
            },
            {
              "name": "ClrDatagridItems"
            },
            {
              "name": "ClrDatagridItemsTrackBy"
            },
            {
              "name": "ClrDatagridPageSize"
            },
            {
              "name": "ClrDatagridPagination"
            },
            {
              "name": "ClrDatagridPlaceholder"
            },
            {
              "name": "ClrDatagridRow"
            },
            {
              "name": "ClrDatagridRowDetail"
            },
            {
              "name": "ClrIfDetail"
            },
            {
              "name": "DatagridCellRenderer"
            },
            {
              "name": "DatagridDetailRegisterer"
            },
            {
              "name": "DatagridHeaderRenderer"
            },
            {
              "name": "DatagridMainRenderer"
            },
            {
              "name": "DatagridNumericFilter"
            },
            {
              "name": "DatagridRowRenderer"
            },
            {
              "name": "DatagridStringFilter"
            },
            {
              "name": "DatagridWillyWonka"
            },
            {
              "name": "ExpandableOompaLoompa"
            },
            {
              "name": "WrappedCell"
            },
            {
              "name": "WrappedColumn"
            },
            {
              "name": "WrappedRow"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonPopoverModule"
            },
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrDragAndDropModule"
            },
            {
              "name": "ClrExpandableAnimationModule"
            },
            {
              "name": "ClrFocusOnViewInitModule"
            },
            {
              "name": "ClrFocusTrapModule"
            },
            {
              "name": "ClrFormsModule"
            },
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrLoadingModule"
            },
            {
              "name": "ClrOutsideClickModule"
            },
            {
              "name": "ClrPopoverModuleNext"
            },
            {
              "name": "ClrSpinnerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ActionableOompaLoompa"
            },
            {
              "name": "ClrDatagrid"
            },
            {
              "name": "ClrDatagridActionBar"
            },
            {
              "name": "ClrDatagridActionOverflow"
            },
            {
              "name": "ClrDatagridCell"
            },
            {
              "name": "ClrDatagridColumn"
            },
            {
              "name": "ClrDatagridColumnSeparator"
            },
            {
              "name": "ClrDatagridColumnToggle"
            },
            {
              "name": "ClrDatagridColumnToggleButton"
            },
            {
              "name": "ClrDatagridColumnToggleTitle"
            },
            {
              "name": "ClrDatagridDetail"
            },
            {
              "name": "ClrDatagridDetailBody"
            },
            {
              "name": "ClrDatagridDetailHeader"
            },
            {
              "name": "ClrDatagridFilter"
            },
            {
              "name": "ClrDatagridFooter"
            },
            {
              "name": "ClrDatagridHideableColumn"
            },
            {
              "name": "ClrDatagridItems"
            },
            {
              "name": "ClrDatagridItemsTrackBy"
            },
            {
              "name": "ClrDatagridPageSize"
            },
            {
              "name": "ClrDatagridPagination"
            },
            {
              "name": "ClrDatagridPlaceholder"
            },
            {
              "name": "ClrDatagridRow"
            },
            {
              "name": "ClrDatagridRowDetail"
            },
            {
              "name": "ClrIfDetail"
            },
            {
              "name": "DatagridCellRenderer"
            },
            {
              "name": "DatagridDetailRegisterer"
            },
            {
              "name": "DatagridHeaderRenderer"
            },
            {
              "name": "DatagridMainRenderer"
            },
            {
              "name": "DatagridNumericFilter"
            },
            {
              "name": "DatagridRowRenderer"
            },
            {
              "name": "DatagridStringFilter"
            },
            {
              "name": "DatagridWillyWonka"
            },
            {
              "name": "ExpandableOompaLoompa"
            },
            {
              "name": "WrappedCell"
            },
            {
              "name": "WrappedColumn"
            },
            {
              "name": "WrappedRow"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrDatalistModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrDatalist"
            },
            {
              "name": "ClrDatalistContainer"
            },
            {
              "name": "ClrDatalistInput"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrInputModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrDatalist"
            },
            {
              "name": "ClrDatalistContainer"
            },
            {
              "name": "ClrDatalistInput"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrDataModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrDatagridModule"
            },
            {
              "name": "ClrStackViewModule"
            },
            {
              "name": "ClrTreeViewModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrDatepickerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrCalendar"
            },
            {
              "name": "ClrDateContainer"
            },
            {
              "name": "ClrDateInput"
            },
            {
              "name": "ClrDatepickerViewManager"
            },
            {
              "name": "ClrDay"
            },
            {
              "name": "ClrDaypicker"
            },
            {
              "name": "ClrMonthpicker"
            },
            {
              "name": "ClrYearpicker"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrFocusTrapModule"
            },
            {
              "name": "ClrHostWrappingModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCalendar"
            },
            {
              "name": "ClrDateContainer"
            },
            {
              "name": "ClrDateInput"
            },
            {
              "name": "ClrDatepickerViewManager"
            },
            {
              "name": "ClrDay"
            },
            {
              "name": "ClrDaypicker"
            },
            {
              "name": "ClrMonthpicker"
            },
            {
              "name": "ClrYearpicker"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrDragAndDropModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrDragHandle"
            },
            {
              "name": "ClrDraggable"
            },
            {
              "name": "ClrDraggableGhost"
            },
            {
              "name": "ClrDroppable"
            },
            {
              "name": "ClrIfDragged"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrDragHandle"
            },
            {
              "name": "ClrDraggable"
            },
            {
              "name": "ClrDraggableGhost"
            },
            {
              "name": "ClrDroppable"
            },
            {
              "name": "ClrIfDragged"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrDropdownModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrDropdown"
            },
            {
              "name": "ClrDropdownItem"
            },
            {
              "name": "ClrDropdownMenu"
            },
            {
              "name": "ClrDropdownTrigger"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonPopoverModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrDropdown"
            },
            {
              "name": "ClrDropdownItem"
            },
            {
              "name": "ClrDropdownMenu"
            },
            {
              "name": "ClrDropdownTrigger"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrEmphasisModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrAlertModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrExpandableAnimationModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrExpandableAnimation"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrExpandableAnimation"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrFocusOnViewInitModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrFocusOnViewInit"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrFocusOnViewInit"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrFocusTrapModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "FocusTrapDirective"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "FocusTrapDirective"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrFormsModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCheckboxModule"
            },
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrDatalistModule"
            },
            {
              "name": "ClrDatepickerModule"
            },
            {
              "name": "ClrInputModule"
            },
            {
              "name": "ClrPasswordModule"
            },
            {
              "name": "ClrRadioModule"
            },
            {
              "name": "ClrRangeModule"
            },
            {
              "name": "ClrSelectModule"
            },
            {
              "name": "ClrTextareaModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrHostWrappingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "EmptyAnchor"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "EmptyAnchor"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrIconModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrIconCustomTag"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrIconCustomTag"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrInputModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrInput"
            },
            {
              "name": "ClrInputContainer"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrInput"
            },
            {
              "name": "ClrInputContainer"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrKeyFocusModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrKeyFocus"
            },
            {
              "name": "ClrKeyFocusItem"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrKeyFocus"
            },
            {
              "name": "ClrKeyFocusItem"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrLayoutModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrMainContainerModule"
            },
            {
              "name": "ClrNavigationModule"
            },
            {
              "name": "ClrTabsModule"
            },
            {
              "name": "ClrVerticalNavModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrLoadingButtonModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrLoadingButton"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrLoadingButton"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrLoadingModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrLoading"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrLoading"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrMainContainerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrMainContainer"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrMainContainer"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrModalModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrModal"
            },
            {
              "name": "ClrModalBody"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrFocusOnViewInitModule"
            },
            {
              "name": "ClrFocusTrapModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrFocusOnViewInitModule"
            },
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrModal"
            },
            {
              "name": "ClrModalBody"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrNavigationModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrHeader"
            },
            {
              "name": "ClrNavLevel"
            },
            {
              "name": "MainContainerWillyWonka"
            },
            {
              "name": "NavDetectionOompaLoompa"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrDropdownModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrHeader"
            },
            {
              "name": "ClrNavLevel"
            },
            {
              "name": "MainContainerWillyWonka"
            },
            {
              "name": "NavDetectionOompaLoompa"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrOutsideClickModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "OutsideClick"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "OutsideClick"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrPasswordModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrPassword"
            },
            {
              "name": "ClrPasswordContainer"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrPassword"
            },
            {
              "name": "ClrPasswordContainer"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrPopoverModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrDropdownModule"
            },
            {
              "name": "ClrSignpostModule"
            },
            {
              "name": "ClrTooltipModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrPopoverModuleNext",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrPopoverAnchor"
            },
            {
              "name": "ClrPopoverCloseButton"
            },
            {
              "name": "ClrPopoverContent"
            },
            {
              "name": "ClrPopoverOpenCloseButton"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrPopoverAnchor"
            },
            {
              "name": "ClrPopoverCloseButton"
            },
            {
              "name": "ClrPopoverContent"
            },
            {
              "name": "ClrPopoverOpenCloseButton"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrProgressBarModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrProgressBar"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrProgressBar"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrRadioModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrRadio"
            },
            {
              "name": "ClrRadioContainer"
            },
            {
              "name": "ClrRadioWrapper"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrHostWrappingModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrRadio"
            },
            {
              "name": "ClrRadioContainer"
            },
            {
              "name": "ClrRadioWrapper"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrRangeModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrRange"
            },
            {
              "name": "ClrRangeContainer"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrHostWrappingModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrRange"
            },
            {
              "name": "ClrRangeContainer"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrSelectModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrSelect"
            },
            {
              "name": "ClrSelectContainer"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrSelect"
            },
            {
              "name": "ClrSelectContainer"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrSignpostModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrSignpost"
            },
            {
              "name": "ClrSignpostContent"
            },
            {
              "name": "ClrSignpostTrigger"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonPopoverModule"
            },
            {
              "name": "ClrFocusOnViewInitModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrSignpost"
            },
            {
              "name": "ClrSignpostContent"
            },
            {
              "name": "ClrSignpostTrigger"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrSpinnerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrSpinner"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrSpinner"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrStackViewModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrStackBlock"
            },
            {
              "name": "ClrStackContentInput"
            },
            {
              "name": "ClrStackHeader"
            },
            {
              "name": "ClrStackInput"
            },
            {
              "name": "ClrStackSelect"
            },
            {
              "name": "ClrStackView"
            },
            {
              "name": "ClrStackViewCustomTags"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrExpandableAnimationModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrStackBlock"
            },
            {
              "name": "ClrStackContentInput"
            },
            {
              "name": "ClrStackHeader"
            },
            {
              "name": "ClrStackInput"
            },
            {
              "name": "ClrStackSelect"
            },
            {
              "name": "ClrStackView"
            },
            {
              "name": "ClrStackViewCustomTags"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrStepperModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AccordionOompaLoompa"
            },
            {
              "name": "AccordionWillyWonka"
            },
            {
              "name": "ClrAccordion"
            },
            {
              "name": "ClrAccordionContent"
            },
            {
              "name": "ClrAccordionDescription"
            },
            {
              "name": "ClrAccordionPanel"
            },
            {
              "name": "ClrAccordionTitle"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrAccordionModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "AccordionOompaLoompa"
            },
            {
              "name": "AccordionWillyWonka"
            },
            {
              "name": "ClrAccordion"
            },
            {
              "name": "ClrAccordionContent"
            },
            {
              "name": "ClrAccordionDescription"
            },
            {
              "name": "ClrAccordionModule"
            },
            {
              "name": "ClrAccordionPanel"
            },
            {
              "name": "ClrAccordionTitle"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrTabsModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ActiveOompaLoompa"
            },
            {
              "name": "ClrTab"
            },
            {
              "name": "ClrTabContent"
            },
            {
              "name": "ClrTabLink"
            },
            {
              "name": "ClrTabOverflowContent"
            },
            {
              "name": "ClrTabs"
            },
            {
              "name": "TabsWillyWonka"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonPopoverModule"
            },
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrKeyFocusModule"
            },
            {
              "name": "ClrTemplateRefModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ActiveOompaLoompa"
            },
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrTab"
            },
            {
              "name": "ClrTabContent"
            },
            {
              "name": "ClrTabLink"
            },
            {
              "name": "ClrTabOverflowContent"
            },
            {
              "name": "ClrTabs"
            },
            {
              "name": "TabsWillyWonka"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrTemplateRefModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TemplateRefContainer"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TemplateRefContainer"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrTextareaModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrTextarea"
            },
            {
              "name": "ClrTextareaContainer"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrCommonFormsModule"
            },
            {
              "name": "ClrTextarea"
            },
            {
              "name": "ClrTextareaContainer"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrTooltipModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrTooltip"
            },
            {
              "name": "ClrTooltipContent"
            },
            {
              "name": "ClrTooltipTrigger"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrCommonPopoverModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrTooltip"
            },
            {
              "name": "ClrTooltipContent"
            },
            {
              "name": "ClrTooltipTrigger"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrTreeViewModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrRecursiveForOf"
            },
            {
              "name": "ClrTree"
            },
            {
              "name": "ClrTreeNode"
            },
            {
              "name": "ClrTreeNodeLink"
            },
            {
              "name": "RecursiveChildren"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrLoadingModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrRecursiveForOf"
            },
            {
              "name": "ClrTree"
            },
            {
              "name": "ClrTreeNode"
            },
            {
              "name": "ClrTreeNodeLink"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrVerticalNavModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrVerticalNav"
            },
            {
              "name": "ClrVerticalNavGroup"
            },
            {
              "name": "ClrVerticalNavGroupChildren"
            },
            {
              "name": "ClrVerticalNavIcon"
            },
            {
              "name": "ClrVerticalNavLink"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrFocusOnViewInitModule"
            },
            {
              "name": "ClrIconModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrConditionalModule"
            },
            {
              "name": "ClrFocusOnViewInitModule"
            },
            {
              "name": "ClrIconModule"
            },
            {
              "name": "ClrVerticalNav"
            },
            {
              "name": "ClrVerticalNavGroup"
            },
            {
              "name": "ClrVerticalNavGroupChildren"
            },
            {
              "name": "ClrVerticalNavIcon"
            },
            {
              "name": "ClrVerticalNavLink"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrVirtualScrollModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "VirtualForOf"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "VirtualForOf"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ClrWizardModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ClrWizard"
            },
            {
              "name": "ClrWizardButton"
            },
            {
              "name": "ClrWizardCustomTags"
            },
            {
              "name": "ClrWizardHeaderAction"
            },
            {
              "name": "ClrWizardPage"
            },
            {
              "name": "ClrWizardPageButtons"
            },
            {
              "name": "ClrWizardPageHeaderActions"
            },
            {
              "name": "ClrWizardPageNavTitle"
            },
            {
              "name": "ClrWizardPageTitle"
            },
            {
              "name": "ClrWizardStepnav"
            },
            {
              "name": "ClrWizardStepnavItem"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ClrAlertModule"
            },
            {
              "name": "ClrModalModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ClrWizard"
            },
            {
              "name": "ClrWizardButton"
            },
            {
              "name": "ClrWizardCustomTags"
            },
            {
              "name": "ClrWizardHeaderAction"
            },
            {
              "name": "ClrWizardPage"
            },
            {
              "name": "ClrWizardPageButtons"
            },
            {
              "name": "ClrWizardPageHeaderActions"
            },
            {
              "name": "ClrWizardPageNavTitle"
            },
            {
              "name": "ClrWizardPageTitle"
            },
            {
              "name": "ClrWizardStepnav"
            },
            {
              "name": "ClrWizardStepnavItem"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "accordionCount",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/accordion/models/accordion.model.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "activeCounter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "ALERT_TYPES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/emphasis/alert/utils/alert-types.ts",
        "type": "string[]",
        "defaultValue": "['info', 'warning', 'danger', 'success']"
      },
      {
        "name": "ALL_COLUMN_CHANGES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/enums/column-changes.enum.ts",
        "type": "DatagridColumnChanges[]",
        "defaultValue":
          "Object.keys(DatagridColumnChanges)\n  .map(key => DatagridColumnChanges[key])\n  .filter(key => key === parseInt(key, 10))"
      },
      {
        "name": "ARIA_LIVE_TICK",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/a11y/aria-live.service.ts",
        "type": "number",
        "defaultValue": "100",
        "description": "<p>Time in milliseconds before inserting the content into the container</p>\n"
      },
      {
        "name": "BASIC_FOCUSABLE_ITEM_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/focus/focusable-item/basic-focusable-item.service.ts",
        "type": "[]",
        "defaultValue":
          "[\n  UNIQUE_ID_PROVIDER,\n  {\n    provide: FocusableItem,\n    useClass: BasicFocusableItem,\n  },\n]"
      },
      {
        "name": "BIG_ENDIAN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "InputDateDisplayFormat",
        "defaultValue": "{\n  name: 'BIG_ENDIAN',\n  format: [YEAR, MONTH, DATE],\n}"
      },
      {
        "name": "CLR_ALERT_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/emphasis/alert/alert.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText]"
      },
      {
        "name": "CLR_BUTTON_GROUP_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/button/button-group/button-group.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrButton, ClrButtonGroup]"
      },
      {
        "name": "CLR_DATAGRID_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/datagrid.module.ts",
        "type": "Type[]",
        "defaultValue":
          "[\n  // Core\n  ClrDatagrid,\n  ClrDatagridActionBar,\n  ClrDatagridActionOverflow,\n  ClrDatagridColumn,\n  ClrDatagridColumnSeparator,\n  ClrDatagridColumnToggle,\n  ClrDatagridHideableColumn,\n  ClrDatagridFilter,\n  ClrDatagridItems,\n  ClrDatagridItemsTrackBy,\n  ClrDatagridRow,\n  ClrDatagridRowDetail,\n  DatagridDetailRegisterer,\n  ClrDatagridCell,\n  ClrDatagridFooter,\n  ClrDatagridPagination,\n  ClrDatagridPageSize,\n  ClrDatagridPlaceholder,\n  ClrDatagridColumnToggleButton,\n  ClrDatagridColumnToggleTitle,\n  ClrDatagridDetail,\n  ClrIfDetail,\n  ClrDatagridDetailHeader,\n  ClrDatagridDetailBody,\n  WrappedCell,\n  WrappedColumn,\n  WrappedRow,\n\n  // Renderers\n  DatagridMainRenderer,\n  DatagridHeaderRenderer,\n  DatagridRowRenderer,\n  DatagridCellRenderer,\n\n  // Chocolate\n  DatagridWillyWonka,\n  ActionableOompaLoompa,\n  ExpandableOompaLoompa,\n\n  // Built-in shortcuts\n  DatagridStringFilter,\n  DatagridNumericFilter,\n]"
      },
      {
        "name": "CLR_DATEPICKER_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/datepicker.module.ts",
        "type": "Type[]",
        "defaultValue":
          "[\n  ClrDay,\n  ClrDateContainer,\n  ClrDateInput,\n  ClrDatepickerViewManager,\n  ClrMonthpicker,\n  ClrYearpicker,\n  ClrDaypicker,\n  ClrCalendar,\n]"
      },
      {
        "name": "CLR_DRAG_AND_DROP_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/drag-and-drop/drag-and-drop.module.ts",
        "type": "Type[]",
        "defaultValue":
          "[\n  ClrDraggable,\n  ClrDroppable,\n  ClrIfDragged,\n  ClrDragHandle,\n  ClrDraggableGhost,\n]"
      },
      {
        "name": "CLR_DROPDOWN_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/dropdown/dropdown.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem]"
      },
      {
        "name": "CLR_ICON_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/icon/icon.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrIconCustomTag]"
      },
      {
        "name": "CLR_LAYOUT_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/main-container/main-container.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrMainContainer]"
      },
      {
        "name": "CLR_LOADING_BUTTON_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/button/button-loading/loading-button.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrLoadingButton]"
      },
      {
        "name": "CLR_LOADING_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/loading/loading.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrLoading]"
      },
      {
        "name": "CLR_MENU_POSITIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/dropdown/menu-positions.ts",
        "type": "string[]",
        "defaultValue":
          "[\n  'bottom-left',\n  'bottom-right',\n  'top-left',\n  'top-right',\n  'left-bottom',\n  'left-top',\n  'right-bottom',\n  'right-top',\n]"
      },
      {
        "name": "CLR_MODAL_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/modal/modal.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrModal, ClrModalBody]"
      },
      {
        "name": "CLR_NAVIGATION_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/nav/navigation.module.ts",
        "type": "Type[]",
        "defaultValue": "[\n  ClrHeader,\n  ClrNavLevel,\n  NavDetectionOompaLoompa,\n  MainContainerWillyWonka,\n]"
      },
      {
        "name": "CLR_PROGRESS_BAR_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/progress/progress-bars/progress-bar.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrProgressBar]"
      },
      {
        "name": "CLR_SIGNPOST_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/signpost/signpost.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrSignpost, ClrSignpostContent, ClrSignpostTrigger]"
      },
      {
        "name": "CLR_SPINNER_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/progress/spinner/spinner.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrSpinner]"
      },
      {
        "name": "CLR_STACK_VIEW_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/stack-view/stack-view.module.ts",
        "type": "Type[]",
        "defaultValue":
          "[\n  ClrStackView,\n  ClrStackHeader,\n  ClrStackBlock,\n  ClrStackContentInput,\n  ClrStackViewCustomTags,\n  /**\n   * Undocumented experimental feature: inline editing.\n   */\n  ClrStackInput,\n  ClrStackSelect,\n  /**\n   * End of undocumented experimental feature.\n   */\n]"
      },
      {
        "name": "CLR_TABS_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/tabs/tabs.module.ts",
        "type": "Type[]",
        "defaultValue":
          "[\n  ClrTabContent,\n  ClrTab,\n  ClrTabs,\n  ClrTabOverflowContent,\n  ClrTabLink,\n  TabsWillyWonka,\n  ActiveOompaLoompa,\n]"
      },
      {
        "name": "CLR_TOOLTIP_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/tooltip/tooltip.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrTooltip, ClrTooltipTrigger, ClrTooltipContent]"
      },
      {
        "name": "CLR_TREE_VIEW_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/tree-view/tree-view.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink]"
      },
      {
        "name": "CLR_VERTICAL_NAV_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/vertical-nav/vertical-nav.module.ts",
        "type": "Type[]",
        "defaultValue":
          "[\n  ClrVerticalNav,\n  ClrVerticalNavLink,\n  ClrVerticalNavGroup,\n  ClrVerticalNavGroupChildren,\n  ClrVerticalNavIcon,\n]"
      },
      {
        "name": "CLR_WIZARD_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/wizard/wizard.module.ts",
        "type": "any[]",
        "defaultValue":
          "[\n  ClrWizard,\n  ClrWizardPage,\n  ClrWizardStepnav,\n  ClrWizardStepnavItem,\n  ClrWizardButton,\n  ClrWizardHeaderAction,\n  ClrWizardCustomTags,\n  ClrWizardPageTitle,\n  ClrWizardPageNavTitle,\n  ClrWizardPageButtons,\n  ClrWizardPageHeaderActions,\n]"
      },
      {
        "name": "clrDgActionId",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/datagrid-action-overflow.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "COLLAPSED_STATE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
        "type": "string",
        "defaultValue": "'collapsed'"
      },
      {
        "name": "COLUMN_STATE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
        "type": "",
        "defaultValue": "new InjectionToken<ColumnState>('COLUMN_STATE')"
      },
      {
        "name": "COLUMN_STATE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
        "type": "object",
        "defaultValue": "{\n  provide: COLUMN_STATE,\n  useFactory: columnStateFactory,\n}"
      },
      {
        "name": "COMPUTE_WIDTH_CLASS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "string",
        "defaultValue": "'datagrid-computing-columns-width'"
      },
      {
        "name": "CONDITIONAL_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/conditional/index.ts",
        "type": "Type[]",
        "defaultValue": "[ClrIfActive, ClrIfOpen, ClrIfExpanded]"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/test.ts",
        "type": "",
        "defaultValue": "(require as any).context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "counter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datalist/providers/datalist-id.service.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "counter",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/common/providers/control-id.service.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "CUSTOM_BUTTON_TYPES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/wizard/wizard-button.ts",
        "type": "any",
        "defaultValue":
          "{\n  cancel: 'custom-cancel',\n  previous: 'custom-previous',\n  next: 'custom-next',\n  finish: 'custom-finish',\n  danger: 'custom-danger',\n}"
      },
      {
        "name": "DATE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "string",
        "defaultValue": "'DD'"
      },
      {
        "name": "DATEPICKER_ENABLE_BREAKPOINT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/breakpoints/breakpoints.ts",
        "type": "number",
        "defaultValue": "768"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/accordion/stepper/stepper.module.ts",
        "type": "[]",
        "defaultValue": "[ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka]"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/accordion/accordion.module.ts",
        "type": "[]",
        "defaultValue":
          "[\n  ClrAccordion,\n  ClrAccordionPanel,\n  ClrAccordionTitle,\n  ClrAccordionDescription,\n  ClrAccordionContent,\n  AccordionOompaLoompa,\n  AccordionWillyWonka,\n]"
      },
      {
        "name": "DEFAULT_BUTTON_TYPES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/wizard/wizard-button.ts",
        "type": "any",
        "defaultValue":
          "{\n  cancel: 'cancel',\n  previous: 'previous',\n  next: 'next',\n  finish: 'finish',\n  danger: 'danger',\n}"
      },
      {
        "name": "DEFAULT_LOCALE_FORMAT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "string",
        "defaultValue": "'dd/MM/y'",
        "description": "<p>This is the en-001 short locale date format. Setting as default.</p>\n"
      },
      {
        "name": "defaultAnimationTiming",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/animations/constants.ts",
        "type": "string",
        "defaultValue": "'0.2s ease-in-out'"
      },
      {
        "name": "DELIMITER_REGEX",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "RegExp",
        "defaultValue": "/d+|m+|y+/i"
      },
      {
        "name": "domAdapterFactory",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/render/main-renderer.ts",
        "type": "",
        "defaultValue":
          "(platformId: Object) => {\n  if (isPlatformBrowser(platformId)) {\n    return new DomAdapter();\n  } else {\n    return new NoopDomAdapter();\n  }\n}"
      },
      {
        "name": "DOWN_ARROW",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "40"
      },
      {
        "name": "DROPDOWN_FOCUS_HANDLER_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/dropdown/providers/dropdown-focus-handler.service.ts",
        "type": "",
        "defaultValue": "customFocusableItemProvider(DropdownFocusHandler)"
      },
      {
        "name": "ENTER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "13"
      },
      {
        "name": "ESC",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "27"
      },
      {
        "name": "EXPANDABLE_ANIMATION_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/animations/expandable-animation/index.ts",
        "type": "Type[]",
        "defaultValue": "[ClrExpandableAnimation]"
      },
      {
        "name": "EXPANDED_STATE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
        "type": "string",
        "defaultValue": "'expanded'"
      },
      {
        "name": "flipAxis",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "ClrTransform",
        "defaultValue": "position => {\n  return {\n    ...position,\n    axis: position.axis === 0 ? 1 : 0,\n  };\n}"
      },
      {
        "name": "flipSides",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "ClrTransform",
        "defaultValue": "position => {\n  return {\n    ...position,\n    side: -1 * position.side,\n  };\n}"
      },
      {
        "name": "FOCUS_ON_VIEW_INIT",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.provider.ts",
        "type": "",
        "defaultValue": "new InjectionToken<boolean>('FOCUS_ON_VIEW_INIT')"
      },
      {
        "name": "FOCUS_ON_VIEW_INIT_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrFocusOnViewInit]"
      },
      {
        "name": "FOCUS_ON_VIEW_INIT_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.provider.ts",
        "type": "object",
        "defaultValue": "{\n  provide: FOCUS_ON_VIEW_INIT,\n  useValue: true,\n}"
      },
      {
        "name": "FOCUS_SERVICE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/focus/focus.service.ts",
        "type": "object",
        "defaultValue":
          "{\n  provide: FocusService,\n  useFactory: clrFocusServiceFactory,\n  deps: [[new Optional(), new SkipSelf(), FocusService], Renderer2],\n}"
      },
      {
        "name": "FOCUS_TRAP_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/focus-trap/index.ts",
        "type": "Type[]",
        "defaultValue": "[FocusTrapDirective]"
      },
      {
        "name": "HIDDEN_COLUMN_CLASS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "string",
        "defaultValue": "'datagrid-hidden-column'"
      },
      {
        "name": "IF_ACTIVE_ID",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "",
        "defaultValue": "new InjectionToken<number>('IF_ACTIVE_ID')"
      },
      {
        "name": "IF_ACTIVE_ID_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "object",
        "defaultValue": "{\n  provide: IF_ACTIVE_ID,\n  useFactory: tokenFactory,\n}"
      },
      {
        "name": "IS_TOGGLE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
        "type": "",
        "defaultValue": "new InjectionToken<BehaviorSubject<boolean>>('IS_TOGGLE')"
      },
      {
        "name": "IS_TOGGLE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
        "type": "object",
        "defaultValue": "{ provide: IS_TOGGLE, useFactory: isToggleFactory }"
      },
      {
        "name": "KEY_FOCUS_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/focus/key-focus/key-focus.module.ts",
        "type": "Type[]",
        "defaultValue": "[ClrKeyFocus, ClrKeyFocusItem]"
      },
      {
        "name": "LEFT_ARROW",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "37"
      },
      {
        "name": "LITTLE_ENDIAN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "InputDateDisplayFormat",
        "defaultValue": "{\n  name: 'LITTLE_ENDIAN',\n  format: [DATE, MONTH, YEAR],\n}"
      },
      {
        "name": "LITTLE_ENDIAN_REGEX",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "RegExp",
        "defaultValue": "/d+.+m+.+y+/i"
      },
      {
        "name": "MIDDLE_ENDIAN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "InputDateDisplayFormat",
        "defaultValue": "{\n  name: 'MIDDLE_ENDIAN',\n  format: [MONTH, DATE, YEAR],\n}"
      },
      {
        "name": "MIDDLE_ENDIAN_REGEX",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "RegExp",
        "defaultValue": "/m+.+d+.+y+/i"
      },
      {
        "name": "MIN_COLUMN_WIDTH",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/providers/column-resizer.service.ts",
        "type": "number",
        "defaultValue": "96"
      },
      {
        "name": "MOBILE_USERAGENT_REGEX",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "RegExp",
        "defaultValue": "/Mobi/i"
      },
      {
        "name": "MOCK_ARIA_LIVE_SERVICE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/a11y/aria-live.service.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provider: AriaLiveService,\n  useClass: MockAriaLiveService,\n}"
      },
      {
        "name": "MOCK_COLUMN_SERVICE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/providers/columns.service.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: ColumnsService,\n  useClass: MockColumnsService,\n}"
      },
      {
        "name": "MOCK_DISPLAY_MODE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/providers/display-mode.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: DisplayModeService,\n  useClass: MockDisplayModeService,\n}"
      },
      {
        "name": "MOCK_DOM_ADAPTER_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/dom-adapter/dom-adapter.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: DomAdapter,\n  useClass: MockDomAdapter,\n}"
      },
      {
        "name": "MOCK_DRAG_DROP_EVENT_BUS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: DragAndDropEventBusService,\n  useClass: MockDragAndDropEventBus,\n}"
      },
      {
        "name": "MOCK_DRAG_EVENT_LISTENER_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: DragEventListenerService,\n  useClass: MockDragEventListener,\n}"
      },
      {
        "name": "MOCK_DRAG_HANDLE_REGISTRAR_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: DragHandleRegistrarService,\n  useClass: MockDragHandleRegistrar,\n}"
      },
      {
        "name": "MOCK_ORGANIZER_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/render/render-organizer.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: DatagridRenderOrganizer,\n  useClass: MockDatagridRenderOrganizer,\n}"
      },
      {
        "name": "MOCK_TABLE_SIZE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/providers/table-size.service.mock.ts",
        "type": "object",
        "defaultValue": "{\n  provide: TableSizeService,\n  useClass: MockTableSizeService,\n}"
      },
      {
        "name": "MONTH",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "string",
        "defaultValue": "'MM'"
      },
      {
        "name": "NB_INSTANCES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "nbRow",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/datagrid-row.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "nbSelection",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/providers/selection.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "nbTabContentComponents",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/tabs/tab-content.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "nbTabLinkComponents",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/tabs/tab-link.directive.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "nbTabsComponent",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "NO_LAYOUT_CLASS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "string",
        "defaultValue": "'datagrid-no-layout'"
      },
      {
        "name": "NO_OF_DAYS_IN_A_WEEK",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "number",
        "defaultValue": "7"
      },
      {
        "name": "NO_OF_ROWS_IN_CALENDAR_VIEW",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "number",
        "defaultValue": "6"
      },
      {
        "name": "nudgeContent",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "ClrTransform",
        "defaultValue":
          "(position, forward) => {\n  const nextAlignment = position.content + (forward ? 0.5 : -0.5);\n  if (nextAlignment < 0 || nextAlignment > 1) {\n    return position;\n  } else {\n    return {\n      ...position,\n      content: nextAlignment,\n    };\n  }\n}"
      },
      {
        "name": "openCount",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover-old.directive.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "OUSTIDE_CLICK_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/outside-click/index.ts",
        "type": "Type[]",
        "defaultValue": "[OutsideClick]"
      },
      {
        "name": "OVERFLOW_AUTO",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover.ts",
        "type": "string",
        "defaultValue": "'auto'"
      },
      {
        "name": "OVERFLOW_SCROLL",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover.ts",
        "type": "string",
        "defaultValue": "'scroll'"
      },
      {
        "name": "panelAnimation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/accordion/utils/animation.ts",
        "type": "[]",
        "defaultValue":
          "[\n  trigger('skipInitialRender', [transition(':enter', [])]),\n  trigger('toggle', [\n    transition('void => *', [\n      style({ display: 'block', height: 0 }),\n      animate(defaultAnimationTiming, style({ height: '*' })),\n    ]),\n  ]),\n]"
      },
      {
        "name": "POPOVER_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/index.ts",
        "type": "Type[]",
        "defaultValue": "[PopoverDirectiveOld]"
      },
      {
        "name": "POPOVER_HOST_ANCHOR",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover-host-anchor.token.ts",
        "type": "",
        "defaultValue": "new InjectionToken<ElementRef>('POPOVER_HOST_ANCHOR')"
      },
      {
        "name": "popoverPositions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover-positions.ts",
        "type": "",
        "defaultValue":
          "[\n  'bottom-left',\n  'bottom-right',\n  'top-left',\n  'top-right',\n  'left-bottom',\n  'left-top',\n  'right-bottom',\n  'right-top',\n] as const"
      },
      {
        "name": "POSITION_ABSOLUTE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover.ts",
        "type": "string",
        "defaultValue": "'absolute'"
      },
      {
        "name": "POSITION_FIXED",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover.ts",
        "type": "string",
        "defaultValue": "'fixed'"
      },
      {
        "name": "POSITION_RELATIVE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover.ts",
        "type": "string",
        "defaultValue": "'relative'"
      },
      {
        "name": "POSITIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/tooltip/tooltip-content.ts",
        "type": "string[]",
        "defaultValue": "['bottom-left', 'bottom-right', 'top-left', 'top-right', 'right', 'left']"
      },
      {
        "name": "POSITIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/signpost/signpost-content.ts",
        "type": "string[]",
        "defaultValue":
          "[\n  'top-left',\n  'top-middle',\n  'top-right',\n  'right-top',\n  'right-middle', // default\n  'right-bottom',\n  'bottom-right',\n  'bottom-middle',\n  'bottom-left',\n  'left-bottom',\n  'left-middle',\n  'left-top',\n]"
      },
      {
        "name": "PRELOAD_MARGIN",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts",
        "type": "number",
        "defaultValue": "1"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/test.ts",
        "type": "any"
      },
      {
        "name": "RIGHT_ARROW",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "39"
      },
      {
        "name": "ROOT_DROPDOWN_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
        "type": "object",
        "defaultValue":
          "{\n  provide: RootDropdownService,\n  useFactory: clrRootDropdownFactory,\n  deps: [[new Optional(), new SkipSelf(), RootDropdownService]],\n}"
      },
      {
        "name": "RTL_REGEX",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "RegExp",
        "defaultValue": "/\\u200f/g"
      },
      {
        "name": "SIGNPOST_POSITIONS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/signpost/signpost-positions.ts",
        "type": "literal type",
        "defaultValue":
          "{\n  'top-left': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_RIGHT, offsetY: -10, offsetX: 0 },\n  'top-middle': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_CENTER, offsetY: -10, offsetX: 0 },\n  'top-right': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_LEFT, offsetY: -10, offsetX: 0 },\n  'right-top': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_BOTTOM, offsetY: 2, offsetX: 14 },\n  'right-middle': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n  'right-bottom': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_TOP, offsetY: -1, offsetX: 14 },\n  'bottom-right': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_LEFT, offsetY: 9, offsetX: -1 },\n  'bottom-middle': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_CENTER, offsetY: 9, offsetX: 12 },\n  'bottom-left': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_RIGHT, offsetY: 9, offsetX: 0 },\n  'left-bottom': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_TOP, offsetY: 0, offsetX: -14 },\n  'left-middle': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_CENTER, offsetY: 4, offsetX: -14 },\n  'left-top': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_BOTTOM, offsetY: 0, offsetX: -14 },\n  default: { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n}"
      },
      {
        "name": "SIZES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/tooltip/tooltip-content.ts",
        "type": "string[]",
        "defaultValue": "['xs', 'sm', 'md', 'lg']"
      },
      {
        "name": "SPACE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "32"
      },
      {
        "name": "stepAnimation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/accordion/utils/animation.ts",
        "type": "[]",
        "defaultValue":
          "[\n  trigger('skipInitialRender', [transition(':enter', [])]),\n  trigger('toggle', [\n    transition('void => *', [\n      style({ display: 'block', height: 0 }),\n      animate(defaultAnimationTiming, style({ height: '*' })),\n    ]),\n    transition('* => void', [\n      style({ display: 'block' }),\n      animate(defaultAnimationTiming, style({ height: 0, display: 'none' })),\n    ]),\n  ]),\n]"
      },
      {
        "name": "STRICT_WIDTH_CLASS",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "string",
        "defaultValue": "'datagrid-fixed-width'"
      },
      {
        "name": "TAB",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "9"
      },
      {
        "name": "TABS_ID",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "type": "",
        "defaultValue": "new InjectionToken<number>('TABS_ID')"
      },
      {
        "name": "TABS_ID_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "type": "object",
        "defaultValue": "{\n  provide: TABS_ID,\n  useFactory: tokenFactory,\n}"
      },
      {
        "name": "TEMPLATE_REF_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/template-ref/index.ts",
        "type": "Type[]",
        "defaultValue": "[TemplateRefContainer]"
      },
      {
        "name": "TOGGLE_SERVICE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/password/password-container.ts",
        "type": "",
        "defaultValue": "new InjectionToken<BehaviorSubject<boolean>>(undefined)"
      },
      {
        "name": "TOGGLE_SERVICE_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/password/password-container.ts",
        "type": "object",
        "defaultValue": "{ provide: TOGGLE_SERVICE, useFactory: ToggleServiceFactory }"
      },
      {
        "name": "TOTAL_DAYS_IN_DAYS_VIEW",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "number",
        "defaultValue": "NO_OF_DAYS_IN_A_WEEK * NO_OF_ROWS_IN_CALENDAR_VIEW"
      },
      {
        "name": "TREE_FEATURES_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/data/tree-view/tree-features.service.ts",
        "type": "object",
        "defaultValue":
          "{\n  provide: TreeFeaturesService,\n  useFactory: treeFeaturesFactory,\n  /*\n   * The Optional + SkipSelf pattern ensures that in case of nested components, only the root one will\n   * instantiate a new service and all its children will reuse the root's instance.\n   * If there are several roots (in this case, several independent trees on a page), each root will instantiate\n   * its own service so they won't interfere with one another.\n   *\n   * TL;DR - Optional + SkipSelf = 1 instance of TreeFeaturesService per tree.\n   */\n  deps: [[new Optional(), new SkipSelf(), TreeFeaturesService]],\n}"
      },
      {
        "name": "UNIQUE_ID",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "type": "",
        "defaultValue": "new InjectionToken<string>('UNIQUE_ID')"
      },
      {
        "name": "UNIQUE_ID_PROVIDER",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "type": "object",
        "defaultValue": "{\n  provide: UNIQUE_ID,\n  useFactory: uniqueIdFactory,\n}"
      },
      {
        "name": "UP_ARROW",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "number",
        "defaultValue": "38"
      },
      {
        "name": "USER_INPUT_REGEX",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "RegExp",
        "defaultValue": "/\\d+/g"
      },
      {
        "name": "VIRTUAL_SCROLL_DIRECTIVES",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/utils/virtual-scroll/index.ts",
        "type": "Type[]",
        "defaultValue": "[VirtualForOf]"
      },
      {
        "name": "waiting",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/popover/common/popover-old.directive.ts",
        "type": "Array<void>",
        "defaultValue": "[]"
      },
      {
        "name": "wizardHeaderActionIndex",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/wizard/wizard-header-action.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "wizardPageIndex",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/wizard/wizard-page.ts",
        "type": "number",
        "defaultValue": "0"
      },
      {
        "name": "YEAR",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "string",
        "defaultValue": "'YYYY'"
      },
      {
        "name": "YEARS_TO_DISPLAY",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/clr-angular/forms/datepicker/model/year-range.model.ts",
        "type": "number",
        "defaultValue": "10"
      }
    ],
    "functions": [
      {
        "name": "align",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "position"
          },
          {
            "name": "anchor"
          },
          {
            "name": "content"
          }
        ],
        "returnType": "ClrPopoverContentOffset",
        "jsdoctags": [
          {
            "name": "position",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "anchor",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "content",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "alignHorizontal",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "position"
          },
          {
            "name": "anchor"
          },
          {
            "name": "content"
          }
        ],
        "returnType": "number",
        "jsdoctags": [
          {
            "name": "position",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "anchor",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "content",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "alignVertical",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "position"
          },
          {
            "name": "anchor"
          },
          {
            "name": "content"
          }
        ],
        "returnType": "number",
        "jsdoctags": [
          {
            "name": "position",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "anchor",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "content",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "assertEqualDates",
        "file": "src/clr-angular/forms/datepicker/utils/test-utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "date1"
          },
          {
            "name": "date2"
          }
        ],
        "returnType": "boolean",
        "jsdoctags": [
          {
            "name": "date1",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "date2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "clrFocusServiceFactory",
        "file": "src/clr-angular/utils/focus/focus.service.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "existing"
          },
          {
            "name": "renderer"
          }
        ],
        "jsdoctags": [
          {
            "name": "existing",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "renderer",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "clrRootDropdownFactory",
        "file": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "existing"
          }
        ],
        "jsdoctags": [
          {
            "name": "existing",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "collapse",
        "file": "src/clr-angular/utils/animations/collapse/collapse.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [],
        "returnType": "AnimationMetadata[]"
      },
      {
        "name": "columnStateFactory",
        "file": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "comboboxDomAdapterFactory",
        "file": "src/clr-angular/forms/combobox/combobox.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "platformId"
          }
        ],
        "jsdoctags": [
          {
            "name": "platformId",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "createKeyboardEvent",
        "file": "src/clr-angular/forms/datepicker/utils/test-utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "code"
          },
          {
            "name": "type"
          }
        ],
        "returnType": "KeyboardEvent",
        "jsdoctags": [
          {
            "name": "code",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "type",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "customFocusableItemProvider",
        "file": "src/clr-angular/utils/focus/focusable-item/custom-focusable-item-provider.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "implementation"
          }
        ],
        "jsdoctags": [
          {
            "name": "implementation",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "datesAreEqual",
        "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "date1"
          },
          {
            "name": "date2"
          }
        ],
        "jsdoctags": [
          {
            "name": "date1",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "date2",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "fade",
        "file": "src/clr-angular/utils/animations/fade/fade.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "opacity"
          }
        ],
        "returnType": "AnimationMetadata[]",
        "jsdoctags": [
          {
            "name": "opacity",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "fadeSlide",
        "file": "src/clr-angular/utils/animations/fade-slide/fade-slide.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "direction"
          }
        ],
        "returnType": "AnimationMetadata[]",
        "jsdoctags": [
          {
            "name": "direction",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "flipSidesAndNudgeContent",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "flip"
          },
          {
            "name": "nudge"
          },
          {
            "name": "nudgeBack",
            "type": "boolean",
            "optional": true
          }
        ],
        "returnType": "ClrTransform",
        "jsdoctags": [
          {
            "name": "flip",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "nudge",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "nudgeBack",
            "type": "boolean",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getDay",
        "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Returns the day for the corresponding date where 0 represents Sunday.</p>\n",
        "args": [
          {
            "name": "year"
          },
          {
            "name": "month"
          },
          {
            "name": "date"
          }
        ],
        "returnType": "WeekDay",
        "jsdoctags": [
          {
            "name": "year",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "month",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "date",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getKeyCodes",
        "file": "src/clr-angular/utils/focus/key-focus/util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "event"
          }
        ],
        "jsdoctags": [
          {
            "name": "event",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getNumberOfDaysInTheMonth",
        "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Returns the number of days in a month.</p>\n",
        "args": [
          {
            "name": "year"
          },
          {
            "name": "month"
          }
        ],
        "returnType": "number",
        "jsdoctags": [
          {
            "name": "year",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "month",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getScrollTop",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "el"
          }
        ],
        "jsdoctags": [
          {
            "name": "el",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "isBooleanAttributeSet",
        "file": "src/clr-angular/utils/component/is-boolean-attribute-set.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "value"
          }
        ],
        "returnType": "boolean",
        "jsdoctags": [
          {
            "name": "value",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "isNonNgIterable",
        "file": "src/clr-angular/utils/virtual-scroll/non-ng-iterable.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "o",
            "type": "any"
          }
        ],
        "returnType": "NonNgIterable<T>",
        "jsdoctags": [
          {
            "name": "o",
            "type": "any",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "isPromise",
        "file": "src/clr-angular/data/tree-view/models/async-array.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "o"
          }
        ],
        "returnType": "Promise<T[]>",
        "jsdoctags": [
          {
            "name": "o",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "isToggleFactory",
        "file": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "keyValidator",
        "file": "src/clr-angular/utils/focus/key-focus/util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "key"
          }
        ],
        "jsdoctags": [
          {
            "name": "key",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "linkParent",
        "file": "src/clr-angular/utils/focus/focusable-item/linkers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Links a set of focusable items to a parent along one direction</p>\n",
        "args": [
          {
            "name": "items"
          },
          {
            "name": "parent"
          },
          {
            "name": "direction"
          }
        ],
        "jsdoctags": [
          {
            "name": "items",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "parent",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "direction",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "linkVertical",
        "file": "src/clr-angular/utils/focus/focusable-item/linkers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Double-links a set of focusable items vertically, possibly looping</p>\n",
        "args": [
          {
            "name": "items"
          },
          {
            "name": "loop",
            "type": ""
          }
        ],
        "jsdoctags": [
          {
            "name": "items",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "loop",
            "type": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "offsetHeight",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "nodes"
          }
        ],
        "jsdoctags": [
          {
            "name": "nodes",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "parseToFourDigitYear",
        "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description":
          "<p>Takes in a year and if it is a 2 digit year, returns the corresponding 4 digit year.\nWindow of 80 years before and 20 years after the present year.\nCredit: <a href=\"https://github.com/globalizejs/globalize/blob/e1b31cd6a4f1cff75b185b68b7a32220aac5196f/src/date/parse.js\">https://github.com/globalizejs/globalize/blob/e1b31cd6a4f1cff75b185b68b7a32220aac5196f/src/date/parse.js</a></p>\n",
        "args": [
          {
            "name": "year"
          }
        ],
        "returnType": "number",
        "jsdoctags": [
          {
            "name": "year",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "preserveScrollAfterAppend",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "container"
          },
          {
            "name": "operation"
          }
        ],
        "returnType": "T",
        "jsdoctags": [
          {
            "name": "container",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "operation",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "preserveScrollAfterPrepend",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "container"
          },
          {
            "name": "operation"
          }
        ],
        "returnType": "T",
        "jsdoctags": [
          {
            "name": "container",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "operation",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "preventArrowKeyScroll",
        "file": "src/clr-angular/utils/focus/key-focus/util.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "event"
          }
        ],
        "jsdoctags": [
          {
            "name": "event",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "ratioBottomReady",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "container"
          },
          {
            "name": "ignore"
          }
        ],
        "jsdoctags": [
          {
            "name": "container",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ignore",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "ratioTopReady",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "container"
          },
          {
            "name": "ignore"
          }
        ],
        "jsdoctags": [
          {
            "name": "container",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "ignore",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "setScrollTop",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "el"
          },
          {
            "name": "value"
          }
        ],
        "jsdoctags": [
          {
            "name": "el",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "value",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "slide",
        "file": "src/clr-angular/utils/animations/slide/slide.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "direction"
          }
        ],
        "returnType": "AnimationMetadata[]",
        "jsdoctags": [
          {
            "name": "direction",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "startListening",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "el"
          },
          {
            "name": "eventName"
          },
          {
            "name": "listener"
          }
        ],
        "jsdoctags": [
          {
            "name": "el",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "eventName",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "listener",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "stopListening",
        "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "el"
          },
          {
            "name": "eventName"
          },
          {
            "name": "listener"
          }
        ],
        "jsdoctags": [
          {
            "name": "el",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "eventName",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "listener",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "testVisibility",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "offset"
          },
          {
            "name": "content"
          }
        ],
        "returnType": "ClrViewportViolation[]",
        "jsdoctags": [
          {
            "name": "offset",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "content",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "ToggleServiceFactory",
        "file": "src/clr-angular/forms/password/password-container.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "tokenFactory",
        "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "tokenFactory",
        "file": "src/clr-angular/utils/conditional/if-active.service.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "treeFeaturesFactory",
        "file": "src/clr-angular/data/tree-view/tree-features.service.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "existing"
          }
        ],
        "jsdoctags": [
          {
            "name": "existing",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "triggerAllFormControlValidation",
        "file": "src/clr-angular/utils/forms/validation.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "formGroup"
          }
        ],
        "jsdoctags": [
          {
            "name": "formGroup",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "uniqueIdFactory",
        "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": []
      },
      {
        "name": "wrapObservable",
        "file": "src/clr-angular/utils/focus/wrap-observable.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "observable"
          },
          {
            "name": "onSubscribe",
            "optional": true
          },
          {
            "name": "onUnsubscribe",
            "optional": true
          }
        ],
        "returnType": "Observable<T>",
        "jsdoctags": [
          {
            "name": "observable",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "onSubscribe",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "onUnsubscribe",
            "optional": true,
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [
      {
        "name": "AsyncArray",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "T[] | null | undefined | Promise<[] | null | undefined> | Observable<[] | null | undefined>",
        "file": "src/clr-angular/data/tree-view/models/async-array.ts",
        "description": "",
        "kind": 168
      },
      {
        "name": "ClrTransform",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "function",
        "file": "src/clr-angular/utils/popover/position-operators.ts",
        "description": "",
        "kind": 162
      },
      {
        "name": "FormatType",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "\"LITTLE_ENDIAN\" | \"MIDDLE_ENDIAN\" | \"BIG_ENDIAN\"",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "description": "",
        "kind": 168
      },
      {
        "name": "InputDateDisplayFormat",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "description": "",
        "kind": 165
      },
      {
        "name": "OffsetPosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/clr-angular/utils/drag-and-drop/draggable-ghost.ts",
        "description": "",
        "kind": 165
      },
      {
        "name": "PagePosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "literal type",
        "file": "src/clr-angular/utils/drag-and-drop/draggable-ghost.ts",
        "description": "",
        "kind": 165
      },
      {
        "name": "PopoverPosition",
        "ctype": "miscellaneous",
        "subtype": "typealias",
        "rawtype": "",
        "file": "src/clr-angular/popover/common/popover-positions.ts",
        "description": "",
        "kind": 175
      }
    ],
    "enumerations": [
      {
        "name": "AccordionStatus",
        "childs": [
          {
            "name": "Inactive",
            "value": "inactive"
          },
          {
            "name": "Error",
            "value": "error"
          },
          {
            "name": "Complete",
            "value": "complete"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/accordion/enums/accordion-status.enum.ts"
      },
      {
        "name": "AccordionStrategy",
        "childs": [
          {
            "name": "Default",
            "value": "default"
          },
          {
            "name": "Multi",
            "value": "multi"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/accordion/enums/accordion-strategy.enum.ts"
      },
      {
        "name": "AriaLivePoliteness",
        "childs": [
          {
            "name": "off",
            "value": "off"
          },
          {
            "name": "polite",
            "value": "polite"
          },
          {
            "name": "assertive",
            "value": "assertive"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/a11y/aria-live.service.ts"
      },
      {
        "name": "ArrowKeyDirection",
        "childs": [
          {
            "name": "UP",
            "value": "up"
          },
          {
            "name": "DOWN",
            "value": "down"
          },
          {
            "name": "LEFT",
            "value": "left"
          },
          {
            "name": "RIGHT",
            "value": "right"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/focus/arrow-key-direction.enum.ts"
      },
      {
        "name": "ClrAlignment",
        "childs": [
          {
            "name": "START",
            "value": "0"
          },
          {
            "name": "CENTER",
            "value": "0.5"
          },
          {
            "name": "END",
            "value": "1"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/popover/enums/alignment.enum.ts"
      },
      {
        "name": "ClrAxis",
        "childs": [
          {
            "name": "VERTICAL"
          },
          {
            "name": "HORIZONTAL"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/popover/enums/axis.enum.ts"
      },
      {
        "name": "ClrDatagridSortOrder",
        "childs": [
          {
            "name": "UNSORTED",
            "value": "0"
          },
          {
            "name": "ASC",
            "value": "1"
          },
          {
            "name": "DESC"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description":
          "<p>Enumeration representing the sorting order of a datagrid column. It is a constant Enum,\ni.e. each value needs to be treated as a <code>number</code>, starting at index 0.</p>\n",
        "file": "src/clr-angular/data/datagrid/enums/sort-order.enum.ts"
      },
      {
        "name": "ClrFocusDirection",
        "childs": [
          {
            "name": "VERTICAL",
            "value": "vertical"
          },
          {
            "name": "HORIZONTAL",
            "value": "horizontal"
          },
          {
            "name": "BOTH",
            "value": "both"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/focus/key-focus/enums/focus-direction.enum.ts"
      },
      {
        "name": "ClrLoadingState",
        "childs": [
          {
            "name": "DEFAULT"
          },
          {
            "name": "LOADING"
          },
          {
            "name": "SUCCESS"
          },
          {
            "name": "ERROR"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/loading/loading.ts"
      },
      {
        "name": "ClrPosition",
        "childs": [
          {
            "name": "TOP_LEFT"
          },
          {
            "name": "TOP_CENTER"
          },
          {
            "name": "TOP_RIGHT"
          },
          {
            "name": "RIGHT_TOP"
          },
          {
            "name": "RIGHT_CENTER"
          },
          {
            "name": "RIGHT_BOTTOM"
          },
          {
            "name": "BOTTOM_RIGHT"
          },
          {
            "name": "BOTTOM_CENTER"
          },
          {
            "name": "BOTTOM_LEFT"
          },
          {
            "name": "LEFT_BOTTOM"
          },
          {
            "name": "LEFT_CENTER"
          },
          {
            "name": "LEFT_TOP"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description":
          "<p>A (clockwise) enumeration for positions around an element.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\"> A    B    C</code></pre></div><p>  L  ----------- D\n     |         |\n     |         |\n  K  |         | E\n     |         |\n     |         |\n  J  ----------- F\n    I    H    G</p>\n<p>TOP_LEFT      = A\nTOP_CENTER    = B\nTOP_RIGHT     = C\nRIGHT_TOP     = D\nRIGHT_CENTER  = E\nRIGHT_BOTTOM  = F\nBOTTOM_RIGHT  = G\nBOTTOM_CENTER = H\nBOTTOM_LEFT   = I\nLEFT_BOTTOM   = J\nLEFT_CENTER   = K\nLEFT_TOP      = L</p>\n<p>Consumers tell us that they want something to display on the TOP_LEFT of the trigger and that they want the\n<em>content</em> container to anchor/orient AT the bottom left.\nIn order to calculate the position for the content I need to match up the anchor/toggle ClrPosition with the\ncontent ClrPosition.</p>\n<p>Anchor TOP_LEFT <strong>AT</strong> Content BOTTOM_LEFT.\n     -----------\n     |         |\n     |         |\n     | content |\n     |         |\n     |         |\n     -----------\n     |/\n      -----------\n     |         |\n     |         |\n     | trigger |\n     |         |\n     |         |\n     -----------</p>\n",
        "file": "src/clr-angular/utils/enums/position.enum.ts"
      },
      {
        "name": "ClrSelectedState",
        "childs": [
          {
            "name": "UNSELECTED",
            "value": "0"
          },
          {
            "name": "SELECTED"
          },
          {
            "name": "INDETERMINATE"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/data/tree-view/models/selected-state.enum.ts"
      },
      {
        "name": "ClrSide",
        "childs": [
          {
            "name": "BEFORE"
          },
          {
            "name": "AFTER",
            "value": "1"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/popover/enums/side.enum.ts"
      },
      {
        "name": "ClrStepButtonType",
        "childs": [
          {
            "name": "Next",
            "value": "next"
          },
          {
            "name": "Submit",
            "value": "submit"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/accordion/stepper/step-button.ts"
      },
      {
        "name": "ClrViewportViolation",
        "childs": [
          {
            "name": "BOTTOM",
            "value": "0"
          },
          {
            "name": "LEFT",
            "value": "1"
          },
          {
            "name": "RIGHT",
            "value": "2"
          },
          {
            "name": "TOP",
            "value": "3"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/popover/enums/viewport-violation.enum.ts"
      },
      {
        "name": "DatagridColumnChanges",
        "childs": [
          {
            "name": "WIDTH"
          },
          {
            "name": "HIDDEN"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/data/datagrid/enums/column-changes.enum.ts"
      },
      {
        "name": "DatagridDisplayMode",
        "childs": [
          {
            "name": "DISPLAY"
          },
          {
            "name": "CALCULATE"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/data/datagrid/enums/display-mode.enum.ts"
      },
      {
        "name": "DatagridRenderStep",
        "childs": [
          {
            "name": "ALIGN_COLUMNS"
          },
          {
            "name": "CALCULATE_MODE_ON"
          },
          {
            "name": "CALCULATE_MODE_OFF"
          },
          {
            "name": "CLEAR_WIDTHS"
          },
          {
            "name": "COMPUTE_COLUMN_WIDTHS"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/data/datagrid/enums/render-step.enum.ts"
      },
      {
        "name": "DatepickerViewEnum",
        "childs": [
          {
            "name": "MONTHVIEW",
            "value": "MONTHVIEW"
          },
          {
            "name": "YEARVIEW",
            "value": "YEARVIEW"
          },
          {
            "name": "DAYVIEW",
            "value": "DAYVIEW"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/forms/datepicker/providers/view-manager.service.ts"
      },
      {
        "name": "DragEventType",
        "childs": [
          {
            "name": "DRAG_START"
          },
          {
            "name": "DRAG_MOVE"
          },
          {
            "name": "DRAG_END"
          },
          {
            "name": "DRAG_ENTER"
          },
          {
            "name": "DRAG_LEAVE"
          },
          {
            "name": "DROP"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/drag-and-drop/interfaces/drag-event.interface.ts"
      },
      {
        "name": "Layouts",
        "childs": [
          {
            "name": "VERTICAL",
            "value": "vertical"
          },
          {
            "name": "HORIZONTAL",
            "value": "horizontal"
          },
          {
            "name": "COMPACT",
            "value": "compact"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/forms/common/providers/layout.service.ts"
      },
      {
        "name": "Point",
        "childs": [
          {
            "name": "RIGHT_CENTER"
          },
          {
            "name": "RIGHT_TOP"
          },
          {
            "name": "RIGHT_BOTTOM"
          },
          {
            "name": "TOP_CENTER"
          },
          {
            "name": "TOP_RIGHT"
          },
          {
            "name": "TOP_LEFT"
          },
          {
            "name": "BOTTOM_CENTER"
          },
          {
            "name": "BOTTOM_RIGHT"
          },
          {
            "name": "BOTTOM_LEFT"
          },
          {
            "name": "LEFT_CENTER"
          },
          {
            "name": "LEFT_TOP"
          },
          {
            "name": "LEFT_BOTTOM"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/popover/common/popover.ts"
      },
      {
        "name": "SelectionType",
        "childs": [
          {
            "name": "None"
          },
          {
            "name": "Single"
          },
          {
            "name": "Multi"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/data/datagrid/enums/selection-type.ts"
      },
      {
        "name": "Side",
        "childs": [
          {
            "name": "START"
          },
          {
            "name": "END",
            "value": "1"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts"
      },
      {
        "name": "TabsLayout",
        "childs": [
          {
            "name": "HORIZONTAL",
            "value": "horizontal"
          },
          {
            "name": "VERTICAL",
            "value": "vertical"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "description": "",
        "file": "src/clr-angular/layout/tabs/enums/tabs-layout.enum.ts"
      }
    ],
    "groupedVariables": {
      "src/clr-angular/accordion/models/accordion.model.ts": [
        {
          "name": "accordionCount",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/accordion/models/accordion.model.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/utils/conditional/if-active.service.ts": [
        {
          "name": "activeCounter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/conditional/if-active.service.ts",
          "type": "number",
          "defaultValue": "0"
        },
        {
          "name": "IF_ACTIVE_ID",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/conditional/if-active.service.ts",
          "type": "",
          "defaultValue": "new InjectionToken<number>('IF_ACTIVE_ID')"
        },
        {
          "name": "IF_ACTIVE_ID_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/conditional/if-active.service.ts",
          "type": "object",
          "defaultValue": "{\n  provide: IF_ACTIVE_ID,\n  useFactory: tokenFactory,\n}"
        }
      ],
      "src/clr-angular/emphasis/alert/utils/alert-types.ts": [
        {
          "name": "ALERT_TYPES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/emphasis/alert/utils/alert-types.ts",
          "type": "string[]",
          "defaultValue": "['info', 'warning', 'danger', 'success']"
        }
      ],
      "src/clr-angular/data/datagrid/enums/column-changes.enum.ts": [
        {
          "name": "ALL_COLUMN_CHANGES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/enums/column-changes.enum.ts",
          "type": "DatagridColumnChanges[]",
          "defaultValue":
            "Object.keys(DatagridColumnChanges)\n  .map(key => DatagridColumnChanges[key])\n  .filter(key => key === parseInt(key, 10))"
        }
      ],
      "src/clr-angular/utils/a11y/aria-live.service.ts": [
        {
          "name": "ARIA_LIVE_TICK",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/a11y/aria-live.service.ts",
          "type": "number",
          "defaultValue": "100",
          "description": "<p>Time in milliseconds before inserting the content into the container</p>\n"
        }
      ],
      "src/clr-angular/utils/focus/focusable-item/basic-focusable-item.service.ts": [
        {
          "name": "BASIC_FOCUSABLE_ITEM_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/focus/focusable-item/basic-focusable-item.service.ts",
          "type": "[]",
          "defaultValue":
            "[\n  UNIQUE_ID_PROVIDER,\n  {\n    provide: FocusableItem,\n    useClass: BasicFocusableItem,\n  },\n]"
        }
      ],
      "src/clr-angular/forms/datepicker/utils/constants.ts": [
        {
          "name": "BIG_ENDIAN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "InputDateDisplayFormat",
          "defaultValue": "{\n  name: 'BIG_ENDIAN',\n  format: [YEAR, MONTH, DATE],\n}"
        },
        {
          "name": "DATE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "string",
          "defaultValue": "'DD'"
        },
        {
          "name": "DEFAULT_LOCALE_FORMAT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "string",
          "defaultValue": "'dd/MM/y'",
          "description": "<p>This is the en-001 short locale date format. Setting as default.</p>\n"
        },
        {
          "name": "DELIMITER_REGEX",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "RegExp",
          "defaultValue": "/d+|m+|y+/i"
        },
        {
          "name": "LITTLE_ENDIAN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "InputDateDisplayFormat",
          "defaultValue": "{\n  name: 'LITTLE_ENDIAN',\n  format: [DATE, MONTH, YEAR],\n}"
        },
        {
          "name": "LITTLE_ENDIAN_REGEX",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "RegExp",
          "defaultValue": "/d+.+m+.+y+/i"
        },
        {
          "name": "MIDDLE_ENDIAN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "InputDateDisplayFormat",
          "defaultValue": "{\n  name: 'MIDDLE_ENDIAN',\n  format: [MONTH, DATE, YEAR],\n}"
        },
        {
          "name": "MIDDLE_ENDIAN_REGEX",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "RegExp",
          "defaultValue": "/m+.+d+.+y+/i"
        },
        {
          "name": "MOBILE_USERAGENT_REGEX",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "RegExp",
          "defaultValue": "/Mobi/i"
        },
        {
          "name": "MONTH",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "string",
          "defaultValue": "'MM'"
        },
        {
          "name": "NO_OF_DAYS_IN_A_WEEK",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "number",
          "defaultValue": "7"
        },
        {
          "name": "NO_OF_ROWS_IN_CALENDAR_VIEW",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "number",
          "defaultValue": "6"
        },
        {
          "name": "RTL_REGEX",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "RegExp",
          "defaultValue": "/\\u200f/g"
        },
        {
          "name": "TOTAL_DAYS_IN_DAYS_VIEW",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "number",
          "defaultValue": "NO_OF_DAYS_IN_A_WEEK * NO_OF_ROWS_IN_CALENDAR_VIEW"
        },
        {
          "name": "USER_INPUT_REGEX",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "RegExp",
          "defaultValue": "/\\d+/g"
        },
        {
          "name": "YEAR",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "type": "string",
          "defaultValue": "'YYYY'"
        }
      ],
      "src/clr-angular/emphasis/alert/alert.module.ts": [
        {
          "name": "CLR_ALERT_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/emphasis/alert/alert.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText]"
        }
      ],
      "src/clr-angular/button/button-group/button-group.module.ts": [
        {
          "name": "CLR_BUTTON_GROUP_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/button/button-group/button-group.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrButton, ClrButtonGroup]"
        }
      ],
      "src/clr-angular/data/datagrid/datagrid.module.ts": [
        {
          "name": "CLR_DATAGRID_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/datagrid.module.ts",
          "type": "Type[]",
          "defaultValue":
            "[\n  // Core\n  ClrDatagrid,\n  ClrDatagridActionBar,\n  ClrDatagridActionOverflow,\n  ClrDatagridColumn,\n  ClrDatagridColumnSeparator,\n  ClrDatagridColumnToggle,\n  ClrDatagridHideableColumn,\n  ClrDatagridFilter,\n  ClrDatagridItems,\n  ClrDatagridItemsTrackBy,\n  ClrDatagridRow,\n  ClrDatagridRowDetail,\n  DatagridDetailRegisterer,\n  ClrDatagridCell,\n  ClrDatagridFooter,\n  ClrDatagridPagination,\n  ClrDatagridPageSize,\n  ClrDatagridPlaceholder,\n  ClrDatagridColumnToggleButton,\n  ClrDatagridColumnToggleTitle,\n  ClrDatagridDetail,\n  ClrIfDetail,\n  ClrDatagridDetailHeader,\n  ClrDatagridDetailBody,\n  WrappedCell,\n  WrappedColumn,\n  WrappedRow,\n\n  // Renderers\n  DatagridMainRenderer,\n  DatagridHeaderRenderer,\n  DatagridRowRenderer,\n  DatagridCellRenderer,\n\n  // Chocolate\n  DatagridWillyWonka,\n  ActionableOompaLoompa,\n  ExpandableOompaLoompa,\n\n  // Built-in shortcuts\n  DatagridStringFilter,\n  DatagridNumericFilter,\n]"
        }
      ],
      "src/clr-angular/forms/datepicker/datepicker.module.ts": [
        {
          "name": "CLR_DATEPICKER_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/datepicker.module.ts",
          "type": "Type[]",
          "defaultValue":
            "[\n  ClrDay,\n  ClrDateContainer,\n  ClrDateInput,\n  ClrDatepickerViewManager,\n  ClrMonthpicker,\n  ClrYearpicker,\n  ClrDaypicker,\n  ClrCalendar,\n]"
        }
      ],
      "src/clr-angular/utils/drag-and-drop/drag-and-drop.module.ts": [
        {
          "name": "CLR_DRAG_AND_DROP_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/drag-and-drop/drag-and-drop.module.ts",
          "type": "Type[]",
          "defaultValue":
            "[\n  ClrDraggable,\n  ClrDroppable,\n  ClrIfDragged,\n  ClrDragHandle,\n  ClrDraggableGhost,\n]"
        }
      ],
      "src/clr-angular/popover/dropdown/dropdown.module.ts": [
        {
          "name": "CLR_DROPDOWN_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/dropdown/dropdown.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem]"
        }
      ],
      "src/clr-angular/icon/icon.module.ts": [
        {
          "name": "CLR_ICON_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/icon/icon.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrIconCustomTag]"
        }
      ],
      "src/clr-angular/layout/main-container/main-container.module.ts": [
        {
          "name": "CLR_LAYOUT_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/main-container/main-container.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrMainContainer]"
        }
      ],
      "src/clr-angular/button/button-loading/loading-button.module.ts": [
        {
          "name": "CLR_LOADING_BUTTON_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/button/button-loading/loading-button.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrLoadingButton]"
        }
      ],
      "src/clr-angular/utils/loading/loading.module.ts": [
        {
          "name": "CLR_LOADING_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/loading/loading.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrLoading]"
        }
      ],
      "src/clr-angular/popover/dropdown/menu-positions.ts": [
        {
          "name": "CLR_MENU_POSITIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/dropdown/menu-positions.ts",
          "type": "string[]",
          "defaultValue":
            "[\n  'bottom-left',\n  'bottom-right',\n  'top-left',\n  'top-right',\n  'left-bottom',\n  'left-top',\n  'right-bottom',\n  'right-top',\n]"
        }
      ],
      "src/clr-angular/modal/modal.module.ts": [
        {
          "name": "CLR_MODAL_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/modal/modal.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrModal, ClrModalBody]"
        }
      ],
      "src/clr-angular/layout/nav/navigation.module.ts": [
        {
          "name": "CLR_NAVIGATION_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/nav/navigation.module.ts",
          "type": "Type[]",
          "defaultValue": "[\n  ClrHeader,\n  ClrNavLevel,\n  NavDetectionOompaLoompa,\n  MainContainerWillyWonka,\n]"
        }
      ],
      "src/clr-angular/progress/progress-bars/progress-bar.module.ts": [
        {
          "name": "CLR_PROGRESS_BAR_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/progress/progress-bars/progress-bar.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrProgressBar]"
        }
      ],
      "src/clr-angular/popover/signpost/signpost.module.ts": [
        {
          "name": "CLR_SIGNPOST_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/signpost/signpost.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrSignpost, ClrSignpostContent, ClrSignpostTrigger]"
        }
      ],
      "src/clr-angular/progress/spinner/spinner.module.ts": [
        {
          "name": "CLR_SPINNER_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/progress/spinner/spinner.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrSpinner]"
        }
      ],
      "src/clr-angular/data/stack-view/stack-view.module.ts": [
        {
          "name": "CLR_STACK_VIEW_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/stack-view/stack-view.module.ts",
          "type": "Type[]",
          "defaultValue":
            "[\n  ClrStackView,\n  ClrStackHeader,\n  ClrStackBlock,\n  ClrStackContentInput,\n  ClrStackViewCustomTags,\n  /**\n   * Undocumented experimental feature: inline editing.\n   */\n  ClrStackInput,\n  ClrStackSelect,\n  /**\n   * End of undocumented experimental feature.\n   */\n]"
        }
      ],
      "src/clr-angular/layout/tabs/tabs.module.ts": [
        {
          "name": "CLR_TABS_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/tabs/tabs.module.ts",
          "type": "Type[]",
          "defaultValue":
            "[\n  ClrTabContent,\n  ClrTab,\n  ClrTabs,\n  ClrTabOverflowContent,\n  ClrTabLink,\n  TabsWillyWonka,\n  ActiveOompaLoompa,\n]"
        }
      ],
      "src/clr-angular/popover/tooltip/tooltip.module.ts": [
        {
          "name": "CLR_TOOLTIP_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/tooltip/tooltip.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrTooltip, ClrTooltipTrigger, ClrTooltipContent]"
        }
      ],
      "src/clr-angular/data/tree-view/tree-view.module.ts": [
        {
          "name": "CLR_TREE_VIEW_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/tree-view/tree-view.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink]"
        }
      ],
      "src/clr-angular/layout/vertical-nav/vertical-nav.module.ts": [
        {
          "name": "CLR_VERTICAL_NAV_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/vertical-nav/vertical-nav.module.ts",
          "type": "Type[]",
          "defaultValue":
            "[\n  ClrVerticalNav,\n  ClrVerticalNavLink,\n  ClrVerticalNavGroup,\n  ClrVerticalNavGroupChildren,\n  ClrVerticalNavIcon,\n]"
        }
      ],
      "src/clr-angular/wizard/wizard.module.ts": [
        {
          "name": "CLR_WIZARD_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/wizard/wizard.module.ts",
          "type": "any[]",
          "defaultValue":
            "[\n  ClrWizard,\n  ClrWizardPage,\n  ClrWizardStepnav,\n  ClrWizardStepnavItem,\n  ClrWizardButton,\n  ClrWizardHeaderAction,\n  ClrWizardCustomTags,\n  ClrWizardPageTitle,\n  ClrWizardPageNavTitle,\n  ClrWizardPageButtons,\n  ClrWizardPageHeaderActions,\n]"
        }
      ],
      "src/clr-angular/data/datagrid/datagrid-action-overflow.ts": [
        {
          "name": "clrDgActionId",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/datagrid-action-overflow.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts": [
        {
          "name": "COLLAPSED_STATE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
          "type": "string",
          "defaultValue": "'collapsed'"
        },
        {
          "name": "EXPANDED_STATE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
          "type": "string",
          "defaultValue": "'expanded'"
        }
      ],
      "src/clr-angular/data/datagrid/providers/column-state.provider.ts": [
        {
          "name": "COLUMN_STATE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
          "type": "",
          "defaultValue": "new InjectionToken<ColumnState>('COLUMN_STATE')"
        },
        {
          "name": "COLUMN_STATE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
          "type": "object",
          "defaultValue": "{\n  provide: COLUMN_STATE,\n  useFactory: columnStateFactory,\n}"
        }
      ],
      "src/clr-angular/data/datagrid/render/constants.ts": [
        {
          "name": "COMPUTE_WIDTH_CLASS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/render/constants.ts",
          "type": "string",
          "defaultValue": "'datagrid-computing-columns-width'"
        },
        {
          "name": "HIDDEN_COLUMN_CLASS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/render/constants.ts",
          "type": "string",
          "defaultValue": "'datagrid-hidden-column'"
        },
        {
          "name": "NO_LAYOUT_CLASS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/render/constants.ts",
          "type": "string",
          "defaultValue": "'datagrid-no-layout'"
        },
        {
          "name": "STRICT_WIDTH_CLASS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/render/constants.ts",
          "type": "string",
          "defaultValue": "'datagrid-fixed-width'"
        }
      ],
      "src/clr-angular/utils/conditional/index.ts": [
        {
          "name": "CONDITIONAL_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/conditional/index.ts",
          "type": "Type[]",
          "defaultValue": "[ClrIfActive, ClrIfOpen, ClrIfExpanded]"
        }
      ],
      "src/clr-angular/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/test.ts",
          "type": "",
          "defaultValue": "(require as any).context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/test.ts",
          "type": "any"
        }
      ],
      "src/clr-angular/forms/datalist/providers/datalist-id.service.ts": [
        {
          "name": "counter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datalist/providers/datalist-id.service.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/forms/common/providers/control-id.service.ts": [
        {
          "name": "counter",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/common/providers/control-id.service.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/wizard/wizard-button.ts": [
        {
          "name": "CUSTOM_BUTTON_TYPES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/wizard/wizard-button.ts",
          "type": "any",
          "defaultValue":
            "{\n  cancel: 'custom-cancel',\n  previous: 'custom-previous',\n  next: 'custom-next',\n  finish: 'custom-finish',\n  danger: 'custom-danger',\n}"
        },
        {
          "name": "DEFAULT_BUTTON_TYPES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/wizard/wizard-button.ts",
          "type": "any",
          "defaultValue":
            "{\n  cancel: 'cancel',\n  previous: 'previous',\n  next: 'next',\n  finish: 'finish',\n  danger: 'danger',\n}"
        }
      ],
      "src/clr-angular/utils/breakpoints/breakpoints.ts": [
        {
          "name": "DATEPICKER_ENABLE_BREAKPOINT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/breakpoints/breakpoints.ts",
          "type": "number",
          "defaultValue": "768"
        }
      ],
      "src/clr-angular/accordion/stepper/stepper.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/accordion/stepper/stepper.module.ts",
          "type": "[]",
          "defaultValue": "[ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka]"
        }
      ],
      "src/clr-angular/accordion/accordion.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/accordion/accordion.module.ts",
          "type": "[]",
          "defaultValue":
            "[\n  ClrAccordion,\n  ClrAccordionPanel,\n  ClrAccordionTitle,\n  ClrAccordionDescription,\n  ClrAccordionContent,\n  AccordionOompaLoompa,\n  AccordionWillyWonka,\n]"
        }
      ],
      "src/clr-angular/utils/animations/constants.ts": [
        {
          "name": "defaultAnimationTiming",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/animations/constants.ts",
          "type": "string",
          "defaultValue": "'0.2s ease-in-out'"
        }
      ],
      "src/clr-angular/data/datagrid/render/main-renderer.ts": [
        {
          "name": "domAdapterFactory",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/render/main-renderer.ts",
          "type": "",
          "defaultValue":
            "(platformId: Object) => {\n  if (isPlatformBrowser(platformId)) {\n    return new DomAdapter();\n  } else {\n    return new NoopDomAdapter();\n  }\n}"
        }
      ],
      "src/clr-angular/utils/key-codes/key-codes.ts": [
        {
          "name": "DOWN_ARROW",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "40"
        },
        {
          "name": "ENTER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "13"
        },
        {
          "name": "ESC",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "27"
        },
        {
          "name": "LEFT_ARROW",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "37"
        },
        {
          "name": "RIGHT_ARROW",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "39"
        },
        {
          "name": "SPACE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "32"
        },
        {
          "name": "TAB",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "9"
        },
        {
          "name": "UP_ARROW",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/key-codes/key-codes.ts",
          "type": "number",
          "defaultValue": "38"
        }
      ],
      "src/clr-angular/popover/dropdown/providers/dropdown-focus-handler.service.ts": [
        {
          "name": "DROPDOWN_FOCUS_HANDLER_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/dropdown/providers/dropdown-focus-handler.service.ts",
          "type": "",
          "defaultValue": "customFocusableItemProvider(DropdownFocusHandler)"
        }
      ],
      "src/clr-angular/utils/animations/expandable-animation/index.ts": [
        {
          "name": "EXPANDABLE_ANIMATION_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/animations/expandable-animation/index.ts",
          "type": "Type[]",
          "defaultValue": "[ClrExpandableAnimation]"
        }
      ],
      "src/clr-angular/utils/popover/position-operators.ts": [
        {
          "name": "flipAxis",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "type": "ClrTransform",
          "defaultValue": "position => {\n  return {\n    ...position,\n    axis: position.axis === 0 ? 1 : 0,\n  };\n}"
        },
        {
          "name": "flipSides",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "type": "ClrTransform",
          "defaultValue": "position => {\n  return {\n    ...position,\n    side: -1 * position.side,\n  };\n}"
        },
        {
          "name": "nudgeContent",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "type": "ClrTransform",
          "defaultValue":
            "(position, forward) => {\n  const nextAlignment = position.content + (forward ? 0.5 : -0.5);\n  if (nextAlignment < 0 || nextAlignment > 1) {\n    return position;\n  } else {\n    return {\n      ...position,\n      content: nextAlignment,\n    };\n  }\n}"
        }
      ],
      "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.provider.ts": [
        {
          "name": "FOCUS_ON_VIEW_INIT",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.provider.ts",
          "type": "",
          "defaultValue": "new InjectionToken<boolean>('FOCUS_ON_VIEW_INIT')"
        },
        {
          "name": "FOCUS_ON_VIEW_INIT_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.provider.ts",
          "type": "object",
          "defaultValue": "{\n  provide: FOCUS_ON_VIEW_INIT,\n  useValue: true,\n}"
        }
      ],
      "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.module.ts": [
        {
          "name": "FOCUS_ON_VIEW_INIT_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrFocusOnViewInit]"
        }
      ],
      "src/clr-angular/utils/focus/focus.service.ts": [
        {
          "name": "FOCUS_SERVICE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/focus/focus.service.ts",
          "type": "object",
          "defaultValue":
            "{\n  provide: FocusService,\n  useFactory: clrFocusServiceFactory,\n  deps: [[new Optional(), new SkipSelf(), FocusService], Renderer2],\n}"
        }
      ],
      "src/clr-angular/utils/focus-trap/index.ts": [
        {
          "name": "FOCUS_TRAP_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/focus-trap/index.ts",
          "type": "Type[]",
          "defaultValue": "[FocusTrapDirective]"
        }
      ],
      "src/clr-angular/forms/checkbox/checkbox-wrapper.ts": [
        {
          "name": "IS_TOGGLE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
          "type": "",
          "defaultValue": "new InjectionToken<BehaviorSubject<boolean>>('IS_TOGGLE')"
        },
        {
          "name": "IS_TOGGLE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
          "type": "object",
          "defaultValue": "{ provide: IS_TOGGLE, useFactory: isToggleFactory }"
        }
      ],
      "src/clr-angular/utils/focus/key-focus/key-focus.module.ts": [
        {
          "name": "KEY_FOCUS_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/focus/key-focus/key-focus.module.ts",
          "type": "Type[]",
          "defaultValue": "[ClrKeyFocus, ClrKeyFocusItem]"
        }
      ],
      "src/clr-angular/data/datagrid/providers/column-resizer.service.ts": [
        {
          "name": "MIN_COLUMN_WIDTH",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/providers/column-resizer.service.ts",
          "type": "number",
          "defaultValue": "96"
        }
      ],
      "src/clr-angular/utils/a11y/aria-live.service.mock.ts": [
        {
          "name": "MOCK_ARIA_LIVE_SERVICE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/a11y/aria-live.service.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provider: AriaLiveService,\n  useClass: MockAriaLiveService,\n}"
        }
      ],
      "src/clr-angular/data/datagrid/providers/columns.service.mock.ts": [
        {
          "name": "MOCK_COLUMN_SERVICE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/providers/columns.service.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: ColumnsService,\n  useClass: MockColumnsService,\n}"
        }
      ],
      "src/clr-angular/data/datagrid/providers/display-mode.mock.ts": [
        {
          "name": "MOCK_DISPLAY_MODE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/providers/display-mode.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: DisplayModeService,\n  useClass: MockDisplayModeService,\n}"
        }
      ],
      "src/clr-angular/utils/dom-adapter/dom-adapter.mock.ts": [
        {
          "name": "MOCK_DOM_ADAPTER_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/dom-adapter/dom-adapter.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: DomAdapter,\n  useClass: MockDomAdapter,\n}"
        }
      ],
      "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.mock.ts": [
        {
          "name": "MOCK_DRAG_DROP_EVENT_BUS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: DragAndDropEventBusService,\n  useClass: MockDragAndDropEventBus,\n}"
        }
      ],
      "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.mock.ts": [
        {
          "name": "MOCK_DRAG_EVENT_LISTENER_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: DragEventListenerService,\n  useClass: MockDragEventListener,\n}"
        }
      ],
      "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.mock.ts": [
        {
          "name": "MOCK_DRAG_HANDLE_REGISTRAR_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: DragHandleRegistrarService,\n  useClass: MockDragHandleRegistrar,\n}"
        }
      ],
      "src/clr-angular/data/datagrid/render/render-organizer.mock.ts": [
        {
          "name": "MOCK_ORGANIZER_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/render/render-organizer.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: DatagridRenderOrganizer,\n  useClass: MockDatagridRenderOrganizer,\n}"
        }
      ],
      "src/clr-angular/data/datagrid/providers/table-size.service.mock.ts": [
        {
          "name": "MOCK_TABLE_SIZE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/providers/table-size.service.mock.ts",
          "type": "object",
          "defaultValue": "{\n  provide: TableSizeService,\n  useClass: MockTableSizeService,\n}"
        }
      ],
      "src/clr-angular/utils/id-generator/id-generator.service.ts": [
        {
          "name": "NB_INSTANCES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
          "type": "number",
          "defaultValue": "0"
        },
        {
          "name": "UNIQUE_ID",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
          "type": "",
          "defaultValue": "new InjectionToken<string>('UNIQUE_ID')"
        },
        {
          "name": "UNIQUE_ID_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
          "type": "object",
          "defaultValue": "{\n  provide: UNIQUE_ID,\n  useFactory: uniqueIdFactory,\n}"
        }
      ],
      "src/clr-angular/data/datagrid/datagrid-row.ts": [
        {
          "name": "nbRow",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/datagrid-row.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/data/datagrid/providers/selection.ts": [
        {
          "name": "nbSelection",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/datagrid/providers/selection.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/layout/tabs/tab-content.ts": [
        {
          "name": "nbTabContentComponents",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/tabs/tab-content.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/layout/tabs/tab-link.directive.ts": [
        {
          "name": "nbTabLinkComponents",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/tabs/tab-link.directive.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/layout/tabs/tabs-id.provider.ts": [
        {
          "name": "nbTabsComponent",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
          "type": "number",
          "defaultValue": "0"
        },
        {
          "name": "TABS_ID",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
          "type": "",
          "defaultValue": "new InjectionToken<number>('TABS_ID')"
        },
        {
          "name": "TABS_ID_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
          "type": "object",
          "defaultValue": "{\n  provide: TABS_ID,\n  useFactory: tokenFactory,\n}"
        }
      ],
      "src/clr-angular/popover/common/popover-old.directive.ts": [
        {
          "name": "openCount",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover-old.directive.ts",
          "type": "number",
          "defaultValue": "0"
        },
        {
          "name": "waiting",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover-old.directive.ts",
          "type": "Array<void>",
          "defaultValue": "[]"
        }
      ],
      "src/clr-angular/utils/outside-click/index.ts": [
        {
          "name": "OUSTIDE_CLICK_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/outside-click/index.ts",
          "type": "Type[]",
          "defaultValue": "[OutsideClick]"
        }
      ],
      "src/clr-angular/popover/common/popover.ts": [
        {
          "name": "OVERFLOW_AUTO",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover.ts",
          "type": "string",
          "defaultValue": "'auto'"
        },
        {
          "name": "OVERFLOW_SCROLL",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover.ts",
          "type": "string",
          "defaultValue": "'scroll'"
        },
        {
          "name": "POSITION_ABSOLUTE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover.ts",
          "type": "string",
          "defaultValue": "'absolute'"
        },
        {
          "name": "POSITION_FIXED",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover.ts",
          "type": "string",
          "defaultValue": "'fixed'"
        },
        {
          "name": "POSITION_RELATIVE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover.ts",
          "type": "string",
          "defaultValue": "'relative'"
        }
      ],
      "src/clr-angular/accordion/utils/animation.ts": [
        {
          "name": "panelAnimation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/accordion/utils/animation.ts",
          "type": "[]",
          "defaultValue":
            "[\n  trigger('skipInitialRender', [transition(':enter', [])]),\n  trigger('toggle', [\n    transition('void => *', [\n      style({ display: 'block', height: 0 }),\n      animate(defaultAnimationTiming, style({ height: '*' })),\n    ]),\n  ]),\n]"
        },
        {
          "name": "stepAnimation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/accordion/utils/animation.ts",
          "type": "[]",
          "defaultValue":
            "[\n  trigger('skipInitialRender', [transition(':enter', [])]),\n  trigger('toggle', [\n    transition('void => *', [\n      style({ display: 'block', height: 0 }),\n      animate(defaultAnimationTiming, style({ height: '*' })),\n    ]),\n    transition('* => void', [\n      style({ display: 'block' }),\n      animate(defaultAnimationTiming, style({ height: 0, display: 'none' })),\n    ]),\n  ]),\n]"
        }
      ],
      "src/clr-angular/popover/common/index.ts": [
        {
          "name": "POPOVER_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/index.ts",
          "type": "Type[]",
          "defaultValue": "[PopoverDirectiveOld]"
        }
      ],
      "src/clr-angular/popover/common/popover-host-anchor.token.ts": [
        {
          "name": "POPOVER_HOST_ANCHOR",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover-host-anchor.token.ts",
          "type": "",
          "defaultValue": "new InjectionToken<ElementRef>('POPOVER_HOST_ANCHOR')"
        }
      ],
      "src/clr-angular/popover/common/popover-positions.ts": [
        {
          "name": "popoverPositions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/common/popover-positions.ts",
          "type": "",
          "defaultValue":
            "[\n  'bottom-left',\n  'bottom-right',\n  'top-left',\n  'top-right',\n  'left-bottom',\n  'left-top',\n  'right-bottom',\n  'right-top',\n] as const"
        }
      ],
      "src/clr-angular/popover/tooltip/tooltip-content.ts": [
        {
          "name": "POSITIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/tooltip/tooltip-content.ts",
          "type": "string[]",
          "defaultValue": "['bottom-left', 'bottom-right', 'top-left', 'top-right', 'right', 'left']"
        },
        {
          "name": "SIZES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/tooltip/tooltip-content.ts",
          "type": "string[]",
          "defaultValue": "['xs', 'sm', 'md', 'lg']"
        }
      ],
      "src/clr-angular/popover/signpost/signpost-content.ts": [
        {
          "name": "POSITIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/signpost/signpost-content.ts",
          "type": "string[]",
          "defaultValue":
            "[\n  'top-left',\n  'top-middle',\n  'top-right',\n  'right-top',\n  'right-middle', // default\n  'right-bottom',\n  'bottom-right',\n  'bottom-middle',\n  'bottom-left',\n  'left-bottom',\n  'left-middle',\n  'left-top',\n]"
        }
      ],
      "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts": [
        {
          "name": "PRELOAD_MARGIN",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts",
          "type": "number",
          "defaultValue": "1"
        }
      ],
      "src/clr-angular/popover/dropdown/providers/dropdown.service.ts": [
        {
          "name": "ROOT_DROPDOWN_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
          "type": "object",
          "defaultValue":
            "{\n  provide: RootDropdownService,\n  useFactory: clrRootDropdownFactory,\n  deps: [[new Optional(), new SkipSelf(), RootDropdownService]],\n}"
        }
      ],
      "src/clr-angular/popover/signpost/signpost-positions.ts": [
        {
          "name": "SIGNPOST_POSITIONS",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/popover/signpost/signpost-positions.ts",
          "type": "literal type",
          "defaultValue":
            "{\n  'top-left': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_RIGHT, offsetY: -10, offsetX: 0 },\n  'top-middle': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_CENTER, offsetY: -10, offsetX: 0 },\n  'top-right': { anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_LEFT, offsetY: -10, offsetX: 0 },\n  'right-top': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_BOTTOM, offsetY: 2, offsetX: 14 },\n  'right-middle': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n  'right-bottom': { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_TOP, offsetY: -1, offsetX: 14 },\n  'bottom-right': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_LEFT, offsetY: 9, offsetX: -1 },\n  'bottom-middle': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_CENTER, offsetY: 9, offsetX: 12 },\n  'bottom-left': { anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_RIGHT, offsetY: 9, offsetX: 0 },\n  'left-bottom': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_TOP, offsetY: 0, offsetX: -14 },\n  'left-middle': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_CENTER, offsetY: 4, offsetX: -14 },\n  'left-top': { anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_BOTTOM, offsetY: 0, offsetX: -14 },\n  default: { anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14 },\n}"
        }
      ],
      "src/clr-angular/utils/template-ref/index.ts": [
        {
          "name": "TEMPLATE_REF_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/template-ref/index.ts",
          "type": "Type[]",
          "defaultValue": "[TemplateRefContainer]"
        }
      ],
      "src/clr-angular/forms/password/password-container.ts": [
        {
          "name": "TOGGLE_SERVICE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/password/password-container.ts",
          "type": "",
          "defaultValue": "new InjectionToken<BehaviorSubject<boolean>>(undefined)"
        },
        {
          "name": "TOGGLE_SERVICE_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/password/password-container.ts",
          "type": "object",
          "defaultValue": "{ provide: TOGGLE_SERVICE, useFactory: ToggleServiceFactory }"
        }
      ],
      "src/clr-angular/data/tree-view/tree-features.service.ts": [
        {
          "name": "TREE_FEATURES_PROVIDER",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/data/tree-view/tree-features.service.ts",
          "type": "object",
          "defaultValue":
            "{\n  provide: TreeFeaturesService,\n  useFactory: treeFeaturesFactory,\n  /*\n   * The Optional + SkipSelf pattern ensures that in case of nested components, only the root one will\n   * instantiate a new service and all its children will reuse the root's instance.\n   * If there are several roots (in this case, several independent trees on a page), each root will instantiate\n   * its own service so they won't interfere with one another.\n   *\n   * TL;DR - Optional + SkipSelf = 1 instance of TreeFeaturesService per tree.\n   */\n  deps: [[new Optional(), new SkipSelf(), TreeFeaturesService]],\n}"
        }
      ],
      "src/clr-angular/utils/virtual-scroll/index.ts": [
        {
          "name": "VIRTUAL_SCROLL_DIRECTIVES",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/utils/virtual-scroll/index.ts",
          "type": "Type[]",
          "defaultValue": "[VirtualForOf]"
        }
      ],
      "src/clr-angular/wizard/wizard-header-action.ts": [
        {
          "name": "wizardHeaderActionIndex",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/wizard/wizard-header-action.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/wizard/wizard-page.ts": [
        {
          "name": "wizardPageIndex",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/wizard/wizard-page.ts",
          "type": "number",
          "defaultValue": "0"
        }
      ],
      "src/clr-angular/forms/datepicker/model/year-range.model.ts": [
        {
          "name": "YEARS_TO_DISPLAY",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/clr-angular/forms/datepicker/model/year-range.model.ts",
          "type": "number",
          "defaultValue": "10"
        }
      ]
    },
    "groupedFunctions": {
      "src/clr-angular/utils/popover/position-operators.ts": [
        {
          "name": "align",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "position"
            },
            {
              "name": "anchor"
            },
            {
              "name": "content"
            }
          ],
          "returnType": "ClrPopoverContentOffset",
          "jsdoctags": [
            {
              "name": "position",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "anchor",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "content",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "alignHorizontal",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "position"
            },
            {
              "name": "anchor"
            },
            {
              "name": "content"
            }
          ],
          "returnType": "number",
          "jsdoctags": [
            {
              "name": "position",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "anchor",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "content",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "alignVertical",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "position"
            },
            {
              "name": "anchor"
            },
            {
              "name": "content"
            }
          ],
          "returnType": "number",
          "jsdoctags": [
            {
              "name": "position",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "anchor",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "content",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "flipSidesAndNudgeContent",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "flip"
            },
            {
              "name": "nudge"
            },
            {
              "name": "nudgeBack",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "ClrTransform",
          "jsdoctags": [
            {
              "name": "flip",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "nudge",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "nudgeBack",
              "type": "boolean",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "testVisibility",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "offset"
            },
            {
              "name": "content"
            }
          ],
          "returnType": "ClrViewportViolation[]",
          "jsdoctags": [
            {
              "name": "offset",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "content",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/forms/datepicker/utils/test-utils.ts": [
        {
          "name": "assertEqualDates",
          "file": "src/clr-angular/forms/datepicker/utils/test-utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "date1"
            },
            {
              "name": "date2"
            }
          ],
          "returnType": "boolean",
          "jsdoctags": [
            {
              "name": "date1",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "date2",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "createKeyboardEvent",
          "file": "src/clr-angular/forms/datepicker/utils/test-utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "code"
            },
            {
              "name": "type"
            }
          ],
          "returnType": "KeyboardEvent",
          "jsdoctags": [
            {
              "name": "code",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "type",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/focus/focus.service.ts": [
        {
          "name": "clrFocusServiceFactory",
          "file": "src/clr-angular/utils/focus/focus.service.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "existing"
            },
            {
              "name": "renderer"
            }
          ],
          "jsdoctags": [
            {
              "name": "existing",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "renderer",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/popover/dropdown/providers/dropdown.service.ts": [
        {
          "name": "clrRootDropdownFactory",
          "file": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "existing"
            }
          ],
          "jsdoctags": [
            {
              "name": "existing",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/animations/collapse/collapse.ts": [
        {
          "name": "collapse",
          "file": "src/clr-angular/utils/animations/collapse/collapse.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [],
          "returnType": "AnimationMetadata[]"
        }
      ],
      "src/clr-angular/data/datagrid/providers/column-state.provider.ts": [
        {
          "name": "columnStateFactory",
          "file": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "src/clr-angular/forms/combobox/combobox.ts": [
        {
          "name": "comboboxDomAdapterFactory",
          "file": "src/clr-angular/forms/combobox/combobox.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "platformId"
            }
          ],
          "jsdoctags": [
            {
              "name": "platformId",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/focus/focusable-item/custom-focusable-item-provider.ts": [
        {
          "name": "customFocusableItemProvider",
          "file": "src/clr-angular/utils/focus/focusable-item/custom-focusable-item-provider.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "implementation"
            }
          ],
          "jsdoctags": [
            {
              "name": "implementation",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/forms/datepicker/utils/date-utils.ts": [
        {
          "name": "datesAreEqual",
          "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "date1"
            },
            {
              "name": "date2"
            }
          ],
          "jsdoctags": [
            {
              "name": "date1",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "date2",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getDay",
          "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Returns the day for the corresponding date where 0 represents Sunday.</p>\n",
          "args": [
            {
              "name": "year"
            },
            {
              "name": "month"
            },
            {
              "name": "date"
            }
          ],
          "returnType": "WeekDay",
          "jsdoctags": [
            {
              "name": "year",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "month",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "date",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getNumberOfDaysInTheMonth",
          "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Returns the number of days in a month.</p>\n",
          "args": [
            {
              "name": "year"
            },
            {
              "name": "month"
            }
          ],
          "returnType": "number",
          "jsdoctags": [
            {
              "name": "year",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "month",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "parseToFourDigitYear",
          "file": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description":
            "<p>Takes in a year and if it is a 2 digit year, returns the corresponding 4 digit year.\nWindow of 80 years before and 20 years after the present year.\nCredit: <a href=\"https://github.com/globalizejs/globalize/blob/e1b31cd6a4f1cff75b185b68b7a32220aac5196f/src/date/parse.js\">https://github.com/globalizejs/globalize/blob/e1b31cd6a4f1cff75b185b68b7a32220aac5196f/src/date/parse.js</a></p>\n",
          "args": [
            {
              "name": "year"
            }
          ],
          "returnType": "number",
          "jsdoctags": [
            {
              "name": "year",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/animations/fade/fade.ts": [
        {
          "name": "fade",
          "file": "src/clr-angular/utils/animations/fade/fade.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "opacity"
            }
          ],
          "returnType": "AnimationMetadata[]",
          "jsdoctags": [
            {
              "name": "opacity",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/animations/fade-slide/fade-slide.ts": [
        {
          "name": "fadeSlide",
          "file": "src/clr-angular/utils/animations/fade-slide/fade-slide.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "direction"
            }
          ],
          "returnType": "AnimationMetadata[]",
          "jsdoctags": [
            {
              "name": "direction",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/focus/key-focus/util.ts": [
        {
          "name": "getKeyCodes",
          "file": "src/clr-angular/utils/focus/key-focus/util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "event"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "keyValidator",
          "file": "src/clr-angular/utils/focus/key-focus/util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "key"
            }
          ],
          "jsdoctags": [
            {
              "name": "key",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "preventArrowKeyScroll",
          "file": "src/clr-angular/utils/focus/key-focus/util.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "event"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/virtual-scroll/dom-helpers.ts": [
        {
          "name": "getScrollTop",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "el"
            }
          ],
          "jsdoctags": [
            {
              "name": "el",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "offsetHeight",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "nodes"
            }
          ],
          "jsdoctags": [
            {
              "name": "nodes",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "preserveScrollAfterAppend",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "container"
            },
            {
              "name": "operation"
            }
          ],
          "returnType": "T",
          "jsdoctags": [
            {
              "name": "container",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "operation",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "preserveScrollAfterPrepend",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "container"
            },
            {
              "name": "operation"
            }
          ],
          "returnType": "T",
          "jsdoctags": [
            {
              "name": "container",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "operation",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ratioBottomReady",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "container"
            },
            {
              "name": "ignore"
            }
          ],
          "jsdoctags": [
            {
              "name": "container",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "ignore",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ratioTopReady",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "container"
            },
            {
              "name": "ignore"
            }
          ],
          "jsdoctags": [
            {
              "name": "container",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "ignore",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setScrollTop",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "el"
            },
            {
              "name": "value"
            }
          ],
          "jsdoctags": [
            {
              "name": "el",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "startListening",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "el"
            },
            {
              "name": "eventName"
            },
            {
              "name": "listener"
            }
          ],
          "jsdoctags": [
            {
              "name": "el",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "eventName",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "listener",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "stopListening",
          "file": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "el"
            },
            {
              "name": "eventName"
            },
            {
              "name": "listener"
            }
          ],
          "jsdoctags": [
            {
              "name": "el",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "eventName",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "listener",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/component/is-boolean-attribute-set.ts": [
        {
          "name": "isBooleanAttributeSet",
          "file": "src/clr-angular/utils/component/is-boolean-attribute-set.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "value"
            }
          ],
          "returnType": "boolean",
          "jsdoctags": [
            {
              "name": "value",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/virtual-scroll/non-ng-iterable.ts": [
        {
          "name": "isNonNgIterable",
          "file": "src/clr-angular/utils/virtual-scroll/non-ng-iterable.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "o",
              "type": "any"
            }
          ],
          "returnType": "NonNgIterable<T>",
          "jsdoctags": [
            {
              "name": "o",
              "type": "any",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/data/tree-view/models/async-array.ts": [
        {
          "name": "isPromise",
          "file": "src/clr-angular/data/tree-view/models/async-array.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "o"
            }
          ],
          "returnType": "Promise<T[]>",
          "jsdoctags": [
            {
              "name": "o",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/forms/checkbox/checkbox-wrapper.ts": [
        {
          "name": "isToggleFactory",
          "file": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "src/clr-angular/utils/focus/focusable-item/linkers.ts": [
        {
          "name": "linkParent",
          "file": "src/clr-angular/utils/focus/focusable-item/linkers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Links a set of focusable items to a parent along one direction</p>\n",
          "args": [
            {
              "name": "items"
            },
            {
              "name": "parent"
            },
            {
              "name": "direction"
            }
          ],
          "jsdoctags": [
            {
              "name": "items",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "parent",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "direction",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "linkVertical",
          "file": "src/clr-angular/utils/focus/focusable-item/linkers.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Double-links a set of focusable items vertically, possibly looping</p>\n",
          "args": [
            {
              "name": "items"
            },
            {
              "name": "loop",
              "type": ""
            }
          ],
          "jsdoctags": [
            {
              "name": "items",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "loop",
              "type": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/animations/slide/slide.ts": [
        {
          "name": "slide",
          "file": "src/clr-angular/utils/animations/slide/slide.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "direction"
            }
          ],
          "returnType": "AnimationMetadata[]",
          "jsdoctags": [
            {
              "name": "direction",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/forms/password/password-container.ts": [
        {
          "name": "ToggleServiceFactory",
          "file": "src/clr-angular/forms/password/password-container.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "src/clr-angular/layout/tabs/tabs-id.provider.ts": [
        {
          "name": "tokenFactory",
          "file": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "src/clr-angular/utils/conditional/if-active.service.ts": [
        {
          "name": "tokenFactory",
          "file": "src/clr-angular/utils/conditional/if-active.service.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "src/clr-angular/data/tree-view/tree-features.service.ts": [
        {
          "name": "treeFeaturesFactory",
          "file": "src/clr-angular/data/tree-view/tree-features.service.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "existing"
            }
          ],
          "jsdoctags": [
            {
              "name": "existing",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/forms/validation.ts": [
        {
          "name": "triggerAllFormControlValidation",
          "file": "src/clr-angular/utils/forms/validation.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "formGroup"
            }
          ],
          "jsdoctags": [
            {
              "name": "formGroup",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "src/clr-angular/utils/id-generator/id-generator.service.ts": [
        {
          "name": "uniqueIdFactory",
          "file": "src/clr-angular/utils/id-generator/id-generator.service.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": []
        }
      ],
      "src/clr-angular/utils/focus/wrap-observable.ts": [
        {
          "name": "wrapObservable",
          "file": "src/clr-angular/utils/focus/wrap-observable.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "observable"
            },
            {
              "name": "onSubscribe",
              "optional": true
            },
            {
              "name": "onUnsubscribe",
              "optional": true
            }
          ],
          "returnType": "Observable<T>",
          "jsdoctags": [
            {
              "name": "observable",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onSubscribe",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "onUnsubscribe",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {
      "src/clr-angular/accordion/enums/accordion-status.enum.ts": [
        {
          "name": "AccordionStatus",
          "childs": [
            {
              "name": "Inactive",
              "value": "inactive"
            },
            {
              "name": "Error",
              "value": "error"
            },
            {
              "name": "Complete",
              "value": "complete"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/accordion/enums/accordion-status.enum.ts"
        }
      ],
      "src/clr-angular/accordion/enums/accordion-strategy.enum.ts": [
        {
          "name": "AccordionStrategy",
          "childs": [
            {
              "name": "Default",
              "value": "default"
            },
            {
              "name": "Multi",
              "value": "multi"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/accordion/enums/accordion-strategy.enum.ts"
        }
      ],
      "src/clr-angular/utils/a11y/aria-live.service.ts": [
        {
          "name": "AriaLivePoliteness",
          "childs": [
            {
              "name": "off",
              "value": "off"
            },
            {
              "name": "polite",
              "value": "polite"
            },
            {
              "name": "assertive",
              "value": "assertive"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/a11y/aria-live.service.ts"
        }
      ],
      "src/clr-angular/utils/focus/arrow-key-direction.enum.ts": [
        {
          "name": "ArrowKeyDirection",
          "childs": [
            {
              "name": "UP",
              "value": "up"
            },
            {
              "name": "DOWN",
              "value": "down"
            },
            {
              "name": "LEFT",
              "value": "left"
            },
            {
              "name": "RIGHT",
              "value": "right"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/focus/arrow-key-direction.enum.ts"
        }
      ],
      "src/clr-angular/utils/popover/enums/alignment.enum.ts": [
        {
          "name": "ClrAlignment",
          "childs": [
            {
              "name": "START",
              "value": "0"
            },
            {
              "name": "CENTER",
              "value": "0.5"
            },
            {
              "name": "END",
              "value": "1"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/popover/enums/alignment.enum.ts"
        }
      ],
      "src/clr-angular/utils/popover/enums/axis.enum.ts": [
        {
          "name": "ClrAxis",
          "childs": [
            {
              "name": "VERTICAL"
            },
            {
              "name": "HORIZONTAL"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/popover/enums/axis.enum.ts"
        }
      ],
      "src/clr-angular/data/datagrid/enums/sort-order.enum.ts": [
        {
          "name": "ClrDatagridSortOrder",
          "childs": [
            {
              "name": "UNSORTED",
              "value": "0"
            },
            {
              "name": "ASC",
              "value": "1"
            },
            {
              "name": "DESC"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description":
            "<p>Enumeration representing the sorting order of a datagrid column. It is a constant Enum,\ni.e. each value needs to be treated as a <code>number</code>, starting at index 0.</p>\n",
          "file": "src/clr-angular/data/datagrid/enums/sort-order.enum.ts"
        }
      ],
      "src/clr-angular/utils/focus/key-focus/enums/focus-direction.enum.ts": [
        {
          "name": "ClrFocusDirection",
          "childs": [
            {
              "name": "VERTICAL",
              "value": "vertical"
            },
            {
              "name": "HORIZONTAL",
              "value": "horizontal"
            },
            {
              "name": "BOTH",
              "value": "both"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/focus/key-focus/enums/focus-direction.enum.ts"
        }
      ],
      "src/clr-angular/utils/loading/loading.ts": [
        {
          "name": "ClrLoadingState",
          "childs": [
            {
              "name": "DEFAULT"
            },
            {
              "name": "LOADING"
            },
            {
              "name": "SUCCESS"
            },
            {
              "name": "ERROR"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/loading/loading.ts"
        }
      ],
      "src/clr-angular/utils/enums/position.enum.ts": [
        {
          "name": "ClrPosition",
          "childs": [
            {
              "name": "TOP_LEFT"
            },
            {
              "name": "TOP_CENTER"
            },
            {
              "name": "TOP_RIGHT"
            },
            {
              "name": "RIGHT_TOP"
            },
            {
              "name": "RIGHT_CENTER"
            },
            {
              "name": "RIGHT_BOTTOM"
            },
            {
              "name": "BOTTOM_RIGHT"
            },
            {
              "name": "BOTTOM_CENTER"
            },
            {
              "name": "BOTTOM_LEFT"
            },
            {
              "name": "LEFT_BOTTOM"
            },
            {
              "name": "LEFT_CENTER"
            },
            {
              "name": "LEFT_TOP"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description":
            "<p>A (clockwise) enumeration for positions around an element.</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\"> A    B    C</code></pre></div><p>  L  ----------- D\n     |         |\n     |         |\n  K  |         | E\n     |         |\n     |         |\n  J  ----------- F\n    I    H    G</p>\n<p>TOP_LEFT      = A\nTOP_CENTER    = B\nTOP_RIGHT     = C\nRIGHT_TOP     = D\nRIGHT_CENTER  = E\nRIGHT_BOTTOM  = F\nBOTTOM_RIGHT  = G\nBOTTOM_CENTER = H\nBOTTOM_LEFT   = I\nLEFT_BOTTOM   = J\nLEFT_CENTER   = K\nLEFT_TOP      = L</p>\n<p>Consumers tell us that they want something to display on the TOP_LEFT of the trigger and that they want the\n<em>content</em> container to anchor/orient AT the bottom left.\nIn order to calculate the position for the content I need to match up the anchor/toggle ClrPosition with the\ncontent ClrPosition.</p>\n<p>Anchor TOP_LEFT <strong>AT</strong> Content BOTTOM_LEFT.\n     -----------\n     |         |\n     |         |\n     | content |\n     |         |\n     |         |\n     -----------\n     |/\n      -----------\n     |         |\n     |         |\n     | trigger |\n     |         |\n     |         |\n     -----------</p>\n",
          "file": "src/clr-angular/utils/enums/position.enum.ts"
        }
      ],
      "src/clr-angular/data/tree-view/models/selected-state.enum.ts": [
        {
          "name": "ClrSelectedState",
          "childs": [
            {
              "name": "UNSELECTED",
              "value": "0"
            },
            {
              "name": "SELECTED"
            },
            {
              "name": "INDETERMINATE"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/data/tree-view/models/selected-state.enum.ts"
        }
      ],
      "src/clr-angular/utils/popover/enums/side.enum.ts": [
        {
          "name": "ClrSide",
          "childs": [
            {
              "name": "BEFORE"
            },
            {
              "name": "AFTER",
              "value": "1"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/popover/enums/side.enum.ts"
        }
      ],
      "src/clr-angular/accordion/stepper/step-button.ts": [
        {
          "name": "ClrStepButtonType",
          "childs": [
            {
              "name": "Next",
              "value": "next"
            },
            {
              "name": "Submit",
              "value": "submit"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/accordion/stepper/step-button.ts"
        }
      ],
      "src/clr-angular/utils/popover/enums/viewport-violation.enum.ts": [
        {
          "name": "ClrViewportViolation",
          "childs": [
            {
              "name": "BOTTOM",
              "value": "0"
            },
            {
              "name": "LEFT",
              "value": "1"
            },
            {
              "name": "RIGHT",
              "value": "2"
            },
            {
              "name": "TOP",
              "value": "3"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/popover/enums/viewport-violation.enum.ts"
        }
      ],
      "src/clr-angular/data/datagrid/enums/column-changes.enum.ts": [
        {
          "name": "DatagridColumnChanges",
          "childs": [
            {
              "name": "WIDTH"
            },
            {
              "name": "HIDDEN"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/data/datagrid/enums/column-changes.enum.ts"
        }
      ],
      "src/clr-angular/data/datagrid/enums/display-mode.enum.ts": [
        {
          "name": "DatagridDisplayMode",
          "childs": [
            {
              "name": "DISPLAY"
            },
            {
              "name": "CALCULATE"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/data/datagrid/enums/display-mode.enum.ts"
        }
      ],
      "src/clr-angular/data/datagrid/enums/render-step.enum.ts": [
        {
          "name": "DatagridRenderStep",
          "childs": [
            {
              "name": "ALIGN_COLUMNS"
            },
            {
              "name": "CALCULATE_MODE_ON"
            },
            {
              "name": "CALCULATE_MODE_OFF"
            },
            {
              "name": "CLEAR_WIDTHS"
            },
            {
              "name": "COMPUTE_COLUMN_WIDTHS"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/data/datagrid/enums/render-step.enum.ts"
        }
      ],
      "src/clr-angular/forms/datepicker/providers/view-manager.service.ts": [
        {
          "name": "DatepickerViewEnum",
          "childs": [
            {
              "name": "MONTHVIEW",
              "value": "MONTHVIEW"
            },
            {
              "name": "YEARVIEW",
              "value": "YEARVIEW"
            },
            {
              "name": "DAYVIEW",
              "value": "DAYVIEW"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/forms/datepicker/providers/view-manager.service.ts"
        }
      ],
      "src/clr-angular/utils/drag-and-drop/interfaces/drag-event.interface.ts": [
        {
          "name": "DragEventType",
          "childs": [
            {
              "name": "DRAG_START"
            },
            {
              "name": "DRAG_MOVE"
            },
            {
              "name": "DRAG_END"
            },
            {
              "name": "DRAG_ENTER"
            },
            {
              "name": "DRAG_LEAVE"
            },
            {
              "name": "DROP"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/drag-and-drop/interfaces/drag-event.interface.ts"
        }
      ],
      "src/clr-angular/forms/common/providers/layout.service.ts": [
        {
          "name": "Layouts",
          "childs": [
            {
              "name": "VERTICAL",
              "value": "vertical"
            },
            {
              "name": "HORIZONTAL",
              "value": "horizontal"
            },
            {
              "name": "COMPACT",
              "value": "compact"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/forms/common/providers/layout.service.ts"
        }
      ],
      "src/clr-angular/popover/common/popover.ts": [
        {
          "name": "Point",
          "childs": [
            {
              "name": "RIGHT_CENTER"
            },
            {
              "name": "RIGHT_TOP"
            },
            {
              "name": "RIGHT_BOTTOM"
            },
            {
              "name": "TOP_CENTER"
            },
            {
              "name": "TOP_RIGHT"
            },
            {
              "name": "TOP_LEFT"
            },
            {
              "name": "BOTTOM_CENTER"
            },
            {
              "name": "BOTTOM_RIGHT"
            },
            {
              "name": "BOTTOM_LEFT"
            },
            {
              "name": "LEFT_CENTER"
            },
            {
              "name": "LEFT_TOP"
            },
            {
              "name": "LEFT_BOTTOM"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/popover/common/popover.ts"
        }
      ],
      "src/clr-angular/data/datagrid/enums/selection-type.ts": [
        {
          "name": "SelectionType",
          "childs": [
            {
              "name": "None"
            },
            {
              "name": "Single"
            },
            {
              "name": "Multi"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/data/datagrid/enums/selection-type.ts"
        }
      ],
      "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts": [
        {
          "name": "Side",
          "childs": [
            {
              "name": "START"
            },
            {
              "name": "END",
              "value": "1"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts"
        }
      ],
      "src/clr-angular/layout/tabs/enums/tabs-layout.enum.ts": [
        {
          "name": "TabsLayout",
          "childs": [
            {
              "name": "HORIZONTAL",
              "value": "horizontal"
            },
            {
              "name": "VERTICAL",
              "value": "vertical"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "description": "",
          "file": "src/clr-angular/layout/tabs/enums/tabs-layout.enum.ts"
        }
      ]
    },
    "groupedTypeAliases": {
      "src/clr-angular/data/tree-view/models/async-array.ts": [
        {
          "name": "AsyncArray",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "T[] | null | undefined | Promise<[] | null | undefined> | Observable<[] | null | undefined>",
          "file": "src/clr-angular/data/tree-view/models/async-array.ts",
          "description": "",
          "kind": 168
        }
      ],
      "src/clr-angular/utils/popover/position-operators.ts": [
        {
          "name": "ClrTransform",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "function",
          "file": "src/clr-angular/utils/popover/position-operators.ts",
          "description": "",
          "kind": 162
        }
      ],
      "src/clr-angular/forms/datepicker/utils/constants.ts": [
        {
          "name": "FormatType",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "\"LITTLE_ENDIAN\" | \"MIDDLE_ENDIAN\" | \"BIG_ENDIAN\"",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "description": "",
          "kind": 168
        },
        {
          "name": "InputDateDisplayFormat",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/clr-angular/forms/datepicker/utils/constants.ts",
          "description": "",
          "kind": 165
        }
      ],
      "src/clr-angular/utils/drag-and-drop/draggable-ghost.ts": [
        {
          "name": "OffsetPosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/clr-angular/utils/drag-and-drop/draggable-ghost.ts",
          "description": "",
          "kind": 165
        },
        {
          "name": "PagePosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "literal type",
          "file": "src/clr-angular/utils/drag-and-drop/draggable-ghost.ts",
          "description": "",
          "kind": 165
        }
      ],
      "src/clr-angular/popover/common/popover-positions.ts": [
        {
          "name": "PopoverPosition",
          "ctype": "miscellaneous",
          "subtype": "typealias",
          "rawtype": "",
          "file": "src/clr-angular/popover/common/popover-positions.ts",
          "description": "",
          "kind": 175
        }
      ]
    }
  },
  "routes": [],
  "coverage": {
    "count": 6,
    "status": "low",
    "files": [
      {
        "filePath": "src/clr-angular/accordion/accordion-content.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAccordionContent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/accordion-description.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAccordionDescription",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/accordion-panel.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAccordionPanel",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/accordion-title.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAccordionTitle",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/accordion.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/accordion.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAccordion",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/chocolate/accordion-oompa-loompa.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "AccordionOompaLoompa",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/chocolate/accordion-willy-wonka.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "AccordionWillyWonka",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/models/accordion.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AccordionModel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/models/accordion.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AccordionPanelModel",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/models/accordion.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "accordionCount",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/providers/accordion.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AccordionService",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/chocolate/stepper-oompa-loompa.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StepperOompaLoompa",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/chocolate/stepper-willy-wonka.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "StepperWillyWonka",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/models/stepper.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "StepperModel",
        "coveragePercent": 0,
        "coverageCount": "0/28",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/providers/stepper.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "StepperService",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/step-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrStepButton",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/stepper-panel.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrStepperPanel",
        "coveragePercent": 0,
        "coverageCount": "0/27",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/stepper.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/stepper/stepper.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrStepper",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/utils/animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "panelAnimation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/accordion/utils/animation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "stepAnimation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/button/button-group/button-group.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_BUTTON_GROUP_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/button/button-group/button-group.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrButtonGroup",
        "coveragePercent": 36,
        "coverageCount": "7/19",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/button/button-group/button.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrButton",
        "coveragePercent": 0,
        "coverageCount": "0/22",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/button/button-loading/loading-button.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_LOADING_BUTTON_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/button/button-loading/loading-button.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrLoadingButton",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/button/providers/button-in-group.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ButtonInGroupService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/comparators/datagrid-property-comparator.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DatagridPropertyComparator",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/filters/datagrid-numeric-filter-impl.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DatagridNumericFilterImpl",
        "coveragePercent": 44,
        "coverageCount": "4/9",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/filters/datagrid-numeric-filter.ts",
        "type": "component",
        "linktype": "component",
        "name": "DatagridNumericFilter",
        "coveragePercent": 25,
        "coverageCount": "4/16",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/filters/datagrid-property-numeric-filter.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DatagridPropertyNumericFilter",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/filters/datagrid-property-string-filter.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DatagridPropertyStringFilter",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/filters/datagrid-string-filter-impl.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DatagridStringFilterImpl",
        "coveragePercent": 55,
        "coverageCount": "5/9",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/filters/datagrid-string-filter.ts",
        "type": "component",
        "linktype": "component",
        "name": "DatagridStringFilter",
        "coveragePercent": 26,
        "coverageCount": "4/15",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/built-in/nested-property.ts",
        "type": "class",
        "linktype": "classe",
        "name": "NestedProperty",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/chocolate/actionable-oompa-loompa.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ActionableOompaLoompa",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/chocolate/datagrid-willy-wonka.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DatagridWillyWonka",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/chocolate/expandable-oompa-loompa.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ExpandableOompaLoompa",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-action-bar.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridActionBar",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-action-overflow.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridActionOverflow",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-action-overflow.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "clrDgActionId",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-cell.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridCell",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-column-separator.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridColumnSeparator",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-column-toggle-button.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridColumnToggleButton",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-column-toggle-title.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridColumnToggleTitle",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-column-toggle.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridColumnToggle",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-column.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridColumn",
        "coveragePercent": 20,
        "coverageCount": "6/30",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-detail-body.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridDetailBody",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-detail-header.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridDetailHeader",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-detail-registerer.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DatagridDetailRegisterer",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-detail.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridDetail",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-filter.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridFilter",
        "coveragePercent": 5,
        "coverageCount": "1/17",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-footer.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridFooter",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-hideable-column.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDatagridHideableColumn",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-if-detail.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrIfDetail",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-if-expanded.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DatagridIfExpandService",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-items-trackby.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDatagridItemsTrackBy",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-items.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDatagridItems",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-page-size.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridPageSize",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-pagination.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridPagination",
        "coveragePercent": 27,
        "coverageCount": "5/18",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-placeholder.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridPlaceholder",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-row-detail.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridRowDetail",
        "coveragePercent": 7,
        "coverageCount": "1/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-row.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagridRow",
        "coveragePercent": 5,
        "coverageCount": "2/40",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid-row.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "nbRow",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_DATAGRID_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/datagrid.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatagrid",
        "coveragePercent": 27,
        "coverageCount": "10/36",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/enums/column-changes.enum.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ALL_COLUMN_CHANGES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/interfaces/column-state.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ColumnState",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/interfaces/column-state.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ColumnStateDiff",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/interfaces/comparator.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrDatagridComparatorInterface",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/interfaces/filter.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrDatagridFilterInterface",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/interfaces/numeric-filter.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrDatagridNumericFilterInterface",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/interfaces/state.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrDatagridStateInterface",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/interfaces/string-filter.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrDatagridStringFilterInterface",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/column-resizer.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ColumnResizerService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/column-resizer.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MIN_COLUMN_WIDTH",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "columnStateFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "COLUMN_STATE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/column-state.provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "COLUMN_STATE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/columns.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockHideableColumnTemplateRef",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/columns.service.mock.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MockColumnsService",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/columns.service.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_COLUMN_SERVICE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/columns.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ColumnsService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/custom-filter.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CustomFilter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/detail.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DetailService",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/display-mode.mock.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MockDisplayModeService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/display-mode.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_DISPLAY_MODE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/display-mode.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DisplayModeService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/filters.ts",
        "type": "class",
        "linktype": "classe",
        "name": "RegisteredFilter",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/filters.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "FiltersProvider",
        "coveragePercent": 66,
        "coverageCount": "6/9",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/global-expandable-rows.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ExpandableRowsCount",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/items.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "Items",
        "coveragePercent": 61,
        "coverageCount": "13/21",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/page.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "Page",
        "coveragePercent": 61,
        "coverageCount": "8/13",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/row-action-service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "RowActionService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/selection.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "Selection",
        "coveragePercent": 51,
        "coverageCount": "14/27",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/selection.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "nbSelection",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/sort.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "Sort",
        "coveragePercent": 66,
        "coverageCount": "6/9",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/state-debouncer.provider.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "StateDebouncer",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/state.provider.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "StateProvider",
        "coveragePercent": 66,
        "coverageCount": "2/3",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/table-size.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockTableSizeService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/table-size.service.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_TABLE_SIZE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/providers/table-size.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TableSizeService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/cell-renderer.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DatagridCellRenderer",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "COMPUTE_WIDTH_CLASS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "HIDDEN_COLUMN_CLASS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NO_LAYOUT_CLASS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "STRICT_WIDTH_CLASS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/header-renderer.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DatagridHeaderRenderer",
        "coveragePercent": 6,
        "coverageCount": "1/15",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/main-renderer.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DatagridMainRenderer",
        "coveragePercent": 21,
        "coverageCount": "4/19",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/main-renderer.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "domAdapterFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/noop-dom-adapter.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "NoopDomAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/render-organizer.mock.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MockDatagridRenderOrganizer",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/render-organizer.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_ORGANIZER_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/render-organizer.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DatagridRenderOrganizer",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/render/row-renderer.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "DatagridRowRenderer",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/utils/datagrid-filter-registrar.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DatagridFilterRegistrar",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/wrapped-cell.ts",
        "type": "component",
        "linktype": "component",
        "name": "WrappedCell",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/wrapped-column.ts",
        "type": "component",
        "linktype": "component",
        "name": "WrappedColumn",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/datagrid/wrapped-row.ts",
        "type": "component",
        "linktype": "component",
        "name": "WrappedRow",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-block.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrStackBlock",
        "coveragePercent": 14,
        "coverageCount": "3/21",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-content-input.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrStackContentInput",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-control.ts",
        "type": "class",
        "linktype": "classe",
        "name": "StackControl",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-header.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrStackHeader",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-input.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrStackInput",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-select.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrStackSelect",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-view-custom-tags.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrStackViewCustomTags",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-view.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_STACK_VIEW_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/stack-view/stack-view.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrStackView",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/models/async-array.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "isPromise",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/models/declarative-tree-node.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DeclarativeTreeNodeModel",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/models/recursive-tree-node.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "RecursiveTreeNodeModel",
        "coveragePercent": 0,
        "coverageCount": "0/22",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/models/tree-node.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "TreeNodeModel",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/recursive-children.ts",
        "type": "component",
        "linktype": "component",
        "name": "RecursiveChildren",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/recursive-for-of.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrRecursiveForOf",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/recursive-for-of.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrRecursiveForOfContext",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree-features.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TreeFeaturesService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree-features.service.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "treeFeaturesFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree-features.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TREE_FEATURES_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree-focus-manager.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TreeFocusManagerService",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree-node-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrTreeNodeLink",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree-node.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTreeNode",
        "coveragePercent": 0,
        "coverageCount": "0/29",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree-view.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_TREE_VIEW_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/data/tree-view/tree.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTree",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/alert-item.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAlertItem",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/alert-text.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrAlertText",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/alert.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_ALERT_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/alert.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAlert",
        "coveragePercent": 8,
        "coverageCount": "2/25",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/alerts-pager.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAlertsPager",
        "coveragePercent": 15,
        "coverageCount": "2/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/alerts.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrAlerts",
        "coveragePercent": 20,
        "coverageCount": "2/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/providers/icon-and-types.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AlertIconAndTypesService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/providers/multi-alert.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MultiAlertService",
        "coveragePercent": 10,
        "coverageCount": "1/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/utils/alert-info-object.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "AlertInfoObject",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/emphasis/alert/utils/alert-types.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ALERT_TYPES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/checkbox/checkbox-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrCheckboxContainer",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrCheckboxWrapper",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "isToggleFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "IS_TOGGLE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/checkbox/checkbox-wrapper.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "IS_TOGGLE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/checkbox/checkbox.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrCheckbox",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/forms/combobox/combobox.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrCombobox",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/combobox/combobox.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "comboboxDomAdapterFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/combobox/option.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrOption",
        "coveragePercent": 11,
        "coverageCount": "1/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/combobox/options.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrOptions",
        "coveragePercent": 3,
        "coverageCount": "1/31",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/combobox/providers/option-selection.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "OptionSelectionService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/combobox/utils/combobox-dom-adapter.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ComboboxDomAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/combobox/utils/combobox-noop-dom-adapter.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ComboboxNoopDomAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/error.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrControlError",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/form.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrForm",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/helper.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrControlHelper",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/if-error/if-error.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "IfErrorService",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/if-error/if-error.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrIfError",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/label.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrLabel",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/layout.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrLayout",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/providers/control-class.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ControlClassService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/providers/control-id.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ControlIdService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/providers/control-id.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "counter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/providers/focus.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "FocusService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/providers/layout.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LayoutService",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/providers/mark-control.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MarkControlService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/providers/ng-control.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "NgControlService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/common/wrapped-control.ts",
        "type": "class",
        "linktype": "classe",
        "name": "WrappedFormControl",
        "coveragePercent": 0,
        "coverageCount": "0/19",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datalist/datalist-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatalistContainer",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datalist/datalist-input.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDatalistInput",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datalist/datalist.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDatalist",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datalist/providers/datalist-id.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DatalistIdService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datalist/providers/datalist-id.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "counter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/calendar.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrCalendar",
        "coveragePercent": 66,
        "coverageCount": "6/9",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/date-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDateContainer",
        "coveragePercent": 27,
        "coverageCount": "5/18",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/date-input.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDateInput",
        "coveragePercent": 0,
        "coverageCount": "0/33",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/datepicker-view-manager.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDatepickerViewManager",
        "coveragePercent": 3,
        "coverageCount": "1/29",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/datepicker.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_DATEPICKER_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/day.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDay",
        "coveragePercent": 42,
        "coverageCount": "3/7",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/daypicker.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDaypicker",
        "coveragePercent": 55,
        "coverageCount": "5/9",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/interfaces/date-range.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DateRange",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/interfaces/day-of-week.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrDayOfWeek",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/model/calendar-view.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CalendarViewModel",
        "coveragePercent": 50,
        "coverageCount": "8/16",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/model/calendar.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CalendarModel",
        "coveragePercent": 50,
        "coverageCount": "5/10",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/model/day-view.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DayViewModel",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/model/day.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DayModel",
        "coveragePercent": 25,
        "coverageCount": "3/12",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/model/year-range.model.ts",
        "type": "class",
        "linktype": "classe",
        "name": "YearRangeModel",
        "coveragePercent": 66,
        "coverageCount": "6/9",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/model/year-range.model.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "YEARS_TO_DISPLAY",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/monthpicker.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrMonthpicker",
        "coveragePercent": 71,
        "coverageCount": "5/7",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/date-form-control.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DateFormControlService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/date-io.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DateIOService",
        "coveragePercent": 20,
        "coverageCount": "3/15",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/date-navigation.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DateNavigationService",
        "coveragePercent": 35,
        "coverageCount": "7/20",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/datepicker-enabled.service.mock.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MockDatepickerEnabledService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/datepicker-enabled.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DatepickerEnabledService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/datepicker-focus.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DatepickerFocusService",
        "coveragePercent": 16,
        "coverageCount": "1/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/locale-helper.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LocaleHelperService",
        "coveragePercent": 42,
        "coverageCount": "6/14",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/providers/view-manager.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ViewManagerService",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "BIG_ENDIAN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DATE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_LOCALE_FORMAT",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DELIMITER_REGEX",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LITTLE_ENDIAN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LITTLE_ENDIAN_REGEX",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MIDDLE_ENDIAN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MIDDLE_ENDIAN_REGEX",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOBILE_USERAGENT_REGEX",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MONTH",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NO_OF_DAYS_IN_A_WEEK",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NO_OF_ROWS_IN_CALENDAR_VIEW",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "RTL_REGEX",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TOTAL_DAYS_IN_DAYS_VIEW",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "USER_INPUT_REGEX",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "YEAR",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "datesAreEqual",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getDay",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getNumberOfDaysInTheMonth",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/date-utils.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "parseToFourDigitYear",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/test-utils.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "assertEqualDates",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/utils/test-utils.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "createKeyboardEvent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/datepicker/yearpicker.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrYearpicker",
        "coveragePercent": 66,
        "coverageCount": "10/15",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/forms/input/input-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrInputContainer",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/input/input.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrInput",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/password/password-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrPasswordContainer",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/password/password-container.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "ToggleServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/password/password-container.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TOGGLE_SERVICE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/password/password-container.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TOGGLE_SERVICE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/password/password.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrPassword",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/radio/radio-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrRadioContainer",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/radio/radio-wrapper.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrRadioWrapper",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/radio/radio.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrRadio",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/range/range-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrRangeContainer",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/range/range.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrRange",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/select/select-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrSelectContainer",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/select/select.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrSelect",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/textarea/textarea-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTextareaContainer",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/forms/textarea/textarea.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrTextarea",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/icon/icon.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_ICON_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/icon/icon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrIconCustomTag",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/main-container/main-container.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_LAYOUT_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/main-container/main-container.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrMainContainer",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/chocolate/main-container-willy-wonka.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "MainContainerWillyWonka",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/chocolate/nav-detection-oompa-loompa.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "NavDetectionOompaLoompa",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/header.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrHeader",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/nav-level.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrNavLevel",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/navigation.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_NAVIGATION_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/providers/responsive-navigation.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ResponsiveNavigationService",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/responsive-nav-codes.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ResponsiveNavCodes",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/nav/responsive-nav-control-message.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ResponsiveNavControlMessage",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/chocolate/active-oompa-loompa.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ActiveOompaLoompa",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/chocolate/tabs-willy-wonka.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "TabsWillyWonka",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/providers/aria.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AriaService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/providers/tabs.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TabsService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tab-content.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTabContent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tab-content.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "nbTabContentComponents",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tab-link.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrTabLink",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tab-link.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "nbTabLinkComponents",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tab-overflow-content.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTabOverflowContent",
        "coveragePercent": 0,
        "coverageCount": "0/27",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tab.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTab",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "tokenFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "nbTabsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TABS_ID",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tabs-id.provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TABS_ID_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tabs.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_TABS_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/tabs/tabs.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTabs",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/providers/vertical-nav-group-registration.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "VerticalNavGroupRegistrationService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/providers/vertical-nav-group.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "VerticalNavGroupService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/providers/vertical-nav-icon.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "VerticalNavIconService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/providers/vertical-nav.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "VerticalNavService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav-group-children.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrVerticalNavGroupChildren",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrVerticalNavGroup",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "COLLAPSED_STATE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav-group.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXPANDED_STATE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav-icon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrVerticalNavIcon",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav-link.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrVerticalNavLink",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_VERTICAL_NAV_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/layout/vertical-nav/vertical-nav.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrVerticalNav",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/modal/modal-body.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrModalBody",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/modal/modal.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_MODAL_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/modal/modal.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrModal",
        "coveragePercent": 52,
        "coverageCount": "10/19",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/popover/common/abstract-popover.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AbstractPopover",
        "coveragePercent": 0,
        "coverageCount": "0/27",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/index.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "POPOVER_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover-host-anchor.token.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "POPOVER_HOST_ANCHOR",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover-old.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "PopoverDirectiveOld",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover-old.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "openCount",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover-old.directive.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "waiting",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover-options.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "PopoverOptions",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover-positions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "popoverPositions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover.ts",
        "type": "class",
        "linktype": "classe",
        "name": "Popover",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "OVERFLOW_AUTO",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "OVERFLOW_SCROLL",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "POSITION_ABSOLUTE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "POSITION_FIXED",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/common/popover.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "POSITION_RELATIVE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/dropdown-item.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDropdownItem",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/dropdown-menu.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDropdownMenu",
        "coveragePercent": 0,
        "coverageCount": "0/32",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/dropdown-trigger.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDropdownTrigger",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/dropdown.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_DROPDOWN_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/dropdown.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDropdown",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/menu-positions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_MENU_POSITIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/providers/dropdown-focus-handler.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DropdownFocusHandler",
        "coveragePercent": 9,
        "coverageCount": "2/21",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/providers/dropdown-focus-handler.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DROPDOWN_FOCUS_HANDLER_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "RootDropdownService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "clrRootDropdownFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/dropdown/providers/dropdown.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ROOT_DROPDOWN_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/providers/signpost-focus-manager.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SignpostFocusManager",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/providers/signpost-id.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SignpostIdService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/signpost-content.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrSignpostContent",
        "coveragePercent": 5,
        "coverageCount": "2/34",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/signpost-content.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "POSITIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/signpost-positions.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Position",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/signpost-positions.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SIGNPOST_POSITIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/signpost-trigger.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrSignpostTrigger",
        "coveragePercent": 8,
        "coverageCount": "1/12",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/signpost.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_SIGNPOST_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/signpost/signpost.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrSignpost",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/tooltip/providers/tooltip-id.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TooltipIdService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/tooltip/tooltip-content.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTooltipContent",
        "coveragePercent": 0,
        "coverageCount": "0/35",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/tooltip/tooltip-content.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "POSITIONS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/tooltip/tooltip-content.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SIZES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/tooltip/tooltip-trigger.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrTooltipTrigger",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/tooltip/tooltip.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_TOOLTIP_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/popover/tooltip/tooltip.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrTooltip",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/progress/progress-bars/progress-bar.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_PROGRESS_BAR_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/progress/progress-bars/progress-bar.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrProgressBar",
        "coveragePercent": 5,
        "coverageCount": "2/34",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/progress/spinner/spinner.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_SPINNER_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/progress/spinner/spinner.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrSpinner",
        "coveragePercent": 22,
        "coverageCount": "4/18",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/a11y/aria-live.service.mock.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "MockAriaLiveService",
        "coveragePercent": 33,
        "coverageCount": "3/9",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/a11y/aria-live.service.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_ARIA_LIVE_SERVICE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/a11y/aria-live.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AriaLiveService",
        "coveragePercent": 44,
        "coverageCount": "4/9",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/a11y/aria-live.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ARIA_LIVE_TICK",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/utils/animations/collapse/collapse.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "collapse",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/animations/constants.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "defaultAnimationTiming",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/animations/expandable-animation/expandable-animation.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrExpandableAnimation",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/animations/expandable-animation/index.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "EXPANDABLE_ANIMATION_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/animations/fade-slide/fade-slide.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "fadeSlide",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/animations/fade/fade.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "fade",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/animations/slide/slide.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "slide",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/breakpoints/breakpoints.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DATEPICKER_ENABLE_BREAKPOINT",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/chocolate/oompa-loompa.ts",
        "type": "class",
        "linktype": "classe",
        "name": "OompaLoompa",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/chocolate/willy-wonka.ts",
        "type": "class",
        "linktype": "classe",
        "name": "WillyWonka",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/component/is-boolean-attribute-set.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "isBooleanAttributeSet",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-active.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrIfActive",
        "coveragePercent": 33,
        "coverageCount": "3/9",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "IfActiveService",
        "coveragePercent": 66,
        "coverageCount": "2/3",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "tokenFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "activeCounter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "IF_ACTIVE_ID",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-active.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "IF_ACTIVE_ID_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-expanded.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrIfExpanded",
        "coveragePercent": 11,
        "coverageCount": "1/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-expanded.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "IfExpandService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/if-open.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrIfOpen",
        "coveragePercent": 42,
        "coverageCount": "3/7",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/conditional/index.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CONDITIONAL_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/dom-adapter/dom-adapter.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockDomAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/dom-adapter/dom-adapter.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_DOM_ADAPTER_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/dom-adapter/dom-adapter.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DomAdapter",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/drag-and-drop.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_DRAG_AND_DROP_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/drag-event.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ClrDragEvent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/drag-handle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDragHandle",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/draggable-ghost.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrDraggableGhost",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/draggable/draggable.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDraggable",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/droppable/droppable.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrDroppable",
        "coveragePercent": 0,
        "coverageCount": "0/28",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/if-dragged.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrIfDragged",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/interfaces/drag-event.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DragEventInterface",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/interfaces/drag-event.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DragPointPosition",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/interfaces/drop-tolerance.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrDropToleranceInterface",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockDragAndDropEventBus",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_DRAG_DROP_EVENT_BUS",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-and-drop-event-bus.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DragAndDropEventBusService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockDragEventListener",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_DRAG_EVENT_LISTENER_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-event-listener.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DragEventListenerService",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockDragHandleRegistrar",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.mock.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "MOCK_DRAG_HANDLE_REGISTRAR_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/drag-handle-registrar.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DragHandleRegistrarService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/draggable-snapshot.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DraggableSnapshotService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/drag-and-drop/providers/global-drag-mode.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "GlobalDragModeService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus-trap/focus-trap-tracker.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "FocusTrapTracker",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus-trap/focus-trap.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "FocusTrapDirective",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus-trap/focus-trap.directive.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "FocusTrapConfig",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus-trap/index.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FOCUS_TRAP_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FOCUS_ON_VIEW_INIT_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FOCUS_ON_VIEW_INIT",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.provider.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FOCUS_ON_VIEW_INIT_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focus-on-view-init/focus-on-view-init.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrFocusOnViewInit",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focus.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "FocusService",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focus.service.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "clrFocusServiceFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focus.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "FOCUS_SERVICE_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focusable-item/basic-focusable-item.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "BasicFocusableItem",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focusable-item/basic-focusable-item.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "BASIC_FOCUSABLE_ITEM_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focusable-item/custom-focusable-item-provider.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "customFocusableItemProvider",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focusable-item/focusable-item.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockFocusableItem",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focusable-item/focusable-item.ts",
        "type": "class",
        "linktype": "classe",
        "name": "FocusableItem",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focusable-item/linkers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "linkParent",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/utils/focus/focusable-item/linkers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "linkVertical",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/utils/focus/key-focus/interfaces.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "FocusableItem",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/key-focus/key-focus-item.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrKeyFocusItem",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/key-focus/key-focus.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "KEY_FOCUS_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/key-focus/key-focus.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrKeyFocus",
        "coveragePercent": 0,
        "coverageCount": "0/23",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/key-focus/util.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getKeyCodes",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/key-focus/util.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "keyValidator",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/key-focus/util.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "preventArrowKeyScroll",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/focus/wrap-observable.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "wrapObservable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/forms/validation.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "triggerAllFormControlValidation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/host-wrapping/dynamic-wrapper.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DynamicWrapper",
        "coveragePercent": 50,
        "coverageCount": "1/2",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/host-wrapping/empty-anchor.ts",
        "type": "component",
        "linktype": "component",
        "name": "EmptyAnchor",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/host-wrapping/host-wrapper.ts",
        "type": "class",
        "linktype": "classe",
        "name": "HostWrapper",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/i18n/common-strings.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ClrCommonStringsService",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "uniqueIdFactory",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NB_INSTANCES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UNIQUE_ID",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/id-generator/id-generator.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UNIQUE_ID_PROVIDER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DOWN_ARROW",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ENTER",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ESC",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LEFT_ARROW",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "RIGHT_ARROW",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SPACE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TAB",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/key-codes/key-codes.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "UP_ARROW",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/loading/loading-listener.ts",
        "type": "class",
        "linktype": "classe",
        "name": "LoadingListener",
        "coveragePercent": 50,
        "coverageCount": "1/2",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/loading/loading.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_LOADING_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/loading/loading.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrLoading",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/outside-click/index.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "OUSTIDE_CLICK_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/outside-click/outside-click.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "OutsideClick",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/interfaces/popover-content-offset.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrPopoverContentOffset",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/interfaces/popover-position.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrPopoverPosition",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/interfaces/visibility-coords.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ClrVisibilityCoords",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/popover-anchor.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrPopoverAnchor",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/popover-close-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrPopoverCloseButton",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/popover-content.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrPopoverContent",
        "coveragePercent": 6,
        "coverageCount": "1/16",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/popover-open-close-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrPopoverOpenCloseButton",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "align",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "alignHorizontal",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "alignVertical",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "flipSidesAndNudgeContent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "testVisibility",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "flipAxis",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "flipSides",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/position-operators.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "nudgeContent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/providers/popover-events.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ClrPopoverEventsService",
        "coveragePercent": 0,
        "coverageCount": "0/24",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/providers/popover-position.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ClrPopoverPositionService",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/popover/providers/popover-toggle.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ClrPopoverToggleService",
        "coveragePercent": 28,
        "coverageCount": "2/7",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/scrolling/scrolling-service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ScrollingService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/template-ref/index.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "TEMPLATE_REF_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/template-ref/template-ref-container.ts",
        "type": "component",
        "linktype": "component",
        "name": "TemplateRefContainer",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getScrollTop",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "offsetHeight",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "preserveScrollAfterAppend",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "preserveScrollAfterPrepend",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "ratioBottomReady",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "ratioTopReady",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "setScrollTop",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "startListening",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/dom-helpers.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "stopListening",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/index.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "VIRTUAL_SCROLL_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/non-ng-iterable.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "NonNgIterable",
        "coveragePercent": 50,
        "coverageCount": "1/2",
        "status": "medium"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/non-ng-iterable.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "isNonNgIterable",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "VirtualForOf",
        "coveragePercent": 52,
        "coverageCount": "10/19",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/utils/virtual-scroll/virtual-for-of.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "PRELOAD_MARGIN",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/providers/button-hub.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ButtonHubMock",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/providers/button-hub.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ButtonHubService",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/providers/header-actions.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "HeaderActionService",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/providers/page-collection.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "PageCollectionMock",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/providers/page-collection.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PageCollectionService",
        "coveragePercent": 88,
        "coverageCount": "16/18",
        "status": "very-good"
      },
      {
        "filePath": "src/clr-angular/wizard/providers/wizard-navigation.service.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "NavServiceMock",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/providers/wizard-navigation.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "WizardNavigationService",
        "coveragePercent": 74,
        "coverageCount": "26/35",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/wizard/test-components/api-wizard.mock.ts",
        "type": "component",
        "linktype": "component",
        "name": "TemplateApiWizardTestComponent",
        "coveragePercent": 0,
        "coverageCount": "0/30",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/test-components/basic-wizard.mock.ts",
        "type": "component",
        "linktype": "component",
        "name": "BasicWizardTestComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/test-components/dynamic-wizard.mock.ts",
        "type": "component",
        "linktype": "component",
        "name": "DynamicWizardTestComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/test-components/header-action-wizard.mock.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderActionsTestComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/test-components/unopened-wizard.mock.ts",
        "type": "component",
        "linktype": "component",
        "name": "UnopenedWizardTestComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-button.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrWizardButton",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-button.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CUSTOM_BUTTON_TYPES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-button.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_BUTTON_TYPES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-custom-tags.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrWizardCustomTags",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-header-action.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrWizardHeaderAction",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-header-action.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "wizardHeaderActionIndex",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-page-buttons.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrWizardPageButtons",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-page-header-actions.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrWizardPageHeaderActions",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-page-navtitle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrWizardPageNavTitle",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-page-title.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ClrWizardPageTitle",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-page.mock.ts",
        "type": "class",
        "linktype": "classe",
        "name": "MockPage",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-page.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrWizardPage",
        "coveragePercent": 71,
        "coverageCount": "25/35",
        "status": "good"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-page.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "wizardPageIndex",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-stepnav-item.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrWizardStepnavItem",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard-stepnav.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrWizardStepnav",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "CLR_WIZARD_DIRECTIVES",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/clr-angular/wizard/wizard.ts",
        "type": "component",
        "linktype": "component",
        "name": "ClrWizard",
        "coveragePercent": 50,
        "coverageCount": "29/57",
        "status": "medium"
      }
    ]
  }
}
