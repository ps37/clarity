{"version":3,"file":"vcd-ui-doc-lib.js","sources":["ng://@vcd/ui-doc-lib/documentation-retriever.service.ts","ng://@vcd/ui-doc-lib/documentation-container/documentation-container.component.ts","ng://@vcd/ui-doc-lib/documentation.ts","ng://@vcd/ui-doc-lib/compodoc/compodoc-retriever.service.ts","ng://@vcd/ui-doc-lib/highlight/highlight.service.ts","ng://@vcd/ui-doc-lib/highlight/prism/prism-highlight.service.ts","ng://@vcd/ui-doc-lib/overview-viewer/overview-viewer.component.ts","ng://@vcd/ui-doc-lib/overview-viewer/overview-viewer.module.ts","ng://@vcd/ui-doc-lib/example-viewer/example-viewer.component.ts","ng://@vcd/ui-doc-lib/source-code-viewer/source-code-viewer.component.ts","ng://@vcd/ui-doc-lib/source-code-viewer/source-code-viewer.module.ts","ng://@vcd/ui-doc-lib/example-viewer/example-viewer.module.ts","ng://@vcd/ui-doc-lib/api-viewer/api-viewer.component.ts","ng://@vcd/ui-doc-lib/api-viewer/api-viewer.module.ts","ng://@vcd/ui-doc-lib/documentation-container/documentation-container.module.ts","ng://@vcd/ui-doc-lib/doc-lib.module.ts"],"sourcesContent":["/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Type } from '@angular/core';\n\n/**\n * Represents the inputClass/outputClass properties of a component in compodoc generated documentation\n */\nexport interface ApiParameters {\n    /**\n     * Represents name of input/output property of a component\n     */\n    name: string;\n    /**\n     * Represents Data type of input/output property\n     */\n    type: string;\n    /**\n     * Represents JS doc of input/output property\n     */\n    description: string;\n}\n\n/**\n * Service exposing methods for retrieving the documentation for a given component.\n */\nexport abstract class DocumentationRetrieverService {\n    /**\n     * Returns the overview help documentation for the provided component\n     */\n    public abstract getOverview(component: Type<any>): string;\n\n    /**\n     * Returns the typescript source code for the provided component\n     */\n    public abstract getTypescriptSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the HTML source code for the provided component\n     */\n    public abstract getHtmlSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the CSS source code for the provided component\n     */\n    public abstract getCssSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the inputsClass property value of the provided component from the Compodoc generated JSON\n     */\n    public abstract getInputParameters(component: Type<any>): ApiParameters[];\n\n    /**\n     * Returns the outputsClass property value of the provided component from the Compodoc generated JSON\n     */\n    public abstract getOutputParameters(component: Type<any>): ApiParameters[];\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Data } from '@angular/router';\nimport { DocumentationEntry } from '../documentation';\n\n@Component({\n    selector: 'vcd-documentation-container',\n    templateUrl: './documentation-container.component.html',\n    styleUrls: ['./documentation-container.component.scss'],\n})\nexport class DocumentationContainerComponent implements OnInit {\n    /**\n     * The documentation entry registered for a component is obtained here using the route data\n     * {@link Documentation.getRoutes} registered for that component using {@link Documentation.registerDocumentationEntry}\n     */\n    documentationEntry: DocumentationEntry;\n\n    constructor(private route: ActivatedRoute) {}\n\n    ngOnInit(): void {\n        this.route.data.subscribe((data: Data) => {\n            this.documentationEntry = data.documentationEntry;\n        });\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Type } from '@angular/core';\nimport { DocumentationContainerComponent } from './documentation-container/documentation-container.component';\nimport { Routes } from '@angular/router';\n\n/**\n * Represents each entry in {@link DocumentationEntry.examples}, that is an examples that shows a particular usage of a components\n */\nexport interface ExampleEntry {\n    /**\n     * Example component written to show usage of the component\n     */\n    component: Type<unknown>;\n\n    /**\n     * The component for which this example is written\n     */\n    forComponent: Type<unknown>;\n\n    /**\n     * The title of the section under which this example will be placed\n     */\n    title: string;\n}\n\n/**\n * Represents a component being showcased, along with the examples for it.\n */\nexport interface DocumentationEntry {\n    /**\n     * The display name that is going to be used for the component\n     */\n    displayName: string;\n\n    /**\n     * The segment to be used in routing when displaying the documentation for this component.\n     */\n    urlSegment: string;\n\n    /**\n     * The component for which the documentation is going to be generated\n     */\n    component: Type<unknown>;\n\n    /**\n     * A list of examples that will show how the component may be used\n     */\n    examples?: ExampleEntry[];\n}\n\n/**\n * To register a documentation entry as value for corresponding component\n */\nconst documentationEntryMap = new Map<Type<unknown>, DocumentationEntry>();\n\n/**\n * Used in {@link Documentation.registerDocumentationEntry} method to check if the input is a valid {@link DocumentationEntry}\n */\nfunction validateDocumentationMetadata(documentationParams: DocumentationEntry): void {\n    if (!documentationParams.urlSegment) {\n        throw new Error('urlSegment should be specified and not empty');\n    }\n\n    const documentationEntry = Documentation.getAllEntries().find(\n        entry => entry.urlSegment === documentationParams.urlSegment\n    );\n    if (documentationEntry) {\n        throw new Error(\n            `The specified urlSegment '${documentationParams.urlSegment}' for '${documentationParams.displayName}'` +\n                `was already defined for '${documentationEntry.displayName}'`\n        );\n    }\n\n    if (!documentationParams.displayName) {\n        throw new Error('displayName should be specified and not empty');\n    }\n}\n\nexport const Documentation = {\n    /**\n     * Returns all the documentation entries registered into the framework\n     */\n    getAllEntries(): DocumentationEntry[] {\n        return Array.from(documentationEntryMap.values());\n    },\n\n    /**\n     * Returns angular routes used when displaying the documentation/examples for the components.\n     */\n    getRoutes(): Routes {\n        return Documentation.getAllEntries().map((documentationEntry: DocumentationEntry) => ({\n            path: documentationEntry.urlSegment,\n            component: DocumentationContainerComponent,\n            data: { documentationEntry },\n        }));\n    },\n\n    /**\n     * Used for manual registration of documentation entry with a corresponding component.\n     */\n    registerDocumentationEntry(documentationEntry: DocumentationEntry): void {\n        validateDocumentationMetadata(documentationEntry);\n        documentationEntryMap.set(documentationEntry.component, documentationEntry);\n    },\n};\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Type } from '@angular/core';\nimport { ApiParameters, DocumentationRetrieverService } from '../documentation-retriever.service';\nimport { CompodocComponent, CompodocSchema } from './compodoc-schema';\n\n/**\n * This service retrieves specific properties from compodoc generated documentation\n */\nexport class CompoDocRetrieverService implements DocumentationRetrieverService {\n    constructor(private documentationJson: CompodocSchema[]) {}\n\n    public getOverview(component: Type<any>): string {\n        return this.getComponent(component).description;\n    }\n\n    public getTypescriptSourceCode(component: Type<any>): string {\n        return this.getComponent(component).sourceCode;\n    }\n\n    public getHtmlSourceCode(component: Type<any>): string {\n        return this.getComponent(component).templateData;\n    }\n\n    public getCssSourceCode(component: Type<any>): string {\n        const styleUrlsData = this.getComponent(component).styleUrlsData;\n        if (!styleUrlsData) {\n            return;\n        }\n        return styleUrlsData.map(styleUrl => styleUrl.data).join('\\n\\n\\n');\n    }\n\n    private getComponent(component: Type<any>): CompodocComponent {\n        for (const documentationJson of this.documentationJson) {\n            const compodocComponent = documentationJson.components.find(c => c.name === component.name);\n            if (compodocComponent) {\n                return compodocComponent;\n            }\n        }\n        return { styleUrlsData: [] } as CompodocComponent;\n    }\n\n    public getInputParameters(component: Type<any>): ApiParameters[] {\n        const comp = this.getComponent(component);\n        return comp.inputsClass || [];\n    }\n\n    public getOutputParameters(component: Type<any>): ApiParameters[] {\n        const comp = this.getComponent(component);\n        return comp.outputsClass || [];\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport abstract class HighlightService {\n    public abstract highlightTypescript(code: string): string;\n    public abstract highlightHtml(code: string): string;\n    public abstract highlightScss(code: string): string;\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Injectable } from '@angular/core';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-scss';\nimport { HighlightService } from '../highlight.service';\n\n@Injectable()\nexport class PrismHighlightService extends HighlightService {\n    highlightTypescript(code: string): string {\n        return this.highlight(code, Prism.languages.typescript);\n    }\n    highlightHtml(code: string): string {\n        return this.highlight(code, Prism.languages.html);\n    }\n    highlightScss(code: string): string {\n        return this.highlight(code, Prism.languages.scss);\n    }\n\n    private highlight(code: string, lang): string {\n        return Prism.highlight(code || '', lang);\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, Input, Type } from '@angular/core';\nimport { DocumentationRetrieverService } from '../documentation-retriever.service';\n\n@Component({\n    selector: 'vcd-overview-viewer',\n    templateUrl: './overview-viewer.component.html',\n    styleUrls: ['./overview-viewer.component.scss'],\n})\nexport class OverviewViewerComponent {\n    /**\n     * The description of the component from Compodoc generated JSON. This is an HTML encoded string.\n     */\n    overview: string;\n    constructor(private documentationRetriever: DocumentationRetrieverService) {}\n\n    @Input() isNoOverviewMessageShown = true;\n\n    @Input()\n    set component(component: Type<any>) {\n        if (!component) {\n            return;\n        }\n        // TODO: externalize string literals\n        this.overview =\n            this.documentationRetriever.getOverview(component) ||\n            (this.isNoOverviewMessageShown ? 'No Documentation found' : '');\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { CommonModule } from '@angular/common';\nimport { OverviewViewerComponent } from './overview-viewer.component';\n\nconst declarations = [OverviewViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class OverviewViewerModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, ComponentFactoryResolver, Input, ViewChild, ViewContainerRef } from '@angular/core';\nimport { ExampleEntry } from '../documentation';\n\n@Component({\n    selector: 'vcd-example-viewer',\n    templateUrl: './example-viewer.component.html',\n    styleUrls: ['./example-viewer.component.scss'],\n})\nexport class ExampleViewerComponent {\n    /**\n     * For showing and hiding of {@link SourceCodeViewerComponent} in the HTML\n     */\n    showSourceCode = false;\n\n    constructor(private resolver: ComponentFactoryResolver) {}\n\n    /**\n     * Gets the example entry from documentation entry and renders the example component\n     */\n    private _exampleEntry: ExampleEntry;\n    @Input()\n    set exampleEntry(exampleEntry: ExampleEntry) {\n        this._exampleEntry = exampleEntry;\n        this.createExample();\n    }\n    get exampleEntry(): ExampleEntry {\n        return this._exampleEntry;\n    }\n\n    /**\n     * Container for rendering the example component\n     */\n    @ViewChild('exampleContainer', { static: true, read: ViewContainerRef })\n    exampleContainer: ViewContainerRef;\n\n    private createExample(): void {\n        this.exampleContainer.clear();\n        const exampleEntry = this.exampleEntry;\n        if (!exampleEntry || !exampleEntry.component) {\n            return;\n        }\n        const factory = this.resolver.resolveComponentFactory(exampleEntry.component);\n        this.exampleContainer.createComponent(factory);\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, Input, Type } from '@angular/core';\nimport { DocumentationRetrieverService } from '../documentation-retriever.service';\nimport { HighlightService } from '../highlight/highlight.service';\n\n/**\n * To display the 3 code parts(TypeScript, HTML and CSS) of a component\n */\n@Component({\n    selector: 'vcd-source-code-viewer',\n    templateUrl: './source-code-viewer.component.html',\n    styleUrls: ['./source-code-viewer.component.scss'],\n})\nexport class SourceCodeViewerComponent {\n    /**\n     * Different source codes of the component\n     */\n    typescriptSourceCode: string;\n    htmlSourceCode: string;\n    cssSourceCode: string;\n\n    constructor(\n        private documentationRetriever: DocumentationRetrieverService,\n        private highlightService: HighlightService\n    ) {}\n\n    /**\n     * The component which source (typescript, html, css) will be displayed\n     */\n    @Input()\n    set component(component: Type<any>) {\n        if (!component) {\n            return;\n        }\n        // TODO: externalize string literals\n        this.typescriptSourceCode = this.highlightService.highlightTypescript(\n            this.documentationRetriever.getTypescriptSourceCode(component)\n        );\n        this.htmlSourceCode = this.highlightService.highlightHtml(\n            this.documentationRetriever.getHtmlSourceCode(component) || 'No html found'\n        );\n        this.cssSourceCode = this.highlightService.highlightScss(\n            this.documentationRetriever.getCssSourceCode(component) || 'No CSS found'\n        );\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { CommonModule } from '@angular/common';\nimport { SourceCodeViewerComponent } from './source-code-viewer.component';\n\nconst declarations = [SourceCodeViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class SourceCodeViewerModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { CommonModule } from '@angular/common';\nimport { ExampleViewerComponent } from './example-viewer.component';\nimport { SourceCodeViewerModule } from '../source-code-viewer/source-code-viewer.module';\nimport { OverviewViewerModule } from '../overview-viewer/overview-viewer.module';\n\nconst declarations = [ExampleViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, SourceCodeViewerModule, OverviewViewerModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class ExampleViewerModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { Component, Input, Type } from '@angular/core';\nimport { ApiParameters, DocumentationRetrieverService } from '../documentation-retriever.service';\n\n@Component({\n    selector: ' vcd-api-viewer',\n    templateUrl: './api-viewer.component.html',\n    styleUrls: ['./api-viewer.component.scss'],\n})\nexport class ApiViewerComponent {\n    inputParameters: ApiParameters[];\n    outputParameters: ApiParameters[];\n\n    constructor(private documentationRetriever: DocumentationRetrieverService) {}\n\n    /**\n     * Gets the input and output parameters from the Compodoc generated documentation json\n     */\n    @Input()\n    set component(component: Type<any>) {\n        if (!component) {\n            return;\n        }\n        this.inputParameters = this.documentationRetriever.getInputParameters(component);\n        this.outputParameters = this.documentationRetriever.getOutputParameters(component);\n    }\n}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { CommonModule } from '@angular/common';\nimport { ApiViewerComponent } from './api-viewer.component';\n\nconst declarations = [ApiViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class ApiViewerModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { CommonModule } from '@angular/common';\nimport { DocumentationContainerComponent } from './documentation-container.component';\nimport { OverviewViewerModule } from '../overview-viewer/overview-viewer.module';\nimport { ExampleViewerModule } from '../example-viewer/example-viewer.module';\nimport { ApiViewerModule } from '../api-viewer/api-viewer.module';\n\nconst declarations = [DocumentationContainerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n    declarations: [...declarations],\n    entryComponents: [DocumentationContainerComponent],\n    exports: [...declarations, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n})\nexport class DocumentationContainerModule {}\n","/*!\n * Copyright 2019 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { CompodocSchema } from './compodoc/compodoc-schema';\nimport { DocumentationRetrieverService } from './documentation-retriever.service';\nimport { CompoDocRetrieverService } from './compodoc/compodoc-retriever.service';\nimport { PrismHighlightService } from './highlight/prism/prism-highlight.service';\nimport { HighlightService } from './highlight/highlight.service';\nimport { DocumentationContainerModule } from './documentation-container/documentation-container.module';\n\nconst declarations = [];\n\n/**\n * NOTE: The following two has to be exported otherwise the AoT compiler won't see it.\n */\n/**\n * Token that makes the documentation jsons available to the following factory function.\n */\nexport const FOR_ROOT_DOCUMENTATIONS_TOKEN = new InjectionToken<CompodocSchema[]>(\n    'DocLibModule.forRoot() CompoDocRetrieverService doc jsons.'\n);\n\nexport function getCompoDocRetrieverService(documentations: CompodocSchema[]): DocumentationRetrieverService {\n    return new CompoDocRetrieverService(documentations);\n}\n\n@NgModule({\n    imports: [DocumentationContainerModule],\n    declarations: [...declarations],\n    exports: [...declarations, DocumentationContainerModule],\n    providers: [{ provide: HighlightService, useClass: PrismHighlightService }],\n})\nexport class DocLibModule {\n    /**\n     * Called in the host package importing this doc library for providing the documentation JSONs needed for\n     * {@link CompoDocRetrieverService}\n     */\n    public static forRoot(documentations: any[]): ModuleWithProviders {\n        return {\n            ngModule: DocLibModule,\n            providers: [\n                // For injecting 'documentations' into factory function, we have to first provide them as injectable.\n                {\n                    provide: FOR_ROOT_DOCUMENTATIONS_TOKEN,\n                    useValue: documentations,\n                },\n                {\n                    provide: DocumentationRetrieverService,\n                    useFactory: getCompoDocRetrieverService,\n                    deps: [FOR_ROOT_DOCUMENTATIONS_TOKEN],\n                },\n            ],\n        };\n    }\n}\n"],"names":["tslib_1.__values","tslib_1.__extends","declarations"],"mappings":";;;;;;;;;;;;;;;;;;AA4BA;;;;;IAAA;KA8BC;IAAD,oCAAC;CAAA;;;;;;;;ICrCG,yCAAoB,KAAqB;QAArB,UAAK,GAAL,KAAK,CAAgB;KAAI;;;;IAE7C,kDAAQ;;;IAAR;QAAA,iBAIC;QAHG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS;;;;QAAC,UAAC,IAAU;YACjC,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC;SACrD,EAAC,CAAC;KACN;;gBAlBJ,SAAS,SAAC;oBACP,QAAQ,EAAE,6BAA6B;oBACvC,s1BAAuD;;iBAE1D;;;;gBAPQ,cAAc;;IAsBvB,sCAAC;CAnBD;;;;;;;;;;;ICgDM,qBAAqB,GAAG,IAAI,GAAG,EAAqC;;;;;;AAK1E,SAAS,6BAA6B,CAAC,mBAAuC;IAC1E,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE;QACjC,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACnE;;QAEK,kBAAkB,GAAG,aAAa,CAAC,aAAa,EAAE,CAAC,IAAI;;;;IACzD,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,UAAU,KAAK,mBAAmB,CAAC,UAAU,GAAA,EAC/D;IACD,IAAI,kBAAkB,EAAE;QACpB,MAAM,IAAI,KAAK,CACX,+BAA6B,mBAAmB,CAAC,UAAU,eAAU,mBAAmB,CAAC,WAAW,MAAG;aACnG,8BAA4B,kBAAkB,CAAC,WAAW,MAAG,CAAA,CACpE,CAAC;KACL;IAED,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KACpE;CACJ;;AAED,IAAa,aAAa,GAAG;;;;IAIzB,aAAa;;;;IAAb;QACI,OAAO,KAAK,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,CAAC;KACrD;;;;IAKD,SAAS;;;;IAAT;QACI,OAAO,aAAa,CAAC,aAAa,EAAE,CAAC,GAAG;;;;QAAC,UAAC,kBAAsC,IAAK,QAAC;YAClF,IAAI,EAAE,kBAAkB,CAAC,UAAU;YACnC,SAAS,EAAE,+BAA+B;YAC1C,IAAI,EAAE,EAAE,kBAAkB,oBAAA,EAAE;SAC/B,IAAC,EAAC,CAAC;KACP;;;;IAKD,0BAA0B;;;;;IAA1B,UAA2B,kBAAsC;QAC7D,6BAA6B,CAAC,kBAAkB,CAAC,CAAC;QAClD,qBAAqB,CAAC,GAAG,CAAC,kBAAkB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;KAC/E;CACJ;;;;;;;;;;;;;;AChGD;;;;IACI,kCAAoB,iBAAmC;QAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;KAAI;;;;;IAEpD,8CAAW;;;;IAAlB,UAAmB,SAAoB;QACnC,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC;KACnD;;;;;IAEM,0DAAuB;;;;IAA9B,UAA+B,SAAoB;QAC/C,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC;KAClD;;;;;IAEM,oDAAiB;;;;IAAxB,UAAyB,SAAoB;QACzC,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC;KACpD;;;;;IAEM,mDAAgB;;;;IAAvB,UAAwB,SAAoB;;YAClC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,aAAa;QAChE,IAAI,CAAC,aAAa,EAAE;YAChB,OAAO;SACV;QACD,OAAO,aAAa,CAAC,GAAG;;;;QAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,GAAA,EAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACtE;;;;;;IAEO,+CAAY;;;;;IAApB,UAAqB,SAAoB;;;YACrC,KAAgC,IAAA,KAAAA,SAAA,IAAI,CAAC,iBAAiB,CAAA,gBAAA,4BAAE;gBAAnD,IAAM,iBAAiB,WAAA;;oBAClB,iBAAiB,GAAG,iBAAiB,CAAC,UAAU,CAAC,IAAI;;;;gBAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,GAAA,EAAC;gBAC3F,IAAI,iBAAiB,EAAE;oBACnB,OAAO,iBAAiB,CAAC;iBAC5B;aACJ;;;;;;;;;QACD,0BAAO,EAAE,aAAa,EAAE,EAAE,EAAE,GAAsB;KACrD;;;;;IAEM,qDAAkB;;;;IAAzB,UAA0B,SAAoB;;YACpC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;QACzC,OAAO,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;KACjC;;;;;IAEM,sDAAmB;;;;IAA1B,UAA2B,SAAoB;;YACrC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC;QACzC,OAAO,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC;KAClC;IACL,+BAAC;CAAA;;;;;;;;;;AC/CD;IAAA;KAKC;;gBALA,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;2BAPlC;CAOA;;;;;;;;ICK2CC,yCAAgB;IAD3D;;KAeC;;;;;IAbG,mDAAmB;;;;IAAnB,UAAoB,IAAY;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;KAC3D;;;;;IACD,6CAAa;;;;IAAb,UAAc,IAAY;QACtB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACrD;;;;;IACD,6CAAa;;;;IAAb,UAAc,IAAY;QACtB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KACrD;;;;;;;IAEO,yCAAS;;;;;;IAAjB,UAAkB,IAAY,EAAE,IAAI;QAChC,OAAO,KAAK,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;KAC5C;;gBAdJ,UAAU;;IAeX,4BAAC;CAAA,CAd0C,gBAAgB;;;;;;;;ICMvD,iCAAoB,sBAAqD;QAArD,2BAAsB,GAAtB,sBAAsB,CAA+B;QAEhE,6BAAwB,GAAG,IAAI,CAAC;KAFoC;IAI7E,sBACI,8CAAS;;;;;QADb,UACc,SAAoB;YAC9B,IAAI,CAAC,SAAS,EAAE;gBACZ,OAAO;aACV;;YAED,IAAI,CAAC,QAAQ;gBACT,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,SAAS,CAAC;qBACjD,IAAI,CAAC,wBAAwB,GAAG,wBAAwB,GAAG,EAAE,CAAC,CAAC;SACvE;;;OAAA;;gBAvBJ,SAAS,SAAC;oBACP,QAAQ,EAAE,qBAAqB;oBAC/B,kDAA+C;;iBAElD;;;;gBANQ,6BAA6B;;;2CAcjC,KAAK;4BAEL,KAAK;;IAUV,8BAAC;CAxBD;;;;;;;;ICEM,YAAY,GAAG,CAAC,uBAAuB,CAAC;AAE9C;IAAA;KAKoC;;gBALnC,QAAQ,SAAC;oBACN,OAAO,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC;oBACtC,YAAY,WAAM,YAAY,CAAC;oBAC/B,OAAO,WAAM,YAAY,CAAC;iBAC7B;;IACkC,2BAAC;CALpC;;;;;;;;ICOI,gCAAoB,QAAkC;QAAlC,aAAQ,GAAR,QAAQ,CAA0B;;;;QAFtD,mBAAc,GAAG,KAAK,CAAC;KAEmC;IAM1D,sBACI,gDAAY;;;;QAIhB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC;SAC7B;;;;;QAPD,UACiB,YAA0B;YACvC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;YAClC,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;;;OAAA;;;;;IAWO,8CAAa;;;;IAArB;QACI,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;;YACxB,YAAY,GAAG,IAAI,CAAC,YAAY;QACtC,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;YAC1C,OAAO;SACV;;YACK,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC,YAAY,CAAC,SAAS,CAAC;QAC7E,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;KAClD;;gBAxCJ,SAAS,SAAC;oBACP,QAAQ,EAAE,oBAAoB;oBAC9B,o3BAA8C;;iBAEjD;;;;gBAPmB,wBAAwB;;;+BAoBvC,KAAK;mCAYL,SAAS,SAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,gBAAgB,EAAE;;IAY3E,6BAAC;CAzCD;;;;;;;;;;ACIA;IAaI,mCACY,sBAAqD,EACrD,gBAAkC;QADlC,2BAAsB,GAAtB,sBAAsB,CAA+B;QACrD,qBAAgB,GAAhB,gBAAgB,CAAkB;KAC1C;IAKJ,sBACI,gDAAS;;;;;;;;;QADb,UACc,SAAoB;YAC9B,IAAI,CAAC,SAAS,EAAE;gBACZ,OAAO;aACV;;YAED,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CACjE,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,SAAS,CAAC,CACjE,CAAC;YACF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CACrD,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,eAAe,CAC9E,CAAC;YACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CACpD,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,cAAc,CAC5E,CAAC;SACL;;;OAAA;;gBApCJ,SAAS,SAAC;oBACP,QAAQ,EAAE,wBAAwB;oBAClC,wsBAAkD;;iBAErD;;;;gBAVQ,6BAA6B;gBAC7B,gBAAgB;;;4BA0BpB,KAAK;;IAgBV,gCAAC;CArCD;;;;;;;;ICFMC,cAAY,GAAG,CAAC,yBAAyB,CAAC;AAEhD;IAAA;KAKsC;;gBALrC,QAAQ,SAAC;oBACN,OAAO,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC;oBACtC,YAAY,WAAMA,cAAY,CAAC;oBAC/B,OAAO,WAAMA,cAAY,CAAC;iBAC7B;;IACoC,6BAAC;CALtC;;;;;;;;ICAMA,cAAY,GAAG,CAAC,sBAAsB,CAAC;AAE7C;IAAA;KAKmC;;gBALlC,QAAQ,SAAC;oBACN,OAAO,EAAE,CAAC,aAAa,EAAE,YAAY,EAAE,sBAAsB,EAAE,oBAAoB,CAAC;oBACpF,YAAY,WAAMA,cAAY,CAAC;oBAC/B,OAAO,WAAMA,cAAY,CAAC;iBAC7B;;IACiC,0BAAC;CALnC;;;;;;;;ICGI,4BAAoB,sBAAqD;QAArD,2BAAsB,GAAtB,sBAAsB,CAA+B;KAAI;IAK7E,sBACI,yCAAS;;;;;;;;;QADb,UACc,SAAoB;YAC9B,IAAI,CAAC,SAAS,EAAE;gBACZ,OAAO;aACV;YACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YACjF,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;SACtF;;;OAAA;;gBArBJ,SAAS,SAAC;oBACP,QAAQ,EAAE,iBAAiB;oBAC3B,2xCAA0C;;iBAE7C;;;;gBANuB,6BAA6B;;;4BAgBhD,KAAK;;IAQV,yBAAC;CAtBD;;;;;;;;ICEMA,cAAY,GAAG,CAAC,kBAAkB,CAAC;AAEzC;IAAA;KAK+B;;gBAL9B,QAAQ,SAAC;oBACN,OAAO,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC;oBACtC,YAAY,WAAMA,cAAY,CAAC;oBAC/B,OAAO,WAAMA,cAAY,CAAC;iBAC7B;;IAC6B,sBAAC;CAL/B;;;;;;;;ICCMA,cAAY,GAAG,CAAC,+BAA+B,CAAC;AAEtD;IAAA;KAM4C;;gBAN3C,QAAQ,SAAC;oBACN,OAAO,EAAE,CAAC,aAAa,EAAE,YAAY,EAAE,oBAAoB,EAAE,eAAe,EAAE,mBAAmB,CAAC;oBAClG,YAAY,WAAMA,cAAY,CAAC;oBAC/B,eAAe,EAAE,CAAC,+BAA+B,CAAC;oBAClD,OAAO,WAAMA,cAAY,GAAE,oBAAoB,EAAE,eAAe,EAAE,mBAAmB,EAAC;iBACzF;;IAC0C,mCAAC;CAN5C;;;;;;;;ICFMA,cAAY,GAAG,EAAE;;;;;AAQvB,IAAa,6BAA6B,GAAG,IAAI,cAAc,CAC3D,4DAA4D,CAC/D;;;;;AAED,SAAgB,2BAA2B,CAAC,cAAgC;IACxE,OAAO,IAAI,wBAAwB,CAAC,cAAc,CAAC,CAAC;CACvD;AAED;IAAA;KA4BC;;;;;;;;;;;IAjBiB,oBAAO;;;;;;IAArB,UAAsB,cAAqB;QACvC,OAAO;YACH,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;;gBAEP;oBACI,OAAO,EAAE,6BAA6B;oBACtC,QAAQ,EAAE,cAAc;iBAC3B;gBACD;oBACI,OAAO,EAAE,6BAA6B;oBACtC,UAAU,EAAE,2BAA2B;oBACvC,IAAI,EAAE,CAAC,6BAA6B,CAAC;iBACxC;aACJ;SACJ,CAAC;KACL;;gBA3BJ,QAAQ,SAAC;oBACN,OAAO,EAAE,CAAC,4BAA4B,CAAC;oBACvC,YAAY,WAAMA,cAAY,CAAC;oBAC/B,OAAO,WAAMA,cAAY,GAAE,4BAA4B,EAAC;oBACxD,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,CAAC;iBAC9E;;IAuBD,mBAAC;CA5BD;;;;"}